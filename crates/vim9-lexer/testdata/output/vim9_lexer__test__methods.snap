---
source: crates/vim9-lexer/src/lib.rs
assertion_line: 936
expression: snapshot_lexing(contents)
---
vim9script
^^^^^^^^^^ Token(Identifier, "vim9script", (0,0)->(0,10))
           Token(EndOfLine, "\n", (0,10)->(0,10))

 Token(EndOfLine, "\n", (1,0)->(1,0))
var l = "hello"->len()
^^^ Token(Identifier, "var", (2,0)->(2,3))
    ^ Token(Identifier, "l", (2,4)->(2,5))
      ^ Token(Equal, "=", (2,6)->(2,7))
         ^^^^ Token(DoubleQuoteString, "hello", (2,9)->(2,13))
               ^^ Token(MethodArrow, "->", (2,15)->(2,17))
                 ^^^ Token(Identifier, "len", (2,17)->(2,20))
                    ^ Token(LeftParen, "(", (2,20)->(2,21))
                     ^ Token(RightParen, ")", (2,21)->(2,22))
                       Token(EndOfLine, "\n", (2,22)->(2,22))

 Token(EndOfLine, "\n", (3,0)->(3,0))
var x = [5, 4, 2, 1, 7, 12, 8]
^^^ Token(Identifier, "var", (4,0)->(4,3))
    ^ Token(Identifier, "x", (4,4)->(4,5))
      ^ Token(Equal, "=", (4,6)->(4,7))
        ^ Token(LeftBracket, "[", (4,8)->(4,9))
         ^ Token(Integer, "5", (4,9)->(4,10))
          ^ Token(Comma, ",", (4,10)->(4,11))
            ^ Token(Integer, "4", (4,12)->(4,13))
             ^ Token(Comma, ",", (4,13)->(4,14))
               ^ Token(Integer, "2", (4,15)->(4,16))
                ^ Token(Comma, ",", (4,16)->(4,17))
                  ^ Token(Integer, "1", (4,18)->(4,19))
                   ^ Token(Comma, ",", (4,19)->(4,20))
                     ^ Token(Integer, "7", (4,21)->(4,22))
                      ^ Token(Comma, ",", (4,22)->(4,23))
                        ^^ Token(Integer, "12", (4,24)->(4,26))
                          ^ Token(Comma, ",", (4,26)->(4,27))
                            ^ Token(Integer, "8", (4,28)->(4,29))
                             ^ Token(RightBracket, "]", (4,29)->(4,30))
                               Token(EndOfLine, "\n", (4,30)->(4,30))
      ->filter((_, x) => x % 2 == 0)
      ^^ Token(MethodArrow, "->", (5,6)->(5,8))
        ^^^^^^ Token(Identifier, "filter", (5,8)->(5,14))
              ^ Token(LeftParen, "(", (5,14)->(5,15))
               ^ Token(LeftParen, "(", (5,15)->(5,16))
                ^ Token(Identifier, "_", (5,16)->(5,17))
                 ^ Token(Comma, ",", (5,17)->(5,18))
                   ^ Token(Identifier, "x", (5,19)->(5,20))
                    ^ Token(RightParen, ")", (5,20)->(5,21))
                      ^^ Token(Arrow, "=>", (5,22)->(5,24))
                         ^ Token(Identifier, "x", (5,25)->(5,26))
                           ^ Token(Percent, "%", (5,27)->(5,28))
                             ^ Token(Integer, "2", (5,29)->(5,30))
                               ^^ Token(EqualTo, "==", (5,31)->(5,33))
                                  ^ Token(Integer, "0", (5,34)->(5,35))
                                   ^ Token(RightParen, ")", (5,35)->(5,36))
                                     Token(EndOfLine, "\n", (5,36)->(5,36))
      ->map((_, y) => y + 1)
      ^^ Token(MethodArrow, "->", (6,6)->(6,8))
        ^^^ Token(Identifier, "map", (6,8)->(6,11))
           ^ Token(LeftParen, "(", (6,11)->(6,12))
            ^ Token(LeftParen, "(", (6,12)->(6,13))
             ^ Token(Identifier, "_", (6,13)->(6,14))
              ^ Token(Comma, ",", (6,14)->(6,15))
                ^ Token(Identifier, "y", (6,16)->(6,17))
                 ^ Token(RightParen, ")", (6,17)->(6,18))
                   ^^ Token(Arrow, "=>", (6,19)->(6,21))
                      ^ Token(Identifier, "y", (6,22)->(6,23))
                        ^ Token(Plus, "+", (6,24)->(6,25))
                          ^ Token(Integer, "1", (6,26)->(6,27))
                           ^ Token(RightParen, ")", (6,27)->(6,28))
                             Token(EndOfLine, "\n", (6,28)->(6,28))
      ->sort()
      ^^ Token(MethodArrow, "->", (7,6)->(7,8))
        ^^^^ Token(Identifier, "sort", (7,8)->(7,12))
            ^ Token(LeftParen, "(", (7,12)->(7,13))
             ^ Token(RightParen, ")", (7,13)->(7,14))
               Token(EndOfLine, "\n", (7,14)->(7,14))

 Token(EndOfLine, "\n", (8,0)->(8,0))
var expr_prec = -1.234->string()
^^^ Token(Identifier, "var", (9,0)->(9,3))
    ^^^^^^^^^ Token(Identifier, "expr_prec", (9,4)->(9,13))
              ^ Token(Equal, "=", (9,14)->(9,15))
                ^ Token(Minus, "-", (9,16)->(9,17))
                 ^^^^^ Token(Float, "1.234", (9,17)->(9,22))
                      ^^ Token(MethodArrow, "->", (9,22)->(9,24))
                        ^^^^^^ Token(Identifier, "string", (9,24)->(9,30))
                              ^ Token(LeftParen, "(", (9,30)->(9,31))
                               ^ Token(RightParen, ")", (9,31)->(9,32))
                                 Token(EndOfLine, "\n", (9,32)->(9,32))

 Token(EndOfLine, "\n", (10,0)->(10,0))
var foo = base->name(args)
^^^ Token(Identifier, "var", (11,0)->(11,3))
    ^^^ Token(Identifier, "foo", (11,4)->(11,7))
        ^ Token(Equal, "=", (11,8)->(11,9))
          ^^^^ Token(Identifier, "base", (11,10)->(11,14))
              ^^ Token(MethodArrow, "->", (11,14)->(11,16))
                ^^^^ Token(Identifier, "name", (11,16)->(11,20))
                    ^ Token(LeftParen, "(", (11,20)->(11,21))
                     ^^^^ Token(Identifier, "args", (11,21)->(11,25))
                         ^ Token(RightParen, ")", (11,25)->(11,26))
                           Token(EndOfLine, "\n", (11,26)->(11,26))
var foo = base->some.name(args)
^^^ Token(Identifier, "var", (12,0)->(12,3))
    ^^^ Token(Identifier, "foo", (12,4)->(12,7))
        ^ Token(Equal, "=", (12,8)->(12,9))
          ^^^^ Token(Identifier, "base", (12,10)->(12,14))
              ^^ Token(MethodArrow, "->", (12,14)->(12,16))
                ^^^^ Token(Identifier, "some", (12,16)->(12,20))
                    ^ Token(Dot, ".", (12,20)->(12,21))
                     ^^^^ Token(Identifier, "name", (12,21)->(12,25))
                         ^ Token(LeftParen, "(", (12,25)->(12,26))
                          ^^^^ Token(Identifier, "args", (12,26)->(12,30))
                              ^ Token(RightParen, ")", (12,30)->(12,31))
                                Token(EndOfLine, "\n", (12,31)->(12,31))
var foo = base->alist[idx](args)
^^^ Token(Identifier, "var", (13,0)->(13,3))
    ^^^ Token(Identifier, "foo", (13,4)->(13,7))
        ^ Token(Equal, "=", (13,8)->(13,9))
          ^^^^ Token(Identifier, "base", (13,10)->(13,14))
              ^^ Token(MethodArrow, "->", (13,14)->(13,16))
                ^^^^^ Token(Identifier, "alist", (13,16)->(13,21))
                     ^ Token(LeftBracket, "[", (13,21)->(13,22))
                      ^^^ Token(Identifier, "idx", (13,22)->(13,25))
                         ^ Token(RightBracket, "]", (13,25)->(13,26))
                          ^ Token(LeftParen, "(", (13,26)->(13,27))
                           ^^^^ Token(Identifier, "args", (13,27)->(13,31))
                               ^ Token(RightParen, ")", (13,31)->(13,32))
                                 Token(EndOfLine, "\n", (13,32)->(13,32))
var foo = base->(getFuncRef())(args)
^^^ Token(Identifier, "var", (14,0)->(14,3))
    ^^^ Token(Identifier, "foo", (14,4)->(14,7))
        ^ Token(Equal, "=", (14,8)->(14,9))
          ^^^^ Token(Identifier, "base", (14,10)->(14,14))
              ^^ Token(MethodArrow, "->", (14,14)->(14,16))
                ^ Token(LeftParen, "(", (14,16)->(14,17))
                 ^^^^^^^^^^ Token(Identifier, "getFuncRef", (14,17)->(14,27))
                           ^ Token(LeftParen, "(", (14,27)->(14,28))
                            ^ Token(RightParen, ")", (14,28)->(14,29))
                             ^ Token(RightParen, ")", (14,29)->(14,30))
                              ^ Token(LeftParen, "(", (14,30)->(14,31))
                               ^^^^ Token(Identifier, "args", (14,31)->(14,35))
                                   ^ Token(RightParen, ")", (14,35)->(14,36))
                                     Token(EndOfLine, "\n", (14,36)->(14,36))

 Token(EndOfLine, "\n", (15,0)->(15,0))
var foo = [slnum, scol]->cursor()
^^^ Token(Identifier, "var", (16,0)->(16,3))
    ^^^ Token(Identifier, "foo", (16,4)->(16,7))
        ^ Token(Equal, "=", (16,8)->(16,9))
          ^ Token(LeftBracket, "[", (16,10)->(16,11))
           ^^^^^ Token(Identifier, "slnum", (16,11)->(16,16))
                ^ Token(Comma, ",", (16,16)->(16,17))
                  ^^^^ Token(Identifier, "scol", (16,18)->(16,22))
                      ^ Token(RightBracket, "]", (16,22)->(16,23))
                       ^^ Token(MethodArrow, "->", (16,23)->(16,25))
                         ^^^^^^ Token(Identifier, "cursor", (16,25)->(16,31))
                               ^ Token(LeftParen, "(", (16,31)->(16,32))
                                ^ Token(RightParen, ")", (16,32)->(16,33))
                                  Token(EndOfLine, "\n", (16,33)->(16,33))

 Token(EndOfLine, "\n", (17,0)->(17,0))
# Testing
^^^^^^^^^ Token(Comment, "# Testing", (18,0)->(18,9))
[slnum, scol]->cursor()
^ Token(LeftBracket, "[", (19,0)->(19,1))
 ^^^^^ Token(Identifier, "slnum", (19,1)->(19,6))
      ^ Token(Comma, ",", (19,6)->(19,7))
        ^^^^ Token(Identifier, "scol", (19,8)->(19,12))
            ^ Token(RightBracket, "]", (19,12)->(19,13))
             ^^ Token(MethodArrow, "->", (19,13)->(19,15))
               ^^^^^^ Token(Identifier, "cursor", (19,15)->(19,21))
                     ^ Token(LeftParen, "(", (19,21)->(19,22))
                      ^ Token(RightParen, ")", (19,22)->(19,23))
                        Token(EndOfLine, "\n", (19,23)->(19,23))

