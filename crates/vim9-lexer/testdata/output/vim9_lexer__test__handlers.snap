---
source: crates/vim9-lexer/src/lib.rs
assertion_line: 968
expression: snapshot_lexing(contents)
---
vim9script
^^^^^^^^^^ Token(Identifier, "vim9script", (0,0)->(0,10))
           Token(EndOfLine, "\n", (0,10)->(0,10))

 Token(EndOfLine, "\n", (1,0)->(1,0))
# Handlers for messages from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Handlers for messages from the LSP server", (2,0)->(2,43))
# Refer to https://microsoft.github.io/language-server-protocol/specification
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Refer to https://microsoft.github.io/language-server-protocol/specification", (3,0)->(3,77))
# for the Language Server Protocol (LSP) specificaiton.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# for the Language Server Protocol (LSP) specificaiton.", (4,0)->(4,55))

 Token(EndOfLine, "\n", (5,0)->(5,0))
import './lspoptions.vim' as opt
^^^^^^ Token(Identifier, "import", (6,0)->(6,6))
        ^^^^^^^^^^^^^^^ Token(SingleQuoteString, "./lspoptions.vim", (6,8)->(6,23))
                          ^^ Token(Identifier, "as", (6,26)->(6,28))
                             ^^^ Token(Identifier, "opt", (6,29)->(6,32))
                                 Token(EndOfLine, "\n", (6,32)->(6,32))
import './util.vim'
^^^^^^ Token(Identifier, "import", (7,0)->(7,6))
        ^^^^^^^^^ Token(SingleQuoteString, "./util.vim", (7,8)->(7,17))
                    Token(EndOfLine, "\n", (7,19)->(7,19))
import './diag.vim'
^^^^^^ Token(Identifier, "import", (8,0)->(8,6))
        ^^^^^^^^^ Token(SingleQuoteString, "./diag.vim", (8,8)->(8,17))
                    Token(EndOfLine, "\n", (8,19)->(8,19))
import './outline.vim'
^^^^^^ Token(Identifier, "import", (9,0)->(9,6))
        ^^^^^^^^^^^^ Token(SingleQuoteString, "./outline.vim", (9,8)->(9,20))
                       Token(EndOfLine, "\n", (9,22)->(9,22))
import './textedit.vim'
^^^^^^ Token(Identifier, "import", (10,0)->(10,6))
        ^^^^^^^^^^^^^ Token(SingleQuoteString, "./textedit.vim", (10,8)->(10,21))
                        Token(EndOfLine, "\n", (10,23)->(10,23))
import './symbol.vim'
^^^^^^ Token(Identifier, "import", (11,0)->(11,6))
        ^^^^^^^^^^^ Token(SingleQuoteString, "./symbol.vim", (11,8)->(11,19))
                      Token(EndOfLine, "\n", (11,21)->(11,21))
import './codeaction.vim'
^^^^^^ Token(Identifier, "import", (12,0)->(12,6))
        ^^^^^^^^^^^^^^^ Token(SingleQuoteString, "./codeaction.vim", (12,8)->(12,23))
                          Token(EndOfLine, "\n", (12,25)->(12,25))
import './callhierarchy.vim' as callhier
^^^^^^ Token(Identifier, "import", (13,0)->(13,6))
        ^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "./callhierarchy.vim", (13,8)->(13,26))
                             ^^ Token(Identifier, "as", (13,29)->(13,31))
                                ^^^^^^^^ Token(Identifier, "callhier", (13,32)->(13,40))
                                         Token(EndOfLine, "\n", (13,40)->(13,40))
import './signature.vim'
^^^^^^ Token(Identifier, "import", (14,0)->(14,6))
        ^^^^^^^^^^^^^^ Token(SingleQuoteString, "./signature.vim", (14,8)->(14,22))
                         Token(EndOfLine, "\n", (14,24)->(14,24))

 Token(EndOfLine, "\n", (15,0)->(15,0))

 Token(EndOfLine, "\n", (16,0)->(16,0))
# process the 'initialize' method reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'initialize' method reply from the LSP server", (17,0)->(17,59))
# Result: InitializeResult
^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: InitializeResult", (18,0)->(18,26))
def ProcessInitializeReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (19,0)->(19,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessInitializeReply", (19,4)->(19,26))
                          ^ Token(LeftParen, "(", (19,26)->(19,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (19,27)->(19,36))
                                    ^^ Token(SpacedColon, ": ", (19,36)->(19,38))
                                      ^^^^ Token(Identifier, "dict", (19,38)->(19,42))
                                          ^ Token(AngleLeft, "<", (19,42)->(19,43))
                                           ^^^ Token(Identifier, "any", (19,43)->(19,46))
                                              ^ Token(AngleRight, ">", (19,46)->(19,47))
                                               ^ Token(Comma, ",", (19,47)->(19,48))
                                                 ^^^ Token(Identifier, "req", (19,49)->(19,52))
                                                    ^^ Token(SpacedColon, ": ", (19,52)->(19,54))
                                                      ^^^^ Token(Identifier, "dict", (19,54)->(19,58))
                                                          ^ Token(AngleLeft, "<", (19,58)->(19,59))
                                                           ^^^ Token(Identifier, "any", (19,59)->(19,62))
                                                              ^ Token(AngleRight, ">", (19,62)->(19,63))
                                                               ^ Token(Comma, ",", (19,63)->(19,64))
                                                                 ^^^^^ Token(Identifier, "reply", (19,65)->(19,70))
                                                                      ^^ Token(SpacedColon, ": ", (19,70)->(19,72))
                                                                        ^^^^ Token(Identifier, "dict", (19,72)->(19,76))
                                                                            ^ Token(AngleLeft, "<", (19,76)->(19,77))
                                                                             ^^^ Token(Identifier, "any", (19,77)->(19,80))
                                                                                ^ Token(AngleRight, ">", (19,80)->(19,81))
                                                                                 ^ Token(RightParen, ")", (19,81)->(19,82))
                                                                                  ^^ Token(SpacedColon, ": ", (19,82)->(19,84))
                                                                                    ^^^^ Token(Identifier, "void", (19,84)->(19,88))
                                                                                         Token(EndOfLine, "\n", (19,88)->(19,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (20,2)->(20,4))
     ^^^^^ Token(Identifier, "reply", (20,5)->(20,10))
          ^ Token(Dot, ".", (20,10)->(20,11))
           ^^^^^^ Token(Identifier, "result", (20,11)->(20,17))
                 ^^ Token(MethodArrow, "->", (20,17)->(20,19))
                   ^^^^^ Token(Identifier, "empty", (20,19)->(20,24))
                        ^ Token(LeftParen, "(", (20,24)->(20,25))
                         ^ Token(RightParen, ")", (20,25)->(20,26))
                           Token(EndOfLine, "\n", (20,26)->(20,26))
    return
    ^^^^^^ Token(Identifier, "return", (21,4)->(21,10))
           Token(EndOfLine, "\n", (21,10)->(21,10))
  endif
  ^^^^^ Token(Identifier, "endif", (22,2)->(22,7))
        Token(EndOfLine, "\n", (22,7)->(22,7))

 Token(EndOfLine, "\n", (23,0)->(23,0))
  var caps: dict<any> = reply.result.capabilities
  ^^^ Token(Identifier, "var", (24,2)->(24,5))
      ^^^^ Token(Identifier, "caps", (24,6)->(24,10))
          ^^ Token(SpacedColon, ": ", (24,10)->(24,12))
            ^^^^ Token(Identifier, "dict", (24,12)->(24,16))
                ^ Token(AngleLeft, "<", (24,16)->(24,17))
                 ^^^ Token(Identifier, "any", (24,17)->(24,20))
                    ^ Token(GreaterThan, ">", (24,20)->(24,21))
                      ^ Token(Equal, "=", (24,22)->(24,23))
                        ^^^^^ Token(Identifier, "reply", (24,24)->(24,29))
                             ^ Token(Dot, ".", (24,29)->(24,30))
                              ^^^^^^ Token(Identifier, "result", (24,30)->(24,36))
                                    ^ Token(Dot, ".", (24,36)->(24,37))
                                     ^^^^^^^^^^^^ Token(Identifier, "capabilities", (24,37)->(24,49))
                                                  Token(EndOfLine, "\n", (24,49)->(24,49))
  lspserver.caps = caps
  ^^^^^^^^^ Token(Identifier, "lspserver", (25,2)->(25,11))
           ^ Token(Dot, ".", (25,11)->(25,12))
            ^^^^ Token(Identifier, "caps", (25,12)->(25,16))
                 ^ Token(Equal, "=", (25,17)->(25,18))
                   ^^^^ Token(Identifier, "caps", (25,19)->(25,23))
                        Token(EndOfLine, "\n", (25,23)->(25,23))

 Token(EndOfLine, "\n", (26,0)->(26,0))
  # TODO: Check all the buffers with filetype corresponding to this LSP server
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# TODO: Check all the buffers with filetype corresponding to this LSP server", (27,2)->(27,78))
  # and then setup the below mapping for those buffers.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# and then setup the below mapping for those buffers.", (28,2)->(28,55))

 Token(EndOfLine, "\n", (29,0)->(29,0))
  # initialize signature help
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# initialize signature help", (30,2)->(30,29))
  signature.SignatureInit(lspserver)
  ^^^^^^^^^ Token(Identifier, "signature", (31,2)->(31,11))
           ^ Token(Dot, ".", (31,11)->(31,12))
            ^^^^^^^^^^^^^ Token(Identifier, "SignatureInit", (31,12)->(31,25))
                         ^ Token(LeftParen, "(", (31,25)->(31,26))
                          ^^^^^^^^^ Token(Identifier, "lspserver", (31,26)->(31,35))
                                   ^ Token(RightParen, ")", (31,35)->(31,36))
                                     Token(EndOfLine, "\n", (31,36)->(31,36))

 Token(EndOfLine, "\n", (32,0)->(32,0))
  if opt.lspOptions.autoComplete && caps->has_key('completionProvider')
  ^^ Token(Identifier, "if", (33,2)->(33,4))
     ^^^ Token(Identifier, "opt", (33,5)->(33,8))
        ^ Token(Dot, ".", (33,8)->(33,9))
         ^^^^^^^^^^ Token(Identifier, "lspOptions", (33,9)->(33,19))
                   ^ Token(Dot, ".", (33,19)->(33,20))
                    ^^^^^^^^^^^^ Token(Identifier, "autoComplete", (33,20)->(33,32))
                                 ^^ Token(And, "&&", (33,33)->(33,35))
                                    ^^^^ Token(Identifier, "caps", (33,36)->(33,40))
                                        ^^ Token(MethodArrow, "->", (33,40)->(33,42))
                                          ^^^^^^^ Token(Identifier, "has_key", (33,42)->(33,49))
                                                 ^ Token(LeftParen, "(", (33,49)->(33,50))
                                                   ^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "completionProvider", (33,51)->(33,68))
                                                                      ^ Token(RightParen, ")", (33,70)->(33,71))
                                                                        Token(EndOfLine, "\n", (33,71)->(33,71))
    var triggers = caps.completionProvider.triggerCharacters
    ^^^ Token(Identifier, "var", (34,4)->(34,7))
        ^^^^^^^^ Token(Identifier, "triggers", (34,8)->(34,16))
                 ^ Token(Equal, "=", (34,17)->(34,18))
                   ^^^^ Token(Identifier, "caps", (34,19)->(34,23))
                       ^ Token(Dot, ".", (34,23)->(34,24))
                        ^^^^^^^^^^^^^^^^^^ Token(Identifier, "completionProvider", (34,24)->(34,42))
                                          ^ Token(Dot, ".", (34,42)->(34,43))
                                           ^^^^^^^^^^^^^^^^^ Token(Identifier, "triggerCharacters", (34,43)->(34,60))
                                                             Token(EndOfLine, "\n", (34,60)->(34,60))
    lspserver.completionTriggerChars = triggers
    ^^^^^^^^^ Token(Identifier, "lspserver", (35,4)->(35,13))
             ^ Token(Dot, ".", (35,13)->(35,14))
              ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "completionTriggerChars", (35,14)->(35,36))
                                     ^ Token(Equal, "=", (35,37)->(35,38))
                                       ^^^^^^^^ Token(Identifier, "triggers", (35,39)->(35,47))
                                                Token(EndOfLine, "\n", (35,47)->(35,47))
  endif
  ^^^^^ Token(Identifier, "endif", (36,2)->(36,7))
        Token(EndOfLine, "\n", (36,7)->(36,7))

 Token(EndOfLine, "\n", (37,0)->(37,0))

 Token(EndOfLine, "\n", (38,0)->(38,0))
  # send a "initialized" notification to server
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# send a \"initialized\" notification to server", (39,2)->(39,47))
  lspserver.sendInitializedNotif()
  ^^^^^^^^^ Token(Identifier, "lspserver", (40,2)->(40,11))
           ^ Token(Dot, ".", (40,11)->(40,12))
            ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "sendInitializedNotif", (40,12)->(40,32))
                                ^ Token(LeftParen, "(", (40,32)->(40,33))
                                 ^ Token(RightParen, ")", (40,33)->(40,34))
                                   Token(EndOfLine, "\n", (40,34)->(40,34))
  lspserver.ready = true
  ^^^^^^^^^ Token(Identifier, "lspserver", (41,2)->(41,11))
           ^ Token(Dot, ".", (41,11)->(41,12))
            ^^^^^ Token(Identifier, "ready", (41,12)->(41,17))
                  ^ Token(Equal, "=", (41,18)->(41,19))
                    ^^^^ Token(True, "true", (41,20)->(41,24))
                         Token(EndOfLine, "\n", (41,24)->(41,24))

 Token(EndOfLine, "\n", (42,0)->(42,0))
  # if the outline window is opened, then request the symbols for the current
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# if the outline window is opened, then request the symbols for the current", (43,2)->(43,77))
  # buffer
  ^^^^^^^^ Token(Comment, "# buffer", (44,2)->(44,10))
  if bufwinid('LSP-Outline') != -1
  ^^ Token(Identifier, "if", (45,2)->(45,4))
     ^^^^^^^^ Token(Identifier, "bufwinid", (45,5)->(45,13))
             ^ Token(LeftParen, "(", (45,13)->(45,14))
               ^^^^^^^^^^ Token(SingleQuoteString, "LSP-Outline", (45,15)->(45,25))
                           ^ Token(RightParen, ")", (45,27)->(45,28))
                             ^^ Token(NotEqualTo, "!=", (45,29)->(45,31))
                                ^ Token(Minus, "-", (45,32)->(45,33))
                                 ^ Token(Integer, "1", (45,33)->(45,34))
                                   Token(EndOfLine, "\n", (45,34)->(45,34))
    lspserver.getDocSymbols(@%)
    ^^^^^^^^^ Token(Identifier, "lspserver", (46,4)->(46,13))
             ^ Token(Dot, ".", (46,13)->(46,14))
              ^^^^^^^^^^^^^ Token(Identifier, "getDocSymbols", (46,14)->(46,27))
                           ^ Token(LeftParen, "(", (46,27)->(46,28))
                            ^ Token(Register, "%", (46,28)->(46,29))
                              ^ Token(RightParen, ")", (46,30)->(46,31))
                                Token(EndOfLine, "\n", (46,31)->(46,31))
  endif
  ^^^^^ Token(Identifier, "endif", (47,2)->(47,7))
        Token(EndOfLine, "\n", (47,7)->(47,7))
enddef
^^^^^^ Token(Identifier, "enddef", (48,0)->(48,6))
       Token(EndOfLine, "\n", (48,6)->(48,6))

 Token(EndOfLine, "\n", (49,0)->(49,0))
# Process a 'shutdown' reply from the LSP server.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Process a 'shutdown' reply from the LSP server.", (50,0)->(50,49))
def ProcessShutdownReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (51,0)->(51,3))
    ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessShutdownReply", (51,4)->(51,24))
                        ^ Token(LeftParen, "(", (51,24)->(51,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (51,25)->(51,34))
                                  ^^ Token(SpacedColon, ": ", (51,34)->(51,36))
                                    ^^^^ Token(Identifier, "dict", (51,36)->(51,40))
                                        ^ Token(AngleLeft, "<", (51,40)->(51,41))
                                         ^^^ Token(Identifier, "any", (51,41)->(51,44))
                                            ^ Token(AngleRight, ">", (51,44)->(51,45))
                                             ^ Token(Comma, ",", (51,45)->(51,46))
                                               ^^^ Token(Identifier, "req", (51,47)->(51,50))
                                                  ^^ Token(SpacedColon, ": ", (51,50)->(51,52))
                                                    ^^^^ Token(Identifier, "dict", (51,52)->(51,56))
                                                        ^ Token(AngleLeft, "<", (51,56)->(51,57))
                                                         ^^^ Token(Identifier, "any", (51,57)->(51,60))
                                                            ^ Token(AngleRight, ">", (51,60)->(51,61))
                                                             ^ Token(Comma, ",", (51,61)->(51,62))
                                                               ^^^^^ Token(Identifier, "reply", (51,63)->(51,68))
                                                                    ^^ Token(SpacedColon, ": ", (51,68)->(51,70))
                                                                      ^^^^ Token(Identifier, "dict", (51,70)->(51,74))
                                                                          ^ Token(AngleLeft, "<", (51,74)->(51,75))
                                                                           ^^^ Token(Identifier, "any", (51,75)->(51,78))
                                                                              ^ Token(AngleRight, ">", (51,78)->(51,79))
                                                                               ^ Token(RightParen, ")", (51,79)->(51,80))
                                                                                ^^ Token(SpacedColon, ": ", (51,80)->(51,82))
                                                                                  ^^^^ Token(Identifier, "void", (51,82)->(51,86))
                                                                                       Token(EndOfLine, "\n", (51,86)->(51,86))
  return
  ^^^^^^ Token(Identifier, "return", (52,2)->(52,8))
         Token(EndOfLine, "\n", (52,8)->(52,8))
enddef
^^^^^^ Token(Identifier, "enddef", (53,0)->(53,6))
       Token(EndOfLine, "\n", (53,6)->(53,6))

 Token(EndOfLine, "\n", (54,0)->(54,0))
# process the 'textDocument/signatureHelp' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/signatureHelp' reply from the LSP server", (55,0)->(55,68))
# Result: SignatureHelp | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: SignatureHelp | null", (56,0)->(56,30))
def ProcessSignaturehelpReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (57,0)->(57,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSignaturehelpReply", (57,4)->(57,29))
                             ^ Token(LeftParen, "(", (57,29)->(57,30))
                              ^^^^^^^^^ Token(Identifier, "lspserver", (57,30)->(57,39))
                                       ^^ Token(SpacedColon, ": ", (57,39)->(57,41))
                                         ^^^^ Token(Identifier, "dict", (57,41)->(57,45))
                                             ^ Token(AngleLeft, "<", (57,45)->(57,46))
                                              ^^^ Token(Identifier, "any", (57,46)->(57,49))
                                                 ^ Token(AngleRight, ">", (57,49)->(57,50))
                                                  ^ Token(Comma, ",", (57,50)->(57,51))
                                                    ^^^ Token(Identifier, "req", (57,52)->(57,55))
                                                       ^^ Token(SpacedColon, ": ", (57,55)->(57,57))
                                                         ^^^^ Token(Identifier, "dict", (57,57)->(57,61))
                                                             ^ Token(AngleLeft, "<", (57,61)->(57,62))
                                                              ^^^ Token(Identifier, "any", (57,62)->(57,65))
                                                                 ^ Token(AngleRight, ">", (57,65)->(57,66))
                                                                  ^ Token(Comma, ",", (57,66)->(57,67))
                                                                    ^^^^^ Token(Identifier, "reply", (57,68)->(57,73))
                                                                         ^^ Token(SpacedColon, ": ", (57,73)->(57,75))
                                                                           ^^^^ Token(Identifier, "dict", (57,75)->(57,79))
                                                                               ^ Token(AngleLeft, "<", (57,79)->(57,80))
                                                                                ^^^ Token(Identifier, "any", (57,80)->(57,83))
                                                                                   ^ Token(AngleRight, ">", (57,83)->(57,84))
                                                                                    ^ Token(RightParen, ")", (57,84)->(57,85))
                                                                                     ^^ Token(SpacedColon, ": ", (57,85)->(57,87))
                                                                                       ^^^^ Token(Identifier, "void", (57,87)->(57,91))
                                                                                            Token(EndOfLine, "\n", (57,91)->(57,91))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (58,2)->(58,4))
     ^^^^^ Token(Identifier, "reply", (58,5)->(58,10))
          ^ Token(Dot, ".", (58,10)->(58,11))
           ^^^^^^ Token(Identifier, "result", (58,11)->(58,17))
                 ^^ Token(MethodArrow, "->", (58,17)->(58,19))
                   ^^^^^ Token(Identifier, "empty", (58,19)->(58,24))
                        ^ Token(LeftParen, "(", (58,24)->(58,25))
                         ^ Token(RightParen, ")", (58,25)->(58,26))
                           Token(EndOfLine, "\n", (58,26)->(58,26))
    return
    ^^^^^^ Token(Identifier, "return", (59,4)->(59,10))
           Token(EndOfLine, "\n", (59,10)->(59,10))
  endif
  ^^^^^ Token(Identifier, "endif", (60,2)->(60,7))
        Token(EndOfLine, "\n", (60,7)->(60,7))
  signature.SignatureDisplay(lspserver, reply.result)
  ^^^^^^^^^ Token(Identifier, "signature", (61,2)->(61,11))
           ^ Token(Dot, ".", (61,11)->(61,12))
            ^^^^^^^^^^^^^^^^ Token(Identifier, "SignatureDisplay", (61,12)->(61,28))
                            ^ Token(LeftParen, "(", (61,28)->(61,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (61,29)->(61,38))
                                      ^ Token(Comma, ",", (61,38)->(61,39))
                                        ^^^^^ Token(Identifier, "reply", (61,40)->(61,45))
                                             ^ Token(Dot, ".", (61,45)->(61,46))
                                              ^^^^^^ Token(Identifier, "result", (61,46)->(61,52))
                                                    ^ Token(RightParen, ")", (61,52)->(61,53))
                                                      Token(EndOfLine, "\n", (61,53)->(61,53))
enddef
^^^^^^ Token(Identifier, "enddef", (62,0)->(62,6))
       Token(EndOfLine, "\n", (62,6)->(62,6))

 Token(EndOfLine, "\n", (63,0)->(63,0))
# Map LSP complete item kind to a character
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Map LSP complete item kind to a character", (64,0)->(64,43))
def LspCompleteItemKindChar(kind: number): string
^^^ Token(Identifier, "def", (65,0)->(65,3))
    ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspCompleteItemKindChar", (65,4)->(65,27))
                           ^ Token(LeftParen, "(", (65,27)->(65,28))
                            ^^^^ Token(Identifier, "kind", (65,28)->(65,32))
                                ^^ Token(SpacedColon, ": ", (65,32)->(65,34))
                                  ^^^^^^ Token(Identifier, "number", (65,34)->(65,40))
                                        ^ Token(RightParen, ")", (65,40)->(65,41))
                                         ^^ Token(SpacedColon, ": ", (65,41)->(65,43))
                                           ^^^^^^ Token(Identifier, "string", (65,43)->(65,49))
                                                  Token(EndOfLine, "\n", (65,49)->(65,49))
  var kindMap: list<string> = ['',
  ^^^ Token(Identifier, "var", (66,2)->(66,5))
      ^^^^^^^ Token(Identifier, "kindMap", (66,6)->(66,13))
             ^^ Token(SpacedColon, ": ", (66,13)->(66,15))
               ^^^^ Token(Identifier, "list", (66,15)->(66,19))
                   ^ Token(AngleLeft, "<", (66,19)->(66,20))
                    ^^^^^^ Token(Identifier, "string", (66,20)->(66,26))
                          ^ Token(GreaterThan, ">", (66,26)->(66,27))
                            ^ Token(Equal, "=", (66,28)->(66,29))
                              ^ Token(LeftBracket, "[", (66,30)->(66,31))
                                 Token(SingleQuoteString, "", (66,32)->(66,32))
                                 ^ Token(Comma, ",", (66,33)->(66,34))
                                   Token(EndOfLine, "\n", (66,34)->(66,34))
		't', # Text
    Token(SingleQuoteString, "t", (67,3)->(67,3))
     ^ Token(Comma, ",", (67,5)->(67,6))
       ^^^^^^ Token(Comment, "# Text", (67,7)->(67,13))
		'm', # Method
    Token(SingleQuoteString, "m", (68,3)->(68,3))
     ^ Token(Comma, ",", (68,5)->(68,6))
       ^^^^^^^^ Token(Comment, "# Method", (68,7)->(68,15))
		'f', # Function
    Token(SingleQuoteString, "f", (69,3)->(69,3))
     ^ Token(Comma, ",", (69,5)->(69,6))
       ^^^^^^^^^^ Token(Comment, "# Function", (69,7)->(69,17))
		'C', # Constructor
    Token(SingleQuoteString, "C", (70,3)->(70,3))
     ^ Token(Comma, ",", (70,5)->(70,6))
       ^^^^^^^^^^^^^ Token(Comment, "# Constructor", (70,7)->(70,20))
		'F', # Field
    Token(SingleQuoteString, "F", (71,3)->(71,3))
     ^ Token(Comma, ",", (71,5)->(71,6))
       ^^^^^^^ Token(Comment, "# Field", (71,7)->(71,14))
		'v', # Variable
    Token(SingleQuoteString, "v", (72,3)->(72,3))
     ^ Token(Comma, ",", (72,5)->(72,6))
       ^^^^^^^^^^ Token(Comment, "# Variable", (72,7)->(72,17))
		'c', # Class
    Token(SingleQuoteString, "c", (73,3)->(73,3))
     ^ Token(Comma, ",", (73,5)->(73,6))
       ^^^^^^^ Token(Comment, "# Class", (73,7)->(73,14))
		'i', # Interface
    Token(SingleQuoteString, "i", (74,3)->(74,3))
     ^ Token(Comma, ",", (74,5)->(74,6))
       ^^^^^^^^^^^ Token(Comment, "# Interface", (74,7)->(74,18))
		'M', # Module
    Token(SingleQuoteString, "M", (75,3)->(75,3))
     ^ Token(Comma, ",", (75,5)->(75,6))
       ^^^^^^^^ Token(Comment, "# Module", (75,7)->(75,15))
		'p', # Property
    Token(SingleQuoteString, "p", (76,3)->(76,3))
     ^ Token(Comma, ",", (76,5)->(76,6))
       ^^^^^^^^^^ Token(Comment, "# Property", (76,7)->(76,17))
		'u', # Unit
    Token(SingleQuoteString, "u", (77,3)->(77,3))
     ^ Token(Comma, ",", (77,5)->(77,6))
       ^^^^^^ Token(Comment, "# Unit", (77,7)->(77,13))
		'V', # Value
    Token(SingleQuoteString, "V", (78,3)->(78,3))
     ^ Token(Comma, ",", (78,5)->(78,6))
       ^^^^^^^ Token(Comment, "# Value", (78,7)->(78,14))
		'e', # Enum
    Token(SingleQuoteString, "e", (79,3)->(79,3))
     ^ Token(Comma, ",", (79,5)->(79,6))
       ^^^^^^ Token(Comment, "# Enum", (79,7)->(79,13))
		'k', # Keyword
    Token(SingleQuoteString, "k", (80,3)->(80,3))
     ^ Token(Comma, ",", (80,5)->(80,6))
       ^^^^^^^^^ Token(Comment, "# Keyword", (80,7)->(80,16))
		'S', # Snippet
    Token(SingleQuoteString, "S", (81,3)->(81,3))
     ^ Token(Comma, ",", (81,5)->(81,6))
       ^^^^^^^^^ Token(Comment, "# Snippet", (81,7)->(81,16))
		'C', # Color
    Token(SingleQuoteString, "C", (82,3)->(82,3))
     ^ Token(Comma, ",", (82,5)->(82,6))
       ^^^^^^^ Token(Comment, "# Color", (82,7)->(82,14))
		'f', # File
    Token(SingleQuoteString, "f", (83,3)->(83,3))
     ^ Token(Comma, ",", (83,5)->(83,6))
       ^^^^^^ Token(Comment, "# File", (83,7)->(83,13))
		'r', # Reference
    Token(SingleQuoteString, "r", (84,3)->(84,3))
     ^ Token(Comma, ",", (84,5)->(84,6))
       ^^^^^^^^^^^ Token(Comment, "# Reference", (84,7)->(84,18))
		'F', # Folder
    Token(SingleQuoteString, "F", (85,3)->(85,3))
     ^ Token(Comma, ",", (85,5)->(85,6))
       ^^^^^^^^ Token(Comment, "# Folder", (85,7)->(85,15))
		'E', # EnumMember
    Token(SingleQuoteString, "E", (86,3)->(86,3))
     ^ Token(Comma, ",", (86,5)->(86,6))
       ^^^^^^^^^^^^ Token(Comment, "# EnumMember", (86,7)->(86,19))
		'd', # Contant
    Token(SingleQuoteString, "d", (87,3)->(87,3))
     ^ Token(Comma, ",", (87,5)->(87,6))
       ^^^^^^^^^ Token(Comment, "# Contant", (87,7)->(87,16))
		's', # Struct
    Token(SingleQuoteString, "s", (88,3)->(88,3))
     ^ Token(Comma, ",", (88,5)->(88,6))
       ^^^^^^^^ Token(Comment, "# Struct", (88,7)->(88,15))
		'E', # Event
    Token(SingleQuoteString, "E", (89,3)->(89,3))
     ^ Token(Comma, ",", (89,5)->(89,6))
       ^^^^^^^ Token(Comment, "# Event", (89,7)->(89,14))
		'o', # Operator
    Token(SingleQuoteString, "o", (90,3)->(90,3))
     ^ Token(Comma, ",", (90,5)->(90,6))
       ^^^^^^^^^^ Token(Comment, "# Operator", (90,7)->(90,17))
		'T'  # TypeParameter
    Token(SingleQuoteString, "T", (91,3)->(91,3))
       ^^^^^^^^^^^^^^^ Token(Comment, "# TypeParameter", (91,7)->(91,22))
	]
 ^ Token(RightBracket, "]", (92,1)->(92,2))
   Token(EndOfLine, "\n", (92,2)->(92,2))
  if kind > 25
  ^^ Token(Identifier, "if", (93,2)->(93,4))
     ^^^^ Token(Identifier, "kind", (93,5)->(93,9))
          ^ Token(GreaterThan, ">", (93,10)->(93,11))
            ^^ Token(Integer, "25", (93,12)->(93,14))
               Token(EndOfLine, "\n", (93,14)->(93,14))
    return ''
    ^^^^^^ Token(Identifier, "return", (94,4)->(94,10))
             Token(SingleQuoteString, "", (94,12)->(94,12))
              Token(EndOfLine, "\n", (94,13)->(94,13))
  endif
  ^^^^^ Token(Identifier, "endif", (95,2)->(95,7))
        Token(EndOfLine, "\n", (95,7)->(95,7))
  return kindMap[kind]
  ^^^^^^ Token(Identifier, "return", (96,2)->(96,8))
         ^^^^^^^ Token(Identifier, "kindMap", (96,9)->(96,16))
                ^ Token(LeftBracket, "[", (96,16)->(96,17))
                 ^^^^ Token(Identifier, "kind", (96,17)->(96,21))
                     ^ Token(RightBracket, "]", (96,21)->(96,22))
                       Token(EndOfLine, "\n", (96,22)->(96,22))
enddef
^^^^^^ Token(Identifier, "enddef", (97,0)->(97,6))
       Token(EndOfLine, "\n", (97,6)->(97,6))

 Token(EndOfLine, "\n", (98,0)->(98,0))
# process the 'textDocument/completion' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/completion' reply from the LSP server", (99,0)->(99,65))
# Result: CompletionItem[] | CompletionList | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CompletionItem[] | CompletionList | null", (100,0)->(100,50))
def ProcessCompletionReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (101,0)->(101,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCompletionReply", (101,4)->(101,26))
                          ^ Token(LeftParen, "(", (101,26)->(101,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (101,27)->(101,36))
                                    ^^ Token(SpacedColon, ": ", (101,36)->(101,38))
                                      ^^^^ Token(Identifier, "dict", (101,38)->(101,42))
                                          ^ Token(AngleLeft, "<", (101,42)->(101,43))
                                           ^^^ Token(Identifier, "any", (101,43)->(101,46))
                                              ^ Token(AngleRight, ">", (101,46)->(101,47))
                                               ^ Token(Comma, ",", (101,47)->(101,48))
                                                 ^^^ Token(Identifier, "req", (101,49)->(101,52))
                                                    ^^ Token(SpacedColon, ": ", (101,52)->(101,54))
                                                      ^^^^ Token(Identifier, "dict", (101,54)->(101,58))
                                                          ^ Token(AngleLeft, "<", (101,58)->(101,59))
                                                           ^^^ Token(Identifier, "any", (101,59)->(101,62))
                                                              ^ Token(AngleRight, ">", (101,62)->(101,63))
                                                               ^ Token(Comma, ",", (101,63)->(101,64))
                                                                 ^^^^^ Token(Identifier, "reply", (101,65)->(101,70))
                                                                      ^^ Token(SpacedColon, ": ", (101,70)->(101,72))
                                                                        ^^^^ Token(Identifier, "dict", (101,72)->(101,76))
                                                                            ^ Token(AngleLeft, "<", (101,76)->(101,77))
                                                                             ^^^ Token(Identifier, "any", (101,77)->(101,80))
                                                                                ^ Token(AngleRight, ">", (101,80)->(101,81))
                                                                                 ^ Token(RightParen, ")", (101,81)->(101,82))
                                                                                  ^^ Token(SpacedColon, ": ", (101,82)->(101,84))
                                                                                    ^^^^ Token(Identifier, "void", (101,84)->(101,88))
                                                                                         Token(EndOfLine, "\n", (101,88)->(101,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (102,2)->(102,4))
     ^^^^^ Token(Identifier, "reply", (102,5)->(102,10))
          ^ Token(Dot, ".", (102,10)->(102,11))
           ^^^^^^ Token(Identifier, "result", (102,11)->(102,17))
                 ^^ Token(MethodArrow, "->", (102,17)->(102,19))
                   ^^^^^ Token(Identifier, "empty", (102,19)->(102,24))
                        ^ Token(LeftParen, "(", (102,24)->(102,25))
                         ^ Token(RightParen, ")", (102,25)->(102,26))
                           Token(EndOfLine, "\n", (102,26)->(102,26))
    return
    ^^^^^^ Token(Identifier, "return", (103,4)->(103,10))
           Token(EndOfLine, "\n", (103,10)->(103,10))
  endif
  ^^^^^ Token(Identifier, "endif", (104,2)->(104,7))
        Token(EndOfLine, "\n", (104,7)->(104,7))

 Token(EndOfLine, "\n", (105,0)->(105,0))
  var items: list<dict<any>>
  ^^^ Token(Identifier, "var", (106,2)->(106,5))
      ^^^^^ Token(Identifier, "items", (106,6)->(106,11))
           ^^ Token(SpacedColon, ": ", (106,11)->(106,13))
             ^^^^ Token(Identifier, "list", (106,13)->(106,17))
                 ^ Token(AngleLeft, "<", (106,17)->(106,18))
                  ^^^^ Token(Identifier, "dict", (106,18)->(106,22))
                      ^ Token(AngleLeft, "<", (106,22)->(106,23))
                       ^^^ Token(Identifier, "any", (106,23)->(106,26))
                          ^ Token(AngleRight, ">", (106,26)->(106,27))
                           ^ Token(GreaterThan, ">", (106,27)->(106,28))
                             Token(EndOfLine, "\n", (106,28)->(106,28))
  if reply.result->type() == v:t_list
  ^^ Token(Identifier, "if", (107,2)->(107,4))
     ^^^^^ Token(Identifier, "reply", (107,5)->(107,10))
          ^ Token(Dot, ".", (107,10)->(107,11))
           ^^^^^^ Token(Identifier, "result", (107,11)->(107,17))
                 ^^ Token(MethodArrow, "->", (107,17)->(107,19))
                   ^^^^ Token(Identifier, "type", (107,19)->(107,23))
                       ^ Token(LeftParen, "(", (107,23)->(107,24))
                        ^ Token(RightParen, ")", (107,24)->(107,25))
                          ^^ Token(EqualTo, "==", (107,26)->(107,28))
                             ^ Token(Identifier, "v", (107,29)->(107,30))
                              ^ Token(Colon, ":", (107,30)->(107,31))
                               ^^^^^^ Token(Identifier, "t_list", (107,31)->(107,37))
                                      Token(EndOfLine, "\n", (107,37)->(107,37))
    items = reply.result
    ^^^^^ Token(Identifier, "items", (108,4)->(108,9))
          ^ Token(Equal, "=", (108,10)->(108,11))
            ^^^^^ Token(Identifier, "reply", (108,12)->(108,17))
                 ^ Token(Dot, ".", (108,17)->(108,18))
                  ^^^^^^ Token(Identifier, "result", (108,18)->(108,24))
                         Token(EndOfLine, "\n", (108,24)->(108,24))
  else
  ^^^^ Token(Identifier, "else", (109,2)->(109,6))
       Token(EndOfLine, "\n", (109,6)->(109,6))
    items = reply.result.items
    ^^^^^ Token(Identifier, "items", (110,4)->(110,9))
          ^ Token(Equal, "=", (110,10)->(110,11))
            ^^^^^ Token(Identifier, "reply", (110,12)->(110,17))
                 ^ Token(Dot, ".", (110,17)->(110,18))
                  ^^^^^^ Token(Identifier, "result", (110,18)->(110,24))
                        ^ Token(Dot, ".", (110,24)->(110,25))
                         ^^^^^ Token(Identifier, "items", (110,25)->(110,30))
                               Token(EndOfLine, "\n", (110,30)->(110,30))
  endif
  ^^^^^ Token(Identifier, "endif", (111,2)->(111,7))
        Token(EndOfLine, "\n", (111,7)->(111,7))

 Token(EndOfLine, "\n", (112,0)->(112,0))
  var completeItems: list<dict<any>> = []
  ^^^ Token(Identifier, "var", (113,2)->(113,5))
      ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (113,6)->(113,19))
                   ^^ Token(SpacedColon, ": ", (113,19)->(113,21))
                     ^^^^ Token(Identifier, "list", (113,21)->(113,25))
                         ^ Token(AngleLeft, "<", (113,25)->(113,26))
                          ^^^^ Token(Identifier, "dict", (113,26)->(113,30))
                              ^ Token(AngleLeft, "<", (113,30)->(113,31))
                               ^^^ Token(Identifier, "any", (113,31)->(113,34))
                                  ^ Token(AngleRight, ">", (113,34)->(113,35))
                                   ^ Token(GreaterThan, ">", (113,35)->(113,36))
                                     ^ Token(Equal, "=", (113,37)->(113,38))
                                       ^ Token(LeftBracket, "[", (113,39)->(113,40))
                                        ^ Token(RightBracket, "]", (113,40)->(113,41))
                                          Token(EndOfLine, "\n", (113,41)->(113,41))
  for item in items
  ^^^ Token(Identifier, "for", (114,2)->(114,5))
      ^^^^ Token(Identifier, "item", (114,6)->(114,10))
           ^^ Token(Identifier, "in", (114,11)->(114,13))
              ^^^^^ Token(Identifier, "items", (114,14)->(114,19))
                    Token(EndOfLine, "\n", (114,19)->(114,19))
    var d: dict<any> = {}
    ^^^ Token(Identifier, "var", (115,4)->(115,7))
        ^ Token(Identifier, "d", (115,8)->(115,9))
         ^^ Token(SpacedColon, ": ", (115,9)->(115,11))
           ^^^^ Token(Identifier, "dict", (115,11)->(115,15))
               ^ Token(AngleLeft, "<", (115,15)->(115,16))
                ^^^ Token(Identifier, "any", (115,16)->(115,19))
                   ^ Token(GreaterThan, ">", (115,19)->(115,20))
                     ^ Token(Equal, "=", (115,21)->(115,22))
                       ^ Token(LeftBrace, "{", (115,23)->(115,24))
                        ^ Token(RightBrace, "}", (115,24)->(115,25))
                          Token(EndOfLine, "\n", (115,25)->(115,25))
    if item->has_key('textEdit') && item.textEdit->has_key('newText')
    ^^ Token(Identifier, "if", (116,4)->(116,6))
       ^^^^ Token(Identifier, "item", (116,7)->(116,11))
           ^^ Token(MethodArrow, "->", (116,11)->(116,13))
             ^^^^^^^ Token(Identifier, "has_key", (116,13)->(116,20))
                    ^ Token(LeftParen, "(", (116,20)->(116,21))
                      ^^^^^^^ Token(SingleQuoteString, "textEdit", (116,22)->(116,29))
                               ^ Token(RightParen, ")", (116,31)->(116,32))
                                 ^^ Token(And, "&&", (116,33)->(116,35))
                                    ^^^^ Token(Identifier, "item", (116,36)->(116,40))
                                        ^ Token(Dot, ".", (116,40)->(116,41))
                                         ^^^^^^^^ Token(Identifier, "textEdit", (116,41)->(116,49))
                                                 ^^ Token(MethodArrow, "->", (116,49)->(116,51))
                                                   ^^^^^^^ Token(Identifier, "has_key", (116,51)->(116,58))
                                                          ^ Token(LeftParen, "(", (116,58)->(116,59))
                                                            ^^^^^^ Token(SingleQuoteString, "newText", (116,60)->(116,66))
                                                                    ^ Token(RightParen, ")", (116,68)->(116,69))
                                                                      Token(EndOfLine, "\n", (116,69)->(116,69))
      d.word = item.textEdit.newText
      ^ Token(Identifier, "d", (117,6)->(117,7))
       ^ Token(Dot, ".", (117,7)->(117,8))
        ^^^^ Token(Identifier, "word", (117,8)->(117,12))
             ^ Token(Equal, "=", (117,13)->(117,14))
               ^^^^ Token(Identifier, "item", (117,15)->(117,19))
                   ^ Token(Dot, ".", (117,19)->(117,20))
                    ^^^^^^^^ Token(Identifier, "textEdit", (117,20)->(117,28))
                            ^ Token(Dot, ".", (117,28)->(117,29))
                             ^^^^^^^ Token(Identifier, "newText", (117,29)->(117,36))
                                     Token(EndOfLine, "\n", (117,36)->(117,36))
    elseif item->has_key('insertText')
    ^^^^^^ Token(Identifier, "elseif", (118,4)->(118,10))
           ^^^^ Token(Identifier, "item", (118,11)->(118,15))
               ^^ Token(MethodArrow, "->", (118,15)->(118,17))
                 ^^^^^^^ Token(Identifier, "has_key", (118,17)->(118,24))
                        ^ Token(LeftParen, "(", (118,24)->(118,25))
                          ^^^^^^^^^ Token(SingleQuoteString, "insertText", (118,26)->(118,35))
                                     ^ Token(RightParen, ")", (118,37)->(118,38))
                                       Token(EndOfLine, "\n", (118,38)->(118,38))
      d.word = item.insertText
      ^ Token(Identifier, "d", (119,6)->(119,7))
       ^ Token(Dot, ".", (119,7)->(119,8))
        ^^^^ Token(Identifier, "word", (119,8)->(119,12))
             ^ Token(Equal, "=", (119,13)->(119,14))
               ^^^^ Token(Identifier, "item", (119,15)->(119,19))
                   ^ Token(Dot, ".", (119,19)->(119,20))
                    ^^^^^^^^^^ Token(Identifier, "insertText", (119,20)->(119,30))
                               Token(EndOfLine, "\n", (119,30)->(119,30))
    else
    ^^^^ Token(Identifier, "else", (120,4)->(120,8))
         Token(EndOfLine, "\n", (120,8)->(120,8))
      d.word = item.label
      ^ Token(Identifier, "d", (121,6)->(121,7))
       ^ Token(Dot, ".", (121,7)->(121,8))
        ^^^^ Token(Identifier, "word", (121,8)->(121,12))
             ^ Token(Equal, "=", (121,13)->(121,14))
               ^^^^ Token(Identifier, "item", (121,15)->(121,19))
                   ^ Token(Dot, ".", (121,19)->(121,20))
                    ^^^^^ Token(Identifier, "label", (121,20)->(121,25))
                          Token(EndOfLine, "\n", (121,25)->(121,25))
    endif
    ^^^^^ Token(Identifier, "endif", (122,4)->(122,9))
          Token(EndOfLine, "\n", (122,9)->(122,9))
    d.abbr = item.label
    ^ Token(Identifier, "d", (123,4)->(123,5))
     ^ Token(Dot, ".", (123,5)->(123,6))
      ^^^^ Token(Identifier, "abbr", (123,6)->(123,10))
           ^ Token(Equal, "=", (123,11)->(123,12))
             ^^^^ Token(Identifier, "item", (123,13)->(123,17))
                 ^ Token(Dot, ".", (123,17)->(123,18))
                  ^^^^^ Token(Identifier, "label", (123,18)->(123,23))
                        Token(EndOfLine, "\n", (123,23)->(123,23))
    if item->has_key('kind')
    ^^ Token(Identifier, "if", (124,4)->(124,6))
       ^^^^ Token(Identifier, "item", (124,7)->(124,11))
           ^^ Token(MethodArrow, "->", (124,11)->(124,13))
             ^^^^^^^ Token(Identifier, "has_key", (124,13)->(124,20))
                    ^ Token(LeftParen, "(", (124,20)->(124,21))
                      ^^^ Token(SingleQuoteString, "kind", (124,22)->(124,25))
                           ^ Token(RightParen, ")", (124,27)->(124,28))
                             Token(EndOfLine, "\n", (124,28)->(124,28))
      # namespace CompletionItemKind
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# namespace CompletionItemKind", (125,6)->(125,36))
      # map LSP kind to complete-item-kind
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# map LSP kind to complete-item-kind", (126,6)->(126,42))
      d.kind = LspCompleteItemKindChar(item.kind)
      ^ Token(Identifier, "d", (127,6)->(127,7))
       ^ Token(Dot, ".", (127,7)->(127,8))
        ^^^^ Token(Identifier, "kind", (127,8)->(127,12))
             ^ Token(Equal, "=", (127,13)->(127,14))
               ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspCompleteItemKindChar", (127,15)->(127,38))
                                      ^ Token(LeftParen, "(", (127,38)->(127,39))
                                       ^^^^ Token(Identifier, "item", (127,39)->(127,43))
                                           ^ Token(Dot, ".", (127,43)->(127,44))
                                            ^^^^ Token(Identifier, "kind", (127,44)->(127,48))
                                                ^ Token(RightParen, ")", (127,48)->(127,49))
                                                  Token(EndOfLine, "\n", (127,49)->(127,49))
    endif
    ^^^^^ Token(Identifier, "endif", (128,4)->(128,9))
          Token(EndOfLine, "\n", (128,9)->(128,9))
    if item->has_key('detail')
    ^^ Token(Identifier, "if", (129,4)->(129,6))
       ^^^^ Token(Identifier, "item", (129,7)->(129,11))
           ^^ Token(MethodArrow, "->", (129,11)->(129,13))
             ^^^^^^^ Token(Identifier, "has_key", (129,13)->(129,20))
                    ^ Token(LeftParen, "(", (129,20)->(129,21))
                      ^^^^^ Token(SingleQuoteString, "detail", (129,22)->(129,27))
                             ^ Token(RightParen, ")", (129,29)->(129,30))
                               Token(EndOfLine, "\n", (129,30)->(129,30))
      d.menu = item.detail
      ^ Token(Identifier, "d", (130,6)->(130,7))
       ^ Token(Dot, ".", (130,7)->(130,8))
        ^^^^ Token(Identifier, "menu", (130,8)->(130,12))
             ^ Token(Equal, "=", (130,13)->(130,14))
               ^^^^ Token(Identifier, "item", (130,15)->(130,19))
                   ^ Token(Dot, ".", (130,19)->(130,20))
                    ^^^^^^ Token(Identifier, "detail", (130,20)->(130,26))
                           Token(EndOfLine, "\n", (130,26)->(130,26))
    endif
    ^^^^^ Token(Identifier, "endif", (131,4)->(131,9))
          Token(EndOfLine, "\n", (131,9)->(131,9))
    if item->has_key('documentation')
    ^^ Token(Identifier, "if", (132,4)->(132,6))
       ^^^^ Token(Identifier, "item", (132,7)->(132,11))
           ^^ Token(MethodArrow, "->", (132,11)->(132,13))
             ^^^^^^^ Token(Identifier, "has_key", (132,13)->(132,20))
                    ^ Token(LeftParen, "(", (132,20)->(132,21))
                      ^^^^^^^^^^^^ Token(SingleQuoteString, "documentation", (132,22)->(132,34))
                                    ^ Token(RightParen, ")", (132,36)->(132,37))
                                      Token(EndOfLine, "\n", (132,37)->(132,37))
      if item.documentation->type() == v:t_string && item.documentation != ''
      ^^ Token(Identifier, "if", (133,6)->(133,8))
         ^^^^ Token(Identifier, "item", (133,9)->(133,13))
             ^ Token(Dot, ".", (133,13)->(133,14))
              ^^^^^^^^^^^^^ Token(Identifier, "documentation", (133,14)->(133,27))
                           ^^ Token(MethodArrow, "->", (133,27)->(133,29))
                             ^^^^ Token(Identifier, "type", (133,29)->(133,33))
                                 ^ Token(LeftParen, "(", (133,33)->(133,34))
                                  ^ Token(RightParen, ")", (133,34)->(133,35))
                                    ^^ Token(EqualTo, "==", (133,36)->(133,38))
                                       ^ Token(Identifier, "v", (133,39)->(133,40))
                                        ^ Token(Colon, ":", (133,40)->(133,41))
                                         ^^^^^^^^ Token(Identifier, "t_string", (133,41)->(133,49))
                                                  ^^ Token(And, "&&", (133,50)->(133,52))
                                                     ^^^^ Token(Identifier, "item", (133,53)->(133,57))
                                                         ^ Token(Dot, ".", (133,57)->(133,58))
                                                          ^^^^^^^^^^^^^ Token(Identifier, "documentation", (133,58)->(133,71))
                                                                        ^^ Token(NotEqualTo, "!=", (133,72)->(133,74))
                                                                             Token(SingleQuoteString, "", (133,76)->(133,76))
                                                                              Token(EndOfLine, "\n", (133,77)->(133,77))
	d.info = item.documentation
 ^ Token(Identifier, "d", (134,1)->(134,2))
  ^ Token(Dot, ".", (134,2)->(134,3))
   ^^^^ Token(Identifier, "info", (134,3)->(134,7))
        ^ Token(Equal, "=", (134,8)->(134,9))
          ^^^^ Token(Identifier, "item", (134,10)->(134,14))
              ^ Token(Dot, ".", (134,14)->(134,15))
               ^^^^^^^^^^^^^ Token(Identifier, "documentation", (134,15)->(134,28))
                             Token(EndOfLine, "\n", (134,28)->(134,28))
      elseif item.documentation->type() == v:t_dict
      ^^^^^^ Token(Identifier, "elseif", (135,6)->(135,12))
             ^^^^ Token(Identifier, "item", (135,13)->(135,17))
                 ^ Token(Dot, ".", (135,17)->(135,18))
                  ^^^^^^^^^^^^^ Token(Identifier, "documentation", (135,18)->(135,31))
                               ^^ Token(MethodArrow, "->", (135,31)->(135,33))
                                 ^^^^ Token(Identifier, "type", (135,33)->(135,37))
                                     ^ Token(LeftParen, "(", (135,37)->(135,38))
                                      ^ Token(RightParen, ")", (135,38)->(135,39))
                                        ^^ Token(EqualTo, "==", (135,40)->(135,42))
                                           ^ Token(Identifier, "v", (135,43)->(135,44))
                                            ^ Token(Colon, ":", (135,44)->(135,45))
                                             ^^^^^^ Token(Identifier, "t_dict", (135,45)->(135,51))
                                                    Token(EndOfLine, "\n", (135,51)->(135,51))
			&& item.documentation.value->type() == v:t_string
   ^^ Token(And, "&&", (136,3)->(136,5))
      ^^^^ Token(Identifier, "item", (136,6)->(136,10))
          ^ Token(Dot, ".", (136,10)->(136,11))
           ^^^^^^^^^^^^^ Token(Identifier, "documentation", (136,11)->(136,24))
                        ^ Token(Dot, ".", (136,24)->(136,25))
                         ^^^^^ Token(Identifier, "value", (136,25)->(136,30))
                              ^^ Token(MethodArrow, "->", (136,30)->(136,32))
                                ^^^^ Token(Identifier, "type", (136,32)->(136,36))
                                    ^ Token(LeftParen, "(", (136,36)->(136,37))
                                     ^ Token(RightParen, ")", (136,37)->(136,38))
                                       ^^ Token(EqualTo, "==", (136,39)->(136,41))
                                          ^ Token(Identifier, "v", (136,42)->(136,43))
                                           ^ Token(Colon, ":", (136,43)->(136,44))
                                            ^^^^^^^^ Token(Identifier, "t_string", (136,44)->(136,52))
                                                     Token(EndOfLine, "\n", (136,52)->(136,52))
	d.info = item.documentation.value
 ^ Token(Identifier, "d", (137,1)->(137,2))
  ^ Token(Dot, ".", (137,2)->(137,3))
   ^^^^ Token(Identifier, "info", (137,3)->(137,7))
        ^ Token(Equal, "=", (137,8)->(137,9))
          ^^^^ Token(Identifier, "item", (137,10)->(137,14))
              ^ Token(Dot, ".", (137,14)->(137,15))
               ^^^^^^^^^^^^^ Token(Identifier, "documentation", (137,15)->(137,28))
                            ^ Token(Dot, ".", (137,28)->(137,29))
                             ^^^^^ Token(Identifier, "value", (137,29)->(137,34))
                                   Token(EndOfLine, "\n", (137,34)->(137,34))
      endif
      ^^^^^ Token(Identifier, "endif", (138,6)->(138,11))
            Token(EndOfLine, "\n", (138,11)->(138,11))
    endif
    ^^^^^ Token(Identifier, "endif", (139,4)->(139,9))
          Token(EndOfLine, "\n", (139,9)->(139,9))
    d.user_data = item
    ^ Token(Identifier, "d", (140,4)->(140,5))
     ^ Token(Dot, ".", (140,5)->(140,6))
      ^^^^^^^^^ Token(Identifier, "user_data", (140,6)->(140,15))
                ^ Token(Equal, "=", (140,16)->(140,17))
                  ^^^^ Token(Identifier, "item", (140,18)->(140,22))
                       Token(EndOfLine, "\n", (140,22)->(140,22))
    completeItems->add(d)
    ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (141,4)->(141,17))
                 ^^ Token(MethodArrow, "->", (141,17)->(141,19))
                   ^^^ Token(Identifier, "add", (141,19)->(141,22))
                      ^ Token(LeftParen, "(", (141,22)->(141,23))
                       ^ Token(Identifier, "d", (141,23)->(141,24))
                        ^ Token(RightParen, ")", (141,24)->(141,25))
                          Token(EndOfLine, "\n", (141,25)->(141,25))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (142,2)->(142,8))
         Token(EndOfLine, "\n", (142,8)->(142,8))

 Token(EndOfLine, "\n", (143,0)->(143,0))
  if opt.lspOptions.autoComplete
  ^^ Token(Identifier, "if", (144,2)->(144,4))
     ^^^ Token(Identifier, "opt", (144,5)->(144,8))
        ^ Token(Dot, ".", (144,8)->(144,9))
         ^^^^^^^^^^ Token(Identifier, "lspOptions", (144,9)->(144,19))
                   ^ Token(Dot, ".", (144,19)->(144,20))
                    ^^^^^^^^^^^^ Token(Identifier, "autoComplete", (144,20)->(144,32))
                                 Token(EndOfLine, "\n", (144,32)->(144,32))
    if completeItems->empty()
    ^^ Token(Identifier, "if", (145,4)->(145,6))
       ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (145,7)->(145,20))
                    ^^ Token(MethodArrow, "->", (145,20)->(145,22))
                      ^^^^^ Token(Identifier, "empty", (145,22)->(145,27))
                           ^ Token(LeftParen, "(", (145,27)->(145,28))
                            ^ Token(RightParen, ")", (145,28)->(145,29))
                              Token(EndOfLine, "\n", (145,29)->(145,29))
      # no matches
      ^^^^^^^^^^^^ Token(Comment, "# no matches", (146,6)->(146,18))
      return
      ^^^^^^ Token(Identifier, "return", (147,6)->(147,12))
             Token(EndOfLine, "\n", (147,12)->(147,12))
    endif
    ^^^^^ Token(Identifier, "endif", (148,4)->(148,9))
          Token(EndOfLine, "\n", (148,9)->(148,9))

 Token(EndOfLine, "\n", (149,0)->(149,0))
    if mode() != 'i' && mode() != 'R' && mode() != 'Rv'
    ^^ Token(Identifier, "if", (150,4)->(150,6))
       ^^^^ Token(Identifier, "mode", (150,7)->(150,11))
           ^ Token(LeftParen, "(", (150,11)->(150,12))
            ^ Token(RightParen, ")", (150,12)->(150,13))
              ^^ Token(NotEqualTo, "!=", (150,14)->(150,16))
                   Token(SingleQuoteString, "i", (150,18)->(150,18))
                     ^^ Token(And, "&&", (150,21)->(150,23))
                        ^^^^ Token(Identifier, "mode", (150,24)->(150,28))
                            ^ Token(LeftParen, "(", (150,28)->(150,29))
                             ^ Token(RightParen, ")", (150,29)->(150,30))
                               ^^ Token(NotEqualTo, "!=", (150,31)->(150,33))
                                    Token(SingleQuoteString, "R", (150,35)->(150,35))
                                      ^^ Token(And, "&&", (150,38)->(150,40))
                                         ^^^^ Token(Identifier, "mode", (150,41)->(150,45))
                                             ^ Token(LeftParen, "(", (150,45)->(150,46))
                                              ^ Token(RightParen, ")", (150,46)->(150,47))
                                                ^^ Token(NotEqualTo, "!=", (150,48)->(150,50))
                                                    ^ Token(SingleQuoteString, "Rv", (150,52)->(150,53))
                                                        Token(EndOfLine, "\n", (150,55)->(150,55))
      # If not in insert or replace mode, then don't start the completion
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# If not in insert or replace mode, then don't start the completion", (151,6)->(151,73))
      return
      ^^^^^^ Token(Identifier, "return", (152,6)->(152,12))
             Token(EndOfLine, "\n", (152,12)->(152,12))
    endif
    ^^^^^ Token(Identifier, "endif", (153,4)->(153,9))
          Token(EndOfLine, "\n", (153,9)->(153,9))

 Token(EndOfLine, "\n", (154,0)->(154,0))
    if completeItems->len() == 1
    ^^ Token(Identifier, "if", (155,4)->(155,6))
       ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (155,7)->(155,20))
                    ^^ Token(MethodArrow, "->", (155,20)->(155,22))
                      ^^^ Token(Identifier, "len", (155,22)->(155,25))
                         ^ Token(LeftParen, "(", (155,25)->(155,26))
                          ^ Token(RightParen, ")", (155,26)->(155,27))
                            ^^ Token(EqualTo, "==", (155,28)->(155,30))
                               ^ Token(Integer, "1", (155,31)->(155,32))
                                 Token(EndOfLine, "\n", (155,32)->(155,32))
	&& matchstr(getline('.'), completeItems[0].word .. '\>') != ''
 ^^ Token(And, "&&", (156,1)->(156,3))
    ^^^^^^^^ Token(Identifier, "matchstr", (156,4)->(156,12))
            ^ Token(LeftParen, "(", (156,12)->(156,13))
             ^^^^^^^ Token(Identifier, "getline", (156,13)->(156,20))
                    ^ Token(LeftParen, "(", (156,20)->(156,21))
                       Token(SingleQuoteString, ".", (156,22)->(156,22))
                        ^ Token(RightParen, ")", (156,24)->(156,25))
                         ^ Token(Comma, ",", (156,25)->(156,26))
                           ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (156,27)->(156,40))
                                        ^ Token(LeftBracket, "[", (156,40)->(156,41))
                                         ^ Token(Integer, "0", (156,41)->(156,42))
                                          ^ Token(RightBracket, "]", (156,42)->(156,43))
                                           ^ Token(Dot, ".", (156,43)->(156,44))
                                            ^^^^ Token(Identifier, "word", (156,44)->(156,48))
                                                 ^^ Token(StringConcat, "..", (156,49)->(156,51))
                                                     ^ Token(SingleQuoteString, "\\>", (156,53)->(156,54))
                                                        ^ Token(RightParen, ")", (156,56)->(156,57))
                                                          ^^ Token(NotEqualTo, "!=", (156,58)->(156,60))
                                                               Token(SingleQuoteString, "", (156,62)->(156,62))
                                                                Token(EndOfLine, "\n", (156,63)->(156,63))
      # only one complete match. No need to show the completion popup
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# only one complete match. No need to show the completion popup", (157,6)->(157,69))
      return
      ^^^^^^ Token(Identifier, "return", (158,6)->(158,12))
             Token(EndOfLine, "\n", (158,12)->(158,12))
    endif
    ^^^^^ Token(Identifier, "endif", (159,4)->(159,9))
          Token(EndOfLine, "\n", (159,9)->(159,9))

 Token(EndOfLine, "\n", (160,0)->(160,0))
    # Find the start column for the completion.  If any of the entries
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Find the start column for the completion.  If any of the entries", (161,4)->(161,70))
    # returned by the LSP server has a starting position, then use that.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# returned by the LSP server has a starting position, then use that.", (162,4)->(162,72))
    var start_col: number = 0
    ^^^ Token(Identifier, "var", (163,4)->(163,7))
        ^^^^^^^^^ Token(Identifier, "start_col", (163,8)->(163,17))
                 ^^ Token(SpacedColon, ": ", (163,17)->(163,19))
                   ^^^^^^ Token(Identifier, "number", (163,19)->(163,25))
                          ^ Token(Equal, "=", (163,26)->(163,27))
                            ^ Token(Integer, "0", (163,28)->(163,29))
                              Token(EndOfLine, "\n", (163,29)->(163,29))
    for item in items
    ^^^ Token(Identifier, "for", (164,4)->(164,7))
        ^^^^ Token(Identifier, "item", (164,8)->(164,12))
             ^^ Token(Identifier, "in", (164,13)->(164,15))
                ^^^^^ Token(Identifier, "items", (164,16)->(164,21))
                      Token(EndOfLine, "\n", (164,21)->(164,21))
      if item->has_key('textEdit')
      ^^ Token(Identifier, "if", (165,6)->(165,8))
         ^^^^ Token(Identifier, "item", (165,9)->(165,13))
             ^^ Token(MethodArrow, "->", (165,13)->(165,15))
               ^^^^^^^ Token(Identifier, "has_key", (165,15)->(165,22))
                      ^ Token(LeftParen, "(", (165,22)->(165,23))
                        ^^^^^^^ Token(SingleQuoteString, "textEdit", (165,24)->(165,31))
                                 ^ Token(RightParen, ")", (165,33)->(165,34))
                                   Token(EndOfLine, "\n", (165,34)->(165,34))
	start_col = item.textEdit.range.start.character + 1
 ^^^^^^^^^ Token(Identifier, "start_col", (166,1)->(166,10))
           ^ Token(Equal, "=", (166,11)->(166,12))
             ^^^^ Token(Identifier, "item", (166,13)->(166,17))
                 ^ Token(Dot, ".", (166,17)->(166,18))
                  ^^^^^^^^ Token(Identifier, "textEdit", (166,18)->(166,26))
                          ^ Token(Dot, ".", (166,26)->(166,27))
                           ^^^^^ Token(Identifier, "range", (166,27)->(166,32))
                                ^ Token(Dot, ".", (166,32)->(166,33))
                                 ^^^^^ Token(Identifier, "start", (166,33)->(166,38))
                                      ^ Token(Dot, ".", (166,38)->(166,39))
                                       ^^^^^^^^^ Token(Identifier, "character", (166,39)->(166,48))
                                                 ^ Token(Plus, "+", (166,49)->(166,50))
                                                   ^ Token(Integer, "1", (166,51)->(166,52))
                                                     Token(EndOfLine, "\n", (166,52)->(166,52))
	break
 ^^^^^ Token(Identifier, "break", (167,1)->(167,6))
       Token(EndOfLine, "\n", (167,6)->(167,6))
      endif
      ^^^^^ Token(Identifier, "endif", (168,6)->(168,11))
            Token(EndOfLine, "\n", (168,11)->(168,11))
    endfor
    ^^^^^^ Token(Identifier, "endfor", (169,4)->(169,10))
           Token(EndOfLine, "\n", (169,10)->(169,10))

 Token(EndOfLine, "\n", (170,0)->(170,0))
    # LSP server didn't return a starting position for completion, search
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# LSP server didn't return a starting position for completion, search", (171,4)->(171,73))
    # backwards from the current cursor position for a non-keyword character.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# backwards from the current cursor position for a non-keyword character.", (172,4)->(172,77))
    if start_col == 0
    ^^ Token(Identifier, "if", (173,4)->(173,6))
       ^^^^^^^^^ Token(Identifier, "start_col", (173,7)->(173,16))
                 ^^ Token(EqualTo, "==", (173,17)->(173,19))
                    ^ Token(Integer, "0", (173,20)->(173,21))
                      Token(EndOfLine, "\n", (173,21)->(173,21))
      var line: string = getline('.')
      ^^^ Token(Identifier, "var", (174,6)->(174,9))
          ^^^^ Token(Identifier, "line", (174,10)->(174,14))
              ^^ Token(SpacedColon, ": ", (174,14)->(174,16))
                ^^^^^^ Token(Identifier, "string", (174,16)->(174,22))
                       ^ Token(Equal, "=", (174,23)->(174,24))
                         ^^^^^^^ Token(Identifier, "getline", (174,25)->(174,32))
                                ^ Token(LeftParen, "(", (174,32)->(174,33))
                                   Token(SingleQuoteString, ".", (174,34)->(174,34))
                                    ^ Token(RightParen, ")", (174,36)->(174,37))
                                      Token(EndOfLine, "\n", (174,37)->(174,37))
      var start = col('.') - 1
      ^^^ Token(Identifier, "var", (175,6)->(175,9))
          ^^^^^ Token(Identifier, "start", (175,10)->(175,15))
                ^ Token(Equal, "=", (175,16)->(175,17))
                  ^^^ Token(Identifier, "col", (175,18)->(175,21))
                     ^ Token(LeftParen, "(", (175,21)->(175,22))
                        Token(SingleQuoteString, ".", (175,23)->(175,23))
                         ^ Token(RightParen, ")", (175,25)->(175,26))
                           ^ Token(Minus, "-", (175,27)->(175,28))
                             ^ Token(Integer, "1", (175,29)->(175,30))
                               Token(EndOfLine, "\n", (175,30)->(175,30))
      while start > 0 && line[start - 1] =~ '\k'
      ^^^^^ Token(Identifier, "while", (176,6)->(176,11))
            ^^^^^ Token(Identifier, "start", (176,12)->(176,17))
                  ^ Token(GreaterThan, ">", (176,18)->(176,19))
                    ^ Token(Integer, "0", (176,20)->(176,21))
                      ^^ Token(And, "&&", (176,22)->(176,24))
                         ^^^^ Token(Identifier, "line", (176,25)->(176,29))
                             ^ Token(LeftBracket, "[", (176,29)->(176,30))
                              ^^^^^ Token(Identifier, "start", (176,30)->(176,35))
                                    ^ Token(Minus, "-", (176,36)->(176,37))
                                      ^ Token(Integer, "1", (176,38)->(176,39))
                                       ^ Token(RightBracket, "]", (176,39)->(176,40))
                                         ^^ Token(RegexpMatches, "=~", (176,41)->(176,43))
                                             ^ Token(SingleQuoteString, "\\k", (176,45)->(176,46))
                                                 Token(EndOfLine, "\n", (176,48)->(176,48))
	start -= 1
 ^^^^^ Token(Identifier, "start", (177,1)->(177,6))
       ^^ Token(MinusEquals, "-=", (177,7)->(177,9))
          ^ Token(Integer, "1", (177,10)->(177,11))
            Token(EndOfLine, "\n", (177,11)->(177,11))
      endwhile
      ^^^^^^^^ Token(Identifier, "endwhile", (178,6)->(178,14))
               Token(EndOfLine, "\n", (178,14)->(178,14))
      start_col = start + 1
      ^^^^^^^^^ Token(Identifier, "start_col", (179,6)->(179,15))
                ^ Token(Equal, "=", (179,16)->(179,17))
                  ^^^^^ Token(Identifier, "start", (179,18)->(179,23))
                        ^ Token(Plus, "+", (179,24)->(179,25))
                          ^ Token(Integer, "1", (179,26)->(179,27))
                            Token(EndOfLine, "\n", (179,27)->(179,27))
    endif
    ^^^^^ Token(Identifier, "endif", (180,4)->(180,9))
          Token(EndOfLine, "\n", (180,9)->(180,9))

 Token(EndOfLine, "\n", (181,0)->(181,0))
    complete(start_col, completeItems)
    ^^^^^^^^ Token(Identifier, "complete", (182,4)->(182,12))
            ^ Token(LeftParen, "(", (182,12)->(182,13))
             ^^^^^^^^^ Token(Identifier, "start_col", (182,13)->(182,22))
                      ^ Token(Comma, ",", (182,22)->(182,23))
                        ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (182,24)->(182,37))
                                     ^ Token(RightParen, ")", (182,37)->(182,38))
                                       Token(EndOfLine, "\n", (182,38)->(182,38))
  else
  ^^^^ Token(Identifier, "else", (183,2)->(183,6))
       Token(EndOfLine, "\n", (183,6)->(183,6))
    lspserver.completeItems = completeItems
    ^^^^^^^^^ Token(Identifier, "lspserver", (184,4)->(184,13))
             ^ Token(Dot, ".", (184,13)->(184,14))
              ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (184,14)->(184,27))
                            ^ Token(Equal, "=", (184,28)->(184,29))
                              ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (184,30)->(184,43))
                                            Token(EndOfLine, "\n", (184,43)->(184,43))
    lspserver.completePending = false
    ^^^^^^^^^ Token(Identifier, "lspserver", (185,4)->(185,13))
             ^ Token(Dot, ".", (185,13)->(185,14))
              ^^^^^^^^^^^^^^^ Token(Identifier, "completePending", (185,14)->(185,29))
                              ^ Token(Equal, "=", (185,30)->(185,31))
                                ^^^^^ Token(False, "false", (185,32)->(185,37))
                                      Token(EndOfLine, "\n", (185,37)->(185,37))
  endif
  ^^^^^ Token(Identifier, "endif", (186,2)->(186,7))
        Token(EndOfLine, "\n", (186,7)->(186,7))
enddef
^^^^^^ Token(Identifier, "enddef", (187,0)->(187,6))
       Token(EndOfLine, "\n", (187,6)->(187,6))

 Token(EndOfLine, "\n", (188,0)->(188,0))
# process the 'textDocument/hover' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/hover' reply from the LSP server", (189,0)->(189,60))
# Result: Hover | null
^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: Hover | null", (190,0)->(190,22))
def ProcessHoverReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (191,0)->(191,3))
    ^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessHoverReply", (191,4)->(191,21))
                     ^ Token(LeftParen, "(", (191,21)->(191,22))
                      ^^^^^^^^^ Token(Identifier, "lspserver", (191,22)->(191,31))
                               ^^ Token(SpacedColon, ": ", (191,31)->(191,33))
                                 ^^^^ Token(Identifier, "dict", (191,33)->(191,37))
                                     ^ Token(AngleLeft, "<", (191,37)->(191,38))
                                      ^^^ Token(Identifier, "any", (191,38)->(191,41))
                                         ^ Token(AngleRight, ">", (191,41)->(191,42))
                                          ^ Token(Comma, ",", (191,42)->(191,43))
                                            ^^^ Token(Identifier, "req", (191,44)->(191,47))
                                               ^^ Token(SpacedColon, ": ", (191,47)->(191,49))
                                                 ^^^^ Token(Identifier, "dict", (191,49)->(191,53))
                                                     ^ Token(AngleLeft, "<", (191,53)->(191,54))
                                                      ^^^ Token(Identifier, "any", (191,54)->(191,57))
                                                         ^ Token(AngleRight, ">", (191,57)->(191,58))
                                                          ^ Token(Comma, ",", (191,58)->(191,59))
                                                            ^^^^^ Token(Identifier, "reply", (191,60)->(191,65))
                                                                 ^^ Token(SpacedColon, ": ", (191,65)->(191,67))
                                                                   ^^^^ Token(Identifier, "dict", (191,67)->(191,71))
                                                                       ^ Token(AngleLeft, "<", (191,71)->(191,72))
                                                                        ^^^ Token(Identifier, "any", (191,72)->(191,75))
                                                                           ^ Token(AngleRight, ">", (191,75)->(191,76))
                                                                            ^ Token(RightParen, ")", (191,76)->(191,77))
                                                                             ^^ Token(SpacedColon, ": ", (191,77)->(191,79))
                                                                               ^^^^ Token(Identifier, "void", (191,79)->(191,83))
                                                                                    Token(EndOfLine, "\n", (191,83)->(191,83))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (192,2)->(192,4))
     ^^^^^ Token(Identifier, "reply", (192,5)->(192,10))
          ^ Token(Dot, ".", (192,10)->(192,11))
           ^^^^^^ Token(Identifier, "result", (192,11)->(192,17))
                 ^^ Token(MethodArrow, "->", (192,17)->(192,19))
                   ^^^^^ Token(Identifier, "empty", (192,19)->(192,24))
                        ^ Token(LeftParen, "(", (192,24)->(192,25))
                         ^ Token(RightParen, ")", (192,25)->(192,26))
                           Token(EndOfLine, "\n", (192,26)->(192,26))
    return
    ^^^^^^ Token(Identifier, "return", (193,4)->(193,10))
           Token(EndOfLine, "\n", (193,10)->(193,10))
  endif
  ^^^^^ Token(Identifier, "endif", (194,2)->(194,7))
        Token(EndOfLine, "\n", (194,7)->(194,7))

 Token(EndOfLine, "\n", (195,0)->(195,0))
  var hoverText: list<string>
  ^^^ Token(Identifier, "var", (196,2)->(196,5))
      ^^^^^^^^^ Token(Identifier, "hoverText", (196,6)->(196,15))
               ^^ Token(SpacedColon, ": ", (196,15)->(196,17))
                 ^^^^ Token(Identifier, "list", (196,17)->(196,21))
                     ^ Token(AngleLeft, "<", (196,21)->(196,22))
                      ^^^^^^ Token(Identifier, "string", (196,22)->(196,28))
                            ^ Token(GreaterThan, ">", (196,28)->(196,29))
                              Token(EndOfLine, "\n", (196,29)->(196,29))
  var hoverKind: string
  ^^^ Token(Identifier, "var", (197,2)->(197,5))
      ^^^^^^^^^ Token(Identifier, "hoverKind", (197,6)->(197,15))
               ^^ Token(SpacedColon, ": ", (197,15)->(197,17))
                 ^^^^^^ Token(Identifier, "string", (197,17)->(197,23))
                        Token(EndOfLine, "\n", (197,23)->(197,23))

 Token(EndOfLine, "\n", (198,0)->(198,0))
  if reply.result.contents->type() == v:t_dict
  ^^ Token(Identifier, "if", (199,2)->(199,4))
     ^^^^^ Token(Identifier, "reply", (199,5)->(199,10))
          ^ Token(Dot, ".", (199,10)->(199,11))
           ^^^^^^ Token(Identifier, "result", (199,11)->(199,17))
                 ^ Token(Dot, ".", (199,17)->(199,18))
                  ^^^^^^^^ Token(Identifier, "contents", (199,18)->(199,26))
                          ^^ Token(MethodArrow, "->", (199,26)->(199,28))
                            ^^^^ Token(Identifier, "type", (199,28)->(199,32))
                                ^ Token(LeftParen, "(", (199,32)->(199,33))
                                 ^ Token(RightParen, ")", (199,33)->(199,34))
                                   ^^ Token(EqualTo, "==", (199,35)->(199,37))
                                      ^ Token(Identifier, "v", (199,38)->(199,39))
                                       ^ Token(Colon, ":", (199,39)->(199,40))
                                        ^^^^^^ Token(Identifier, "t_dict", (199,40)->(199,46))
                                               Token(EndOfLine, "\n", (199,46)->(199,46))
    if reply.result.contents->has_key('kind')
    ^^ Token(Identifier, "if", (200,4)->(200,6))
       ^^^^^ Token(Identifier, "reply", (200,7)->(200,12))
            ^ Token(Dot, ".", (200,12)->(200,13))
             ^^^^^^ Token(Identifier, "result", (200,13)->(200,19))
                   ^ Token(Dot, ".", (200,19)->(200,20))
                    ^^^^^^^^ Token(Identifier, "contents", (200,20)->(200,28))
                            ^^ Token(MethodArrow, "->", (200,28)->(200,30))
                              ^^^^^^^ Token(Identifier, "has_key", (200,30)->(200,37))
                                     ^ Token(LeftParen, "(", (200,37)->(200,38))
                                       ^^^ Token(SingleQuoteString, "kind", (200,39)->(200,42))
                                            ^ Token(RightParen, ")", (200,44)->(200,45))
                                              Token(EndOfLine, "\n", (200,45)->(200,45))
      # MarkupContent
      ^^^^^^^^^^^^^^^ Token(Comment, "# MarkupContent", (201,6)->(201,21))
      if reply.result.contents.kind == 'plaintext'
      ^^ Token(Identifier, "if", (202,6)->(202,8))
         ^^^^^ Token(Identifier, "reply", (202,9)->(202,14))
              ^ Token(Dot, ".", (202,14)->(202,15))
               ^^^^^^ Token(Identifier, "result", (202,15)->(202,21))
                     ^ Token(Dot, ".", (202,21)->(202,22))
                      ^^^^^^^^ Token(Identifier, "contents", (202,22)->(202,30))
                              ^ Token(Dot, ".", (202,30)->(202,31))
                               ^^^^ Token(Identifier, "kind", (202,31)->(202,35))
                                    ^^ Token(EqualTo, "==", (202,36)->(202,38))
                                        ^^^^^^^^ Token(SingleQuoteString, "plaintext", (202,40)->(202,48))
                                                   Token(EndOfLine, "\n", (202,50)->(202,50))
        hoverText = reply.result.contents.value->split("\n")
        ^^^^^^^^^ Token(Identifier, "hoverText", (203,8)->(203,17))
                  ^ Token(Equal, "=", (203,18)->(203,19))
                    ^^^^^ Token(Identifier, "reply", (203,20)->(203,25))
                         ^ Token(Dot, ".", (203,25)->(203,26))
                          ^^^^^^ Token(Identifier, "result", (203,26)->(203,32))
                                ^ Token(Dot, ".", (203,32)->(203,33))
                                 ^^^^^^^^ Token(Identifier, "contents", (203,33)->(203,41))
                                         ^ Token(Dot, ".", (203,41)->(203,42))
                                          ^^^^^ Token(Identifier, "value", (203,42)->(203,47))
                                               ^^ Token(MethodArrow, "->", (203,47)->(203,49))
                                                 ^^^^^ Token(Identifier, "split", (203,49)->(203,54))
                                                      ^ Token(LeftParen, "(", (203,54)->(203,55))
                                                        ^ Token(DoubleQuoteString, "\\n", (203,56)->(203,57))
                                                           ^ Token(RightParen, ")", (203,59)->(203,60))
                                                             Token(EndOfLine, "\n", (203,60)->(203,60))
        hoverKind = 'text'
        ^^^^^^^^^ Token(Identifier, "hoverKind", (204,8)->(204,17))
                  ^ Token(Equal, "=", (204,18)->(204,19))
                     ^^^ Token(SingleQuoteString, "text", (204,21)->(204,24))
                           Token(EndOfLine, "\n", (204,26)->(204,26))
      elseif reply.result.contents.kind == 'markdown'
      ^^^^^^ Token(Identifier, "elseif", (205,6)->(205,12))
             ^^^^^ Token(Identifier, "reply", (205,13)->(205,18))
                  ^ Token(Dot, ".", (205,18)->(205,19))
                   ^^^^^^ Token(Identifier, "result", (205,19)->(205,25))
                         ^ Token(Dot, ".", (205,25)->(205,26))
                          ^^^^^^^^ Token(Identifier, "contents", (205,26)->(205,34))
                                  ^ Token(Dot, ".", (205,34)->(205,35))
                                   ^^^^ Token(Identifier, "kind", (205,35)->(205,39))
                                        ^^ Token(EqualTo, "==", (205,40)->(205,42))
                                            ^^^^^^^ Token(SingleQuoteString, "markdown", (205,44)->(205,51))
                                                      Token(EndOfLine, "\n", (205,53)->(205,53))
        hoverText = reply.result.contents.value->split("\n")
        ^^^^^^^^^ Token(Identifier, "hoverText", (206,8)->(206,17))
                  ^ Token(Equal, "=", (206,18)->(206,19))
                    ^^^^^ Token(Identifier, "reply", (206,20)->(206,25))
                         ^ Token(Dot, ".", (206,25)->(206,26))
                          ^^^^^^ Token(Identifier, "result", (206,26)->(206,32))
                                ^ Token(Dot, ".", (206,32)->(206,33))
                                 ^^^^^^^^ Token(Identifier, "contents", (206,33)->(206,41))
                                         ^ Token(Dot, ".", (206,41)->(206,42))
                                          ^^^^^ Token(Identifier, "value", (206,42)->(206,47))
                                               ^^ Token(MethodArrow, "->", (206,47)->(206,49))
                                                 ^^^^^ Token(Identifier, "split", (206,49)->(206,54))
                                                      ^ Token(LeftParen, "(", (206,54)->(206,55))
                                                        ^ Token(DoubleQuoteString, "\\n", (206,56)->(206,57))
                                                           ^ Token(RightParen, ")", (206,59)->(206,60))
                                                             Token(EndOfLine, "\n", (206,60)->(206,60))
        hoverKind = 'markdown'
        ^^^^^^^^^ Token(Identifier, "hoverKind", (207,8)->(207,17))
                  ^ Token(Equal, "=", (207,18)->(207,19))
                     ^^^^^^^ Token(SingleQuoteString, "markdown", (207,21)->(207,28))
                               Token(EndOfLine, "\n", (207,30)->(207,30))
      else
      ^^^^ Token(Identifier, "else", (208,6)->(208,10))
           Token(EndOfLine, "\n", (208,10)->(208,10))
        util.ErrMsg($'Error: Unsupported hover contents type ({reply.result.contents.kind})')
        ^^^^ Token(Identifier, "util", (209,8)->(209,12))
            ^ Token(Dot, ".", (209,12)->(209,13))
             ^^^^^^ Token(Identifier, "ErrMsg", (209,13)->(209,19))
                   ^ Token(LeftParen, "(", (209,19)->(209,20))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported hover contents type ({reply.result.contents.kind})", (209,22)->(209,90))
                                                                                            ^ Token(RightParen, ")", (209,92)->(209,93))
                                                                                              Token(EndOfLine, "\n", (209,93)->(209,93))
        return
        ^^^^^^ Token(Identifier, "return", (210,8)->(210,14))
               Token(EndOfLine, "\n", (210,14)->(210,14))
      endif
      ^^^^^ Token(Identifier, "endif", (211,6)->(211,11))
            Token(EndOfLine, "\n", (211,11)->(211,11))
    elseif reply.result.contents->has_key('value')
    ^^^^^^ Token(Identifier, "elseif", (212,4)->(212,10))
           ^^^^^ Token(Identifier, "reply", (212,11)->(212,16))
                ^ Token(Dot, ".", (212,16)->(212,17))
                 ^^^^^^ Token(Identifier, "result", (212,17)->(212,23))
                       ^ Token(Dot, ".", (212,23)->(212,24))
                        ^^^^^^^^ Token(Identifier, "contents", (212,24)->(212,32))
                                ^^ Token(MethodArrow, "->", (212,32)->(212,34))
                                  ^^^^^^^ Token(Identifier, "has_key", (212,34)->(212,41))
                                         ^ Token(LeftParen, "(", (212,41)->(212,42))
                                           ^^^^ Token(SingleQuoteString, "value", (212,43)->(212,47))
                                                 ^ Token(RightParen, ")", (212,49)->(212,50))
                                                   Token(EndOfLine, "\n", (212,50)->(212,50))
      # MarkedString
      ^^^^^^^^^^^^^^ Token(Comment, "# MarkedString", (213,6)->(213,20))
      hoverText = reply.result.contents.value->split("\n")
      ^^^^^^^^^ Token(Identifier, "hoverText", (214,6)->(214,15))
                ^ Token(Equal, "=", (214,16)->(214,17))
                  ^^^^^ Token(Identifier, "reply", (214,18)->(214,23))
                       ^ Token(Dot, ".", (214,23)->(214,24))
                        ^^^^^^ Token(Identifier, "result", (214,24)->(214,30))
                              ^ Token(Dot, ".", (214,30)->(214,31))
                               ^^^^^^^^ Token(Identifier, "contents", (214,31)->(214,39))
                                       ^ Token(Dot, ".", (214,39)->(214,40))
                                        ^^^^^ Token(Identifier, "value", (214,40)->(214,45))
                                             ^^ Token(MethodArrow, "->", (214,45)->(214,47))
                                               ^^^^^ Token(Identifier, "split", (214,47)->(214,52))
                                                    ^ Token(LeftParen, "(", (214,52)->(214,53))
                                                      ^ Token(DoubleQuoteString, "\\n", (214,54)->(214,55))
                                                         ^ Token(RightParen, ")", (214,57)->(214,58))
                                                           Token(EndOfLine, "\n", (214,58)->(214,58))
    else
    ^^^^ Token(Identifier, "else", (215,4)->(215,8))
         Token(EndOfLine, "\n", (215,8)->(215,8))
      util.ErrMsg($'Error: Unsupported hover contents ({reply.result.contents})')
      ^^^^ Token(Identifier, "util", (216,6)->(216,10))
          ^ Token(Dot, ".", (216,10)->(216,11))
           ^^^^^^ Token(Identifier, "ErrMsg", (216,11)->(216,17))
                 ^ Token(LeftParen, "(", (216,17)->(216,18))
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported hover contents ({reply.result.contents})", (216,20)->(216,78))
                                                                                ^ Token(RightParen, ")", (216,80)->(216,81))
                                                                                  Token(EndOfLine, "\n", (216,81)->(216,81))
      return
      ^^^^^^ Token(Identifier, "return", (217,6)->(217,12))
             Token(EndOfLine, "\n", (217,12)->(217,12))
    endif
    ^^^^^ Token(Identifier, "endif", (218,4)->(218,9))
          Token(EndOfLine, "\n", (218,9)->(218,9))
  elseif reply.result.contents->type() == v:t_list
  ^^^^^^ Token(Identifier, "elseif", (219,2)->(219,8))
         ^^^^^ Token(Identifier, "reply", (219,9)->(219,14))
              ^ Token(Dot, ".", (219,14)->(219,15))
               ^^^^^^ Token(Identifier, "result", (219,15)->(219,21))
                     ^ Token(Dot, ".", (219,21)->(219,22))
                      ^^^^^^^^ Token(Identifier, "contents", (219,22)->(219,30))
                              ^^ Token(MethodArrow, "->", (219,30)->(219,32))
                                ^^^^ Token(Identifier, "type", (219,32)->(219,36))
                                    ^ Token(LeftParen, "(", (219,36)->(219,37))
                                     ^ Token(RightParen, ")", (219,37)->(219,38))
                                       ^^ Token(EqualTo, "==", (219,39)->(219,41))
                                          ^ Token(Identifier, "v", (219,42)->(219,43))
                                           ^ Token(Colon, ":", (219,43)->(219,44))
                                            ^^^^^^ Token(Identifier, "t_list", (219,44)->(219,50))
                                                   Token(EndOfLine, "\n", (219,50)->(219,50))
    # interface MarkedString[]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# interface MarkedString[]", (220,4)->(220,30))
    for e in reply.result.contents
    ^^^ Token(Identifier, "for", (221,4)->(221,7))
        ^ Token(Identifier, "e", (221,8)->(221,9))
          ^^ Token(Identifier, "in", (221,10)->(221,12))
             ^^^^^ Token(Identifier, "reply", (221,13)->(221,18))
                  ^ Token(Dot, ".", (221,18)->(221,19))
                   ^^^^^^ Token(Identifier, "result", (221,19)->(221,25))
                         ^ Token(Dot, ".", (221,25)->(221,26))
                          ^^^^^^^^ Token(Identifier, "contents", (221,26)->(221,34))
                                   Token(EndOfLine, "\n", (221,34)->(221,34))
      if e->type() == v:t_string
      ^^ Token(Identifier, "if", (222,6)->(222,8))
         ^ Token(Identifier, "e", (222,9)->(222,10))
          ^^ Token(MethodArrow, "->", (222,10)->(222,12))
            ^^^^ Token(Identifier, "type", (222,12)->(222,16))
                ^ Token(LeftParen, "(", (222,16)->(222,17))
                 ^ Token(RightParen, ")", (222,17)->(222,18))
                   ^^ Token(EqualTo, "==", (222,19)->(222,21))
                      ^ Token(Identifier, "v", (222,22)->(222,23))
                       ^ Token(Colon, ":", (222,23)->(222,24))
                        ^^^^^^^^ Token(Identifier, "t_string", (222,24)->(222,32))
                                 Token(EndOfLine, "\n", (222,32)->(222,32))
        hoverText->extend(e->split("\n"))
        ^^^^^^^^^ Token(Identifier, "hoverText", (223,8)->(223,17))
                 ^^ Token(MethodArrow, "->", (223,17)->(223,19))
                   ^^^^^^ Token(Identifier, "extend", (223,19)->(223,25))
                         ^ Token(LeftParen, "(", (223,25)->(223,26))
                          ^ Token(Identifier, "e", (223,26)->(223,27))
                           ^^ Token(MethodArrow, "->", (223,27)->(223,29))
                             ^^^^^ Token(Identifier, "split", (223,29)->(223,34))
                                  ^ Token(LeftParen, "(", (223,34)->(223,35))
                                    ^ Token(DoubleQuoteString, "\\n", (223,36)->(223,37))
                                       ^ Token(RightParen, ")", (223,39)->(223,40))
                                        ^ Token(RightParen, ")", (223,40)->(223,41))
                                          Token(EndOfLine, "\n", (223,41)->(223,41))
      else
      ^^^^ Token(Identifier, "else", (224,6)->(224,10))
           Token(EndOfLine, "\n", (224,10)->(224,10))
        hoverText->extend(e.value->split("\n"))
        ^^^^^^^^^ Token(Identifier, "hoverText", (225,8)->(225,17))
                 ^^ Token(MethodArrow, "->", (225,17)->(225,19))
                   ^^^^^^ Token(Identifier, "extend", (225,19)->(225,25))
                         ^ Token(LeftParen, "(", (225,25)->(225,26))
                          ^ Token(Identifier, "e", (225,26)->(225,27))
                           ^ Token(Dot, ".", (225,27)->(225,28))
                            ^^^^^ Token(Identifier, "value", (225,28)->(225,33))
                                 ^^ Token(MethodArrow, "->", (225,33)->(225,35))
                                   ^^^^^ Token(Identifier, "split", (225,35)->(225,40))
                                        ^ Token(LeftParen, "(", (225,40)->(225,41))
                                          ^ Token(DoubleQuoteString, "\\n", (225,42)->(225,43))
                                             ^ Token(RightParen, ")", (225,45)->(225,46))
                                              ^ Token(RightParen, ")", (225,46)->(225,47))
                                                Token(EndOfLine, "\n", (225,47)->(225,47))
      endif
      ^^^^^ Token(Identifier, "endif", (226,6)->(226,11))
            Token(EndOfLine, "\n", (226,11)->(226,11))
    endfor
    ^^^^^^ Token(Identifier, "endfor", (227,4)->(227,10))
           Token(EndOfLine, "\n", (227,10)->(227,10))
  elseif reply.result.contents->type() == v:t_string
  ^^^^^^ Token(Identifier, "elseif", (228,2)->(228,8))
         ^^^^^ Token(Identifier, "reply", (228,9)->(228,14))
              ^ Token(Dot, ".", (228,14)->(228,15))
               ^^^^^^ Token(Identifier, "result", (228,15)->(228,21))
                     ^ Token(Dot, ".", (228,21)->(228,22))
                      ^^^^^^^^ Token(Identifier, "contents", (228,22)->(228,30))
                              ^^ Token(MethodArrow, "->", (228,30)->(228,32))
                                ^^^^ Token(Identifier, "type", (228,32)->(228,36))
                                    ^ Token(LeftParen, "(", (228,36)->(228,37))
                                     ^ Token(RightParen, ")", (228,37)->(228,38))
                                       ^^ Token(EqualTo, "==", (228,39)->(228,41))
                                          ^ Token(Identifier, "v", (228,42)->(228,43))
                                           ^ Token(Colon, ":", (228,43)->(228,44))
                                            ^^^^^^^^ Token(Identifier, "t_string", (228,44)->(228,52))
                                                     Token(EndOfLine, "\n", (228,52)->(228,52))
    if reply.result.contents->empty()
    ^^ Token(Identifier, "if", (229,4)->(229,6))
       ^^^^^ Token(Identifier, "reply", (229,7)->(229,12))
            ^ Token(Dot, ".", (229,12)->(229,13))
             ^^^^^^ Token(Identifier, "result", (229,13)->(229,19))
                   ^ Token(Dot, ".", (229,19)->(229,20))
                    ^^^^^^^^ Token(Identifier, "contents", (229,20)->(229,28))
                            ^^ Token(MethodArrow, "->", (229,28)->(229,30))
                              ^^^^^ Token(Identifier, "empty", (229,30)->(229,35))
                                   ^ Token(LeftParen, "(", (229,35)->(229,36))
                                    ^ Token(RightParen, ")", (229,36)->(229,37))
                                      Token(EndOfLine, "\n", (229,37)->(229,37))
      return
      ^^^^^^ Token(Identifier, "return", (230,6)->(230,12))
             Token(EndOfLine, "\n", (230,12)->(230,12))
    endif
    ^^^^^ Token(Identifier, "endif", (231,4)->(231,9))
          Token(EndOfLine, "\n", (231,9)->(231,9))
    hoverText->extend(reply.result.contents->split("\n"))
    ^^^^^^^^^ Token(Identifier, "hoverText", (232,4)->(232,13))
             ^^ Token(MethodArrow, "->", (232,13)->(232,15))
               ^^^^^^ Token(Identifier, "extend", (232,15)->(232,21))
                     ^ Token(LeftParen, "(", (232,21)->(232,22))
                      ^^^^^ Token(Identifier, "reply", (232,22)->(232,27))
                           ^ Token(Dot, ".", (232,27)->(232,28))
                            ^^^^^^ Token(Identifier, "result", (232,28)->(232,34))
                                  ^ Token(Dot, ".", (232,34)->(232,35))
                                   ^^^^^^^^ Token(Identifier, "contents", (232,35)->(232,43))
                                           ^^ Token(MethodArrow, "->", (232,43)->(232,45))
                                             ^^^^^ Token(Identifier, "split", (232,45)->(232,50))
                                                  ^ Token(LeftParen, "(", (232,50)->(232,51))
                                                    ^ Token(DoubleQuoteString, "\\n", (232,52)->(232,53))
                                                       ^ Token(RightParen, ")", (232,55)->(232,56))
                                                        ^ Token(RightParen, ")", (232,56)->(232,57))
                                                          Token(EndOfLine, "\n", (232,57)->(232,57))
  else
  ^^^^ Token(Identifier, "else", (233,2)->(233,6))
       Token(EndOfLine, "\n", (233,6)->(233,6))
    util.ErrMsg($'Error: Unsupported hover contents ({reply.result.contents})')
    ^^^^ Token(Identifier, "util", (234,4)->(234,8))
        ^ Token(Dot, ".", (234,8)->(234,9))
         ^^^^^^ Token(Identifier, "ErrMsg", (234,9)->(234,15))
               ^ Token(LeftParen, "(", (234,15)->(234,16))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported hover contents ({reply.result.contents})", (234,18)->(234,76))
                                                                              ^ Token(RightParen, ")", (234,78)->(234,79))
                                                                                Token(EndOfLine, "\n", (234,79)->(234,79))
    return
    ^^^^^^ Token(Identifier, "return", (235,4)->(235,10))
           Token(EndOfLine, "\n", (235,10)->(235,10))
  endif
  ^^^^^ Token(Identifier, "endif", (236,2)->(236,7))
        Token(EndOfLine, "\n", (236,7)->(236,7))
  if opt.lspOptions.hoverInPreview
  ^^ Token(Identifier, "if", (237,2)->(237,4))
     ^^^ Token(Identifier, "opt", (237,5)->(237,8))
        ^ Token(Dot, ".", (237,8)->(237,9))
         ^^^^^^^^^^ Token(Identifier, "lspOptions", (237,9)->(237,19))
                   ^ Token(Dot, ".", (237,19)->(237,20))
                    ^^^^^^^^^^^^^^ Token(Identifier, "hoverInPreview", (237,20)->(237,34))
                                   Token(EndOfLine, "\n", (237,34)->(237,34))
    silent! pedit HoverReply
    ^^^^^^ Token(Identifier, "silent", (238,4)->(238,10))
          ^ Token(Bang, "!", (238,10)->(238,11))
            ^^^^^ Token(Identifier, "pedit", (238,12)->(238,17))
                  ^^^^^^^^^^ Token(Identifier, "HoverReply", (238,18)->(238,28))
                             Token(EndOfLine, "\n", (238,28)->(238,28))
    wincmd P
    ^^^^^^ Token(Identifier, "wincmd", (239,4)->(239,10))
           ^ Token(Identifier, "P", (239,11)->(239,12))
             Token(EndOfLine, "\n", (239,12)->(239,12))
    setlocal buftype=nofile
    ^^^^^^^^ Token(Identifier, "setlocal", (240,4)->(240,12))
             ^^^^^^^ Token(Identifier, "buftype", (240,13)->(240,20))
                    ^ Token(Equal, "=", (240,20)->(240,21))
                     ^^^^^^ Token(Identifier, "nofile", (240,21)->(240,27))
                            Token(EndOfLine, "\n", (240,27)->(240,27))
    setlocal bufhidden=delete
    ^^^^^^^^ Token(Identifier, "setlocal", (241,4)->(241,12))
             ^^^^^^^^^ Token(Identifier, "bufhidden", (241,13)->(241,22))
                      ^ Token(Equal, "=", (241,22)->(241,23))
                       ^^^^^^ Token(Identifier, "delete", (241,23)->(241,29))
                              Token(EndOfLine, "\n", (241,29)->(241,29))
    exe $'setlocal ft={hoverKind}'
    ^^^ Token(Identifier, "exe", (242,4)->(242,7))
          ^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "setlocal ft={hoverKind}", (242,10)->(242,32))
                                   Token(EndOfLine, "\n", (242,34)->(242,34))
    deletebufline(bufnr(), 1, '$')
    ^^^^^^^^^^^^^ Token(Identifier, "deletebufline", (243,4)->(243,17))
                 ^ Token(LeftParen, "(", (243,17)->(243,18))
                  ^^^^^ Token(Identifier, "bufnr", (243,18)->(243,23))
                       ^ Token(LeftParen, "(", (243,23)->(243,24))
                        ^ Token(RightParen, ")", (243,24)->(243,25))
                         ^ Token(Comma, ",", (243,25)->(243,26))
                           ^ Token(Integer, "1", (243,27)->(243,28))
                            ^ Token(Comma, ",", (243,28)->(243,29))
                                Token(SingleQuoteString, "$", (243,31)->(243,31))
                                 ^ Token(RightParen, ")", (243,33)->(243,34))
                                   Token(EndOfLine, "\n", (243,34)->(243,34))
    append(0, hoverText)
    ^^^^^^ Token(Identifier, "append", (244,4)->(244,10))
          ^ Token(LeftParen, "(", (244,10)->(244,11))
           ^ Token(Integer, "0", (244,11)->(244,12))
            ^ Token(Comma, ",", (244,12)->(244,13))
              ^^^^^^^^^ Token(Identifier, "hoverText", (244,14)->(244,23))
                       ^ Token(RightParen, ")", (244,23)->(244,24))
                         Token(EndOfLine, "\n", (244,24)->(244,24))
    cursor(1, 1)
    ^^^^^^ Token(Identifier, "cursor", (245,4)->(245,10))
          ^ Token(LeftParen, "(", (245,10)->(245,11))
           ^ Token(Integer, "1", (245,11)->(245,12))
            ^ Token(Comma, ",", (245,12)->(245,13))
              ^ Token(Integer, "1", (245,14)->(245,15))
               ^ Token(RightParen, ")", (245,15)->(245,16))
                 Token(EndOfLine, "\n", (245,16)->(245,16))
    wincmd p
    ^^^^^^ Token(Identifier, "wincmd", (246,4)->(246,10))
           ^ Token(Identifier, "p", (246,11)->(246,12))
             Token(EndOfLine, "\n", (246,12)->(246,12))
  else
  ^^^^ Token(Identifier, "else", (247,2)->(247,6))
       Token(EndOfLine, "\n", (247,6)->(247,6))
    hoverText->popup_atcursor({moved: 'word'})
    ^^^^^^^^^ Token(Identifier, "hoverText", (248,4)->(248,13))
             ^^ Token(MethodArrow, "->", (248,13)->(248,15))
               ^^^^^^^^^^^^^^ Token(Identifier, "popup_atcursor", (248,15)->(248,29))
                             ^ Token(LeftParen, "(", (248,29)->(248,30))
                              ^ Token(LeftBrace, "{", (248,30)->(248,31))
                               ^^^^^ Token(Identifier, "moved", (248,31)->(248,36))
                                    ^^ Token(SpacedColon, ": ", (248,36)->(248,38))
                                       ^^^ Token(SingleQuoteString, "word", (248,39)->(248,42))
                                            ^ Token(RightBrace, "}", (248,44)->(248,45))
                                             ^ Token(RightParen, ")", (248,45)->(248,46))
                                               Token(EndOfLine, "\n", (248,46)->(248,46))
  endif
  ^^^^^ Token(Identifier, "endif", (249,2)->(249,7))
        Token(EndOfLine, "\n", (249,7)->(249,7))
enddef
^^^^^^ Token(Identifier, "enddef", (250,0)->(250,6))
       Token(EndOfLine, "\n", (250,6)->(250,6))

 Token(EndOfLine, "\n", (251,0)->(251,0))
# process the 'textDocument/references' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/references' reply from the LSP server", (252,0)->(252,65))
# Result: Location[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: Location[] | null", (253,0)->(253,27))
def ProcessReferencesReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (254,0)->(254,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessReferencesReply", (254,4)->(254,26))
                          ^ Token(LeftParen, "(", (254,26)->(254,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (254,27)->(254,36))
                                    ^^ Token(SpacedColon, ": ", (254,36)->(254,38))
                                      ^^^^ Token(Identifier, "dict", (254,38)->(254,42))
                                          ^ Token(AngleLeft, "<", (254,42)->(254,43))
                                           ^^^ Token(Identifier, "any", (254,43)->(254,46))
                                              ^ Token(AngleRight, ">", (254,46)->(254,47))
                                               ^ Token(Comma, ",", (254,47)->(254,48))
                                                 ^^^ Token(Identifier, "req", (254,49)->(254,52))
                                                    ^^ Token(SpacedColon, ": ", (254,52)->(254,54))
                                                      ^^^^ Token(Identifier, "dict", (254,54)->(254,58))
                                                          ^ Token(AngleLeft, "<", (254,58)->(254,59))
                                                           ^^^ Token(Identifier, "any", (254,59)->(254,62))
                                                              ^ Token(AngleRight, ">", (254,62)->(254,63))
                                                               ^ Token(Comma, ",", (254,63)->(254,64))
                                                                 ^^^^^ Token(Identifier, "reply", (254,65)->(254,70))
                                                                      ^^ Token(SpacedColon, ": ", (254,70)->(254,72))
                                                                        ^^^^ Token(Identifier, "dict", (254,72)->(254,76))
                                                                            ^ Token(AngleLeft, "<", (254,76)->(254,77))
                                                                             ^^^ Token(Identifier, "any", (254,77)->(254,80))
                                                                                ^ Token(AngleRight, ">", (254,80)->(254,81))
                                                                                 ^ Token(RightParen, ")", (254,81)->(254,82))
                                                                                  ^^ Token(SpacedColon, ": ", (254,82)->(254,84))
                                                                                    ^^^^ Token(Identifier, "void", (254,84)->(254,88))
                                                                                         Token(EndOfLine, "\n", (254,88)->(254,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (255,2)->(255,4))
     ^^^^^ Token(Identifier, "reply", (255,5)->(255,10))
          ^ Token(Dot, ".", (255,10)->(255,11))
           ^^^^^^ Token(Identifier, "result", (255,11)->(255,17))
                 ^^ Token(MethodArrow, "->", (255,17)->(255,19))
                   ^^^^^ Token(Identifier, "empty", (255,19)->(255,24))
                        ^ Token(LeftParen, "(", (255,24)->(255,25))
                         ^ Token(RightParen, ")", (255,25)->(255,26))
                           Token(EndOfLine, "\n", (255,26)->(255,26))
    util.WarnMsg('Error: No references found')
    ^^^^ Token(Identifier, "util", (256,4)->(256,8))
        ^ Token(Dot, ".", (256,8)->(256,9))
         ^^^^^^^ Token(Identifier, "WarnMsg", (256,9)->(256,16))
                ^ Token(LeftParen, "(", (256,16)->(256,17))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "Error: No references found", (256,18)->(256,43))
                                             ^ Token(RightParen, ")", (256,45)->(256,46))
                                               Token(EndOfLine, "\n", (256,46)->(256,46))
    lspserver.peekSymbol = false
    ^^^^^^^^^ Token(Identifier, "lspserver", (257,4)->(257,13))
             ^ Token(Dot, ".", (257,13)->(257,14))
              ^^^^^^^^^^ Token(Identifier, "peekSymbol", (257,14)->(257,24))
                         ^ Token(Equal, "=", (257,25)->(257,26))
                           ^^^^^ Token(False, "false", (257,27)->(257,32))
                                 Token(EndOfLine, "\n", (257,32)->(257,32))
    return
    ^^^^^^ Token(Identifier, "return", (258,4)->(258,10))
           Token(EndOfLine, "\n", (258,10)->(258,10))
  endif
  ^^^^^ Token(Identifier, "endif", (259,2)->(259,7))
        Token(EndOfLine, "\n", (259,7)->(259,7))

 Token(EndOfLine, "\n", (260,0)->(260,0))
  symbol.ShowReferences(lspserver, reply.result)
  ^^^^^^ Token(Identifier, "symbol", (261,2)->(261,8))
        ^ Token(Dot, ".", (261,8)->(261,9))
         ^^^^^^^^^^^^^^ Token(Identifier, "ShowReferences", (261,9)->(261,23))
                       ^ Token(LeftParen, "(", (261,23)->(261,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (261,24)->(261,33))
                                 ^ Token(Comma, ",", (261,33)->(261,34))
                                   ^^^^^ Token(Identifier, "reply", (261,35)->(261,40))
                                        ^ Token(Dot, ".", (261,40)->(261,41))
                                         ^^^^^^ Token(Identifier, "result", (261,41)->(261,47))
                                               ^ Token(RightParen, ")", (261,47)->(261,48))
                                                 Token(EndOfLine, "\n", (261,48)->(261,48))
enddef
^^^^^^ Token(Identifier, "enddef", (262,0)->(262,6))
       Token(EndOfLine, "\n", (262,6)->(262,6))

 Token(EndOfLine, "\n", (263,0)->(263,0))
# process the 'textDocument/documentHighlight' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/documentHighlight' reply from the LSP server", (264,0)->(264,72))
# Result: DocumentHighlight[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: DocumentHighlight[] | null", (265,0)->(265,36))
def ProcessDocHighlightReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (266,0)->(266,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocHighlightReply", (266,4)->(266,28))
                            ^ Token(LeftParen, "(", (266,28)->(266,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (266,29)->(266,38))
                                      ^^ Token(SpacedColon, ": ", (266,38)->(266,40))
                                        ^^^^ Token(Identifier, "dict", (266,40)->(266,44))
                                            ^ Token(AngleLeft, "<", (266,44)->(266,45))
                                             ^^^ Token(Identifier, "any", (266,45)->(266,48))
                                                ^ Token(AngleRight, ">", (266,48)->(266,49))
                                                 ^ Token(Comma, ",", (266,49)->(266,50))
                                                   ^^^ Token(Identifier, "req", (266,51)->(266,54))
                                                      ^^ Token(SpacedColon, ": ", (266,54)->(266,56))
                                                        ^^^^ Token(Identifier, "dict", (266,56)->(266,60))
                                                            ^ Token(AngleLeft, "<", (266,60)->(266,61))
                                                             ^^^ Token(Identifier, "any", (266,61)->(266,64))
                                                                ^ Token(AngleRight, ">", (266,64)->(266,65))
                                                                 ^ Token(Comma, ",", (266,65)->(266,66))
                                                                   ^^^^^ Token(Identifier, "reply", (266,67)->(266,72))
                                                                        ^^ Token(SpacedColon, ": ", (266,72)->(266,74))
                                                                          ^^^^ Token(Identifier, "dict", (266,74)->(266,78))
                                                                              ^ Token(AngleLeft, "<", (266,78)->(266,79))
                                                                               ^^^ Token(Identifier, "any", (266,79)->(266,82))
                                                                                  ^ Token(AngleRight, ">", (266,82)->(266,83))
                                                                                   ^ Token(RightParen, ")", (266,83)->(266,84))
                                                                                    ^^ Token(SpacedColon, ": ", (266,84)->(266,86))
                                                                                      ^^^^ Token(Identifier, "void", (266,86)->(266,90))
                                                                                           Token(EndOfLine, "\n", (266,90)->(266,90))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (267,2)->(267,4))
     ^^^^^ Token(Identifier, "reply", (267,5)->(267,10))
          ^ Token(Dot, ".", (267,10)->(267,11))
           ^^^^^^ Token(Identifier, "result", (267,11)->(267,17))
                 ^^ Token(MethodArrow, "->", (267,17)->(267,19))
                   ^^^^^ Token(Identifier, "empty", (267,19)->(267,24))
                        ^ Token(LeftParen, "(", (267,24)->(267,25))
                         ^ Token(RightParen, ")", (267,25)->(267,26))
                           Token(EndOfLine, "\n", (267,26)->(267,26))
    return
    ^^^^^^ Token(Identifier, "return", (268,4)->(268,10))
           Token(EndOfLine, "\n", (268,10)->(268,10))
  endif
  ^^^^^ Token(Identifier, "endif", (269,2)->(269,7))
        Token(EndOfLine, "\n", (269,7)->(269,7))

 Token(EndOfLine, "\n", (270,0)->(270,0))
  var fname: string = util.LspUriToFile(req.params.textDocument.uri)
  ^^^ Token(Identifier, "var", (271,2)->(271,5))
      ^^^^^ Token(Identifier, "fname", (271,6)->(271,11))
           ^^ Token(SpacedColon, ": ", (271,11)->(271,13))
             ^^^^^^ Token(Identifier, "string", (271,13)->(271,19))
                    ^ Token(Equal, "=", (271,20)->(271,21))
                      ^^^^ Token(Identifier, "util", (271,22)->(271,26))
                          ^ Token(Dot, ".", (271,26)->(271,27))
                           ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (271,27)->(271,39))
                                       ^ Token(LeftParen, "(", (271,39)->(271,40))
                                        ^^^ Token(Identifier, "req", (271,40)->(271,43))
                                           ^ Token(Dot, ".", (271,43)->(271,44))
                                            ^^^^^^ Token(Identifier, "params", (271,44)->(271,50))
                                                  ^ Token(Dot, ".", (271,50)->(271,51))
                                                   ^^^^^^^^^^^^ Token(Identifier, "textDocument", (271,51)->(271,63))
                                                               ^ Token(Dot, ".", (271,63)->(271,64))
                                                                ^^^ Token(Identifier, "uri", (271,64)->(271,67))
                                                                   ^ Token(RightParen, ")", (271,67)->(271,68))
                                                                     Token(EndOfLine, "\n", (271,68)->(271,68))
  var bnr = fname->bufnr()
  ^^^ Token(Identifier, "var", (272,2)->(272,5))
      ^^^ Token(Identifier, "bnr", (272,6)->(272,9))
          ^ Token(Equal, "=", (272,10)->(272,11))
            ^^^^^ Token(Identifier, "fname", (272,12)->(272,17))
                 ^^ Token(MethodArrow, "->", (272,17)->(272,19))
                   ^^^^^ Token(Identifier, "bufnr", (272,19)->(272,24))
                        ^ Token(LeftParen, "(", (272,24)->(272,25))
                         ^ Token(RightParen, ")", (272,25)->(272,26))
                           Token(EndOfLine, "\n", (272,26)->(272,26))

 Token(EndOfLine, "\n", (273,0)->(273,0))
  for docHL in reply.result
  ^^^ Token(Identifier, "for", (274,2)->(274,5))
      ^^^^^ Token(Identifier, "docHL", (274,6)->(274,11))
            ^^ Token(Identifier, "in", (274,12)->(274,14))
               ^^^^^ Token(Identifier, "reply", (274,15)->(274,20))
                    ^ Token(Dot, ".", (274,20)->(274,21))
                     ^^^^^^ Token(Identifier, "result", (274,21)->(274,27))
                            Token(EndOfLine, "\n", (274,27)->(274,27))
    var kind: number = docHL->get('kind', 1)
    ^^^ Token(Identifier, "var", (275,4)->(275,7))
        ^^^^ Token(Identifier, "kind", (275,8)->(275,12))
            ^^ Token(SpacedColon, ": ", (275,12)->(275,14))
              ^^^^^^ Token(Identifier, "number", (275,14)->(275,20))
                     ^ Token(Equal, "=", (275,21)->(275,22))
                       ^^^^^ Token(Identifier, "docHL", (275,23)->(275,28))
                            ^^ Token(MethodArrow, "->", (275,28)->(275,30))
                              ^^^ Token(Identifier, "get", (275,30)->(275,33))
                                 ^ Token(LeftParen, "(", (275,33)->(275,34))
                                   ^^^ Token(SingleQuoteString, "kind", (275,35)->(275,38))
                                        ^ Token(Comma, ",", (275,40)->(275,41))
                                          ^ Token(Integer, "1", (275,42)->(275,43))
                                           ^ Token(RightParen, ")", (275,43)->(275,44))
                                             Token(EndOfLine, "\n", (275,44)->(275,44))
    var propName: string
    ^^^ Token(Identifier, "var", (276,4)->(276,7))
        ^^^^^^^^ Token(Identifier, "propName", (276,8)->(276,16))
                ^^ Token(SpacedColon, ": ", (276,16)->(276,18))
                  ^^^^^^ Token(Identifier, "string", (276,18)->(276,24))
                         Token(EndOfLine, "\n", (276,24)->(276,24))
    if kind == 2
    ^^ Token(Identifier, "if", (277,4)->(277,6))
       ^^^^ Token(Identifier, "kind", (277,7)->(277,11))
            ^^ Token(EqualTo, "==", (277,12)->(277,14))
               ^ Token(Integer, "2", (277,15)->(277,16))
                 Token(EndOfLine, "\n", (277,16)->(277,16))
      # Read-access
      ^^^^^^^^^^^^^ Token(Comment, "# Read-access", (278,6)->(278,19))
      propName = 'LspReadRef'
      ^^^^^^^^ Token(Identifier, "propName", (279,6)->(279,14))
               ^ Token(Equal, "=", (279,15)->(279,16))
                  ^^^^^^^^^ Token(SingleQuoteString, "LspReadRef", (279,18)->(279,27))
                              Token(EndOfLine, "\n", (279,29)->(279,29))
    elseif kind == 3
    ^^^^^^ Token(Identifier, "elseif", (280,4)->(280,10))
           ^^^^ Token(Identifier, "kind", (280,11)->(280,15))
                ^^ Token(EqualTo, "==", (280,16)->(280,18))
                   ^ Token(Integer, "3", (280,19)->(280,20))
                     Token(EndOfLine, "\n", (280,20)->(280,20))
      # Write-access
      ^^^^^^^^^^^^^^ Token(Comment, "# Write-access", (281,6)->(281,20))
      propName = 'LspWriteRef'
      ^^^^^^^^ Token(Identifier, "propName", (282,6)->(282,14))
               ^ Token(Equal, "=", (282,15)->(282,16))
                  ^^^^^^^^^^ Token(SingleQuoteString, "LspWriteRef", (282,18)->(282,28))
                               Token(EndOfLine, "\n", (282,30)->(282,30))
    else
    ^^^^ Token(Identifier, "else", (283,4)->(283,8))
         Token(EndOfLine, "\n", (283,8)->(283,8))
      # textual reference
      ^^^^^^^^^^^^^^^^^^^ Token(Comment, "# textual reference", (284,6)->(284,25))
      propName = 'LspTextRef'
      ^^^^^^^^ Token(Identifier, "propName", (285,6)->(285,14))
               ^ Token(Equal, "=", (285,15)->(285,16))
                  ^^^^^^^^^ Token(SingleQuoteString, "LspTextRef", (285,18)->(285,27))
                              Token(EndOfLine, "\n", (285,29)->(285,29))
    endif
    ^^^^^ Token(Identifier, "endif", (286,4)->(286,9))
          Token(EndOfLine, "\n", (286,9)->(286,9))
    prop_add(docHL.range.start.line + 1,
    ^^^^^^^^ Token(Identifier, "prop_add", (287,4)->(287,12))
            ^ Token(LeftParen, "(", (287,12)->(287,13))
             ^^^^^ Token(Identifier, "docHL", (287,13)->(287,18))
                  ^ Token(Dot, ".", (287,18)->(287,19))
                   ^^^^^ Token(Identifier, "range", (287,19)->(287,24))
                        ^ Token(Dot, ".", (287,24)->(287,25))
                         ^^^^^ Token(Identifier, "start", (287,25)->(287,30))
                              ^ Token(Dot, ".", (287,30)->(287,31))
                               ^^^^ Token(Identifier, "line", (287,31)->(287,35))
                                    ^ Token(Plus, "+", (287,36)->(287,37))
                                      ^ Token(Integer, "1", (287,38)->(287,39))
                                       ^ Token(Comma, ",", (287,39)->(287,40))
                                         Token(EndOfLine, "\n", (287,40)->(287,40))
		util.GetLineByteFromPos(bnr, docHL.range.start) + 1,
  ^^^^ Token(Identifier, "util", (288,2)->(288,6))
      ^ Token(Dot, ".", (288,6)->(288,7))
       ^^^^^^^^^^^^^^^^^^ Token(Identifier, "GetLineByteFromPos", (288,7)->(288,25))
                         ^ Token(LeftParen, "(", (288,25)->(288,26))
                          ^^^ Token(Identifier, "bnr", (288,26)->(288,29))
                             ^ Token(Comma, ",", (288,29)->(288,30))
                               ^^^^^ Token(Identifier, "docHL", (288,31)->(288,36))
                                    ^ Token(Dot, ".", (288,36)->(288,37))
                                     ^^^^^ Token(Identifier, "range", (288,37)->(288,42))
                                          ^ Token(Dot, ".", (288,42)->(288,43))
                                           ^^^^^ Token(Identifier, "start", (288,43)->(288,48))
                                                ^ Token(RightParen, ")", (288,48)->(288,49))
                                                  ^ Token(Plus, "+", (288,50)->(288,51))
                                                    ^ Token(Integer, "1", (288,52)->(288,53))
                                                     ^ Token(Comma, ",", (288,53)->(288,54))
                                                       Token(EndOfLine, "\n", (288,54)->(288,54))
		{end_lnum: docHL.range.end.line + 1,
  ^ Token(LeftBrace, "{", (289,2)->(289,3))
   ^^^^^^^^ Token(Identifier, "end_lnum", (289,3)->(289,11))
           ^^ Token(SpacedColon, ": ", (289,11)->(289,13))
             ^^^^^ Token(Identifier, "docHL", (289,13)->(289,18))
                  ^ Token(Dot, ".", (289,18)->(289,19))
                   ^^^^^ Token(Identifier, "range", (289,19)->(289,24))
                        ^ Token(Dot, ".", (289,24)->(289,25))
                         ^^^ Token(Identifier, "end", (289,25)->(289,28))
                            ^ Token(Dot, ".", (289,28)->(289,29))
                             ^^^^ Token(Identifier, "line", (289,29)->(289,33))
                                  ^ Token(Plus, "+", (289,34)->(289,35))
                                    ^ Token(Integer, "1", (289,36)->(289,37))
                                     ^ Token(Comma, ",", (289,37)->(289,38))
                                       Token(EndOfLine, "\n", (289,38)->(289,38))
		  end_col: util.GetLineByteFromPos(bnr, docHL.range.end) + 1,
    ^^^^^^^ Token(Identifier, "end_col", (290,4)->(290,11))
           ^^ Token(SpacedColon, ": ", (290,11)->(290,13))
             ^^^^ Token(Identifier, "util", (290,13)->(290,17))
                 ^ Token(Dot, ".", (290,17)->(290,18))
                  ^^^^^^^^^^^^^^^^^^ Token(Identifier, "GetLineByteFromPos", (290,18)->(290,36))
                                    ^ Token(LeftParen, "(", (290,36)->(290,37))
                                     ^^^ Token(Identifier, "bnr", (290,37)->(290,40))
                                        ^ Token(Comma, ",", (290,40)->(290,41))
                                          ^^^^^ Token(Identifier, "docHL", (290,42)->(290,47))
                                               ^ Token(Dot, ".", (290,47)->(290,48))
                                                ^^^^^ Token(Identifier, "range", (290,48)->(290,53))
                                                     ^ Token(Dot, ".", (290,53)->(290,54))
                                                      ^^^ Token(Identifier, "end", (290,54)->(290,57))
                                                         ^ Token(RightParen, ")", (290,57)->(290,58))
                                                           ^ Token(Plus, "+", (290,59)->(290,60))
                                                             ^ Token(Integer, "1", (290,61)->(290,62))
                                                              ^ Token(Comma, ",", (290,62)->(290,63))
                                                                Token(EndOfLine, "\n", (290,63)->(290,63))
		  bufnr: bnr,
    ^^^^^ Token(Identifier, "bufnr", (291,4)->(291,9))
         ^^ Token(SpacedColon, ": ", (291,9)->(291,11))
           ^^^ Token(Identifier, "bnr", (291,11)->(291,14))
              ^ Token(Comma, ",", (291,14)->(291,15))
                Token(EndOfLine, "\n", (291,15)->(291,15))
		  type: propName})
    ^^^^ Token(Identifier, "type", (292,4)->(292,8))
        ^^ Token(SpacedColon, ": ", (292,8)->(292,10))
          ^^^^^^^^ Token(Identifier, "propName", (292,10)->(292,18))
                  ^ Token(RightBrace, "}", (292,18)->(292,19))
                   ^ Token(RightParen, ")", (292,19)->(292,20))
                     Token(EndOfLine, "\n", (292,20)->(292,20))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (293,2)->(293,8))
         Token(EndOfLine, "\n", (293,8)->(293,8))
enddef
^^^^^^ Token(Identifier, "enddef", (294,0)->(294,6))
       Token(EndOfLine, "\n", (294,6)->(294,6))

 Token(EndOfLine, "\n", (295,0)->(295,0))
# map the LSP symbol kind number to string
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# map the LSP symbol kind number to string", (296,0)->(296,42))
def LspSymbolKindToName(symkind: number): string
^^^ Token(Identifier, "def", (297,0)->(297,3))
    ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspSymbolKindToName", (297,4)->(297,23))
                       ^ Token(LeftParen, "(", (297,23)->(297,24))
                        ^^^^^^^ Token(Identifier, "symkind", (297,24)->(297,31))
                               ^^ Token(SpacedColon, ": ", (297,31)->(297,33))
                                 ^^^^^^ Token(Identifier, "number", (297,33)->(297,39))
                                       ^ Token(RightParen, ")", (297,39)->(297,40))
                                        ^^ Token(SpacedColon, ": ", (297,40)->(297,42))
                                          ^^^^^^ Token(Identifier, "string", (297,42)->(297,48))
                                                 Token(EndOfLine, "\n", (297,48)->(297,48))
  var symbolMap: list<string> = ['', 'File', 'Module', 'Namespace', 'Package',
  ^^^ Token(Identifier, "var", (298,2)->(298,5))
      ^^^^^^^^^ Token(Identifier, "symbolMap", (298,6)->(298,15))
               ^^ Token(SpacedColon, ": ", (298,15)->(298,17))
                 ^^^^ Token(Identifier, "list", (298,17)->(298,21))
                     ^ Token(AngleLeft, "<", (298,21)->(298,22))
                      ^^^^^^ Token(Identifier, "string", (298,22)->(298,28))
                            ^ Token(GreaterThan, ">", (298,28)->(298,29))
                              ^ Token(Equal, "=", (298,30)->(298,31))
                                ^ Token(LeftBracket, "[", (298,32)->(298,33))
                                   Token(SingleQuoteString, "", (298,34)->(298,34))
                                   ^ Token(Comma, ",", (298,35)->(298,36))
                                      ^^^ Token(SingleQuoteString, "File", (298,38)->(298,41))
                                           ^ Token(Comma, ",", (298,43)->(298,44))
                                              ^^^^^ Token(SingleQuoteString, "Module", (298,46)->(298,51))
                                                     ^ Token(Comma, ",", (298,53)->(298,54))
                                                        ^^^^^^^^ Token(SingleQuoteString, "Namespace", (298,56)->(298,64))
                                                                  ^ Token(Comma, ",", (298,66)->(298,67))
                                                                     ^^^^^^ Token(SingleQuoteString, "Package", (298,69)->(298,75))
                                                                             ^ Token(Comma, ",", (298,77)->(298,78))
                                                                               Token(EndOfLine, "\n", (298,78)->(298,78))
	'Class', 'Method', 'Property', 'Field', 'Constructor', 'Enum',
  ^^^^ Token(SingleQuoteString, "Class", (299,2)->(299,6))
        ^ Token(Comma, ",", (299,8)->(299,9))
           ^^^^^ Token(SingleQuoteString, "Method", (299,11)->(299,16))
                  ^ Token(Comma, ",", (299,18)->(299,19))
                     ^^^^^^^ Token(SingleQuoteString, "Property", (299,21)->(299,28))
                              ^ Token(Comma, ",", (299,30)->(299,31))
                                 ^^^^ Token(SingleQuoteString, "Field", (299,33)->(299,37))
                                       ^ Token(Comma, ",", (299,39)->(299,40))
                                          ^^^^^^^^^^ Token(SingleQuoteString, "Constructor", (299,42)->(299,52))
                                                      ^ Token(Comma, ",", (299,54)->(299,55))
                                                         ^^^ Token(SingleQuoteString, "Enum", (299,57)->(299,60))
                                                              ^ Token(Comma, ",", (299,62)->(299,63))
                                                                Token(EndOfLine, "\n", (299,63)->(299,63))
	'Interface', 'Function', 'Variable', 'Constant', 'String', 'Number',
  ^^^^^^^^ Token(SingleQuoteString, "Interface", (300,2)->(300,10))
            ^ Token(Comma, ",", (300,12)->(300,13))
               ^^^^^^^ Token(SingleQuoteString, "Function", (300,15)->(300,22))
                        ^ Token(Comma, ",", (300,24)->(300,25))
                           ^^^^^^^ Token(SingleQuoteString, "Variable", (300,27)->(300,34))
                                    ^ Token(Comma, ",", (300,36)->(300,37))
                                       ^^^^^^^ Token(SingleQuoteString, "Constant", (300,39)->(300,46))
                                                ^ Token(Comma, ",", (300,48)->(300,49))
                                                   ^^^^^ Token(SingleQuoteString, "String", (300,51)->(300,56))
                                                          ^ Token(Comma, ",", (300,58)->(300,59))
                                                             ^^^^^ Token(SingleQuoteString, "Number", (300,61)->(300,66))
                                                                    ^ Token(Comma, ",", (300,68)->(300,69))
                                                                      Token(EndOfLine, "\n", (300,69)->(300,69))
	'Boolean', 'Array', 'Object', 'Key', 'Null', 'EnumMember', 'Struct',
  ^^^^^^ Token(SingleQuoteString, "Boolean", (301,2)->(301,8))
          ^ Token(Comma, ",", (301,10)->(301,11))
             ^^^^ Token(SingleQuoteString, "Array", (301,13)->(301,17))
                   ^ Token(Comma, ",", (301,19)->(301,20))
                      ^^^^^ Token(SingleQuoteString, "Object", (301,22)->(301,27))
                             ^ Token(Comma, ",", (301,29)->(301,30))
                                ^^ Token(SingleQuoteString, "Key", (301,32)->(301,34))
                                    ^ Token(Comma, ",", (301,36)->(301,37))
                                       ^^^ Token(SingleQuoteString, "Null", (301,39)->(301,42))
                                            ^ Token(Comma, ",", (301,44)->(301,45))
                                               ^^^^^^^^^ Token(SingleQuoteString, "EnumMember", (301,47)->(301,56))
                                                          ^ Token(Comma, ",", (301,58)->(301,59))
                                                             ^^^^^ Token(SingleQuoteString, "Struct", (301,61)->(301,66))
                                                                    ^ Token(Comma, ",", (301,68)->(301,69))
                                                                      Token(EndOfLine, "\n", (301,69)->(301,69))
	'Event', 'Operator', 'TypeParameter']
  ^^^^ Token(SingleQuoteString, "Event", (302,2)->(302,6))
        ^ Token(Comma, ",", (302,8)->(302,9))
           ^^^^^^^ Token(SingleQuoteString, "Operator", (302,11)->(302,18))
                    ^ Token(Comma, ",", (302,20)->(302,21))
                       ^^^^^^^^^^^^ Token(SingleQuoteString, "TypeParameter", (302,23)->(302,35))
                                     ^ Token(RightBracket, "]", (302,37)->(302,38))
                                       Token(EndOfLine, "\n", (302,38)->(302,38))
  if symkind > 26
  ^^ Token(Identifier, "if", (303,2)->(303,4))
     ^^^^^^^ Token(Identifier, "symkind", (303,5)->(303,12))
             ^ Token(GreaterThan, ">", (303,13)->(303,14))
               ^^ Token(Integer, "26", (303,15)->(303,17))
                  Token(EndOfLine, "\n", (303,17)->(303,17))
    return ''
    ^^^^^^ Token(Identifier, "return", (304,4)->(304,10))
             Token(SingleQuoteString, "", (304,12)->(304,12))
              Token(EndOfLine, "\n", (304,13)->(304,13))
  endif
  ^^^^^ Token(Identifier, "endif", (305,2)->(305,7))
        Token(EndOfLine, "\n", (305,7)->(305,7))
  return symbolMap[symkind]
  ^^^^^^ Token(Identifier, "return", (306,2)->(306,8))
         ^^^^^^^^^ Token(Identifier, "symbolMap", (306,9)->(306,18))
                  ^ Token(LeftBracket, "[", (306,18)->(306,19))
                   ^^^^^^^ Token(Identifier, "symkind", (306,19)->(306,26))
                          ^ Token(RightBracket, "]", (306,26)->(306,27))
                            Token(EndOfLine, "\n", (306,27)->(306,27))
enddef
^^^^^^ Token(Identifier, "enddef", (307,0)->(307,6))
       Token(EndOfLine, "\n", (307,6)->(307,6))

 Token(EndOfLine, "\n", (308,0)->(308,0))
# process SymbolInformation[]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process SymbolInformation[]", (309,0)->(309,29))
def ProcessSymbolInfoTable(symbolInfoTable: list<dict<any>>,
^^^ Token(Identifier, "def", (310,0)->(310,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSymbolInfoTable", (310,4)->(310,26))
                          ^ Token(LeftParen, "(", (310,26)->(310,27))
                           ^^^^^^^^^^^^^^^ Token(Identifier, "symbolInfoTable", (310,27)->(310,42))
                                          ^^ Token(SpacedColon, ": ", (310,42)->(310,44))
                                            ^^^^ Token(Identifier, "list", (310,44)->(310,48))
                                                ^ Token(AngleLeft, "<", (310,48)->(310,49))
                                                 ^^^^ Token(Identifier, "dict", (310,49)->(310,53))
                                                     ^ Token(AngleLeft, "<", (310,53)->(310,54))
                                                      ^^^ Token(Identifier, "any", (310,54)->(310,57))
                                                         ^ Token(AngleRight, ">", (310,57)->(310,58))
                                                          ^ Token(AngleRight, ">", (310,58)->(310,59))
                                                           ^ Token(Comma, ",", (310,59)->(310,60))
                                                             Token(EndOfLine, "\n", (310,60)->(310,60))
				symbolTypeTable: dict<list<dict<any>>>,
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (311,4)->(311,19))
                   ^^ Token(SpacedColon, ": ", (311,19)->(311,21))
                     ^^^^ Token(Identifier, "dict", (311,21)->(311,25))
                         ^ Token(AngleLeft, "<", (311,25)->(311,26))
                          ^^^^ Token(Identifier, "list", (311,26)->(311,30))
                              ^ Token(AngleLeft, "<", (311,30)->(311,31))
                               ^^^^ Token(Identifier, "dict", (311,31)->(311,35))
                                   ^ Token(AngleLeft, "<", (311,35)->(311,36))
                                    ^^^ Token(Identifier, "any", (311,36)->(311,39))
                                       ^ Token(AngleRight, ">", (311,39)->(311,40))
                                        ^ Token(AngleRight, ">", (311,40)->(311,41))
                                         ^ Token(AngleRight, ">", (311,41)->(311,42))
                                          ^ Token(Comma, ",", (311,42)->(311,43))
                                            Token(EndOfLine, "\n", (311,43)->(311,43))
				symbolLineTable: list<dict<any>>)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (312,4)->(312,19))
                   ^^ Token(SpacedColon, ": ", (312,19)->(312,21))
                     ^^^^ Token(Identifier, "list", (312,21)->(312,25))
                         ^ Token(AngleLeft, "<", (312,25)->(312,26))
                          ^^^^ Token(Identifier, "dict", (312,26)->(312,30))
                              ^ Token(AngleLeft, "<", (312,30)->(312,31))
                               ^^^ Token(Identifier, "any", (312,31)->(312,34))
                                  ^ Token(AngleRight, ">", (312,34)->(312,35))
                                   ^ Token(AngleRight, ">", (312,35)->(312,36))
                                    ^ Token(RightParen, ")", (312,36)->(312,37))
                                      Token(EndOfLine, "\n", (312,37)->(312,37))
  var fname: string
  ^^^ Token(Identifier, "var", (313,2)->(313,5))
      ^^^^^ Token(Identifier, "fname", (313,6)->(313,11))
           ^^ Token(SpacedColon, ": ", (313,11)->(313,13))
             ^^^^^^ Token(Identifier, "string", (313,13)->(313,19))
                    Token(EndOfLine, "\n", (313,19)->(313,19))
  var symbolType: string
  ^^^ Token(Identifier, "var", (314,2)->(314,5))
      ^^^^^^^^^^ Token(Identifier, "symbolType", (314,6)->(314,16))
                ^^ Token(SpacedColon, ": ", (314,16)->(314,18))
                  ^^^^^^ Token(Identifier, "string", (314,18)->(314,24))
                         Token(EndOfLine, "\n", (314,24)->(314,24))
  var name: string
  ^^^ Token(Identifier, "var", (315,2)->(315,5))
      ^^^^ Token(Identifier, "name", (315,6)->(315,10))
          ^^ Token(SpacedColon, ": ", (315,10)->(315,12))
            ^^^^^^ Token(Identifier, "string", (315,12)->(315,18))
                   Token(EndOfLine, "\n", (315,18)->(315,18))
  var r: dict<dict<number>>
  ^^^ Token(Identifier, "var", (316,2)->(316,5))
      ^ Token(Identifier, "r", (316,6)->(316,7))
       ^^ Token(SpacedColon, ": ", (316,7)->(316,9))
         ^^^^ Token(Identifier, "dict", (316,9)->(316,13))
             ^ Token(AngleLeft, "<", (316,13)->(316,14))
              ^^^^ Token(Identifier, "dict", (316,14)->(316,18))
                  ^ Token(AngleLeft, "<", (316,18)->(316,19))
                   ^^^^^^ Token(Identifier, "number", (316,19)->(316,25))
                         ^ Token(AngleRight, ">", (316,25)->(316,26))
                          ^ Token(GreaterThan, ">", (316,26)->(316,27))
                            Token(EndOfLine, "\n", (316,27)->(316,27))
  var symInfo: dict<any>
  ^^^ Token(Identifier, "var", (317,2)->(317,5))
      ^^^^^^^ Token(Identifier, "symInfo", (317,6)->(317,13))
             ^^ Token(SpacedColon, ": ", (317,13)->(317,15))
               ^^^^ Token(Identifier, "dict", (317,15)->(317,19))
                   ^ Token(AngleLeft, "<", (317,19)->(317,20))
                    ^^^ Token(Identifier, "any", (317,20)->(317,23))
                       ^ Token(GreaterThan, ">", (317,23)->(317,24))
                         Token(EndOfLine, "\n", (317,24)->(317,24))

 Token(EndOfLine, "\n", (318,0)->(318,0))
  for symbol in symbolInfoTable
  ^^^ Token(Identifier, "for", (319,2)->(319,5))
      ^^^^^^ Token(Identifier, "symbol", (319,6)->(319,12))
             ^^ Token(Identifier, "in", (319,13)->(319,15))
                ^^^^^^^^^^^^^^^ Token(Identifier, "symbolInfoTable", (319,16)->(319,31))
                                Token(EndOfLine, "\n", (319,31)->(319,31))
    fname = util.LspUriToFile(symbol.location.uri)
    ^^^^^ Token(Identifier, "fname", (320,4)->(320,9))
          ^ Token(Equal, "=", (320,10)->(320,11))
            ^^^^ Token(Identifier, "util", (320,12)->(320,16))
                ^ Token(Dot, ".", (320,16)->(320,17))
                 ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (320,17)->(320,29))
                             ^ Token(LeftParen, "(", (320,29)->(320,30))
                              ^^^^^^ Token(Identifier, "symbol", (320,30)->(320,36))
                                    ^ Token(Dot, ".", (320,36)->(320,37))
                                     ^^^^^^^^ Token(Identifier, "location", (320,37)->(320,45))
                                             ^ Token(Dot, ".", (320,45)->(320,46))
                                              ^^^ Token(Identifier, "uri", (320,46)->(320,49))
                                                 ^ Token(RightParen, ")", (320,49)->(320,50))
                                                   Token(EndOfLine, "\n", (320,50)->(320,50))
    symbolType = LspSymbolKindToName(symbol.kind)
    ^^^^^^^^^^ Token(Identifier, "symbolType", (321,4)->(321,14))
               ^ Token(Equal, "=", (321,15)->(321,16))
                 ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspSymbolKindToName", (321,17)->(321,36))
                                    ^ Token(LeftParen, "(", (321,36)->(321,37))
                                     ^^^^^^ Token(Identifier, "symbol", (321,37)->(321,43))
                                           ^ Token(Dot, ".", (321,43)->(321,44))
                                            ^^^^ Token(Identifier, "kind", (321,44)->(321,48))
                                                ^ Token(RightParen, ")", (321,48)->(321,49))
                                                  Token(EndOfLine, "\n", (321,49)->(321,49))
    name = symbol.name
    ^^^^ Token(Identifier, "name", (322,4)->(322,8))
         ^ Token(Equal, "=", (322,9)->(322,10))
           ^^^^^^ Token(Identifier, "symbol", (322,11)->(322,17))
                 ^ Token(Dot, ".", (322,17)->(322,18))
                  ^^^^ Token(Identifier, "name", (322,18)->(322,22))
                       Token(EndOfLine, "\n", (322,22)->(322,22))
    if symbol->has_key('containerName')
    ^^ Token(Identifier, "if", (323,4)->(323,6))
       ^^^^^^ Token(Identifier, "symbol", (323,7)->(323,13))
             ^^ Token(MethodArrow, "->", (323,13)->(323,15))
               ^^^^^^^ Token(Identifier, "has_key", (323,15)->(323,22))
                      ^ Token(LeftParen, "(", (323,22)->(323,23))
                        ^^^^^^^^^^^^ Token(SingleQuoteString, "containerName", (323,24)->(323,36))
                                      ^ Token(RightParen, ")", (323,38)->(323,39))
                                        Token(EndOfLine, "\n", (323,39)->(323,39))
      if symbol.containerName != ''
      ^^ Token(Identifier, "if", (324,6)->(324,8))
         ^^^^^^ Token(Identifier, "symbol", (324,9)->(324,15))
               ^ Token(Dot, ".", (324,15)->(324,16))
                ^^^^^^^^^^^^^ Token(Identifier, "containerName", (324,16)->(324,29))
                              ^^ Token(NotEqualTo, "!=", (324,30)->(324,32))
                                   Token(SingleQuoteString, "", (324,34)->(324,34))
                                    Token(EndOfLine, "\n", (324,35)->(324,35))
	name ..= $' [{symbol.containerName}]'
 ^^^^ Token(Identifier, "name", (325,1)->(325,5))
      ^^^ Token(StringConcatEquals, "..=", (325,6)->(325,9))
            ^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, " [{symbol.containerName}]", (325,12)->(325,36))
                                       Token(EndOfLine, "\n", (325,38)->(325,38))
      endif
      ^^^^^ Token(Identifier, "endif", (326,6)->(326,11))
            Token(EndOfLine, "\n", (326,11)->(326,11))
    endif
    ^^^^^ Token(Identifier, "endif", (327,4)->(327,9))
          Token(EndOfLine, "\n", (327,9)->(327,9))
    r = symbol.location.range
    ^ Token(Identifier, "r", (328,4)->(328,5))
      ^ Token(Equal, "=", (328,6)->(328,7))
        ^^^^^^ Token(Identifier, "symbol", (328,8)->(328,14))
              ^ Token(Dot, ".", (328,14)->(328,15))
               ^^^^^^^^ Token(Identifier, "location", (328,15)->(328,23))
                       ^ Token(Dot, ".", (328,23)->(328,24))
                        ^^^^^ Token(Identifier, "range", (328,24)->(328,29))
                              Token(EndOfLine, "\n", (328,29)->(328,29))

 Token(EndOfLine, "\n", (329,0)->(329,0))
    if !symbolTypeTable->has_key(symbolType)
    ^^ Token(Identifier, "if", (330,4)->(330,6))
       ^ Token(Bang, "!", (330,7)->(330,8))
        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (330,8)->(330,23))
                       ^^ Token(MethodArrow, "->", (330,23)->(330,25))
                         ^^^^^^^ Token(Identifier, "has_key", (330,25)->(330,32))
                                ^ Token(LeftParen, "(", (330,32)->(330,33))
                                 ^^^^^^^^^^ Token(Identifier, "symbolType", (330,33)->(330,43))
                                           ^ Token(RightParen, ")", (330,43)->(330,44))
                                             Token(EndOfLine, "\n", (330,44)->(330,44))
      symbolTypeTable[symbolType] = []
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (331,6)->(331,21))
                     ^ Token(LeftBracket, "[", (331,21)->(331,22))
                      ^^^^^^^^^^ Token(Identifier, "symbolType", (331,22)->(331,32))
                                ^ Token(RightBracket, "]", (331,32)->(331,33))
                                  ^ Token(Equal, "=", (331,34)->(331,35))
                                    ^ Token(LeftBracket, "[", (331,36)->(331,37))
                                     ^ Token(RightBracket, "]", (331,37)->(331,38))
                                       Token(EndOfLine, "\n", (331,38)->(331,38))
    endif
    ^^^^^ Token(Identifier, "endif", (332,4)->(332,9))
          Token(EndOfLine, "\n", (332,9)->(332,9))
    symInfo = {name: name, range: r}
    ^^^^^^^ Token(Identifier, "symInfo", (333,4)->(333,11))
            ^ Token(Equal, "=", (333,12)->(333,13))
              ^ Token(LeftBrace, "{", (333,14)->(333,15))
               ^^^^ Token(Identifier, "name", (333,15)->(333,19))
                   ^^ Token(SpacedColon, ": ", (333,19)->(333,21))
                     ^^^^ Token(Identifier, "name", (333,21)->(333,25))
                         ^ Token(Comma, ",", (333,25)->(333,26))
                           ^^^^^ Token(Identifier, "range", (333,27)->(333,32))
                                ^^ Token(SpacedColon, ": ", (333,32)->(333,34))
                                  ^ Token(Identifier, "r", (333,34)->(333,35))
                                   ^ Token(RightBrace, "}", (333,35)->(333,36))
                                     Token(EndOfLine, "\n", (333,36)->(333,36))
    symbolTypeTable[symbolType]->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (334,4)->(334,19))
                   ^ Token(LeftBracket, "[", (334,19)->(334,20))
                    ^^^^^^^^^^ Token(Identifier, "symbolType", (334,20)->(334,30))
                              ^ Token(RightBracket, "]", (334,30)->(334,31))
                               ^^ Token(MethodArrow, "->", (334,31)->(334,33))
                                 ^^^ Token(Identifier, "add", (334,33)->(334,36))
                                    ^ Token(LeftParen, "(", (334,36)->(334,37))
                                     ^^^^^^^ Token(Identifier, "symInfo", (334,37)->(334,44))
                                            ^ Token(RightParen, ")", (334,44)->(334,45))
                                              Token(EndOfLine, "\n", (334,45)->(334,45))
    symbolLineTable->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (335,4)->(335,19))
                   ^^ Token(MethodArrow, "->", (335,19)->(335,21))
                     ^^^ Token(Identifier, "add", (335,21)->(335,24))
                        ^ Token(LeftParen, "(", (335,24)->(335,25))
                         ^^^^^^^ Token(Identifier, "symInfo", (335,25)->(335,32))
                                ^ Token(RightParen, ")", (335,32)->(335,33))
                                  Token(EndOfLine, "\n", (335,33)->(335,33))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (336,2)->(336,8))
         Token(EndOfLine, "\n", (336,8)->(336,8))
enddef
^^^^^^ Token(Identifier, "enddef", (337,0)->(337,6))
       Token(EndOfLine, "\n", (337,6)->(337,6))

 Token(EndOfLine, "\n", (338,0)->(338,0))
# process DocumentSymbol[]
^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process DocumentSymbol[]", (339,0)->(339,26))
def ProcessDocSymbolTable(docSymbolTable: list<dict<any>>,
^^^ Token(Identifier, "def", (340,0)->(340,3))
    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolTable", (340,4)->(340,25))
                         ^ Token(LeftParen, "(", (340,25)->(340,26))
                          ^^^^^^^^^^^^^^ Token(Identifier, "docSymbolTable", (340,26)->(340,40))
                                        ^^ Token(SpacedColon, ": ", (340,40)->(340,42))
                                          ^^^^ Token(Identifier, "list", (340,42)->(340,46))
                                              ^ Token(AngleLeft, "<", (340,46)->(340,47))
                                               ^^^^ Token(Identifier, "dict", (340,47)->(340,51))
                                                   ^ Token(AngleLeft, "<", (340,51)->(340,52))
                                                    ^^^ Token(Identifier, "any", (340,52)->(340,55))
                                                       ^ Token(AngleRight, ">", (340,55)->(340,56))
                                                        ^ Token(AngleRight, ">", (340,56)->(340,57))
                                                         ^ Token(Comma, ",", (340,57)->(340,58))
                                                           Token(EndOfLine, "\n", (340,58)->(340,58))
				symbolTypeTable: dict<list<dict<any>>>,
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (341,4)->(341,19))
                   ^^ Token(SpacedColon, ": ", (341,19)->(341,21))
                     ^^^^ Token(Identifier, "dict", (341,21)->(341,25))
                         ^ Token(AngleLeft, "<", (341,25)->(341,26))
                          ^^^^ Token(Identifier, "list", (341,26)->(341,30))
                              ^ Token(AngleLeft, "<", (341,30)->(341,31))
                               ^^^^ Token(Identifier, "dict", (341,31)->(341,35))
                                   ^ Token(AngleLeft, "<", (341,35)->(341,36))
                                    ^^^ Token(Identifier, "any", (341,36)->(341,39))
                                       ^ Token(AngleRight, ">", (341,39)->(341,40))
                                        ^ Token(AngleRight, ">", (341,40)->(341,41))
                                         ^ Token(AngleRight, ">", (341,41)->(341,42))
                                          ^ Token(Comma, ",", (341,42)->(341,43))
                                            Token(EndOfLine, "\n", (341,43)->(341,43))
				symbolLineTable: list<dict<any>>)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (342,4)->(342,19))
                   ^^ Token(SpacedColon, ": ", (342,19)->(342,21))
                     ^^^^ Token(Identifier, "list", (342,21)->(342,25))
                         ^ Token(AngleLeft, "<", (342,25)->(342,26))
                          ^^^^ Token(Identifier, "dict", (342,26)->(342,30))
                              ^ Token(AngleLeft, "<", (342,30)->(342,31))
                               ^^^ Token(Identifier, "any", (342,31)->(342,34))
                                  ^ Token(AngleRight, ">", (342,34)->(342,35))
                                   ^ Token(AngleRight, ">", (342,35)->(342,36))
                                    ^ Token(RightParen, ")", (342,36)->(342,37))
                                      Token(EndOfLine, "\n", (342,37)->(342,37))
  var symbolType: string
  ^^^ Token(Identifier, "var", (343,2)->(343,5))
      ^^^^^^^^^^ Token(Identifier, "symbolType", (343,6)->(343,16))
                ^^ Token(SpacedColon, ": ", (343,16)->(343,18))
                  ^^^^^^ Token(Identifier, "string", (343,18)->(343,24))
                         Token(EndOfLine, "\n", (343,24)->(343,24))
  var name: string
  ^^^ Token(Identifier, "var", (344,2)->(344,5))
      ^^^^ Token(Identifier, "name", (344,6)->(344,10))
          ^^ Token(SpacedColon, ": ", (344,10)->(344,12))
            ^^^^^^ Token(Identifier, "string", (344,12)->(344,18))
                   Token(EndOfLine, "\n", (344,18)->(344,18))
  var r: dict<dict<number>>
  ^^^ Token(Identifier, "var", (345,2)->(345,5))
      ^ Token(Identifier, "r", (345,6)->(345,7))
       ^^ Token(SpacedColon, ": ", (345,7)->(345,9))
         ^^^^ Token(Identifier, "dict", (345,9)->(345,13))
             ^ Token(AngleLeft, "<", (345,13)->(345,14))
              ^^^^ Token(Identifier, "dict", (345,14)->(345,18))
                  ^ Token(AngleLeft, "<", (345,18)->(345,19))
                   ^^^^^^ Token(Identifier, "number", (345,19)->(345,25))
                         ^ Token(AngleRight, ">", (345,25)->(345,26))
                          ^ Token(GreaterThan, ">", (345,26)->(345,27))
                            Token(EndOfLine, "\n", (345,27)->(345,27))
  var symInfo: dict<any>
  ^^^ Token(Identifier, "var", (346,2)->(346,5))
      ^^^^^^^ Token(Identifier, "symInfo", (346,6)->(346,13))
             ^^ Token(SpacedColon, ": ", (346,13)->(346,15))
               ^^^^ Token(Identifier, "dict", (346,15)->(346,19))
                   ^ Token(AngleLeft, "<", (346,19)->(346,20))
                    ^^^ Token(Identifier, "any", (346,20)->(346,23))
                       ^ Token(GreaterThan, ">", (346,23)->(346,24))
                         Token(EndOfLine, "\n", (346,24)->(346,24))
  var symbolDetail: string
  ^^^ Token(Identifier, "var", (347,2)->(347,5))
      ^^^^^^^^^^^^ Token(Identifier, "symbolDetail", (347,6)->(347,18))
                  ^^ Token(SpacedColon, ": ", (347,18)->(347,20))
                    ^^^^^^ Token(Identifier, "string", (347,20)->(347,26))
                           Token(EndOfLine, "\n", (347,26)->(347,26))
  var childSymbols: dict<list<dict<any>>>
  ^^^ Token(Identifier, "var", (348,2)->(348,5))
      ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (348,6)->(348,18))
                  ^^ Token(SpacedColon, ": ", (348,18)->(348,20))
                    ^^^^ Token(Identifier, "dict", (348,20)->(348,24))
                        ^ Token(AngleLeft, "<", (348,24)->(348,25))
                         ^^^^ Token(Identifier, "list", (348,25)->(348,29))
                             ^ Token(AngleLeft, "<", (348,29)->(348,30))
                              ^^^^ Token(Identifier, "dict", (348,30)->(348,34))
                                  ^ Token(AngleLeft, "<", (348,34)->(348,35))
                                   ^^^ Token(Identifier, "any", (348,35)->(348,38))
                                      ^ Token(AngleRight, ">", (348,38)->(348,39))
                                       ^ Token(AngleRight, ">", (348,39)->(348,40))
                                        ^ Token(GreaterThan, ">", (348,40)->(348,41))
                                          Token(EndOfLine, "\n", (348,41)->(348,41))

 Token(EndOfLine, "\n", (349,0)->(349,0))
  for symbol in docSymbolTable
  ^^^ Token(Identifier, "for", (350,2)->(350,5))
      ^^^^^^ Token(Identifier, "symbol", (350,6)->(350,12))
             ^^ Token(Identifier, "in", (350,13)->(350,15))
                ^^^^^^^^^^^^^^ Token(Identifier, "docSymbolTable", (350,16)->(350,30))
                               Token(EndOfLine, "\n", (350,30)->(350,30))
    name = symbol.name
    ^^^^ Token(Identifier, "name", (351,4)->(351,8))
         ^ Token(Equal, "=", (351,9)->(351,10))
           ^^^^^^ Token(Identifier, "symbol", (351,11)->(351,17))
                 ^ Token(Dot, ".", (351,17)->(351,18))
                  ^^^^ Token(Identifier, "name", (351,18)->(351,22))
                       Token(EndOfLine, "\n", (351,22)->(351,22))
    symbolType = LspSymbolKindToName(symbol.kind)
    ^^^^^^^^^^ Token(Identifier, "symbolType", (352,4)->(352,14))
               ^ Token(Equal, "=", (352,15)->(352,16))
                 ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspSymbolKindToName", (352,17)->(352,36))
                                    ^ Token(LeftParen, "(", (352,36)->(352,37))
                                     ^^^^^^ Token(Identifier, "symbol", (352,37)->(352,43))
                                           ^ Token(Dot, ".", (352,43)->(352,44))
                                            ^^^^ Token(Identifier, "kind", (352,44)->(352,48))
                                                ^ Token(RightParen, ")", (352,48)->(352,49))
                                                  Token(EndOfLine, "\n", (352,49)->(352,49))
    r = symbol.range
    ^ Token(Identifier, "r", (353,4)->(353,5))
      ^ Token(Equal, "=", (353,6)->(353,7))
        ^^^^^^ Token(Identifier, "symbol", (353,8)->(353,14))
              ^ Token(Dot, ".", (353,14)->(353,15))
               ^^^^^ Token(Identifier, "range", (353,15)->(353,20))
                     Token(EndOfLine, "\n", (353,20)->(353,20))
    if symbol->has_key('detail')
    ^^ Token(Identifier, "if", (354,4)->(354,6))
       ^^^^^^ Token(Identifier, "symbol", (354,7)->(354,13))
             ^^ Token(MethodArrow, "->", (354,13)->(354,15))
               ^^^^^^^ Token(Identifier, "has_key", (354,15)->(354,22))
                      ^ Token(LeftParen, "(", (354,22)->(354,23))
                        ^^^^^ Token(SingleQuoteString, "detail", (354,24)->(354,29))
                               ^ Token(RightParen, ")", (354,31)->(354,32))
                                 Token(EndOfLine, "\n", (354,32)->(354,32))
      symbolDetail = symbol.detail
      ^^^^^^^^^^^^ Token(Identifier, "symbolDetail", (355,6)->(355,18))
                   ^ Token(Equal, "=", (355,19)->(355,20))
                     ^^^^^^ Token(Identifier, "symbol", (355,21)->(355,27))
                           ^ Token(Dot, ".", (355,27)->(355,28))
                            ^^^^^^ Token(Identifier, "detail", (355,28)->(355,34))
                                   Token(EndOfLine, "\n", (355,34)->(355,34))
    endif
    ^^^^^ Token(Identifier, "endif", (356,4)->(356,9))
          Token(EndOfLine, "\n", (356,9)->(356,9))
    if !symbolTypeTable->has_key(symbolType)
    ^^ Token(Identifier, "if", (357,4)->(357,6))
       ^ Token(Bang, "!", (357,7)->(357,8))
        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (357,8)->(357,23))
                       ^^ Token(MethodArrow, "->", (357,23)->(357,25))
                         ^^^^^^^ Token(Identifier, "has_key", (357,25)->(357,32))
                                ^ Token(LeftParen, "(", (357,32)->(357,33))
                                 ^^^^^^^^^^ Token(Identifier, "symbolType", (357,33)->(357,43))
                                           ^ Token(RightParen, ")", (357,43)->(357,44))
                                             Token(EndOfLine, "\n", (357,44)->(357,44))
      symbolTypeTable[symbolType] = []
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (358,6)->(358,21))
                     ^ Token(LeftBracket, "[", (358,21)->(358,22))
                      ^^^^^^^^^^ Token(Identifier, "symbolType", (358,22)->(358,32))
                                ^ Token(RightBracket, "]", (358,32)->(358,33))
                                  ^ Token(Equal, "=", (358,34)->(358,35))
                                    ^ Token(LeftBracket, "[", (358,36)->(358,37))
                                     ^ Token(RightBracket, "]", (358,37)->(358,38))
                                       Token(EndOfLine, "\n", (358,38)->(358,38))
    endif
    ^^^^^ Token(Identifier, "endif", (359,4)->(359,9))
          Token(EndOfLine, "\n", (359,9)->(359,9))
    childSymbols = {}
    ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (360,4)->(360,16))
                 ^ Token(Equal, "=", (360,17)->(360,18))
                   ^ Token(LeftBrace, "{", (360,19)->(360,20))
                    ^ Token(RightBrace, "}", (360,20)->(360,21))
                      Token(EndOfLine, "\n", (360,21)->(360,21))
    if symbol->has_key('children')
    ^^ Token(Identifier, "if", (361,4)->(361,6))
       ^^^^^^ Token(Identifier, "symbol", (361,7)->(361,13))
             ^^ Token(MethodArrow, "->", (361,13)->(361,15))
               ^^^^^^^ Token(Identifier, "has_key", (361,15)->(361,22))
                      ^ Token(LeftParen, "(", (361,22)->(361,23))
                        ^^^^^^^ Token(SingleQuoteString, "children", (361,24)->(361,31))
                                 ^ Token(RightParen, ")", (361,33)->(361,34))
                                   Token(EndOfLine, "\n", (361,34)->(361,34))
      ProcessDocSymbolTable(symbol.children, childSymbols, symbolLineTable)
      ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolTable", (362,6)->(362,27))
                           ^ Token(LeftParen, "(", (362,27)->(362,28))
                            ^^^^^^ Token(Identifier, "symbol", (362,28)->(362,34))
                                  ^ Token(Dot, ".", (362,34)->(362,35))
                                   ^^^^^^^^ Token(Identifier, "children", (362,35)->(362,43))
                                           ^ Token(Comma, ",", (362,43)->(362,44))
                                             ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (362,45)->(362,57))
                                                         ^ Token(Comma, ",", (362,57)->(362,58))
                                                           ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (362,59)->(362,74))
                                                                          ^ Token(RightParen, ")", (362,74)->(362,75))
                                                                            Token(EndOfLine, "\n", (362,75)->(362,75))
    endif
    ^^^^^ Token(Identifier, "endif", (363,4)->(363,9))
          Token(EndOfLine, "\n", (363,9)->(363,9))
    symInfo = {name: name, range: r, detail: symbolDetail,
    ^^^^^^^ Token(Identifier, "symInfo", (364,4)->(364,11))
            ^ Token(Equal, "=", (364,12)->(364,13))
              ^ Token(LeftBrace, "{", (364,14)->(364,15))
               ^^^^ Token(Identifier, "name", (364,15)->(364,19))
                   ^^ Token(SpacedColon, ": ", (364,19)->(364,21))
                     ^^^^ Token(Identifier, "name", (364,21)->(364,25))
                         ^ Token(Comma, ",", (364,25)->(364,26))
                           ^^^^^ Token(Identifier, "range", (364,27)->(364,32))
                                ^^ Token(SpacedColon, ": ", (364,32)->(364,34))
                                  ^ Token(Identifier, "r", (364,34)->(364,35))
                                   ^ Token(Comma, ",", (364,35)->(364,36))
                                     ^^^^^^ Token(Identifier, "detail", (364,37)->(364,43))
                                           ^^ Token(SpacedColon, ": ", (364,43)->(364,45))
                                             ^^^^^^^^^^^^ Token(Identifier, "symbolDetail", (364,45)->(364,57))
                                                         ^ Token(Comma, ",", (364,57)->(364,58))
                                                           Token(EndOfLine, "\n", (364,58)->(364,58))
						children: childSymbols}
      ^^^^^^^^ Token(Identifier, "children", (365,6)->(365,14))
              ^^ Token(SpacedColon, ": ", (365,14)->(365,16))
                ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (365,16)->(365,28))
                            ^ Token(RightBrace, "}", (365,28)->(365,29))
                              Token(EndOfLine, "\n", (365,29)->(365,29))
    symbolTypeTable[symbolType]->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (366,4)->(366,19))
                   ^ Token(LeftBracket, "[", (366,19)->(366,20))
                    ^^^^^^^^^^ Token(Identifier, "symbolType", (366,20)->(366,30))
                              ^ Token(RightBracket, "]", (366,30)->(366,31))
                               ^^ Token(MethodArrow, "->", (366,31)->(366,33))
                                 ^^^ Token(Identifier, "add", (366,33)->(366,36))
                                    ^ Token(LeftParen, "(", (366,36)->(366,37))
                                     ^^^^^^^ Token(Identifier, "symInfo", (366,37)->(366,44))
                                            ^ Token(RightParen, ")", (366,44)->(366,45))
                                              Token(EndOfLine, "\n", (366,45)->(366,45))
    symbolLineTable->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (367,4)->(367,19))
                   ^^ Token(MethodArrow, "->", (367,19)->(367,21))
                     ^^^ Token(Identifier, "add", (367,21)->(367,24))
                        ^ Token(LeftParen, "(", (367,24)->(367,25))
                         ^^^^^^^ Token(Identifier, "symInfo", (367,25)->(367,32))
                                ^ Token(RightParen, ")", (367,32)->(367,33))
                                  Token(EndOfLine, "\n", (367,33)->(367,33))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (368,2)->(368,8))
         Token(EndOfLine, "\n", (368,8)->(368,8))
enddef
^^^^^^ Token(Identifier, "enddef", (369,0)->(369,6))
       Token(EndOfLine, "\n", (369,6)->(369,6))

 Token(EndOfLine, "\n", (370,0)->(370,0))
# process the 'textDocument/documentSymbol' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/documentSymbol' reply from the LSP server", (371,0)->(371,69))
# Open a symbols window and display the symbols as a tree
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Open a symbols window and display the symbols as a tree", (372,0)->(372,57))
# Result: DocumentSymbol[] | SymbolInformation[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: DocumentSymbol[] | SymbolInformation[] | null", (373,0)->(373,55))
def ProcessDocSymbolReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (374,0)->(374,3))
    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolReply", (374,4)->(374,25))
                         ^ Token(LeftParen, "(", (374,25)->(374,26))
                          ^^^^^^^^^ Token(Identifier, "lspserver", (374,26)->(374,35))
                                   ^^ Token(SpacedColon, ": ", (374,35)->(374,37))
                                     ^^^^ Token(Identifier, "dict", (374,37)->(374,41))
                                         ^ Token(AngleLeft, "<", (374,41)->(374,42))
                                          ^^^ Token(Identifier, "any", (374,42)->(374,45))
                                             ^ Token(AngleRight, ">", (374,45)->(374,46))
                                              ^ Token(Comma, ",", (374,46)->(374,47))
                                                ^^^ Token(Identifier, "req", (374,48)->(374,51))
                                                   ^^ Token(SpacedColon, ": ", (374,51)->(374,53))
                                                     ^^^^ Token(Identifier, "dict", (374,53)->(374,57))
                                                         ^ Token(AngleLeft, "<", (374,57)->(374,58))
                                                          ^^^ Token(Identifier, "any", (374,58)->(374,61))
                                                             ^ Token(AngleRight, ">", (374,61)->(374,62))
                                                              ^ Token(Comma, ",", (374,62)->(374,63))
                                                                ^^^^^ Token(Identifier, "reply", (374,64)->(374,69))
                                                                     ^^ Token(SpacedColon, ": ", (374,69)->(374,71))
                                                                       ^^^^ Token(Identifier, "dict", (374,71)->(374,75))
                                                                           ^ Token(AngleLeft, "<", (374,75)->(374,76))
                                                                            ^^^ Token(Identifier, "any", (374,76)->(374,79))
                                                                               ^ Token(AngleRight, ">", (374,79)->(374,80))
                                                                                ^ Token(RightParen, ")", (374,80)->(374,81))
                                                                                 ^^ Token(SpacedColon, ": ", (374,81)->(374,83))
                                                                                   ^^^^ Token(Identifier, "void", (374,83)->(374,87))
                                                                                        Token(EndOfLine, "\n", (374,87)->(374,87))
  var fname: string
  ^^^ Token(Identifier, "var", (375,2)->(375,5))
      ^^^^^ Token(Identifier, "fname", (375,6)->(375,11))
           ^^ Token(SpacedColon, ": ", (375,11)->(375,13))
             ^^^^^^ Token(Identifier, "string", (375,13)->(375,19))
                    Token(EndOfLine, "\n", (375,19)->(375,19))
  var symbolTypeTable: dict<list<dict<any>>> = {}
  ^^^ Token(Identifier, "var", (376,2)->(376,5))
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (376,6)->(376,21))
                     ^^ Token(SpacedColon, ": ", (376,21)->(376,23))
                       ^^^^ Token(Identifier, "dict", (376,23)->(376,27))
                           ^ Token(AngleLeft, "<", (376,27)->(376,28))
                            ^^^^ Token(Identifier, "list", (376,28)->(376,32))
                                ^ Token(AngleLeft, "<", (376,32)->(376,33))
                                 ^^^^ Token(Identifier, "dict", (376,33)->(376,37))
                                     ^ Token(AngleLeft, "<", (376,37)->(376,38))
                                      ^^^ Token(Identifier, "any", (376,38)->(376,41))
                                         ^ Token(AngleRight, ">", (376,41)->(376,42))
                                          ^ Token(AngleRight, ">", (376,42)->(376,43))
                                           ^ Token(GreaterThan, ">", (376,43)->(376,44))
                                             ^ Token(Equal, "=", (376,45)->(376,46))
                                               ^ Token(LeftBrace, "{", (376,47)->(376,48))
                                                ^ Token(RightBrace, "}", (376,48)->(376,49))
                                                  Token(EndOfLine, "\n", (376,49)->(376,49))
  var symbolLineTable: list<dict<any>> = []
  ^^^ Token(Identifier, "var", (377,2)->(377,5))
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (377,6)->(377,21))
                     ^^ Token(SpacedColon, ": ", (377,21)->(377,23))
                       ^^^^ Token(Identifier, "list", (377,23)->(377,27))
                           ^ Token(AngleLeft, "<", (377,27)->(377,28))
                            ^^^^ Token(Identifier, "dict", (377,28)->(377,32))
                                ^ Token(AngleLeft, "<", (377,32)->(377,33))
                                 ^^^ Token(Identifier, "any", (377,33)->(377,36))
                                    ^ Token(AngleRight, ">", (377,36)->(377,37))
                                     ^ Token(GreaterThan, ">", (377,37)->(377,38))
                                       ^ Token(Equal, "=", (377,39)->(377,40))
                                         ^ Token(LeftBracket, "[", (377,41)->(377,42))
                                          ^ Token(RightBracket, "]", (377,42)->(377,43))
                                            Token(EndOfLine, "\n", (377,43)->(377,43))

 Token(EndOfLine, "\n", (378,0)->(378,0))
  if req.params.textDocument.uri != ''
  ^^ Token(Identifier, "if", (379,2)->(379,4))
     ^^^ Token(Identifier, "req", (379,5)->(379,8))
        ^ Token(Dot, ".", (379,8)->(379,9))
         ^^^^^^ Token(Identifier, "params", (379,9)->(379,15))
               ^ Token(Dot, ".", (379,15)->(379,16))
                ^^^^^^^^^^^^ Token(Identifier, "textDocument", (379,16)->(379,28))
                            ^ Token(Dot, ".", (379,28)->(379,29))
                             ^^^ Token(Identifier, "uri", (379,29)->(379,32))
                                 ^^ Token(NotEqualTo, "!=", (379,33)->(379,35))
                                      Token(SingleQuoteString, "", (379,37)->(379,37))
                                       Token(EndOfLine, "\n", (379,38)->(379,38))
    fname = util.LspUriToFile(req.params.textDocument.uri)
    ^^^^^ Token(Identifier, "fname", (380,4)->(380,9))
          ^ Token(Equal, "=", (380,10)->(380,11))
            ^^^^ Token(Identifier, "util", (380,12)->(380,16))
                ^ Token(Dot, ".", (380,16)->(380,17))
                 ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (380,17)->(380,29))
                             ^ Token(LeftParen, "(", (380,29)->(380,30))
                              ^^^ Token(Identifier, "req", (380,30)->(380,33))
                                 ^ Token(Dot, ".", (380,33)->(380,34))
                                  ^^^^^^ Token(Identifier, "params", (380,34)->(380,40))
                                        ^ Token(Dot, ".", (380,40)->(380,41))
                                         ^^^^^^^^^^^^ Token(Identifier, "textDocument", (380,41)->(380,53))
                                                     ^ Token(Dot, ".", (380,53)->(380,54))
                                                      ^^^ Token(Identifier, "uri", (380,54)->(380,57))
                                                         ^ Token(RightParen, ")", (380,57)->(380,58))
                                                           Token(EndOfLine, "\n", (380,58)->(380,58))
  endif
  ^^^^^ Token(Identifier, "endif", (381,2)->(381,7))
        Token(EndOfLine, "\n", (381,7)->(381,7))

 Token(EndOfLine, "\n", (382,0)->(382,0))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (383,2)->(383,4))
     ^^^^^ Token(Identifier, "reply", (383,5)->(383,10))
          ^ Token(Dot, ".", (383,10)->(383,11))
           ^^^^^^ Token(Identifier, "result", (383,11)->(383,17))
                 ^^ Token(MethodArrow, "->", (383,17)->(383,19))
                   ^^^^^ Token(Identifier, "empty", (383,19)->(383,24))
                        ^ Token(LeftParen, "(", (383,24)->(383,25))
                         ^ Token(RightParen, ")", (383,25)->(383,26))
                           Token(EndOfLine, "\n", (383,26)->(383,26))
    # No symbols defined for this file. Clear the outline window.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# No symbols defined for this file. Clear the outline window.", (384,4)->(384,65))
    outline.UpdateOutlineWindow(fname, symbolTypeTable, symbolLineTable)
    ^^^^^^^ Token(Identifier, "outline", (385,4)->(385,11))
           ^ Token(Dot, ".", (385,11)->(385,12))
            ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "UpdateOutlineWindow", (385,12)->(385,31))
                               ^ Token(LeftParen, "(", (385,31)->(385,32))
                                ^^^^^ Token(Identifier, "fname", (385,32)->(385,37))
                                     ^ Token(Comma, ",", (385,37)->(385,38))
                                       ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (385,39)->(385,54))
                                                      ^ Token(Comma, ",", (385,54)->(385,55))
                                                        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (385,56)->(385,71))
                                                                       ^ Token(RightParen, ")", (385,71)->(385,72))
                                                                         Token(EndOfLine, "\n", (385,72)->(385,72))
    return
    ^^^^^^ Token(Identifier, "return", (386,4)->(386,10))
           Token(EndOfLine, "\n", (386,10)->(386,10))
  endif
  ^^^^^ Token(Identifier, "endif", (387,2)->(387,7))
        Token(EndOfLine, "\n", (387,7)->(387,7))

 Token(EndOfLine, "\n", (388,0)->(388,0))
  if reply.result[0]->has_key('location')
  ^^ Token(Identifier, "if", (389,2)->(389,4))
     ^^^^^ Token(Identifier, "reply", (389,5)->(389,10))
          ^ Token(Dot, ".", (389,10)->(389,11))
           ^^^^^^ Token(Identifier, "result", (389,11)->(389,17))
                 ^ Token(LeftBracket, "[", (389,17)->(389,18))
                  ^ Token(Integer, "0", (389,18)->(389,19))
                   ^ Token(RightBracket, "]", (389,19)->(389,20))
                    ^^ Token(MethodArrow, "->", (389,20)->(389,22))
                      ^^^^^^^ Token(Identifier, "has_key", (389,22)->(389,29))
                             ^ Token(LeftParen, "(", (389,29)->(389,30))
                               ^^^^^^^ Token(SingleQuoteString, "location", (389,31)->(389,38))
                                        ^ Token(RightParen, ")", (389,40)->(389,41))
                                          Token(EndOfLine, "\n", (389,41)->(389,41))
    # SymbolInformation[]
    ^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# SymbolInformation[]", (390,4)->(390,25))
    ProcessSymbolInfoTable(reply.result, symbolTypeTable, symbolLineTable)
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSymbolInfoTable", (391,4)->(391,26))
                          ^ Token(LeftParen, "(", (391,26)->(391,27))
                           ^^^^^ Token(Identifier, "reply", (391,27)->(391,32))
                                ^ Token(Dot, ".", (391,32)->(391,33))
                                 ^^^^^^ Token(Identifier, "result", (391,33)->(391,39))
                                       ^ Token(Comma, ",", (391,39)->(391,40))
                                         ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (391,41)->(391,56))
                                                        ^ Token(Comma, ",", (391,56)->(391,57))
                                                          ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (391,58)->(391,73))
                                                                         ^ Token(RightParen, ")", (391,73)->(391,74))
                                                                           Token(EndOfLine, "\n", (391,74)->(391,74))
  else
  ^^^^ Token(Identifier, "else", (392,2)->(392,6))
       Token(EndOfLine, "\n", (392,6)->(392,6))
    # DocumentSymbol[]
    ^^^^^^^^^^^^^^^^^^ Token(Comment, "# DocumentSymbol[]", (393,4)->(393,22))
    ProcessDocSymbolTable(reply.result, symbolTypeTable, symbolLineTable)
    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolTable", (394,4)->(394,25))
                         ^ Token(LeftParen, "(", (394,25)->(394,26))
                          ^^^^^ Token(Identifier, "reply", (394,26)->(394,31))
                               ^ Token(Dot, ".", (394,31)->(394,32))
                                ^^^^^^ Token(Identifier, "result", (394,32)->(394,38))
                                      ^ Token(Comma, ",", (394,38)->(394,39))
                                        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (394,40)->(394,55))
                                                       ^ Token(Comma, ",", (394,55)->(394,56))
                                                         ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (394,57)->(394,72))
                                                                        ^ Token(RightParen, ")", (394,72)->(394,73))
                                                                          Token(EndOfLine, "\n", (394,73)->(394,73))
  endif
  ^^^^^ Token(Identifier, "endif", (395,2)->(395,7))
        Token(EndOfLine, "\n", (395,7)->(395,7))

 Token(EndOfLine, "\n", (396,0)->(396,0))
  # sort the symbols by line number
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# sort the symbols by line number", (397,2)->(397,35))
  symbolLineTable->sort((a, b) => a.range.start.line - b.range.start.line)
  ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (398,2)->(398,17))
                 ^^ Token(MethodArrow, "->", (398,17)->(398,19))
                   ^^^^ Token(Identifier, "sort", (398,19)->(398,23))
                       ^ Token(LeftParen, "(", (398,23)->(398,24))
                        ^ Token(LeftParen, "(", (398,24)->(398,25))
                         ^ Token(Identifier, "a", (398,25)->(398,26))
                          ^ Token(Comma, ",", (398,26)->(398,27))
                            ^ Token(Identifier, "b", (398,28)->(398,29))
                             ^ Token(RightParen, ")", (398,29)->(398,30))
                               ^^ Token(Arrow, "=>", (398,31)->(398,33))
                                  ^ Token(Identifier, "a", (398,34)->(398,35))
                                   ^ Token(Dot, ".", (398,35)->(398,36))
                                    ^^^^^ Token(Identifier, "range", (398,36)->(398,41))
                                         ^ Token(Dot, ".", (398,41)->(398,42))
                                          ^^^^^ Token(Identifier, "start", (398,42)->(398,47))
                                               ^ Token(Dot, ".", (398,47)->(398,48))
                                                ^^^^ Token(Identifier, "line", (398,48)->(398,52))
                                                     ^ Token(Minus, "-", (398,53)->(398,54))
                                                       ^ Token(Identifier, "b", (398,55)->(398,56))
                                                        ^ Token(Dot, ".", (398,56)->(398,57))
                                                         ^^^^^ Token(Identifier, "range", (398,57)->(398,62))
                                                              ^ Token(Dot, ".", (398,62)->(398,63))
                                                               ^^^^^ Token(Identifier, "start", (398,63)->(398,68))
                                                                    ^ Token(Dot, ".", (398,68)->(398,69))
                                                                     ^^^^ Token(Identifier, "line", (398,69)->(398,73))
                                                                         ^ Token(RightParen, ")", (398,73)->(398,74))
                                                                           Token(EndOfLine, "\n", (398,74)->(398,74))
  outline.UpdateOutlineWindow(fname, symbolTypeTable, symbolLineTable)
  ^^^^^^^ Token(Identifier, "outline", (399,2)->(399,9))
         ^ Token(Dot, ".", (399,9)->(399,10))
          ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "UpdateOutlineWindow", (399,10)->(399,29))
                             ^ Token(LeftParen, "(", (399,29)->(399,30))
                              ^^^^^ Token(Identifier, "fname", (399,30)->(399,35))
                                   ^ Token(Comma, ",", (399,35)->(399,36))
                                     ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (399,37)->(399,52))
                                                    ^ Token(Comma, ",", (399,52)->(399,53))
                                                      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (399,54)->(399,69))
                                                                     ^ Token(RightParen, ")", (399,69)->(399,70))
                                                                       Token(EndOfLine, "\n", (399,70)->(399,70))
enddef
^^^^^^ Token(Identifier, "enddef", (400,0)->(400,6))
       Token(EndOfLine, "\n", (400,6)->(400,6))

 Token(EndOfLine, "\n", (401,0)->(401,0))
# process the 'textDocument/codeAction' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/codeAction' reply from the LSP server", (402,0)->(402,65))
# Result: (Command | CodeAction)[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: (Command | CodeAction)[] | null", (403,0)->(403,41))
def ProcessCodeActionReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (404,0)->(404,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCodeActionReply", (404,4)->(404,26))
                          ^ Token(LeftParen, "(", (404,26)->(404,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (404,27)->(404,36))
                                    ^^ Token(SpacedColon, ": ", (404,36)->(404,38))
                                      ^^^^ Token(Identifier, "dict", (404,38)->(404,42))
                                          ^ Token(AngleLeft, "<", (404,42)->(404,43))
                                           ^^^ Token(Identifier, "any", (404,43)->(404,46))
                                              ^ Token(AngleRight, ">", (404,46)->(404,47))
                                               ^ Token(Comma, ",", (404,47)->(404,48))
                                                 ^^^ Token(Identifier, "req", (404,49)->(404,52))
                                                    ^^ Token(SpacedColon, ": ", (404,52)->(404,54))
                                                      ^^^^ Token(Identifier, "dict", (404,54)->(404,58))
                                                          ^ Token(AngleLeft, "<", (404,58)->(404,59))
                                                           ^^^ Token(Identifier, "any", (404,59)->(404,62))
                                                              ^ Token(AngleRight, ">", (404,62)->(404,63))
                                                               ^ Token(Comma, ",", (404,63)->(404,64))
                                                                 ^^^^^ Token(Identifier, "reply", (404,65)->(404,70))
                                                                      ^^ Token(SpacedColon, ": ", (404,70)->(404,72))
                                                                        ^^^^ Token(Identifier, "dict", (404,72)->(404,76))
                                                                            ^ Token(AngleLeft, "<", (404,76)->(404,77))
                                                                             ^^^ Token(Identifier, "any", (404,77)->(404,80))
                                                                                ^ Token(AngleRight, ">", (404,80)->(404,81))
                                                                                 ^ Token(RightParen, ")", (404,81)->(404,82))
                                                                                   Token(EndOfLine, "\n", (404,82)->(404,82))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (405,2)->(405,4))
     ^^^^^ Token(Identifier, "reply", (405,5)->(405,10))
          ^ Token(Dot, ".", (405,10)->(405,11))
           ^^^^^^ Token(Identifier, "result", (405,11)->(405,17))
                 ^^ Token(MethodArrow, "->", (405,17)->(405,19))
                   ^^^^^ Token(Identifier, "empty", (405,19)->(405,24))
                        ^ Token(LeftParen, "(", (405,24)->(405,25))
                         ^ Token(RightParen, ")", (405,25)->(405,26))
                           Token(EndOfLine, "\n", (405,26)->(405,26))
    # no action can be performed
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# no action can be performed", (406,4)->(406,32))
    util.WarnMsg('No code action is available')
    ^^^^ Token(Identifier, "util", (407,4)->(407,8))
        ^ Token(Dot, ".", (407,8)->(407,9))
         ^^^^^^^ Token(Identifier, "WarnMsg", (407,9)->(407,16))
                ^ Token(LeftParen, "(", (407,16)->(407,17))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "No code action is available", (407,18)->(407,44))
                                              ^ Token(RightParen, ")", (407,46)->(407,47))
                                                Token(EndOfLine, "\n", (407,47)->(407,47))
    return
    ^^^^^^ Token(Identifier, "return", (408,4)->(408,10))
           Token(EndOfLine, "\n", (408,10)->(408,10))
  endif
  ^^^^^ Token(Identifier, "endif", (409,2)->(409,7))
        Token(EndOfLine, "\n", (409,7)->(409,7))

 Token(EndOfLine, "\n", (410,0)->(410,0))
  codeaction.ApplyCodeAction(lspserver, reply.result)
  ^^^^^^^^^^ Token(Identifier, "codeaction", (411,2)->(411,12))
            ^ Token(Dot, ".", (411,12)->(411,13))
             ^^^^^^^^^^^^^^^ Token(Identifier, "ApplyCodeAction", (411,13)->(411,28))
                            ^ Token(LeftParen, "(", (411,28)->(411,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (411,29)->(411,38))
                                      ^ Token(Comma, ",", (411,38)->(411,39))
                                        ^^^^^ Token(Identifier, "reply", (411,40)->(411,45))
                                             ^ Token(Dot, ".", (411,45)->(411,46))
                                              ^^^^^^ Token(Identifier, "result", (411,46)->(411,52))
                                                    ^ Token(RightParen, ")", (411,52)->(411,53))
                                                      Token(EndOfLine, "\n", (411,53)->(411,53))
enddef
^^^^^^ Token(Identifier, "enddef", (412,0)->(412,6))
       Token(EndOfLine, "\n", (412,6)->(412,6))

 Token(EndOfLine, "\n", (413,0)->(413,0))
# Reply: 'textDocument/foldingRange'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Reply: 'textDocument/foldingRange'", (414,0)->(414,36))
# Result: FoldingRange[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: FoldingRange[] | null", (415,0)->(415,31))
def ProcessFoldingRangeReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (416,0)->(416,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessFoldingRangeReply", (416,4)->(416,28))
                            ^ Token(LeftParen, "(", (416,28)->(416,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (416,29)->(416,38))
                                      ^^ Token(SpacedColon, ": ", (416,38)->(416,40))
                                        ^^^^ Token(Identifier, "dict", (416,40)->(416,44))
                                            ^ Token(AngleLeft, "<", (416,44)->(416,45))
                                             ^^^ Token(Identifier, "any", (416,45)->(416,48))
                                                ^ Token(AngleRight, ">", (416,48)->(416,49))
                                                 ^ Token(Comma, ",", (416,49)->(416,50))
                                                   ^^^ Token(Identifier, "req", (416,51)->(416,54))
                                                      ^^ Token(SpacedColon, ": ", (416,54)->(416,56))
                                                        ^^^^ Token(Identifier, "dict", (416,56)->(416,60))
                                                            ^ Token(AngleLeft, "<", (416,60)->(416,61))
                                                             ^^^ Token(Identifier, "any", (416,61)->(416,64))
                                                                ^ Token(AngleRight, ">", (416,64)->(416,65))
                                                                 ^ Token(Comma, ",", (416,65)->(416,66))
                                                                   ^^^^^ Token(Identifier, "reply", (416,67)->(416,72))
                                                                        ^^ Token(SpacedColon, ": ", (416,72)->(416,74))
                                                                          ^^^^ Token(Identifier, "dict", (416,74)->(416,78))
                                                                              ^ Token(AngleLeft, "<", (416,78)->(416,79))
                                                                               ^^^ Token(Identifier, "any", (416,79)->(416,82))
                                                                                  ^ Token(AngleRight, ">", (416,82)->(416,83))
                                                                                   ^ Token(RightParen, ")", (416,83)->(416,84))
                                                                                     Token(EndOfLine, "\n", (416,84)->(416,84))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (417,2)->(417,4))
     ^^^^^ Token(Identifier, "reply", (417,5)->(417,10))
          ^ Token(Dot, ".", (417,10)->(417,11))
           ^^^^^^ Token(Identifier, "result", (417,11)->(417,17))
                 ^^ Token(MethodArrow, "->", (417,17)->(417,19))
                   ^^^^^ Token(Identifier, "empty", (417,19)->(417,24))
                        ^ Token(LeftParen, "(", (417,24)->(417,25))
                         ^ Token(RightParen, ")", (417,25)->(417,26))
                           Token(EndOfLine, "\n", (417,26)->(417,26))
    return
    ^^^^^^ Token(Identifier, "return", (418,4)->(418,10))
           Token(EndOfLine, "\n", (418,10)->(418,10))
  endif
  ^^^^^ Token(Identifier, "endif", (419,2)->(419,7))
        Token(EndOfLine, "\n", (419,7)->(419,7))

 Token(EndOfLine, "\n", (420,0)->(420,0))
  # result: FoldingRange[]
  ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# result: FoldingRange[]", (421,2)->(421,26))
  var end_lnum: number
  ^^^ Token(Identifier, "var", (422,2)->(422,5))
      ^^^^^^^^ Token(Identifier, "end_lnum", (422,6)->(422,14))
              ^^ Token(SpacedColon, ": ", (422,14)->(422,16))
                ^^^^^^ Token(Identifier, "number", (422,16)->(422,22))
                       Token(EndOfLine, "\n", (422,22)->(422,22))
  var last_lnum: number = line('$')
  ^^^ Token(Identifier, "var", (423,2)->(423,5))
      ^^^^^^^^^ Token(Identifier, "last_lnum", (423,6)->(423,15))
               ^^ Token(SpacedColon, ": ", (423,15)->(423,17))
                 ^^^^^^ Token(Identifier, "number", (423,17)->(423,23))
                        ^ Token(Equal, "=", (423,24)->(423,25))
                          ^^^^ Token(Identifier, "line", (423,26)->(423,30))
                              ^ Token(LeftParen, "(", (423,30)->(423,31))
                                 Token(SingleQuoteString, "$", (423,32)->(423,32))
                                  ^ Token(RightParen, ")", (423,34)->(423,35))
                                    Token(EndOfLine, "\n", (423,35)->(423,35))
  for foldRange in reply.result
  ^^^ Token(Identifier, "for", (424,2)->(424,5))
      ^^^^^^^^^ Token(Identifier, "foldRange", (424,6)->(424,15))
                ^^ Token(Identifier, "in", (424,16)->(424,18))
                   ^^^^^ Token(Identifier, "reply", (424,19)->(424,24))
                        ^ Token(Dot, ".", (424,24)->(424,25))
                         ^^^^^^ Token(Identifier, "result", (424,25)->(424,31))
                                Token(EndOfLine, "\n", (424,31)->(424,31))
    end_lnum = foldRange.endLine + 1
    ^^^^^^^^ Token(Identifier, "end_lnum", (425,4)->(425,12))
             ^ Token(Equal, "=", (425,13)->(425,14))
               ^^^^^^^^^ Token(Identifier, "foldRange", (425,15)->(425,24))
                        ^ Token(Dot, ".", (425,24)->(425,25))
                         ^^^^^^^ Token(Identifier, "endLine", (425,25)->(425,32))
                                 ^ Token(Plus, "+", (425,33)->(425,34))
                                   ^ Token(Integer, "1", (425,35)->(425,36))
                                     Token(EndOfLine, "\n", (425,36)->(425,36))
    if end_lnum < foldRange.startLine + 2
    ^^ Token(Identifier, "if", (426,4)->(426,6))
       ^^^^^^^^ Token(Identifier, "end_lnum", (426,7)->(426,15))
                ^ Token(LessThan, "<", (426,16)->(426,17))
                  ^^^^^^^^^ Token(Identifier, "foldRange", (426,18)->(426,27))
                           ^ Token(Dot, ".", (426,27)->(426,28))
                            ^^^^^^^^^ Token(Identifier, "startLine", (426,28)->(426,37))
                                      ^ Token(Plus, "+", (426,38)->(426,39))
                                        ^ Token(Integer, "2", (426,40)->(426,41))
                                          Token(EndOfLine, "\n", (426,41)->(426,41))
      end_lnum = foldRange.startLine + 2
      ^^^^^^^^ Token(Identifier, "end_lnum", (427,6)->(427,14))
               ^ Token(Equal, "=", (427,15)->(427,16))
                 ^^^^^^^^^ Token(Identifier, "foldRange", (427,17)->(427,26))
                          ^ Token(Dot, ".", (427,26)->(427,27))
                           ^^^^^^^^^ Token(Identifier, "startLine", (427,27)->(427,36))
                                     ^ Token(Plus, "+", (427,37)->(427,38))
                                       ^ Token(Integer, "2", (427,39)->(427,40))
                                         Token(EndOfLine, "\n", (427,40)->(427,40))
    endif
    ^^^^^ Token(Identifier, "endif", (428,4)->(428,9))
          Token(EndOfLine, "\n", (428,9)->(428,9))
    exe $':{foldRange.startLine + 2}, {end_lnum}fold'
    ^^^ Token(Identifier, "exe", (429,4)->(429,7))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, ":{foldRange.startLine + 2}, {end_lnum}fold", (429,10)->(429,51))
                                                      Token(EndOfLine, "\n", (429,53)->(429,53))
    # Open all the folds, otherwise the subsequently created folds are not
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Open all the folds, otherwise the subsequently created folds are not", (430,4)->(430,74))
    # correct.
    ^^^^^^^^^^ Token(Comment, "# correct.", (431,4)->(431,14))
    :silent! foldopen!
    ^ Token(Colon, ":", (432,4)->(432,5))
     ^^^^^^ Token(Identifier, "silent", (432,5)->(432,11))
           ^ Token(Bang, "!", (432,11)->(432,12))
             ^^^^^^^^ Token(Identifier, "foldopen", (432,13)->(432,21))
                     ^ Token(Bang, "!", (432,21)->(432,22))
                       Token(EndOfLine, "\n", (432,22)->(432,22))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (433,2)->(433,8))
         Token(EndOfLine, "\n", (433,8)->(433,8))

 Token(EndOfLine, "\n", (434,0)->(434,0))
  if &foldcolumn == 0
  ^^ Token(Identifier, "if", (435,2)->(435,4))
     ^ Token(Ampersand, "&", (435,5)->(435,6))
      ^^^^^^^^^^ Token(Identifier, "foldcolumn", (435,6)->(435,16))
                 ^^ Token(EqualTo, "==", (435,17)->(435,19))
                    ^ Token(Integer, "0", (435,20)->(435,21))
                      Token(EndOfLine, "\n", (435,21)->(435,21))
    :setlocal foldcolumn=2
    ^ Token(Colon, ":", (436,4)->(436,5))
     ^^^^^^^^ Token(Identifier, "setlocal", (436,5)->(436,13))
              ^^^^^^^^^^ Token(Identifier, "foldcolumn", (436,14)->(436,24))
                        ^ Token(Equal, "=", (436,24)->(436,25))
                         ^ Token(Integer, "2", (436,25)->(436,26))
                           Token(EndOfLine, "\n", (436,26)->(436,26))
  endif
  ^^^^^ Token(Identifier, "endif", (437,2)->(437,7))
        Token(EndOfLine, "\n", (437,7)->(437,7))
enddef
^^^^^^ Token(Identifier, "enddef", (438,0)->(438,6))
       Token(EndOfLine, "\n", (438,6)->(438,6))

 Token(EndOfLine, "\n", (439,0)->(439,0))
# process the 'workspace/executeCommand' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'workspace/executeCommand' reply from the LSP server", (440,0)->(440,66))
# Result: any | null
^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: any | null", (441,0)->(441,20))
def ProcessWorkspaceExecuteReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (442,0)->(442,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceExecuteReply", (442,4)->(442,32))
                                ^ Token(LeftParen, "(", (442,32)->(442,33))
                                 ^^^^^^^^^ Token(Identifier, "lspserver", (442,33)->(442,42))
                                          ^^ Token(SpacedColon, ": ", (442,42)->(442,44))
                                            ^^^^ Token(Identifier, "dict", (442,44)->(442,48))
                                                ^ Token(AngleLeft, "<", (442,48)->(442,49))
                                                 ^^^ Token(Identifier, "any", (442,49)->(442,52))
                                                    ^ Token(AngleRight, ">", (442,52)->(442,53))
                                                     ^ Token(Comma, ",", (442,53)->(442,54))
                                                       ^^^ Token(Identifier, "req", (442,55)->(442,58))
                                                          ^^ Token(SpacedColon, ": ", (442,58)->(442,60))
                                                            ^^^^ Token(Identifier, "dict", (442,60)->(442,64))
                                                                ^ Token(AngleLeft, "<", (442,64)->(442,65))
                                                                 ^^^ Token(Identifier, "any", (442,65)->(442,68))
                                                                    ^ Token(AngleRight, ">", (442,68)->(442,69))
                                                                     ^ Token(Comma, ",", (442,69)->(442,70))
                                                                       ^^^^^ Token(Identifier, "reply", (442,71)->(442,76))
                                                                            ^^ Token(SpacedColon, ": ", (442,76)->(442,78))
                                                                              ^^^^ Token(Identifier, "dict", (442,78)->(442,82))
                                                                                  ^ Token(AngleLeft, "<", (442,82)->(442,83))
                                                                                   ^^^ Token(Identifier, "any", (442,83)->(442,86))
                                                                                      ^ Token(AngleRight, ">", (442,86)->(442,87))
                                                                                       ^ Token(RightParen, ")", (442,87)->(442,88))
                                                                                         Token(EndOfLine, "\n", (442,88)->(442,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (443,2)->(443,4))
     ^^^^^ Token(Identifier, "reply", (443,5)->(443,10))
          ^ Token(Dot, ".", (443,10)->(443,11))
           ^^^^^^ Token(Identifier, "result", (443,11)->(443,17))
                 ^^ Token(MethodArrow, "->", (443,17)->(443,19))
                   ^^^^^ Token(Identifier, "empty", (443,19)->(443,24))
                        ^ Token(LeftParen, "(", (443,24)->(443,25))
                         ^ Token(RightParen, ")", (443,25)->(443,26))
                           Token(EndOfLine, "\n", (443,26)->(443,26))
    return
    ^^^^^^ Token(Identifier, "return", (444,4)->(444,10))
           Token(EndOfLine, "\n", (444,10)->(444,10))
  endif
  ^^^^^ Token(Identifier, "endif", (445,2)->(445,7))
        Token(EndOfLine, "\n", (445,7)->(445,7))

 Token(EndOfLine, "\n", (446,0)->(446,0))
  # Nothing to do for the reply
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Nothing to do for the reply", (447,2)->(447,31))
enddef
^^^^^^ Token(Identifier, "enddef", (448,0)->(448,6))
       Token(EndOfLine, "\n", (448,6)->(448,6))

 Token(EndOfLine, "\n", (449,0)->(449,0))
# Convert a file name <filename> (<dirname>) format.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Convert a file name <filename> (<dirname>) format.", (450,0)->(450,52))
# Make sure the popup does't occupy the entire screen by reducing the width.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Make sure the popup does't occupy the entire screen by reducing the width.", (451,0)->(451,76))
def MakeMenuName(popupWidth: number, fname: string): string
^^^ Token(Identifier, "def", (452,0)->(452,3))
    ^^^^^^^^^^^^ Token(Identifier, "MakeMenuName", (452,4)->(452,16))
                ^ Token(LeftParen, "(", (452,16)->(452,17))
                 ^^^^^^^^^^ Token(Identifier, "popupWidth", (452,17)->(452,27))
                           ^^ Token(SpacedColon, ": ", (452,27)->(452,29))
                             ^^^^^^ Token(Identifier, "number", (452,29)->(452,35))
                                   ^ Token(Comma, ",", (452,35)->(452,36))
                                     ^^^^^ Token(Identifier, "fname", (452,37)->(452,42))
                                          ^^ Token(SpacedColon, ": ", (452,42)->(452,44))
                                            ^^^^^^ Token(Identifier, "string", (452,44)->(452,50))
                                                  ^ Token(RightParen, ")", (452,50)->(452,51))
                                                   ^^ Token(SpacedColon, ": ", (452,51)->(452,53))
                                                     ^^^^^^ Token(Identifier, "string", (452,53)->(452,59))
                                                            Token(EndOfLine, "\n", (452,59)->(452,59))
  var filename: string = fname->fnamemodify(':t')
  ^^^ Token(Identifier, "var", (453,2)->(453,5))
      ^^^^^^^^ Token(Identifier, "filename", (453,6)->(453,14))
              ^^ Token(SpacedColon, ": ", (453,14)->(453,16))
                ^^^^^^ Token(Identifier, "string", (453,16)->(453,22))
                       ^ Token(Equal, "=", (453,23)->(453,24))
                         ^^^^^ Token(Identifier, "fname", (453,25)->(453,30))
                              ^^ Token(MethodArrow, "->", (453,30)->(453,32))
                                ^^^^^^^^^^^ Token(Identifier, "fnamemodify", (453,32)->(453,43))
                                           ^ Token(LeftParen, "(", (453,43)->(453,44))
                                             ^ Token(SingleQuoteString, ":t", (453,45)->(453,46))
                                                ^ Token(RightParen, ")", (453,48)->(453,49))
                                                  Token(EndOfLine, "\n", (453,49)->(453,49))
  var flen: number = filename->len()
  ^^^ Token(Identifier, "var", (454,2)->(454,5))
      ^^^^ Token(Identifier, "flen", (454,6)->(454,10))
          ^^ Token(SpacedColon, ": ", (454,10)->(454,12))
            ^^^^^^ Token(Identifier, "number", (454,12)->(454,18))
                   ^ Token(Equal, "=", (454,19)->(454,20))
                     ^^^^^^^^ Token(Identifier, "filename", (454,21)->(454,29))
                             ^^ Token(MethodArrow, "->", (454,29)->(454,31))
                               ^^^ Token(Identifier, "len", (454,31)->(454,34))
                                  ^ Token(LeftParen, "(", (454,34)->(454,35))
                                   ^ Token(RightParen, ")", (454,35)->(454,36))
                                     Token(EndOfLine, "\n", (454,36)->(454,36))
  var dirname: string = fname->fnamemodify(':h')
  ^^^ Token(Identifier, "var", (455,2)->(455,5))
      ^^^^^^^ Token(Identifier, "dirname", (455,6)->(455,13))
             ^^ Token(SpacedColon, ": ", (455,13)->(455,15))
               ^^^^^^ Token(Identifier, "string", (455,15)->(455,21))
                      ^ Token(Equal, "=", (455,22)->(455,23))
                        ^^^^^ Token(Identifier, "fname", (455,24)->(455,29))
                             ^^ Token(MethodArrow, "->", (455,29)->(455,31))
                               ^^^^^^^^^^^ Token(Identifier, "fnamemodify", (455,31)->(455,42))
                                          ^ Token(LeftParen, "(", (455,42)->(455,43))
                                            ^ Token(SingleQuoteString, ":h", (455,44)->(455,45))
                                               ^ Token(RightParen, ")", (455,47)->(455,48))
                                                 Token(EndOfLine, "\n", (455,48)->(455,48))

 Token(EndOfLine, "\n", (456,0)->(456,0))
  if fname->len() > popupWidth && flen < popupWidth
  ^^ Token(Identifier, "if", (457,2)->(457,4))
     ^^^^^ Token(Identifier, "fname", (457,5)->(457,10))
          ^^ Token(MethodArrow, "->", (457,10)->(457,12))
            ^^^ Token(Identifier, "len", (457,12)->(457,15))
               ^ Token(LeftParen, "(", (457,15)->(457,16))
                ^ Token(RightParen, ")", (457,16)->(457,17))
                  ^ Token(GreaterThan, ">", (457,18)->(457,19))
                    ^^^^^^^^^^ Token(Identifier, "popupWidth", (457,20)->(457,30))
                               ^^ Token(And, "&&", (457,31)->(457,33))
                                  ^^^^ Token(Identifier, "flen", (457,34)->(457,38))
                                       ^ Token(LessThan, "<", (457,39)->(457,40))
                                         ^^^^^^^^^^ Token(Identifier, "popupWidth", (457,41)->(457,51))
                                                    Token(EndOfLine, "\n", (457,51)->(457,51))
    # keep the full file name and reduce directory name length
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# keep the full file name and reduce directory name length", (458,4)->(458,62))
    # keep some characters at the beginning and end (equally).
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# keep some characters at the beginning and end (equally).", (459,4)->(459,62))
    # 6 spaces are used for "..." and " ()"
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# 6 spaces are used for \"...\" and \" ()\"", (460,4)->(460,43))
    var dirsz = (popupWidth - flen - 6) / 2
    ^^^ Token(Identifier, "var", (461,4)->(461,7))
        ^^^^^ Token(Identifier, "dirsz", (461,8)->(461,13))
              ^ Token(Equal, "=", (461,14)->(461,15))
                ^ Token(LeftParen, "(", (461,16)->(461,17))
                 ^^^^^^^^^^ Token(Identifier, "popupWidth", (461,17)->(461,27))
                            ^ Token(Minus, "-", (461,28)->(461,29))
                              ^^^^ Token(Identifier, "flen", (461,30)->(461,34))
                                   ^ Token(Minus, "-", (461,35)->(461,36))
                                     ^ Token(Integer, "6", (461,37)->(461,38))
                                      ^ Token(RightParen, ")", (461,38)->(461,39))
                                        ^ Token(Div, "/", (461,40)->(461,41))
                                          ^ Token(Integer, "2", (461,42)->(461,43))
                                            Token(EndOfLine, "\n", (461,43)->(461,43))
    dirname = dirname[: dirsz] .. '...' .. dirname[-dirsz : ]
    ^^^^^^^ Token(Identifier, "dirname", (462,4)->(462,11))
            ^ Token(Equal, "=", (462,12)->(462,13))
              ^^^^^^^ Token(Identifier, "dirname", (462,14)->(462,21))
                     ^ Token(LeftBracket, "[", (462,21)->(462,22))
                      ^^ Token(SpacedColon, ": ", (462,22)->(462,24))
                        ^^^^^ Token(Identifier, "dirsz", (462,24)->(462,29))
                             ^ Token(RightBracket, "]", (462,29)->(462,30))
                               ^^ Token(StringConcat, "..", (462,31)->(462,33))
                                   ^^ Token(SingleQuoteString, "...", (462,35)->(462,37))
                                        ^^ Token(StringConcat, "..", (462,40)->(462,42))
                                           ^^^^^^^ Token(Identifier, "dirname", (462,43)->(462,50))
                                                  ^ Token(LeftBracket, "[", (462,50)->(462,51))
                                                   ^ Token(Minus, "-", (462,51)->(462,52))
                                                    ^^^^^ Token(Identifier, "dirsz", (462,52)->(462,57))
                                                          ^^ Token(SpacedColon, ": ", (462,58)->(462,60))
                                                            ^ Token(RightBracket, "]", (462,60)->(462,61))
                                                              Token(EndOfLine, "\n", (462,61)->(462,61))
  endif
  ^^^^^ Token(Identifier, "endif", (463,2)->(463,7))
        Token(EndOfLine, "\n", (463,7)->(463,7))
  var str: string = filename
  ^^^ Token(Identifier, "var", (464,2)->(464,5))
      ^^^ Token(Identifier, "str", (464,6)->(464,9))
         ^^ Token(SpacedColon, ": ", (464,9)->(464,11))
           ^^^^^^ Token(Identifier, "string", (464,11)->(464,17))
                  ^ Token(Equal, "=", (464,18)->(464,19))
                    ^^^^^^^^ Token(Identifier, "filename", (464,20)->(464,28))
                             Token(EndOfLine, "\n", (464,28)->(464,28))
  if dirname != '.'
  ^^ Token(Identifier, "if", (465,2)->(465,4))
     ^^^^^^^ Token(Identifier, "dirname", (465,5)->(465,12))
             ^^ Token(NotEqualTo, "!=", (465,13)->(465,15))
                  Token(SingleQuoteString, ".", (465,17)->(465,17))
                    Token(EndOfLine, "\n", (465,19)->(465,19))
    str ..= $' ({dirname}/)'
    ^^^ Token(Identifier, "str", (466,4)->(466,7))
        ^^^ Token(StringConcatEquals, "..=", (466,8)->(466,11))
              ^^^^^^^^^^^^ Token(InterpolatedLiteralString, " ({dirname}/)", (466,14)->(466,26))
                             Token(EndOfLine, "\n", (466,28)->(466,28))
  endif
  ^^^^^ Token(Identifier, "endif", (467,2)->(467,7))
        Token(EndOfLine, "\n", (467,7)->(467,7))
  return str
  ^^^^^^ Token(Identifier, "return", (468,2)->(468,8))
         ^^^ Token(Identifier, "str", (468,9)->(468,12))
             Token(EndOfLine, "\n", (468,12)->(468,12))
enddef
^^^^^^ Token(Identifier, "enddef", (469,0)->(469,6))
       Token(EndOfLine, "\n", (469,6)->(469,6))

 Token(EndOfLine, "\n", (470,0)->(470,0))
# process the 'workspace/symbol' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'workspace/symbol' reply from the LSP server", (471,0)->(471,58))
# Result: SymbolInformation[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: SymbolInformation[] | null", (472,0)->(472,36))
def ProcessWorkspaceSymbolReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (473,0)->(473,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceSymbolReply", (473,4)->(473,31))
                               ^ Token(LeftParen, "(", (473,31)->(473,32))
                                ^^^^^^^^^ Token(Identifier, "lspserver", (473,32)->(473,41))
                                         ^^ Token(SpacedColon, ": ", (473,41)->(473,43))
                                           ^^^^ Token(Identifier, "dict", (473,43)->(473,47))
                                               ^ Token(AngleLeft, "<", (473,47)->(473,48))
                                                ^^^ Token(Identifier, "any", (473,48)->(473,51))
                                                   ^ Token(AngleRight, ">", (473,51)->(473,52))
                                                    ^ Token(Comma, ",", (473,52)->(473,53))
                                                      ^^^ Token(Identifier, "req", (473,54)->(473,57))
                                                         ^^ Token(SpacedColon, ": ", (473,57)->(473,59))
                                                           ^^^^ Token(Identifier, "dict", (473,59)->(473,63))
                                                               ^ Token(AngleLeft, "<", (473,63)->(473,64))
                                                                ^^^ Token(Identifier, "any", (473,64)->(473,67))
                                                                   ^ Token(AngleRight, ">", (473,67)->(473,68))
                                                                    ^ Token(Comma, ",", (473,68)->(473,69))
                                                                      ^^^^^ Token(Identifier, "reply", (473,70)->(473,75))
                                                                           ^^ Token(SpacedColon, ": ", (473,75)->(473,77))
                                                                             ^^^^ Token(Identifier, "dict", (473,77)->(473,81))
                                                                                 ^ Token(AngleLeft, "<", (473,81)->(473,82))
                                                                                  ^^^ Token(Identifier, "any", (473,82)->(473,85))
                                                                                     ^ Token(AngleRight, ">", (473,85)->(473,86))
                                                                                      ^ Token(RightParen, ")", (473,86)->(473,87))
                                                                                        Token(EndOfLine, "\n", (473,87)->(473,87))
  var symbols: list<dict<any>> = []
  ^^^ Token(Identifier, "var", (474,2)->(474,5))
      ^^^^^^^ Token(Identifier, "symbols", (474,6)->(474,13))
             ^^ Token(SpacedColon, ": ", (474,13)->(474,15))
               ^^^^ Token(Identifier, "list", (474,15)->(474,19))
                   ^ Token(AngleLeft, "<", (474,19)->(474,20))
                    ^^^^ Token(Identifier, "dict", (474,20)->(474,24))
                        ^ Token(AngleLeft, "<", (474,24)->(474,25))
                         ^^^ Token(Identifier, "any", (474,25)->(474,28))
                            ^ Token(AngleRight, ">", (474,28)->(474,29))
                             ^ Token(GreaterThan, ">", (474,29)->(474,30))
                               ^ Token(Equal, "=", (474,31)->(474,32))
                                 ^ Token(LeftBracket, "[", (474,33)->(474,34))
                                  ^ Token(RightBracket, "]", (474,34)->(474,35))
                                    Token(EndOfLine, "\n", (474,35)->(474,35))
  var symbolType: string
  ^^^ Token(Identifier, "var", (475,2)->(475,5))
      ^^^^^^^^^^ Token(Identifier, "symbolType", (475,6)->(475,16))
                ^^ Token(SpacedColon, ": ", (475,16)->(475,18))
                  ^^^^^^ Token(Identifier, "string", (475,18)->(475,24))
                         Token(EndOfLine, "\n", (475,24)->(475,24))
  var fileName: string
  ^^^ Token(Identifier, "var", (476,2)->(476,5))
      ^^^^^^^^ Token(Identifier, "fileName", (476,6)->(476,14))
              ^^ Token(SpacedColon, ": ", (476,14)->(476,16))
                ^^^^^^ Token(Identifier, "string", (476,16)->(476,22))
                       Token(EndOfLine, "\n", (476,22)->(476,22))
  var r: dict<dict<number>>
  ^^^ Token(Identifier, "var", (477,2)->(477,5))
      ^ Token(Identifier, "r", (477,6)->(477,7))
       ^^ Token(SpacedColon, ": ", (477,7)->(477,9))
         ^^^^ Token(Identifier, "dict", (477,9)->(477,13))
             ^ Token(AngleLeft, "<", (477,13)->(477,14))
              ^^^^ Token(Identifier, "dict", (477,14)->(477,18))
                  ^ Token(AngleLeft, "<", (477,18)->(477,19))
                   ^^^^^^ Token(Identifier, "number", (477,19)->(477,25))
                         ^ Token(AngleRight, ">", (477,25)->(477,26))
                          ^ Token(GreaterThan, ">", (477,26)->(477,27))
                            Token(EndOfLine, "\n", (477,27)->(477,27))
  var symName: string
  ^^^ Token(Identifier, "var", (478,2)->(478,5))
      ^^^^^^^ Token(Identifier, "symName", (478,6)->(478,13))
             ^^ Token(SpacedColon, ": ", (478,13)->(478,15))
               ^^^^^^ Token(Identifier, "string", (478,15)->(478,21))
                      Token(EndOfLine, "\n", (478,21)->(478,21))

 Token(EndOfLine, "\n", (479,0)->(479,0))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (480,2)->(480,4))
     ^^^^^ Token(Identifier, "reply", (480,5)->(480,10))
          ^ Token(Dot, ".", (480,10)->(480,11))
           ^^^^^^ Token(Identifier, "result", (480,11)->(480,17))
                 ^^ Token(MethodArrow, "->", (480,17)->(480,19))
                   ^^^^^ Token(Identifier, "empty", (480,19)->(480,24))
                        ^ Token(LeftParen, "(", (480,24)->(480,25))
                         ^ Token(RightParen, ")", (480,25)->(480,26))
                           Token(EndOfLine, "\n", (480,26)->(480,26))
    return
    ^^^^^^ Token(Identifier, "return", (481,4)->(481,10))
           Token(EndOfLine, "\n", (481,10)->(481,10))
  endif
  ^^^^^ Token(Identifier, "endif", (482,2)->(482,7))
        Token(EndOfLine, "\n", (482,7)->(482,7))

 Token(EndOfLine, "\n", (483,0)->(483,0))
  for symbol in reply.result
  ^^^ Token(Identifier, "for", (484,2)->(484,5))
      ^^^^^^ Token(Identifier, "symbol", (484,6)->(484,12))
             ^^ Token(Identifier, "in", (484,13)->(484,15))
                ^^^^^ Token(Identifier, "reply", (484,16)->(484,21))
                     ^ Token(Dot, ".", (484,21)->(484,22))
                      ^^^^^^ Token(Identifier, "result", (484,22)->(484,28))
                             Token(EndOfLine, "\n", (484,28)->(484,28))
    if !symbol->has_key('location')
    ^^ Token(Identifier, "if", (485,4)->(485,6))
       ^ Token(Bang, "!", (485,7)->(485,8))
        ^^^^^^ Token(Identifier, "symbol", (485,8)->(485,14))
              ^^ Token(MethodArrow, "->", (485,14)->(485,16))
                ^^^^^^^ Token(Identifier, "has_key", (485,16)->(485,23))
                       ^ Token(LeftParen, "(", (485,23)->(485,24))
                         ^^^^^^^ Token(SingleQuoteString, "location", (485,25)->(485,32))
                                  ^ Token(RightParen, ")", (485,34)->(485,35))
                                    Token(EndOfLine, "\n", (485,35)->(485,35))
      # ignore entries without location information
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# ignore entries without location information", (486,6)->(486,51))
      continue
      ^^^^^^^^ Token(Identifier, "continue", (487,6)->(487,14))
               Token(EndOfLine, "\n", (487,14)->(487,14))
    endif
    ^^^^^ Token(Identifier, "endif", (488,4)->(488,9))
          Token(EndOfLine, "\n", (488,9)->(488,9))

 Token(EndOfLine, "\n", (489,0)->(489,0))
    # interface SymbolInformation
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# interface SymbolInformation", (490,4)->(490,33))
    fileName = util.LspUriToFile(symbol.location.uri)
    ^^^^^^^^ Token(Identifier, "fileName", (491,4)->(491,12))
             ^ Token(Equal, "=", (491,13)->(491,14))
               ^^^^ Token(Identifier, "util", (491,15)->(491,19))
                   ^ Token(Dot, ".", (491,19)->(491,20))
                    ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (491,20)->(491,32))
                                ^ Token(LeftParen, "(", (491,32)->(491,33))
                                 ^^^^^^ Token(Identifier, "symbol", (491,33)->(491,39))
                                       ^ Token(Dot, ".", (491,39)->(491,40))
                                        ^^^^^^^^ Token(Identifier, "location", (491,40)->(491,48))
                                                ^ Token(Dot, ".", (491,48)->(491,49))
                                                 ^^^ Token(Identifier, "uri", (491,49)->(491,52))
                                                    ^ Token(RightParen, ")", (491,52)->(491,53))
                                                      Token(EndOfLine, "\n", (491,53)->(491,53))
    r = symbol.location.range
    ^ Token(Identifier, "r", (492,4)->(492,5))
      ^ Token(Equal, "=", (492,6)->(492,7))
        ^^^^^^ Token(Identifier, "symbol", (492,8)->(492,14))
              ^ Token(Dot, ".", (492,14)->(492,15))
               ^^^^^^^^ Token(Identifier, "location", (492,15)->(492,23))
                       ^ Token(Dot, ".", (492,23)->(492,24))
                        ^^^^^ Token(Identifier, "range", (492,24)->(492,29))
                              Token(EndOfLine, "\n", (492,29)->(492,29))

 Token(EndOfLine, "\n", (493,0)->(493,0))
    symName = symbol.name
    ^^^^^^^ Token(Identifier, "symName", (494,4)->(494,11))
            ^ Token(Equal, "=", (494,12)->(494,13))
              ^^^^^^ Token(Identifier, "symbol", (494,14)->(494,20))
                    ^ Token(Dot, ".", (494,20)->(494,21))
                     ^^^^ Token(Identifier, "name", (494,21)->(494,25))
                          Token(EndOfLine, "\n", (494,25)->(494,25))
    if symbol->has_key('containerName') && symbol.containerName != ''
    ^^ Token(Identifier, "if", (495,4)->(495,6))
       ^^^^^^ Token(Identifier, "symbol", (495,7)->(495,13))
             ^^ Token(MethodArrow, "->", (495,13)->(495,15))
               ^^^^^^^ Token(Identifier, "has_key", (495,15)->(495,22))
                      ^ Token(LeftParen, "(", (495,22)->(495,23))
                        ^^^^^^^^^^^^ Token(SingleQuoteString, "containerName", (495,24)->(495,36))
                                      ^ Token(RightParen, ")", (495,38)->(495,39))
                                        ^^ Token(And, "&&", (495,40)->(495,42))
                                           ^^^^^^ Token(Identifier, "symbol", (495,43)->(495,49))
                                                 ^ Token(Dot, ".", (495,49)->(495,50))
                                                  ^^^^^^^^^^^^^ Token(Identifier, "containerName", (495,50)->(495,63))
                                                                ^^ Token(NotEqualTo, "!=", (495,64)->(495,66))
                                                                     Token(SingleQuoteString, "", (495,68)->(495,68))
                                                                      Token(EndOfLine, "\n", (495,69)->(495,69))
      symName = $'{symbol.containerName}::{symName}'
      ^^^^^^^ Token(Identifier, "symName", (496,6)->(496,13))
              ^ Token(Equal, "=", (496,14)->(496,15))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "{symbol.containerName}::{symName}", (496,18)->(496,50))
                                                     Token(EndOfLine, "\n", (496,52)->(496,52))
    endif
    ^^^^^ Token(Identifier, "endif", (497,4)->(497,9))
          Token(EndOfLine, "\n", (497,9)->(497,9))
    symName ..= $' [{LspSymbolKindToName(symbol.kind)}]'
    ^^^^^^^ Token(Identifier, "symName", (498,4)->(498,11))
            ^^^ Token(StringConcatEquals, "..=", (498,12)->(498,15))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, " [{LspSymbolKindToName(symbol.kind)}]", (498,18)->(498,54))
                                                         Token(EndOfLine, "\n", (498,56)->(498,56))
    symName ..= ' ' .. MakeMenuName(
    ^^^^^^^ Token(Identifier, "symName", (499,4)->(499,11))
            ^^^ Token(StringConcatEquals, "..=", (499,12)->(499,15))
                  Token(SingleQuoteString, " ", (499,17)->(499,17))
                    ^^ Token(StringConcat, "..", (499,20)->(499,22))
                       ^^^^^^^^^^^^ Token(Identifier, "MakeMenuName", (499,23)->(499,35))
                                   ^ Token(LeftParen, "(", (499,35)->(499,36))
                                     Token(EndOfLine, "\n", (499,36)->(499,36))
		lspserver.workspaceSymbolPopup->popup_getpos().core_width,
  ^^^^^^^^^ Token(Identifier, "lspserver", (500,2)->(500,11))
           ^ Token(Dot, ".", (500,11)->(500,12))
            ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceSymbolPopup", (500,12)->(500,32))
                                ^^ Token(MethodArrow, "->", (500,32)->(500,34))
                                  ^^^^^^^^^^^^ Token(Identifier, "popup_getpos", (500,34)->(500,46))
                                              ^ Token(LeftParen, "(", (500,46)->(500,47))
                                               ^ Token(RightParen, ")", (500,47)->(500,48))
                                                ^ Token(Dot, ".", (500,48)->(500,49))
                                                 ^^^^^^^^^^ Token(Identifier, "core_width", (500,49)->(500,59))
                                                           ^ Token(Comma, ",", (500,59)->(500,60))
                                                             Token(EndOfLine, "\n", (500,60)->(500,60))
		fileName)
  ^^^^^^^^ Token(Identifier, "fileName", (501,2)->(501,10))
          ^ Token(RightParen, ")", (501,10)->(501,11))
            Token(EndOfLine, "\n", (501,11)->(501,11))

 Token(EndOfLine, "\n", (502,0)->(502,0))
    symbols->add({name: symName,
    ^^^^^^^ Token(Identifier, "symbols", (503,4)->(503,11))
           ^^ Token(MethodArrow, "->", (503,11)->(503,13))
             ^^^ Token(Identifier, "add", (503,13)->(503,16))
                ^ Token(LeftParen, "(", (503,16)->(503,17))
                 ^ Token(LeftBrace, "{", (503,17)->(503,18))
                  ^^^^ Token(Identifier, "name", (503,18)->(503,22))
                      ^^ Token(SpacedColon, ": ", (503,22)->(503,24))
                        ^^^^^^^ Token(Identifier, "symName", (503,24)->(503,31))
                               ^ Token(Comma, ",", (503,31)->(503,32))
                                 Token(EndOfLine, "\n", (503,32)->(503,32))
			file: fileName,
   ^^^^ Token(Identifier, "file", (504,3)->(504,7))
       ^^ Token(SpacedColon, ": ", (504,7)->(504,9))
         ^^^^^^^^ Token(Identifier, "fileName", (504,9)->(504,17))
                 ^ Token(Comma, ",", (504,17)->(504,18))
                   Token(EndOfLine, "\n", (504,18)->(504,18))
			pos: r.start})
   ^^^ Token(Identifier, "pos", (505,3)->(505,6))
      ^^ Token(SpacedColon, ": ", (505,6)->(505,8))
        ^ Token(Identifier, "r", (505,8)->(505,9))
         ^ Token(Dot, ".", (505,9)->(505,10))
          ^^^^^ Token(Identifier, "start", (505,10)->(505,15))
               ^ Token(RightBrace, "}", (505,15)->(505,16))
                ^ Token(RightParen, ")", (505,16)->(505,17))
                  Token(EndOfLine, "\n", (505,17)->(505,17))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (506,2)->(506,8))
         Token(EndOfLine, "\n", (506,8)->(506,8))
  symbols->setwinvar(lspserver.workspaceSymbolPopup, 'LspSymbolTable')
  ^^^^^^^ Token(Identifier, "symbols", (507,2)->(507,9))
         ^^ Token(MethodArrow, "->", (507,9)->(507,11))
           ^^^^^^^^^ Token(Identifier, "setwinvar", (507,11)->(507,20))
                    ^ Token(LeftParen, "(", (507,20)->(507,21))
                     ^^^^^^^^^ Token(Identifier, "lspserver", (507,21)->(507,30))
                              ^ Token(Dot, ".", (507,30)->(507,31))
                               ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceSymbolPopup", (507,31)->(507,51))
                                                   ^ Token(Comma, ",", (507,51)->(507,52))
                                                      ^^^^^^^^^^^^^ Token(SingleQuoteString, "LspSymbolTable", (507,54)->(507,67))
                                                                     ^ Token(RightParen, ")", (507,69)->(507,70))
                                                                       Token(EndOfLine, "\n", (507,70)->(507,70))
  lspserver.workspaceSymbolPopup->popup_settext(
  ^^^^^^^^^ Token(Identifier, "lspserver", (508,2)->(508,11))
           ^ Token(Dot, ".", (508,11)->(508,12))
            ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceSymbolPopup", (508,12)->(508,32))
                                ^^ Token(MethodArrow, "->", (508,32)->(508,34))
                                  ^^^^^^^^^^^^^ Token(Identifier, "popup_settext", (508,34)->(508,47))
                                               ^ Token(LeftParen, "(", (508,47)->(508,48))
                                                 Token(EndOfLine, "\n", (508,48)->(508,48))
				symbols->copy()->mapnew('v:val.name'))
    ^^^^^^^ Token(Identifier, "symbols", (509,4)->(509,11))
           ^^ Token(MethodArrow, "->", (509,11)->(509,13))
             ^^^^ Token(Identifier, "copy", (509,13)->(509,17))
                 ^ Token(LeftParen, "(", (509,17)->(509,18))
                  ^ Token(RightParen, ")", (509,18)->(509,19))
                   ^^ Token(MethodArrow, "->", (509,19)->(509,21))
                     ^^^^^^ Token(Identifier, "mapnew", (509,21)->(509,27))
                           ^ Token(LeftParen, "(", (509,27)->(509,28))
                             ^^^^^^^^^ Token(SingleQuoteString, "v:val.name", (509,29)->(509,38))
                                        ^ Token(RightParen, ")", (509,40)->(509,41))
                                         ^ Token(RightParen, ")", (509,41)->(509,42))
                                           Token(EndOfLine, "\n", (509,42)->(509,42))
enddef
^^^^^^ Token(Identifier, "enddef", (510,0)->(510,6))
       Token(EndOfLine, "\n", (510,6)->(510,6))

 Token(EndOfLine, "\n", (511,0)->(511,0))
# process the 'textDocument/prepareCallHierarchy' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/prepareCallHierarchy' reply from the LSP server", (512,0)->(512,75))
# Result: CallHierarchyItem[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CallHierarchyItem[] | null", (513,0)->(513,36))
def ProcessPrepareCallHierarchy(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (514,0)->(514,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessPrepareCallHierarchy", (514,4)->(514,31))
                               ^ Token(LeftParen, "(", (514,31)->(514,32))
                                ^^^^^^^^^ Token(Identifier, "lspserver", (514,32)->(514,41))
                                         ^^ Token(SpacedColon, ": ", (514,41)->(514,43))
                                           ^^^^ Token(Identifier, "dict", (514,43)->(514,47))
                                               ^ Token(AngleLeft, "<", (514,47)->(514,48))
                                                ^^^ Token(Identifier, "any", (514,48)->(514,51))
                                                   ^ Token(AngleRight, ">", (514,51)->(514,52))
                                                    ^ Token(Comma, ",", (514,52)->(514,53))
                                                      ^^^ Token(Identifier, "req", (514,54)->(514,57))
                                                         ^^ Token(SpacedColon, ": ", (514,57)->(514,59))
                                                           ^^^^ Token(Identifier, "dict", (514,59)->(514,63))
                                                               ^ Token(AngleLeft, "<", (514,63)->(514,64))
                                                                ^^^ Token(Identifier, "any", (514,64)->(514,67))
                                                                   ^ Token(AngleRight, ">", (514,67)->(514,68))
                                                                    ^ Token(Comma, ",", (514,68)->(514,69))
                                                                      ^^^^^ Token(Identifier, "reply", (514,70)->(514,75))
                                                                           ^^ Token(SpacedColon, ": ", (514,75)->(514,77))
                                                                             ^^^^ Token(Identifier, "dict", (514,77)->(514,81))
                                                                                 ^ Token(AngleLeft, "<", (514,81)->(514,82))
                                                                                  ^^^ Token(Identifier, "any", (514,82)->(514,85))
                                                                                     ^ Token(AngleRight, ">", (514,85)->(514,86))
                                                                                      ^ Token(RightParen, ")", (514,86)->(514,87))
                                                                                        Token(EndOfLine, "\n", (514,87)->(514,87))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (515,2)->(515,4))
     ^^^^^ Token(Identifier, "reply", (515,5)->(515,10))
          ^ Token(Dot, ".", (515,10)->(515,11))
           ^^^^^^ Token(Identifier, "result", (515,11)->(515,17))
                 ^^ Token(MethodArrow, "->", (515,17)->(515,19))
                   ^^^^^ Token(Identifier, "empty", (515,19)->(515,24))
                        ^ Token(LeftParen, "(", (515,24)->(515,25))
                         ^ Token(RightParen, ")", (515,25)->(515,26))
                           Token(EndOfLine, "\n", (515,26)->(515,26))
    if lspserver.callHierarchyType == 'incoming'
    ^^ Token(Identifier, "if", (516,4)->(516,6))
       ^^^^^^^^^ Token(Identifier, "lspserver", (516,7)->(516,16))
                ^ Token(Dot, ".", (516,16)->(516,17))
                 ^^^^^^^^^^^^^^^^^ Token(Identifier, "callHierarchyType", (516,17)->(516,34))
                                   ^^ Token(EqualTo, "==", (516,35)->(516,37))
                                       ^^^^^^^ Token(SingleQuoteString, "incoming", (516,39)->(516,46))
                                                 Token(EndOfLine, "\n", (516,48)->(516,48))
      util.WarnMsg('No incoming calls')
      ^^^^ Token(Identifier, "util", (517,6)->(517,10))
          ^ Token(Dot, ".", (517,10)->(517,11))
           ^^^^^^^ Token(Identifier, "WarnMsg", (517,11)->(517,18))
                  ^ Token(LeftParen, "(", (517,18)->(517,19))
                    ^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "No incoming calls", (517,20)->(517,36))
                                      ^ Token(RightParen, ")", (517,38)->(517,39))
                                        Token(EndOfLine, "\n", (517,39)->(517,39))
    else
    ^^^^ Token(Identifier, "else", (518,4)->(518,8))
         Token(EndOfLine, "\n", (518,8)->(518,8))
      util.WarnMsg('No outgoing calls')
      ^^^^ Token(Identifier, "util", (519,6)->(519,10))
          ^ Token(Dot, ".", (519,10)->(519,11))
           ^^^^^^^ Token(Identifier, "WarnMsg", (519,11)->(519,18))
                  ^ Token(LeftParen, "(", (519,18)->(519,19))
                    ^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "No outgoing calls", (519,20)->(519,36))
                                      ^ Token(RightParen, ")", (519,38)->(519,39))
                                        Token(EndOfLine, "\n", (519,39)->(519,39))
    endif
    ^^^^^ Token(Identifier, "endif", (520,4)->(520,9))
          Token(EndOfLine, "\n", (520,9)->(520,9))
    return
    ^^^^^^ Token(Identifier, "return", (521,4)->(521,10))
           Token(EndOfLine, "\n", (521,10)->(521,10))
  endif
  ^^^^^ Token(Identifier, "endif", (522,2)->(522,7))
        Token(EndOfLine, "\n", (522,7)->(522,7))

 Token(EndOfLine, "\n", (523,0)->(523,0))
  var choice: number = 1
  ^^^ Token(Identifier, "var", (524,2)->(524,5))
      ^^^^^^ Token(Identifier, "choice", (524,6)->(524,12))
            ^^ Token(SpacedColon, ": ", (524,12)->(524,14))
              ^^^^^^ Token(Identifier, "number", (524,14)->(524,20))
                     ^ Token(Equal, "=", (524,21)->(524,22))
                       ^ Token(Integer, "1", (524,23)->(524,24))
                         Token(EndOfLine, "\n", (524,24)->(524,24))
  if reply.result->len() > 1
  ^^ Token(Identifier, "if", (525,2)->(525,4))
     ^^^^^ Token(Identifier, "reply", (525,5)->(525,10))
          ^ Token(Dot, ".", (525,10)->(525,11))
           ^^^^^^ Token(Identifier, "result", (525,11)->(525,17))
                 ^^ Token(MethodArrow, "->", (525,17)->(525,19))
                   ^^^ Token(Identifier, "len", (525,19)->(525,22))
                      ^ Token(LeftParen, "(", (525,22)->(525,23))
                       ^ Token(RightParen, ")", (525,23)->(525,24))
                         ^ Token(GreaterThan, ">", (525,25)->(525,26))
                           ^ Token(Integer, "1", (525,27)->(525,28))
                             Token(EndOfLine, "\n", (525,28)->(525,28))
    var items: list<string> = ['Select a Call Hierarchy Item:']
    ^^^ Token(Identifier, "var", (526,4)->(526,7))
        ^^^^^ Token(Identifier, "items", (526,8)->(526,13))
             ^^ Token(SpacedColon, ": ", (526,13)->(526,15))
               ^^^^ Token(Identifier, "list", (526,15)->(526,19))
                   ^ Token(AngleLeft, "<", (526,19)->(526,20))
                    ^^^^^^ Token(Identifier, "string", (526,20)->(526,26))
                          ^ Token(GreaterThan, ">", (526,26)->(526,27))
                            ^ Token(Equal, "=", (526,28)->(526,29))
                              ^ Token(LeftBracket, "[", (526,30)->(526,31))
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "Select a Call Hierarchy Item:", (526,32)->(526,60))
                                                              ^ Token(RightBracket, "]", (526,62)->(526,63))
                                                                Token(EndOfLine, "\n", (526,63)->(526,63))
    for i in range(reply.result->len())
    ^^^ Token(Identifier, "for", (527,4)->(527,7))
        ^ Token(Identifier, "i", (527,8)->(527,9))
          ^^ Token(Identifier, "in", (527,10)->(527,12))
             ^^^^^ Token(Identifier, "range", (527,13)->(527,18))
                  ^ Token(LeftParen, "(", (527,18)->(527,19))
                   ^^^^^ Token(Identifier, "reply", (527,19)->(527,24))
                        ^ Token(Dot, ".", (527,24)->(527,25))
                         ^^^^^^ Token(Identifier, "result", (527,25)->(527,31))
                               ^^ Token(MethodArrow, "->", (527,31)->(527,33))
                                 ^^^ Token(Identifier, "len", (527,33)->(527,36))
                                    ^ Token(LeftParen, "(", (527,36)->(527,37))
                                     ^ Token(RightParen, ")", (527,37)->(527,38))
                                      ^ Token(RightParen, ")", (527,38)->(527,39))
                                        Token(EndOfLine, "\n", (527,39)->(527,39))
      items->add(printf("%d. %s", i + 1, reply.result[i].name))
      ^^^^^ Token(Identifier, "items", (528,6)->(528,11))
           ^^ Token(MethodArrow, "->", (528,11)->(528,13))
             ^^^ Token(Identifier, "add", (528,13)->(528,16))
                ^ Token(LeftParen, "(", (528,16)->(528,17))
                 ^^^^^^ Token(Identifier, "printf", (528,17)->(528,23))
                       ^ Token(LeftParen, "(", (528,23)->(528,24))
                         ^^^^^ Token(DoubleQuoteString, "%d. %s", (528,25)->(528,30))
                                ^ Token(Comma, ",", (528,32)->(528,33))
                                  ^ Token(Identifier, "i", (528,34)->(528,35))
                                    ^ Token(Plus, "+", (528,36)->(528,37))
                                      ^ Token(Integer, "1", (528,38)->(528,39))
                                       ^ Token(Comma, ",", (528,39)->(528,40))
                                         ^^^^^ Token(Identifier, "reply", (528,41)->(528,46))
                                              ^ Token(Dot, ".", (528,46)->(528,47))
                                               ^^^^^^ Token(Identifier, "result", (528,47)->(528,53))
                                                     ^ Token(LeftBracket, "[", (528,53)->(528,54))
                                                      ^ Token(Identifier, "i", (528,54)->(528,55))
                                                       ^ Token(RightBracket, "]", (528,55)->(528,56))
                                                        ^ Token(Dot, ".", (528,56)->(528,57))
                                                         ^^^^ Token(Identifier, "name", (528,57)->(528,61))
                                                             ^ Token(RightParen, ")", (528,61)->(528,62))
                                                              ^ Token(RightParen, ")", (528,62)->(528,63))
                                                                Token(EndOfLine, "\n", (528,63)->(528,63))
    endfor
    ^^^^^^ Token(Identifier, "endfor", (529,4)->(529,10))
           Token(EndOfLine, "\n", (529,10)->(529,10))
    choice = inputlist(items)
    ^^^^^^ Token(Identifier, "choice", (530,4)->(530,10))
           ^ Token(Equal, "=", (530,11)->(530,12))
             ^^^^^^^^^ Token(Identifier, "inputlist", (530,13)->(530,22))
                      ^ Token(LeftParen, "(", (530,22)->(530,23))
                       ^^^^^ Token(Identifier, "items", (530,23)->(530,28))
                            ^ Token(RightParen, ")", (530,28)->(530,29))
                              Token(EndOfLine, "\n", (530,29)->(530,29))
    if choice < 1 || choice > items->len()
    ^^ Token(Identifier, "if", (531,4)->(531,6))
       ^^^^^^ Token(Identifier, "choice", (531,7)->(531,13))
              ^ Token(LessThan, "<", (531,14)->(531,15))
                ^ Token(Integer, "1", (531,16)->(531,17))
                  ^^ Token(Or, "||", (531,18)->(531,20))
                     ^^^^^^ Token(Identifier, "choice", (531,21)->(531,27))
                            ^ Token(GreaterThan, ">", (531,28)->(531,29))
                              ^^^^^ Token(Identifier, "items", (531,30)->(531,35))
                                   ^^ Token(MethodArrow, "->", (531,35)->(531,37))
                                     ^^^ Token(Identifier, "len", (531,37)->(531,40))
                                        ^ Token(LeftParen, "(", (531,40)->(531,41))
                                         ^ Token(RightParen, ")", (531,41)->(531,42))
                                           Token(EndOfLine, "\n", (531,42)->(531,42))
      return
      ^^^^^^ Token(Identifier, "return", (532,6)->(532,12))
             Token(EndOfLine, "\n", (532,12)->(532,12))
    endif
    ^^^^^ Token(Identifier, "endif", (533,4)->(533,9))
          Token(EndOfLine, "\n", (533,9)->(533,9))
  endif
  ^^^^^ Token(Identifier, "endif", (534,2)->(534,7))
        Token(EndOfLine, "\n", (534,7)->(534,7))

 Token(EndOfLine, "\n", (535,0)->(535,0))
  if lspserver.callHierarchyType == 'incoming'
  ^^ Token(Identifier, "if", (536,2)->(536,4))
     ^^^^^^^^^ Token(Identifier, "lspserver", (536,5)->(536,14))
              ^ Token(Dot, ".", (536,14)->(536,15))
               ^^^^^^^^^^^^^^^^^ Token(Identifier, "callHierarchyType", (536,15)->(536,32))
                                 ^^ Token(EqualTo, "==", (536,33)->(536,35))
                                     ^^^^^^^ Token(SingleQuoteString, "incoming", (536,37)->(536,44))
                                               Token(EndOfLine, "\n", (536,46)->(536,46))
    g:LspGetIncomingCalls(reply.result[choice - 1])
    ^ Token(Identifier, "g", (537,4)->(537,5))
     ^ Token(Colon, ":", (537,5)->(537,6))
      ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspGetIncomingCalls", (537,6)->(537,25))
                         ^ Token(LeftParen, "(", (537,25)->(537,26))
                          ^^^^^ Token(Identifier, "reply", (537,26)->(537,31))
                               ^ Token(Dot, ".", (537,31)->(537,32))
                                ^^^^^^ Token(Identifier, "result", (537,32)->(537,38))
                                      ^ Token(LeftBracket, "[", (537,38)->(537,39))
                                       ^^^^^^ Token(Identifier, "choice", (537,39)->(537,45))
                                              ^ Token(Minus, "-", (537,46)->(537,47))
                                                ^ Token(Integer, "1", (537,48)->(537,49))
                                                 ^ Token(RightBracket, "]", (537,49)->(537,50))
                                                  ^ Token(RightParen, ")", (537,50)->(537,51))
                                                    Token(EndOfLine, "\n", (537,51)->(537,51))
  else
  ^^^^ Token(Identifier, "else", (538,2)->(538,6))
       Token(EndOfLine, "\n", (538,6)->(538,6))
    g:LspGetOutgoingCalls(reply.result[choice - 1])
    ^ Token(Identifier, "g", (539,4)->(539,5))
     ^ Token(Colon, ":", (539,5)->(539,6))
      ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspGetOutgoingCalls", (539,6)->(539,25))
                         ^ Token(LeftParen, "(", (539,25)->(539,26))
                          ^^^^^ Token(Identifier, "reply", (539,26)->(539,31))
                               ^ Token(Dot, ".", (539,31)->(539,32))
                                ^^^^^^ Token(Identifier, "result", (539,32)->(539,38))
                                      ^ Token(LeftBracket, "[", (539,38)->(539,39))
                                       ^^^^^^ Token(Identifier, "choice", (539,39)->(539,45))
                                              ^ Token(Minus, "-", (539,46)->(539,47))
                                                ^ Token(Integer, "1", (539,48)->(539,49))
                                                 ^ Token(RightBracket, "]", (539,49)->(539,50))
                                                  ^ Token(RightParen, ")", (539,50)->(539,51))
                                                    Token(EndOfLine, "\n", (539,51)->(539,51))
  endif
  ^^^^^ Token(Identifier, "endif", (540,2)->(540,7))
        Token(EndOfLine, "\n", (540,7)->(540,7))
enddef
^^^^^^ Token(Identifier, "enddef", (541,0)->(541,6))
       Token(EndOfLine, "\n", (541,6)->(541,6))

 Token(EndOfLine, "\n", (542,0)->(542,0))
# process the 'callHierarchy/incomingCalls' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'callHierarchy/incomingCalls' reply from the LSP server", (543,0)->(543,69))
# Result: CallHierarchyIncomingCall[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CallHierarchyIncomingCall[] | null", (544,0)->(544,44))
def ProcessIncomingCalls(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (545,0)->(545,3))
    ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessIncomingCalls", (545,4)->(545,24))
                        ^ Token(LeftParen, "(", (545,24)->(545,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (545,25)->(545,34))
                                  ^^ Token(SpacedColon, ": ", (545,34)->(545,36))
                                    ^^^^ Token(Identifier, "dict", (545,36)->(545,40))
                                        ^ Token(AngleLeft, "<", (545,40)->(545,41))
                                         ^^^ Token(Identifier, "any", (545,41)->(545,44))
                                            ^ Token(AngleRight, ">", (545,44)->(545,45))
                                             ^ Token(Comma, ",", (545,45)->(545,46))
                                               ^^^ Token(Identifier, "req", (545,47)->(545,50))
                                                  ^^ Token(SpacedColon, ": ", (545,50)->(545,52))
                                                    ^^^^ Token(Identifier, "dict", (545,52)->(545,56))
                                                        ^ Token(AngleLeft, "<", (545,56)->(545,57))
                                                         ^^^ Token(Identifier, "any", (545,57)->(545,60))
                                                            ^ Token(AngleRight, ">", (545,60)->(545,61))
                                                             ^ Token(Comma, ",", (545,61)->(545,62))
                                                               ^^^^^ Token(Identifier, "reply", (545,63)->(545,68))
                                                                    ^^ Token(SpacedColon, ": ", (545,68)->(545,70))
                                                                      ^^^^ Token(Identifier, "dict", (545,70)->(545,74))
                                                                          ^ Token(AngleLeft, "<", (545,74)->(545,75))
                                                                           ^^^ Token(Identifier, "any", (545,75)->(545,78))
                                                                              ^ Token(AngleRight, ">", (545,78)->(545,79))
                                                                               ^ Token(RightParen, ")", (545,79)->(545,80))
                                                                                 Token(EndOfLine, "\n", (545,80)->(545,80))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (546,2)->(546,4))
     ^^^^^ Token(Identifier, "reply", (546,5)->(546,10))
          ^ Token(Dot, ".", (546,10)->(546,11))
           ^^^^^^ Token(Identifier, "result", (546,11)->(546,17))
                 ^^ Token(MethodArrow, "->", (546,17)->(546,19))
                   ^^^^^ Token(Identifier, "empty", (546,19)->(546,24))
                        ^ Token(LeftParen, "(", (546,24)->(546,25))
                         ^ Token(RightParen, ")", (546,25)->(546,26))
                           Token(EndOfLine, "\n", (546,26)->(546,26))
    return
    ^^^^^^ Token(Identifier, "return", (547,4)->(547,10))
           Token(EndOfLine, "\n", (547,10)->(547,10))
  endif
  ^^^^^ Token(Identifier, "endif", (548,2)->(548,7))
        Token(EndOfLine, "\n", (548,7)->(548,7))

 Token(EndOfLine, "\n", (549,0)->(549,0))
  callhier.IncomingCalls(reply.result)
  ^^^^^^^^ Token(Identifier, "callhier", (550,2)->(550,10))
          ^ Token(Dot, ".", (550,10)->(550,11))
           ^^^^^^^^^^^^^ Token(Identifier, "IncomingCalls", (550,11)->(550,24))
                        ^ Token(LeftParen, "(", (550,24)->(550,25))
                         ^^^^^ Token(Identifier, "reply", (550,25)->(550,30))
                              ^ Token(Dot, ".", (550,30)->(550,31))
                               ^^^^^^ Token(Identifier, "result", (550,31)->(550,37))
                                     ^ Token(RightParen, ")", (550,37)->(550,38))
                                       Token(EndOfLine, "\n", (550,38)->(550,38))
enddef
^^^^^^ Token(Identifier, "enddef", (551,0)->(551,6))
       Token(EndOfLine, "\n", (551,6)->(551,6))

 Token(EndOfLine, "\n", (552,0)->(552,0))
# process the 'callHierarchy/outgoingCalls' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'callHierarchy/outgoingCalls' reply from the LSP server", (553,0)->(553,69))
# Result: CallHierarchyOutgoingCall[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CallHierarchyOutgoingCall[] | null", (554,0)->(554,44))
def ProcessOutgoingCalls(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (555,0)->(555,3))
    ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessOutgoingCalls", (555,4)->(555,24))
                        ^ Token(LeftParen, "(", (555,24)->(555,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (555,25)->(555,34))
                                  ^^ Token(SpacedColon, ": ", (555,34)->(555,36))
                                    ^^^^ Token(Identifier, "dict", (555,36)->(555,40))
                                        ^ Token(AngleLeft, "<", (555,40)->(555,41))
                                         ^^^ Token(Identifier, "any", (555,41)->(555,44))
                                            ^ Token(AngleRight, ">", (555,44)->(555,45))
                                             ^ Token(Comma, ",", (555,45)->(555,46))
                                               ^^^ Token(Identifier, "req", (555,47)->(555,50))
                                                  ^^ Token(SpacedColon, ": ", (555,50)->(555,52))
                                                    ^^^^ Token(Identifier, "dict", (555,52)->(555,56))
                                                        ^ Token(AngleLeft, "<", (555,56)->(555,57))
                                                         ^^^ Token(Identifier, "any", (555,57)->(555,60))
                                                            ^ Token(AngleRight, ">", (555,60)->(555,61))
                                                             ^ Token(Comma, ",", (555,61)->(555,62))
                                                               ^^^^^ Token(Identifier, "reply", (555,63)->(555,68))
                                                                    ^^ Token(SpacedColon, ": ", (555,68)->(555,70))
                                                                      ^^^^ Token(Identifier, "dict", (555,70)->(555,74))
                                                                          ^ Token(AngleLeft, "<", (555,74)->(555,75))
                                                                           ^^^ Token(Identifier, "any", (555,75)->(555,78))
                                                                              ^ Token(AngleRight, ">", (555,78)->(555,79))
                                                                               ^ Token(RightParen, ")", (555,79)->(555,80))
                                                                                 Token(EndOfLine, "\n", (555,80)->(555,80))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (556,2)->(556,4))
     ^^^^^ Token(Identifier, "reply", (556,5)->(556,10))
          ^ Token(Dot, ".", (556,10)->(556,11))
           ^^^^^^ Token(Identifier, "result", (556,11)->(556,17))
                 ^^ Token(MethodArrow, "->", (556,17)->(556,19))
                   ^^^^^ Token(Identifier, "empty", (556,19)->(556,24))
                        ^ Token(LeftParen, "(", (556,24)->(556,25))
                         ^ Token(RightParen, ")", (556,25)->(556,26))
                           Token(EndOfLine, "\n", (556,26)->(556,26))
    return
    ^^^^^^ Token(Identifier, "return", (557,4)->(557,10))
           Token(EndOfLine, "\n", (557,10)->(557,10))
  endif
  ^^^^^ Token(Identifier, "endif", (558,2)->(558,7))
        Token(EndOfLine, "\n", (558,7)->(558,7))

 Token(EndOfLine, "\n", (559,0)->(559,0))
  callhier.OutgoingCalls(reply.result)
  ^^^^^^^^ Token(Identifier, "callhier", (560,2)->(560,10))
          ^ Token(Dot, ".", (560,10)->(560,11))
           ^^^^^^^^^^^^^ Token(Identifier, "OutgoingCalls", (560,11)->(560,24))
                        ^ Token(LeftParen, "(", (560,24)->(560,25))
                         ^^^^^ Token(Identifier, "reply", (560,25)->(560,30))
                              ^ Token(Dot, ".", (560,30)->(560,31))
                               ^^^^^^ Token(Identifier, "result", (560,31)->(560,37))
                                     ^ Token(RightParen, ")", (560,37)->(560,38))
                                       Token(EndOfLine, "\n", (560,38)->(560,38))
enddef
^^^^^^ Token(Identifier, "enddef", (561,0)->(561,6))
       Token(EndOfLine, "\n", (561,6)->(561,6))

 Token(EndOfLine, "\n", (562,0)->(562,0))
# Process various reply messages from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Process various reply messages from the LSP server", (563,0)->(563,52))
export def ProcessReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^^^^ Token(Identifier, "export", (564,0)->(564,6))
       ^^^ Token(Identifier, "def", (564,7)->(564,10))
           ^^^^^^^^^^^^ Token(Identifier, "ProcessReply", (564,11)->(564,23))
                       ^ Token(LeftParen, "(", (564,23)->(564,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (564,24)->(564,33))
                                 ^^ Token(SpacedColon, ": ", (564,33)->(564,35))
                                   ^^^^ Token(Identifier, "dict", (564,35)->(564,39))
                                       ^ Token(AngleLeft, "<", (564,39)->(564,40))
                                        ^^^ Token(Identifier, "any", (564,40)->(564,43))
                                           ^ Token(AngleRight, ">", (564,43)->(564,44))
                                            ^ Token(Comma, ",", (564,44)->(564,45))
                                              ^^^ Token(Identifier, "req", (564,46)->(564,49))
                                                 ^^ Token(SpacedColon, ": ", (564,49)->(564,51))
                                                   ^^^^ Token(Identifier, "dict", (564,51)->(564,55))
                                                       ^ Token(AngleLeft, "<", (564,55)->(564,56))
                                                        ^^^ Token(Identifier, "any", (564,56)->(564,59))
                                                           ^ Token(AngleRight, ">", (564,59)->(564,60))
                                                            ^ Token(Comma, ",", (564,60)->(564,61))
                                                              ^^^^^ Token(Identifier, "reply", (564,62)->(564,67))
                                                                   ^^ Token(SpacedColon, ": ", (564,67)->(564,69))
                                                                     ^^^^ Token(Identifier, "dict", (564,69)->(564,73))
                                                                         ^ Token(AngleLeft, "<", (564,73)->(564,74))
                                                                          ^^^ Token(Identifier, "any", (564,74)->(564,77))
                                                                             ^ Token(AngleRight, ">", (564,77)->(564,78))
                                                                              ^ Token(RightParen, ")", (564,78)->(564,79))
                                                                               ^^ Token(SpacedColon, ": ", (564,79)->(564,81))
                                                                                 ^^^^ Token(Identifier, "void", (564,81)->(564,85))
                                                                                      Token(EndOfLine, "\n", (564,85)->(564,85))
  var lsp_reply_handlers: dict<func> =
  ^^^ Token(Identifier, "var", (565,2)->(565,5))
      ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_reply_handlers", (565,6)->(565,24))
                        ^^ Token(SpacedColon, ": ", (565,24)->(565,26))
                          ^^^^ Token(Identifier, "dict", (565,26)->(565,30))
                              ^ Token(AngleLeft, "<", (565,30)->(565,31))
                               ^^^^ Token(Identifier, "func", (565,31)->(565,35))
                                   ^ Token(GreaterThan, ">", (565,35)->(565,36))
                                     ^ Token(Equal, "=", (565,37)->(565,38))
                                       Token(EndOfLine, "\n", (565,38)->(565,38))
    {
    ^ Token(LeftBrace, "{", (566,4)->(566,5))
      Token(EndOfLine, "\n", (566,5)->(566,5))
      'initialize': ProcessInitializeReply,
       ^^^^^^^^^ Token(SingleQuoteString, "initialize", (567,7)->(567,16))
                  ^^ Token(SpacedColon, ": ", (567,18)->(567,20))
                    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessInitializeReply", (567,20)->(567,42))
                                          ^ Token(Comma, ",", (567,42)->(567,43))
                                            Token(EndOfLine, "\n", (567,43)->(567,43))
      'shutdown': ProcessShutdownReply,
       ^^^^^^^ Token(SingleQuoteString, "shutdown", (568,7)->(568,14))
                ^^ Token(SpacedColon, ": ", (568,16)->(568,18))
                  ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessShutdownReply", (568,18)->(568,38))
                                      ^ Token(Comma, ",", (568,38)->(568,39))
                                        Token(EndOfLine, "\n", (568,39)->(568,39))
      'textDocument/signatureHelp': ProcessSignaturehelpReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/signatureHelp", (569,7)->(569,32))
                                  ^^ Token(SpacedColon, ": ", (569,34)->(569,36))
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSignaturehelpReply", (569,36)->(569,61))
                                                             ^ Token(Comma, ",", (569,61)->(569,62))
                                                               Token(EndOfLine, "\n", (569,62)->(569,62))
      'textDocument/completion': ProcessCompletionReply,
       ^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/completion", (570,7)->(570,29))
                               ^^ Token(SpacedColon, ": ", (570,31)->(570,33))
                                 ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCompletionReply", (570,33)->(570,55))
                                                       ^ Token(Comma, ",", (570,55)->(570,56))
                                                         Token(EndOfLine, "\n", (570,56)->(570,56))
      'textDocument/hover': ProcessHoverReply,
       ^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/hover", (571,7)->(571,24))
                          ^^ Token(SpacedColon, ": ", (571,26)->(571,28))
                            ^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessHoverReply", (571,28)->(571,45))
                                             ^ Token(Comma, ",", (571,45)->(571,46))
                                               Token(EndOfLine, "\n", (571,46)->(571,46))
      'textDocument/references': ProcessReferencesReply,
       ^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/references", (572,7)->(572,29))
                               ^^ Token(SpacedColon, ": ", (572,31)->(572,33))
                                 ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessReferencesReply", (572,33)->(572,55))
                                                       ^ Token(Comma, ",", (572,55)->(572,56))
                                                         Token(EndOfLine, "\n", (572,56)->(572,56))
      'textDocument/documentHighlight': ProcessDocHighlightReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/documentHighlight", (573,7)->(573,36))
                                      ^^ Token(SpacedColon, ": ", (573,38)->(573,40))
                                        ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocHighlightReply", (573,40)->(573,64))
                                                                ^ Token(Comma, ",", (573,64)->(573,65))
                                                                  Token(EndOfLine, "\n", (573,65)->(573,65))
      'textDocument/documentSymbol': ProcessDocSymbolReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/documentSymbol", (574,7)->(574,33))
                                   ^^ Token(SpacedColon, ": ", (574,35)->(574,37))
                                     ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolReply", (574,37)->(574,58))
                                                          ^ Token(Comma, ",", (574,58)->(574,59))
                                                            Token(EndOfLine, "\n", (574,59)->(574,59))
      'textDocument/codeAction': ProcessCodeActionReply,
       ^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/codeAction", (575,7)->(575,29))
                               ^^ Token(SpacedColon, ": ", (575,31)->(575,33))
                                 ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCodeActionReply", (575,33)->(575,55))
                                                       ^ Token(Comma, ",", (575,55)->(575,56))
                                                         Token(EndOfLine, "\n", (575,56)->(575,56))
      'textDocument/foldingRange': ProcessFoldingRangeReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/foldingRange", (576,7)->(576,31))
                                 ^^ Token(SpacedColon, ": ", (576,33)->(576,35))
                                   ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessFoldingRangeReply", (576,35)->(576,59))
                                                           ^ Token(Comma, ",", (576,59)->(576,60))
                                                             Token(EndOfLine, "\n", (576,60)->(576,60))
      'workspace/executeCommand': ProcessWorkspaceExecuteReply,
       ^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/executeCommand", (577,7)->(577,30))
                                ^^ Token(SpacedColon, ": ", (577,32)->(577,34))
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceExecuteReply", (577,34)->(577,62))
                                                              ^ Token(Comma, ",", (577,62)->(577,63))
                                                                Token(EndOfLine, "\n", (577,63)->(577,63))
      'workspace/symbol': ProcessWorkspaceSymbolReply,
       ^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/symbol", (578,7)->(578,22))
                        ^^ Token(SpacedColon, ": ", (578,24)->(578,26))
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceSymbolReply", (578,26)->(578,53))
                                                     ^ Token(Comma, ",", (578,53)->(578,54))
                                                       Token(EndOfLine, "\n", (578,54)->(578,54))
      'textDocument/prepareCallHierarchy': ProcessPrepareCallHierarchy,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/prepareCallHierarchy", (579,7)->(579,39))
                                         ^^ Token(SpacedColon, ": ", (579,41)->(579,43))
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessPrepareCallHierarchy", (579,43)->(579,70))
                                                                      ^ Token(Comma, ",", (579,70)->(579,71))
                                                                        Token(EndOfLine, "\n", (579,71)->(579,71))
      'callHierarchy/incomingCalls': ProcessIncomingCalls,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "callHierarchy/incomingCalls", (580,7)->(580,33))
                                   ^^ Token(SpacedColon, ": ", (580,35)->(580,37))
                                     ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessIncomingCalls", (580,37)->(580,57))
                                                         ^ Token(Comma, ",", (580,57)->(580,58))
                                                           Token(EndOfLine, "\n", (580,58)->(580,58))
      'callHierarchy/outgoingCalls': ProcessOutgoingCalls
       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "callHierarchy/outgoingCalls", (581,7)->(581,33))
                                   ^^ Token(SpacedColon, ": ", (581,35)->(581,37))
                                     ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessOutgoingCalls", (581,37)->(581,57))
                                                          Token(EndOfLine, "\n", (581,57)->(581,57))
    }
    ^ Token(RightBrace, "}", (582,4)->(582,5))
      Token(EndOfLine, "\n", (582,5)->(582,5))

 Token(EndOfLine, "\n", (583,0)->(583,0))
  if lsp_reply_handlers->has_key(req.method)
  ^^ Token(Identifier, "if", (584,2)->(584,4))
     ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_reply_handlers", (584,5)->(584,23))
                       ^^ Token(MethodArrow, "->", (584,23)->(584,25))
                         ^^^^^^^ Token(Identifier, "has_key", (584,25)->(584,32))
                                ^ Token(LeftParen, "(", (584,32)->(584,33))
                                 ^^^ Token(Identifier, "req", (584,33)->(584,36))
                                    ^ Token(Dot, ".", (584,36)->(584,37))
                                     ^^^^^^ Token(Identifier, "method", (584,37)->(584,43))
                                           ^ Token(RightParen, ")", (584,43)->(584,44))
                                             Token(EndOfLine, "\n", (584,44)->(584,44))
    lsp_reply_handlers[req.method](lspserver, req, reply)
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_reply_handlers", (585,4)->(585,22))
                      ^ Token(LeftBracket, "[", (585,22)->(585,23))
                       ^^^ Token(Identifier, "req", (585,23)->(585,26))
                          ^ Token(Dot, ".", (585,26)->(585,27))
                           ^^^^^^ Token(Identifier, "method", (585,27)->(585,33))
                                 ^ Token(RightBracket, "]", (585,33)->(585,34))
                                  ^ Token(LeftParen, "(", (585,34)->(585,35))
                                   ^^^^^^^^^ Token(Identifier, "lspserver", (585,35)->(585,44))
                                            ^ Token(Comma, ",", (585,44)->(585,45))
                                              ^^^ Token(Identifier, "req", (585,46)->(585,49))
                                                 ^ Token(Comma, ",", (585,49)->(585,50))
                                                   ^^^^^ Token(Identifier, "reply", (585,51)->(585,56))
                                                        ^ Token(RightParen, ")", (585,56)->(585,57))
                                                          Token(EndOfLine, "\n", (585,57)->(585,57))
  else
  ^^^^ Token(Identifier, "else", (586,2)->(586,6))
       Token(EndOfLine, "\n", (586,6)->(586,6))
    util.ErrMsg($'Error: Unsupported reply received from LSP server: {reply->string()} for request: {req->string()}')
    ^^^^ Token(Identifier, "util", (587,4)->(587,8))
        ^ Token(Dot, ".", (587,8)->(587,9))
         ^^^^^^ Token(Identifier, "ErrMsg", (587,9)->(587,15))
               ^ Token(LeftParen, "(", (587,15)->(587,16))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported reply received from LSP server: {reply->string()} for request: {req->string()}", (587,18)->(587,114))
                                                                                                                    ^ Token(RightParen, ")", (587,116)->(587,117))
                                                                                                                      Token(EndOfLine, "\n", (587,117)->(587,117))
  endif
  ^^^^^ Token(Identifier, "endif", (588,2)->(588,7))
        Token(EndOfLine, "\n", (588,7)->(588,7))
enddef
^^^^^^ Token(Identifier, "enddef", (589,0)->(589,6))
       Token(EndOfLine, "\n", (589,6)->(589,6))

 Token(EndOfLine, "\n", (590,0)->(590,0))
# process a diagnostic notification message from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process a diagnostic notification message from the LSP server", (591,0)->(591,63))
# Notification: textDocument/publishDiagnostics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Notification: textDocument/publishDiagnostics", (592,0)->(592,47))
# Param: PublishDiagnosticsParams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: PublishDiagnosticsParams", (593,0)->(593,33))
def ProcessDiagNotif(lspserver: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (594,0)->(594,3))
    ^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDiagNotif", (594,4)->(594,20))
                    ^ Token(LeftParen, "(", (594,20)->(594,21))
                     ^^^^^^^^^ Token(Identifier, "lspserver", (594,21)->(594,30))
                              ^^ Token(SpacedColon, ": ", (594,30)->(594,32))
                                ^^^^ Token(Identifier, "dict", (594,32)->(594,36))
                                    ^ Token(AngleLeft, "<", (594,36)->(594,37))
                                     ^^^ Token(Identifier, "any", (594,37)->(594,40))
                                        ^ Token(AngleRight, ">", (594,40)->(594,41))
                                         ^ Token(Comma, ",", (594,41)->(594,42))
                                           ^^^^^ Token(Identifier, "reply", (594,43)->(594,48))
                                                ^^ Token(SpacedColon, ": ", (594,48)->(594,50))
                                                  ^^^^ Token(Identifier, "dict", (594,50)->(594,54))
                                                      ^ Token(AngleLeft, "<", (594,54)->(594,55))
                                                       ^^^ Token(Identifier, "any", (594,55)->(594,58))
                                                          ^ Token(AngleRight, ">", (594,58)->(594,59))
                                                           ^ Token(RightParen, ")", (594,59)->(594,60))
                                                            ^^ Token(SpacedColon, ": ", (594,60)->(594,62))
                                                              ^^^^ Token(Identifier, "void", (594,62)->(594,66))
                                                                   Token(EndOfLine, "\n", (594,66)->(594,66))
  diag.DiagNotification(lspserver, reply.params.uri, reply.params.diagnostics)
  ^^^^ Token(Identifier, "diag", (595,2)->(595,6))
      ^ Token(Dot, ".", (595,6)->(595,7))
       ^^^^^^^^^^^^^^^^ Token(Identifier, "DiagNotification", (595,7)->(595,23))
                       ^ Token(LeftParen, "(", (595,23)->(595,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (595,24)->(595,33))
                                 ^ Token(Comma, ",", (595,33)->(595,34))
                                   ^^^^^ Token(Identifier, "reply", (595,35)->(595,40))
                                        ^ Token(Dot, ".", (595,40)->(595,41))
                                         ^^^^^^ Token(Identifier, "params", (595,41)->(595,47))
                                               ^ Token(Dot, ".", (595,47)->(595,48))
                                                ^^^ Token(Identifier, "uri", (595,48)->(595,51))
                                                   ^ Token(Comma, ",", (595,51)->(595,52))
                                                     ^^^^^ Token(Identifier, "reply", (595,53)->(595,58))
                                                          ^ Token(Dot, ".", (595,58)->(595,59))
                                                           ^^^^^^ Token(Identifier, "params", (595,59)->(595,65))
                                                                 ^ Token(Dot, ".", (595,65)->(595,66))
                                                                  ^^^^^^^^^^^ Token(Identifier, "diagnostics", (595,66)->(595,77))
                                                                             ^ Token(RightParen, ")", (595,77)->(595,78))
                                                                               Token(EndOfLine, "\n", (595,78)->(595,78))
enddef
^^^^^^ Token(Identifier, "enddef", (596,0)->(596,6))
       Token(EndOfLine, "\n", (596,6)->(596,6))

 Token(EndOfLine, "\n", (597,0)->(597,0))
# process a show notification message from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process a show notification message from the LSP server", (598,0)->(598,57))
# Notification: window/showMessage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Notification: window/showMessage", (599,0)->(599,34))
# Param: ShowMessageParams
^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: ShowMessageParams", (600,0)->(600,26))
def ProcessShowMsgNotif(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (601,0)->(601,3))
    ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessShowMsgNotif", (601,4)->(601,23))
                       ^ Token(LeftParen, "(", (601,23)->(601,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (601,24)->(601,33))
                                 ^^ Token(SpacedColon, ": ", (601,33)->(601,35))
                                   ^^^^ Token(Identifier, "dict", (601,35)->(601,39))
                                       ^ Token(AngleLeft, "<", (601,39)->(601,40))
                                        ^^^ Token(Identifier, "any", (601,40)->(601,43))
                                           ^ Token(AngleRight, ">", (601,43)->(601,44))
                                            ^ Token(Comma, ",", (601,44)->(601,45))
                                              ^^^^^ Token(Identifier, "reply", (601,46)->(601,51))
                                                   ^^ Token(SpacedColon, ": ", (601,51)->(601,53))
                                                     ^^^^ Token(Identifier, "dict", (601,53)->(601,57))
                                                         ^ Token(AngleLeft, "<", (601,57)->(601,58))
                                                          ^^^ Token(Identifier, "any", (601,58)->(601,61))
                                                             ^ Token(AngleRight, ">", (601,61)->(601,62))
                                                              ^ Token(RightParen, ")", (601,62)->(601,63))
                                                                Token(EndOfLine, "\n", (601,63)->(601,63))
  var msgType: list<string> = ['', 'Error: ', 'Warning: ', 'Info: ', 'Log: ']
  ^^^ Token(Identifier, "var", (602,2)->(602,5))
      ^^^^^^^ Token(Identifier, "msgType", (602,6)->(602,13))
             ^^ Token(SpacedColon, ": ", (602,13)->(602,15))
               ^^^^ Token(Identifier, "list", (602,15)->(602,19))
                   ^ Token(AngleLeft, "<", (602,19)->(602,20))
                    ^^^^^^ Token(Identifier, "string", (602,20)->(602,26))
                          ^ Token(GreaterThan, ">", (602,26)->(602,27))
                            ^ Token(Equal, "=", (602,28)->(602,29))
                              ^ Token(LeftBracket, "[", (602,30)->(602,31))
                                 Token(SingleQuoteString, "", (602,32)->(602,32))
                                 ^ Token(Comma, ",", (602,33)->(602,34))
                                    ^^^^^^ Token(SingleQuoteString, "Error: ", (602,36)->(602,42))
                                            ^ Token(Comma, ",", (602,44)->(602,45))
                                               ^^^^^^^^ Token(SingleQuoteString, "Warning: ", (602,47)->(602,55))
                                                         ^ Token(Comma, ",", (602,57)->(602,58))
                                                            ^^^^^ Token(SingleQuoteString, "Info: ", (602,60)->(602,65))
                                                                   ^ Token(Comma, ",", (602,67)->(602,68))
                                                                      ^^^^ Token(SingleQuoteString, "Log: ", (602,70)->(602,74))
                                                                            ^ Token(RightBracket, "]", (602,76)->(602,77))
                                                                              Token(EndOfLine, "\n", (602,77)->(602,77))
  if reply.params.type == 4
  ^^ Token(Identifier, "if", (603,2)->(603,4))
     ^^^^^ Token(Identifier, "reply", (603,5)->(603,10))
          ^ Token(Dot, ".", (603,10)->(603,11))
           ^^^^^^ Token(Identifier, "params", (603,11)->(603,17))
                 ^ Token(Dot, ".", (603,17)->(603,18))
                  ^^^^ Token(Identifier, "type", (603,18)->(603,22))
                       ^^ Token(EqualTo, "==", (603,23)->(603,25))
                          ^ Token(Integer, "4", (603,26)->(603,27))
                            Token(EndOfLine, "\n", (603,27)->(603,27))
    # ignore log messages from the LSP server (too chatty)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# ignore log messages from the LSP server (too chatty)", (604,4)->(604,58))
    # TODO: Add a configuration to control the message level that will be
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# TODO: Add a configuration to control the message level that will be", (605,4)->(605,73))
    # displayed. Also store these messages and provide a command to display
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# displayed. Also store these messages and provide a command to display", (606,4)->(606,75))
    # them.
    ^^^^^^^ Token(Comment, "# them.", (607,4)->(607,11))
    return
    ^^^^^^ Token(Identifier, "return", (608,4)->(608,10))
           Token(EndOfLine, "\n", (608,10)->(608,10))
  endif
  ^^^^^ Token(Identifier, "endif", (609,2)->(609,7))
        Token(EndOfLine, "\n", (609,7)->(609,7))
  var mtype: string = 'Log: '
  ^^^ Token(Identifier, "var", (610,2)->(610,5))
      ^^^^^ Token(Identifier, "mtype", (610,6)->(610,11))
           ^^ Token(SpacedColon, ": ", (610,11)->(610,13))
             ^^^^^^ Token(Identifier, "string", (610,13)->(610,19))
                    ^ Token(Equal, "=", (610,20)->(610,21))
                       ^^^^ Token(SingleQuoteString, "Log: ", (610,23)->(610,27))
                              Token(EndOfLine, "\n", (610,29)->(610,29))
  if reply.params.type > 0 && reply.params.type < 5
  ^^ Token(Identifier, "if", (611,2)->(611,4))
     ^^^^^ Token(Identifier, "reply", (611,5)->(611,10))
          ^ Token(Dot, ".", (611,10)->(611,11))
           ^^^^^^ Token(Identifier, "params", (611,11)->(611,17))
                 ^ Token(Dot, ".", (611,17)->(611,18))
                  ^^^^ Token(Identifier, "type", (611,18)->(611,22))
                       ^ Token(GreaterThan, ">", (611,23)->(611,24))
                         ^ Token(Integer, "0", (611,25)->(611,26))
                           ^^ Token(And, "&&", (611,27)->(611,29))
                              ^^^^^ Token(Identifier, "reply", (611,30)->(611,35))
                                   ^ Token(Dot, ".", (611,35)->(611,36))
                                    ^^^^^^ Token(Identifier, "params", (611,36)->(611,42))
                                          ^ Token(Dot, ".", (611,42)->(611,43))
                                           ^^^^ Token(Identifier, "type", (611,43)->(611,47))
                                                ^ Token(LessThan, "<", (611,48)->(611,49))
                                                  ^ Token(Integer, "5", (611,50)->(611,51))
                                                    Token(EndOfLine, "\n", (611,51)->(611,51))
    mtype = msgType[reply.params.type]
    ^^^^^ Token(Identifier, "mtype", (612,4)->(612,9))
          ^ Token(Equal, "=", (612,10)->(612,11))
            ^^^^^^^ Token(Identifier, "msgType", (612,12)->(612,19))
                   ^ Token(LeftBracket, "[", (612,19)->(612,20))
                    ^^^^^ Token(Identifier, "reply", (612,20)->(612,25))
                         ^ Token(Dot, ".", (612,25)->(612,26))
                          ^^^^^^ Token(Identifier, "params", (612,26)->(612,32))
                                ^ Token(Dot, ".", (612,32)->(612,33))
                                 ^^^^ Token(Identifier, "type", (612,33)->(612,37))
                                     ^ Token(RightBracket, "]", (612,37)->(612,38))
                                       Token(EndOfLine, "\n", (612,38)->(612,38))
  endif
  ^^^^^ Token(Identifier, "endif", (613,2)->(613,7))
        Token(EndOfLine, "\n", (613,7)->(613,7))

 Token(EndOfLine, "\n", (614,0)->(614,0))
  :echomsg $'Lsp {mtype} {reply.params.message}'
  ^ Token(Colon, ":", (615,2)->(615,3))
   ^^^^^^^ Token(Identifier, "echomsg", (615,3)->(615,10))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Lsp {mtype} {reply.params.message}", (615,13)->(615,46))
                                                 Token(EndOfLine, "\n", (615,48)->(615,48))
enddef
^^^^^^ Token(Identifier, "enddef", (616,0)->(616,6))
       Token(EndOfLine, "\n", (616,6)->(616,6))

 Token(EndOfLine, "\n", (617,0)->(617,0))
# process a log notification message from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process a log notification message from the LSP server", (618,0)->(618,56))
# Notification: window/logMessage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Notification: window/logMessage", (619,0)->(619,33))
# Param: LogMessageParams
^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: LogMessageParams", (620,0)->(620,25))
def ProcessLogMsgNotif(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (621,0)->(621,3))
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessLogMsgNotif", (621,4)->(621,22))
                      ^ Token(LeftParen, "(", (621,22)->(621,23))
                       ^^^^^^^^^ Token(Identifier, "lspserver", (621,23)->(621,32))
                                ^^ Token(SpacedColon, ": ", (621,32)->(621,34))
                                  ^^^^ Token(Identifier, "dict", (621,34)->(621,38))
                                      ^ Token(AngleLeft, "<", (621,38)->(621,39))
                                       ^^^ Token(Identifier, "any", (621,39)->(621,42))
                                          ^ Token(AngleRight, ">", (621,42)->(621,43))
                                           ^ Token(Comma, ",", (621,43)->(621,44))
                                             ^^^^^ Token(Identifier, "reply", (621,45)->(621,50))
                                                  ^^ Token(SpacedColon, ": ", (621,50)->(621,52))
                                                    ^^^^ Token(Identifier, "dict", (621,52)->(621,56))
                                                        ^ Token(AngleLeft, "<", (621,56)->(621,57))
                                                         ^^^ Token(Identifier, "any", (621,57)->(621,60))
                                                            ^ Token(AngleRight, ">", (621,60)->(621,61))
                                                             ^ Token(RightParen, ")", (621,61)->(621,62))
                                                               Token(EndOfLine, "\n", (621,62)->(621,62))
  var msgType: list<string> = ['', 'Error: ', 'Warning: ', 'Info: ', 'Log: ']
  ^^^ Token(Identifier, "var", (622,2)->(622,5))
      ^^^^^^^ Token(Identifier, "msgType", (622,6)->(622,13))
             ^^ Token(SpacedColon, ": ", (622,13)->(622,15))
               ^^^^ Token(Identifier, "list", (622,15)->(622,19))
                   ^ Token(AngleLeft, "<", (622,19)->(622,20))
                    ^^^^^^ Token(Identifier, "string", (622,20)->(622,26))
                          ^ Token(GreaterThan, ">", (622,26)->(622,27))
                            ^ Token(Equal, "=", (622,28)->(622,29))
                              ^ Token(LeftBracket, "[", (622,30)->(622,31))
                                 Token(SingleQuoteString, "", (622,32)->(622,32))
                                 ^ Token(Comma, ",", (622,33)->(622,34))
                                    ^^^^^^ Token(SingleQuoteString, "Error: ", (622,36)->(622,42))
                                            ^ Token(Comma, ",", (622,44)->(622,45))
                                               ^^^^^^^^ Token(SingleQuoteString, "Warning: ", (622,47)->(622,55))
                                                         ^ Token(Comma, ",", (622,57)->(622,58))
                                                            ^^^^^ Token(SingleQuoteString, "Info: ", (622,60)->(622,65))
                                                                   ^ Token(Comma, ",", (622,67)->(622,68))
                                                                      ^^^^ Token(SingleQuoteString, "Log: ", (622,70)->(622,74))
                                                                            ^ Token(RightBracket, "]", (622,76)->(622,77))
                                                                              Token(EndOfLine, "\n", (622,77)->(622,77))
  var mtype: string = 'Log: '
  ^^^ Token(Identifier, "var", (623,2)->(623,5))
      ^^^^^ Token(Identifier, "mtype", (623,6)->(623,11))
           ^^ Token(SpacedColon, ": ", (623,11)->(623,13))
             ^^^^^^ Token(Identifier, "string", (623,13)->(623,19))
                    ^ Token(Equal, "=", (623,20)->(623,21))
                       ^^^^ Token(SingleQuoteString, "Log: ", (623,23)->(623,27))
                              Token(EndOfLine, "\n", (623,29)->(623,29))
  if reply.params.type > 0 && reply.params.type < 5
  ^^ Token(Identifier, "if", (624,2)->(624,4))
     ^^^^^ Token(Identifier, "reply", (624,5)->(624,10))
          ^ Token(Dot, ".", (624,10)->(624,11))
           ^^^^^^ Token(Identifier, "params", (624,11)->(624,17))
                 ^ Token(Dot, ".", (624,17)->(624,18))
                  ^^^^ Token(Identifier, "type", (624,18)->(624,22))
                       ^ Token(GreaterThan, ">", (624,23)->(624,24))
                         ^ Token(Integer, "0", (624,25)->(624,26))
                           ^^ Token(And, "&&", (624,27)->(624,29))
                              ^^^^^ Token(Identifier, "reply", (624,30)->(624,35))
                                   ^ Token(Dot, ".", (624,35)->(624,36))
                                    ^^^^^^ Token(Identifier, "params", (624,36)->(624,42))
                                          ^ Token(Dot, ".", (624,42)->(624,43))
                                           ^^^^ Token(Identifier, "type", (624,43)->(624,47))
                                                ^ Token(LessThan, "<", (624,48)->(624,49))
                                                  ^ Token(Integer, "5", (624,50)->(624,51))
                                                    Token(EndOfLine, "\n", (624,51)->(624,51))
    mtype = msgType[reply.params.type]
    ^^^^^ Token(Identifier, "mtype", (625,4)->(625,9))
          ^ Token(Equal, "=", (625,10)->(625,11))
            ^^^^^^^ Token(Identifier, "msgType", (625,12)->(625,19))
                   ^ Token(LeftBracket, "[", (625,19)->(625,20))
                    ^^^^^ Token(Identifier, "reply", (625,20)->(625,25))
                         ^ Token(Dot, ".", (625,25)->(625,26))
                          ^^^^^^ Token(Identifier, "params", (625,26)->(625,32))
                                ^ Token(Dot, ".", (625,32)->(625,33))
                                 ^^^^ Token(Identifier, "type", (625,33)->(625,37))
                                     ^ Token(RightBracket, "]", (625,37)->(625,38))
                                       Token(EndOfLine, "\n", (625,38)->(625,38))
  endif
  ^^^^^ Token(Identifier, "endif", (626,2)->(626,7))
        Token(EndOfLine, "\n", (626,7)->(626,7))

 Token(EndOfLine, "\n", (627,0)->(627,0))
  util.TraceLog(false, $'[{mtype}]: {reply.params.message}')
  ^^^^ Token(Identifier, "util", (628,2)->(628,6))
      ^ Token(Dot, ".", (628,6)->(628,7))
       ^^^^^^^^ Token(Identifier, "TraceLog", (628,7)->(628,15))
               ^ Token(LeftParen, "(", (628,15)->(628,16))
                ^^^^^ Token(False, "false", (628,16)->(628,21))
                     ^ Token(Comma, ",", (628,21)->(628,22))
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "[{mtype}]: {reply.params.message}", (628,25)->(628,57))
                                                           ^ Token(RightParen, ")", (628,59)->(628,60))
                                                             Token(EndOfLine, "\n", (628,60)->(628,60))
enddef
^^^^^^ Token(Identifier, "enddef", (629,0)->(629,6))
       Token(EndOfLine, "\n", (629,6)->(629,6))

 Token(EndOfLine, "\n", (630,0)->(630,0))
# process unsupported notification messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process unsupported notification messages", (631,0)->(631,43))
def ProcessUnsupportedNotif(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (632,0)->(632,3))
    ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotif", (632,4)->(632,27))
                           ^ Token(LeftParen, "(", (632,27)->(632,28))
                            ^^^^^^^^^ Token(Identifier, "lspserver", (632,28)->(632,37))
                                     ^^ Token(SpacedColon, ": ", (632,37)->(632,39))
                                       ^^^^ Token(Identifier, "dict", (632,39)->(632,43))
                                           ^ Token(AngleLeft, "<", (632,43)->(632,44))
                                            ^^^ Token(Identifier, "any", (632,44)->(632,47))
                                               ^ Token(AngleRight, ">", (632,47)->(632,48))
                                                ^ Token(Comma, ",", (632,48)->(632,49))
                                                  ^^^^^ Token(Identifier, "reply", (632,50)->(632,55))
                                                       ^^ Token(SpacedColon, ": ", (632,55)->(632,57))
                                                         ^^^^ Token(Identifier, "dict", (632,57)->(632,61))
                                                             ^ Token(AngleLeft, "<", (632,61)->(632,62))
                                                              ^^^ Token(Identifier, "any", (632,62)->(632,65))
                                                                 ^ Token(AngleRight, ">", (632,65)->(632,66))
                                                                  ^ Token(RightParen, ")", (632,66)->(632,67))
                                                                    Token(EndOfLine, "\n", (632,67)->(632,67))
  util.ErrMsg($'Error: Unsupported notification message received from the LSP server ({lspserver.path}), message = {reply->string()}')
  ^^^^ Token(Identifier, "util", (633,2)->(633,6))
      ^ Token(Dot, ".", (633,6)->(633,7))
       ^^^^^^ Token(Identifier, "ErrMsg", (633,7)->(633,13))
             ^ Token(LeftParen, "(", (633,13)->(633,14))
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported notification message received from the LSP server ({lspserver.path}), message = {reply->string()}", (633,16)->(633,131))
                                                                                                                                     ^ Token(RightParen, ")", (633,133)->(633,134))
                                                                                                                                       Token(EndOfLine, "\n", (633,134)->(633,134))
enddef
^^^^^^ Token(Identifier, "enddef", (634,0)->(634,6))
       Token(EndOfLine, "\n", (634,6)->(634,6))

 Token(EndOfLine, "\n", (635,0)->(635,0))
# per-filetype private map inside to record if ntf once or not
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# per-filetype private map inside to record if ntf once or not", (636,0)->(636,62))
var ftypeNtfOnceMap: dict<bool> = {}
^^^ Token(Identifier, "var", (637,0)->(637,3))
    ^^^^^^^^^^^^^^^ Token(Identifier, "ftypeNtfOnceMap", (637,4)->(637,19))
                   ^^ Token(SpacedColon, ": ", (637,19)->(637,21))
                     ^^^^ Token(Identifier, "dict", (637,21)->(637,25))
                         ^ Token(AngleLeft, "<", (637,25)->(637,26))
                          ^^^^ Token(Identifier, "bool", (637,26)->(637,30))
                              ^ Token(GreaterThan, ">", (637,30)->(637,31))
                                ^ Token(Equal, "=", (637,32)->(637,33))
                                  ^ Token(LeftBrace, "{", (637,34)->(637,35))
                                   ^ Token(RightBrace, "}", (637,35)->(637,36))
                                     Token(EndOfLine, "\n", (637,36)->(637,36))
# process unsupported notification messages but only notify once
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process unsupported notification messages but only notify once", (638,0)->(638,64))
def ProcessUnsupportedNotifOnce(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (639,0)->(639,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotifOnce", (639,4)->(639,31))
                               ^ Token(LeftParen, "(", (639,31)->(639,32))
                                ^^^^^^^^^ Token(Identifier, "lspserver", (639,32)->(639,41))
                                         ^^ Token(SpacedColon, ": ", (639,41)->(639,43))
                                           ^^^^ Token(Identifier, "dict", (639,43)->(639,47))
                                               ^ Token(AngleLeft, "<", (639,47)->(639,48))
                                                ^^^ Token(Identifier, "any", (639,48)->(639,51))
                                                   ^ Token(AngleRight, ">", (639,51)->(639,52))
                                                    ^ Token(Comma, ",", (639,52)->(639,53))
                                                      ^^^^^ Token(Identifier, "reply", (639,54)->(639,59))
                                                           ^^ Token(SpacedColon, ": ", (639,59)->(639,61))
                                                             ^^^^ Token(Identifier, "dict", (639,61)->(639,65))
                                                                 ^ Token(AngleLeft, "<", (639,65)->(639,66))
                                                                  ^^^ Token(Identifier, "any", (639,66)->(639,69))
                                                                     ^ Token(AngleRight, ">", (639,69)->(639,70))
                                                                      ^ Token(RightParen, ")", (639,70)->(639,71))
                                                                        Token(EndOfLine, "\n", (639,71)->(639,71))
  if !ftypeNtfOnceMap->get(&ft, v:false)
  ^^ Token(Identifier, "if", (640,2)->(640,4))
     ^ Token(Bang, "!", (640,5)->(640,6))
      ^^^^^^^^^^^^^^^ Token(Identifier, "ftypeNtfOnceMap", (640,6)->(640,21))
                     ^^ Token(MethodArrow, "->", (640,21)->(640,23))
                       ^^^ Token(Identifier, "get", (640,23)->(640,26))
                          ^ Token(LeftParen, "(", (640,26)->(640,27))
                           ^ Token(Ampersand, "&", (640,27)->(640,28))
                            ^^ Token(Identifier, "ft", (640,28)->(640,30))
                              ^ Token(Comma, ",", (640,30)->(640,31))
                                ^ Token(Identifier, "v", (640,32)->(640,33))
                                 ^ Token(Colon, ":", (640,33)->(640,34))
                                  ^^^^^ Token(False, "false", (640,34)->(640,39))
                                       ^ Token(RightParen, ")", (640,39)->(640,40))
                                         Token(EndOfLine, "\n", (640,40)->(640,40))
	ProcessUnsupportedNotif(lspserver, reply)
 ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotif", (641,1)->(641,24))
                        ^ Token(LeftParen, "(", (641,24)->(641,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (641,25)->(641,34))
                                  ^ Token(Comma, ",", (641,34)->(641,35))
                                    ^^^^^ Token(Identifier, "reply", (641,36)->(641,41))
                                         ^ Token(RightParen, ")", (641,41)->(641,42))
                                           Token(EndOfLine, "\n", (641,42)->(641,42))
	ftypeNtfOnceMap->extend({[&ft]: v:true})
 ^^^^^^^^^^^^^^^ Token(Identifier, "ftypeNtfOnceMap", (642,1)->(642,16))
                ^^ Token(MethodArrow, "->", (642,16)->(642,18))
                  ^^^^^^ Token(Identifier, "extend", (642,18)->(642,24))
                        ^ Token(LeftParen, "(", (642,24)->(642,25))
                         ^ Token(LeftBrace, "{", (642,25)->(642,26))
                          ^ Token(LeftBracket, "[", (642,26)->(642,27))
                           ^ Token(Ampersand, "&", (642,27)->(642,28))
                            ^^ Token(Identifier, "ft", (642,28)->(642,30))
                              ^ Token(RightBracket, "]", (642,30)->(642,31))
                               ^^ Token(SpacedColon, ": ", (642,31)->(642,33))
                                 ^ Token(Identifier, "v", (642,33)->(642,34))
                                  ^ Token(Colon, ":", (642,34)->(642,35))
                                   ^^^^ Token(True, "true", (642,35)->(642,39))
                                       ^ Token(RightBrace, "}", (642,39)->(642,40))
                                        ^ Token(RightParen, ")", (642,40)->(642,41))
                                          Token(EndOfLine, "\n", (642,41)->(642,41))
  endif
  ^^^^^ Token(Identifier, "endif", (643,2)->(643,7))
        Token(EndOfLine, "\n", (643,7)->(643,7))
enddef
^^^^^^ Token(Identifier, "enddef", (644,0)->(644,6))
       Token(EndOfLine, "\n", (644,6)->(644,6))

 Token(EndOfLine, "\n", (645,0)->(645,0))

