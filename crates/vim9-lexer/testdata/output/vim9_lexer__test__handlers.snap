---
source: crates/vim9-lexer/src/lib.rs
assertion_line: 968
expression: snapshot_lexing(contents)
---
vim9script
^^^^^^^^^^ Token(Identifier, "vim9script", (0,0)->(0,10))
           Token(EndOfLine, "\n", (0,10)->(0,10))

 Token(EndOfLine, "\n", (1,0)->(1,0))
# Thanks to: https://github.com/yegappan/lsp for some test cases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Thanks to: https://github.com/yegappan/lsp for some test cases", (2,0)->(2,64))

 Token(EndOfLine, "\n", (3,0)->(3,0))
# Handlers for messages from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Handlers for messages from the LSP server", (4,0)->(4,43))
# Refer to https://microsoft.github.io/language-server-protocol/specification
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Refer to https://microsoft.github.io/language-server-protocol/specification", (5,0)->(5,77))
# for the Language Server Protocol (LSP) specificaiton.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# for the Language Server Protocol (LSP) specificaiton.", (6,0)->(6,55))

 Token(EndOfLine, "\n", (7,0)->(7,0))
import './lspoptions.vim' as opt
^^^^^^ Token(Identifier, "import", (8,0)->(8,6))
        ^^^^^^^^^^^^^^^ Token(SingleQuoteString, "./lspoptions.vim", (8,8)->(8,23))
                          ^^ Token(Identifier, "as", (8,26)->(8,28))
                             ^^^ Token(Identifier, "opt", (8,29)->(8,32))
                                 Token(EndOfLine, "\n", (8,32)->(8,32))
import './util.vim'
^^^^^^ Token(Identifier, "import", (9,0)->(9,6))
        ^^^^^^^^^ Token(SingleQuoteString, "./util.vim", (9,8)->(9,17))
                    Token(EndOfLine, "\n", (9,19)->(9,19))
import './diag.vim'
^^^^^^ Token(Identifier, "import", (10,0)->(10,6))
        ^^^^^^^^^ Token(SingleQuoteString, "./diag.vim", (10,8)->(10,17))
                    Token(EndOfLine, "\n", (10,19)->(10,19))
import './outline.vim'
^^^^^^ Token(Identifier, "import", (11,0)->(11,6))
        ^^^^^^^^^^^^ Token(SingleQuoteString, "./outline.vim", (11,8)->(11,20))
                       Token(EndOfLine, "\n", (11,22)->(11,22))
import './textedit.vim'
^^^^^^ Token(Identifier, "import", (12,0)->(12,6))
        ^^^^^^^^^^^^^ Token(SingleQuoteString, "./textedit.vim", (12,8)->(12,21))
                        Token(EndOfLine, "\n", (12,23)->(12,23))
import './symbol.vim'
^^^^^^ Token(Identifier, "import", (13,0)->(13,6))
        ^^^^^^^^^^^ Token(SingleQuoteString, "./symbol.vim", (13,8)->(13,19))
                      Token(EndOfLine, "\n", (13,21)->(13,21))
import './codeaction.vim'
^^^^^^ Token(Identifier, "import", (14,0)->(14,6))
        ^^^^^^^^^^^^^^^ Token(SingleQuoteString, "./codeaction.vim", (14,8)->(14,23))
                          Token(EndOfLine, "\n", (14,25)->(14,25))
import './callhierarchy.vim' as callhier
^^^^^^ Token(Identifier, "import", (15,0)->(15,6))
        ^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "./callhierarchy.vim", (15,8)->(15,26))
                             ^^ Token(Identifier, "as", (15,29)->(15,31))
                                ^^^^^^^^ Token(Identifier, "callhier", (15,32)->(15,40))
                                         Token(EndOfLine, "\n", (15,40)->(15,40))
import './signature.vim'
^^^^^^ Token(Identifier, "import", (16,0)->(16,6))
        ^^^^^^^^^^^^^^ Token(SingleQuoteString, "./signature.vim", (16,8)->(16,22))
                         Token(EndOfLine, "\n", (16,24)->(16,24))

 Token(EndOfLine, "\n", (17,0)->(17,0))

 Token(EndOfLine, "\n", (18,0)->(18,0))
# process the 'initialize' method reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'initialize' method reply from the LSP server", (19,0)->(19,59))
# Result: InitializeResult
^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: InitializeResult", (20,0)->(20,26))
def ProcessInitializeReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (21,0)->(21,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessInitializeReply", (21,4)->(21,26))
                          ^ Token(LeftParen, "(", (21,26)->(21,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (21,27)->(21,36))
                                    ^^ Token(SpacedColon, ": ", (21,36)->(21,38))
                                      ^^^^ Token(Identifier, "dict", (21,38)->(21,42))
                                          ^ Token(AngleLeft, "<", (21,42)->(21,43))
                                           ^^^ Token(Identifier, "any", (21,43)->(21,46))
                                              ^ Token(AngleRight, ">", (21,46)->(21,47))
                                               ^ Token(Comma, ",", (21,47)->(21,48))
                                                 ^^^ Token(Identifier, "req", (21,49)->(21,52))
                                                    ^^ Token(SpacedColon, ": ", (21,52)->(21,54))
                                                      ^^^^ Token(Identifier, "dict", (21,54)->(21,58))
                                                          ^ Token(AngleLeft, "<", (21,58)->(21,59))
                                                           ^^^ Token(Identifier, "any", (21,59)->(21,62))
                                                              ^ Token(AngleRight, ">", (21,62)->(21,63))
                                                               ^ Token(Comma, ",", (21,63)->(21,64))
                                                                 ^^^^^ Token(Identifier, "reply", (21,65)->(21,70))
                                                                      ^^ Token(SpacedColon, ": ", (21,70)->(21,72))
                                                                        ^^^^ Token(Identifier, "dict", (21,72)->(21,76))
                                                                            ^ Token(AngleLeft, "<", (21,76)->(21,77))
                                                                             ^^^ Token(Identifier, "any", (21,77)->(21,80))
                                                                                ^ Token(AngleRight, ">", (21,80)->(21,81))
                                                                                 ^ Token(RightParen, ")", (21,81)->(21,82))
                                                                                  ^^ Token(SpacedColon, ": ", (21,82)->(21,84))
                                                                                    ^^^^ Token(Identifier, "void", (21,84)->(21,88))
                                                                                         Token(EndOfLine, "\n", (21,88)->(21,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (22,2)->(22,4))
     ^^^^^ Token(Identifier, "reply", (22,5)->(22,10))
          ^ Token(Dot, ".", (22,10)->(22,11))
           ^^^^^^ Token(Identifier, "result", (22,11)->(22,17))
                 ^^ Token(MethodArrow, "->", (22,17)->(22,19))
                   ^^^^^ Token(Identifier, "empty", (22,19)->(22,24))
                        ^ Token(LeftParen, "(", (22,24)->(22,25))
                         ^ Token(RightParen, ")", (22,25)->(22,26))
                           Token(EndOfLine, "\n", (22,26)->(22,26))
    return
    ^^^^^^ Token(Identifier, "return", (23,4)->(23,10))
           Token(EndOfLine, "\n", (23,10)->(23,10))
  endif
  ^^^^^ Token(Identifier, "endif", (24,2)->(24,7))
        Token(EndOfLine, "\n", (24,7)->(24,7))

 Token(EndOfLine, "\n", (25,0)->(25,0))
  var caps: dict<any> = reply.result.capabilities
  ^^^ Token(Identifier, "var", (26,2)->(26,5))
      ^^^^ Token(Identifier, "caps", (26,6)->(26,10))
          ^^ Token(SpacedColon, ": ", (26,10)->(26,12))
            ^^^^ Token(Identifier, "dict", (26,12)->(26,16))
                ^ Token(AngleLeft, "<", (26,16)->(26,17))
                 ^^^ Token(Identifier, "any", (26,17)->(26,20))
                    ^ Token(GreaterThan, ">", (26,20)->(26,21))
                      ^ Token(Equal, "=", (26,22)->(26,23))
                        ^^^^^ Token(Identifier, "reply", (26,24)->(26,29))
                             ^ Token(Dot, ".", (26,29)->(26,30))
                              ^^^^^^ Token(Identifier, "result", (26,30)->(26,36))
                                    ^ Token(Dot, ".", (26,36)->(26,37))
                                     ^^^^^^^^^^^^ Token(Identifier, "capabilities", (26,37)->(26,49))
                                                  Token(EndOfLine, "\n", (26,49)->(26,49))
  lspserver.caps = caps
  ^^^^^^^^^ Token(Identifier, "lspserver", (27,2)->(27,11))
           ^ Token(Dot, ".", (27,11)->(27,12))
            ^^^^ Token(Identifier, "caps", (27,12)->(27,16))
                 ^ Token(Equal, "=", (27,17)->(27,18))
                   ^^^^ Token(Identifier, "caps", (27,19)->(27,23))
                        Token(EndOfLine, "\n", (27,23)->(27,23))

 Token(EndOfLine, "\n", (28,0)->(28,0))
  # TODO: Check all the buffers with filetype corresponding to this LSP server
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# TODO: Check all the buffers with filetype corresponding to this LSP server", (29,2)->(29,78))
  # and then setup the below mapping for those buffers.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# and then setup the below mapping for those buffers.", (30,2)->(30,55))

 Token(EndOfLine, "\n", (31,0)->(31,0))
  # initialize signature help
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# initialize signature help", (32,2)->(32,29))
  signature.SignatureInit(lspserver)
  ^^^^^^^^^ Token(Identifier, "signature", (33,2)->(33,11))
           ^ Token(Dot, ".", (33,11)->(33,12))
            ^^^^^^^^^^^^^ Token(Identifier, "SignatureInit", (33,12)->(33,25))
                         ^ Token(LeftParen, "(", (33,25)->(33,26))
                          ^^^^^^^^^ Token(Identifier, "lspserver", (33,26)->(33,35))
                                   ^ Token(RightParen, ")", (33,35)->(33,36))
                                     Token(EndOfLine, "\n", (33,36)->(33,36))

 Token(EndOfLine, "\n", (34,0)->(34,0))
  if opt.lspOptions.autoComplete && caps->has_key('completionProvider')
  ^^ Token(Identifier, "if", (35,2)->(35,4))
     ^^^ Token(Identifier, "opt", (35,5)->(35,8))
        ^ Token(Dot, ".", (35,8)->(35,9))
         ^^^^^^^^^^ Token(Identifier, "lspOptions", (35,9)->(35,19))
                   ^ Token(Dot, ".", (35,19)->(35,20))
                    ^^^^^^^^^^^^ Token(Identifier, "autoComplete", (35,20)->(35,32))
                                 ^^ Token(And, "&&", (35,33)->(35,35))
                                    ^^^^ Token(Identifier, "caps", (35,36)->(35,40))
                                        ^^ Token(MethodArrow, "->", (35,40)->(35,42))
                                          ^^^^^^^ Token(Identifier, "has_key", (35,42)->(35,49))
                                                 ^ Token(LeftParen, "(", (35,49)->(35,50))
                                                   ^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "completionProvider", (35,51)->(35,68))
                                                                      ^ Token(RightParen, ")", (35,70)->(35,71))
                                                                        Token(EndOfLine, "\n", (35,71)->(35,71))
    var triggers = caps.completionProvider.triggerCharacters
    ^^^ Token(Identifier, "var", (36,4)->(36,7))
        ^^^^^^^^ Token(Identifier, "triggers", (36,8)->(36,16))
                 ^ Token(Equal, "=", (36,17)->(36,18))
                   ^^^^ Token(Identifier, "caps", (36,19)->(36,23))
                       ^ Token(Dot, ".", (36,23)->(36,24))
                        ^^^^^^^^^^^^^^^^^^ Token(Identifier, "completionProvider", (36,24)->(36,42))
                                          ^ Token(Dot, ".", (36,42)->(36,43))
                                           ^^^^^^^^^^^^^^^^^ Token(Identifier, "triggerCharacters", (36,43)->(36,60))
                                                             Token(EndOfLine, "\n", (36,60)->(36,60))
    lspserver.completionTriggerChars = triggers
    ^^^^^^^^^ Token(Identifier, "lspserver", (37,4)->(37,13))
             ^ Token(Dot, ".", (37,13)->(37,14))
              ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "completionTriggerChars", (37,14)->(37,36))
                                     ^ Token(Equal, "=", (37,37)->(37,38))
                                       ^^^^^^^^ Token(Identifier, "triggers", (37,39)->(37,47))
                                                Token(EndOfLine, "\n", (37,47)->(37,47))
  endif
  ^^^^^ Token(Identifier, "endif", (38,2)->(38,7))
        Token(EndOfLine, "\n", (38,7)->(38,7))

 Token(EndOfLine, "\n", (39,0)->(39,0))

 Token(EndOfLine, "\n", (40,0)->(40,0))
  # send a "initialized" notification to server
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# send a \"initialized\" notification to server", (41,2)->(41,47))
  lspserver.sendInitializedNotif()
  ^^^^^^^^^ Token(Identifier, "lspserver", (42,2)->(42,11))
           ^ Token(Dot, ".", (42,11)->(42,12))
            ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "sendInitializedNotif", (42,12)->(42,32))
                                ^ Token(LeftParen, "(", (42,32)->(42,33))
                                 ^ Token(RightParen, ")", (42,33)->(42,34))
                                   Token(EndOfLine, "\n", (42,34)->(42,34))
  lspserver.ready = true
  ^^^^^^^^^ Token(Identifier, "lspserver", (43,2)->(43,11))
           ^ Token(Dot, ".", (43,11)->(43,12))
            ^^^^^ Token(Identifier, "ready", (43,12)->(43,17))
                  ^ Token(Equal, "=", (43,18)->(43,19))
                    ^^^^ Token(True, "true", (43,20)->(43,24))
                         Token(EndOfLine, "\n", (43,24)->(43,24))

 Token(EndOfLine, "\n", (44,0)->(44,0))
  # if the outline window is opened, then request the symbols for the current
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# if the outline window is opened, then request the symbols for the current", (45,2)->(45,77))
  # buffer
  ^^^^^^^^ Token(Comment, "# buffer", (46,2)->(46,10))
  if bufwinid('LSP-Outline') != -1
  ^^ Token(Identifier, "if", (47,2)->(47,4))
     ^^^^^^^^ Token(Identifier, "bufwinid", (47,5)->(47,13))
             ^ Token(LeftParen, "(", (47,13)->(47,14))
               ^^^^^^^^^^ Token(SingleQuoteString, "LSP-Outline", (47,15)->(47,25))
                           ^ Token(RightParen, ")", (47,27)->(47,28))
                             ^^ Token(NotEqualTo, "!=", (47,29)->(47,31))
                                ^ Token(Minus, "-", (47,32)->(47,33))
                                 ^ Token(Integer, "1", (47,33)->(47,34))
                                   Token(EndOfLine, "\n", (47,34)->(47,34))
    lspserver.getDocSymbols(@%)
    ^^^^^^^^^ Token(Identifier, "lspserver", (48,4)->(48,13))
             ^ Token(Dot, ".", (48,13)->(48,14))
              ^^^^^^^^^^^^^ Token(Identifier, "getDocSymbols", (48,14)->(48,27))
                           ^ Token(LeftParen, "(", (48,27)->(48,28))
                            ^ Token(Register, "%", (48,28)->(48,29))
                              ^ Token(RightParen, ")", (48,30)->(48,31))
                                Token(EndOfLine, "\n", (48,31)->(48,31))
  endif
  ^^^^^ Token(Identifier, "endif", (49,2)->(49,7))
        Token(EndOfLine, "\n", (49,7)->(49,7))
enddef
^^^^^^ Token(Identifier, "enddef", (50,0)->(50,6))
       Token(EndOfLine, "\n", (50,6)->(50,6))

 Token(EndOfLine, "\n", (51,0)->(51,0))
# Process a 'shutdown' reply from the LSP server.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Process a 'shutdown' reply from the LSP server.", (52,0)->(52,49))
def ProcessShutdownReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (53,0)->(53,3))
    ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessShutdownReply", (53,4)->(53,24))
                        ^ Token(LeftParen, "(", (53,24)->(53,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (53,25)->(53,34))
                                  ^^ Token(SpacedColon, ": ", (53,34)->(53,36))
                                    ^^^^ Token(Identifier, "dict", (53,36)->(53,40))
                                        ^ Token(AngleLeft, "<", (53,40)->(53,41))
                                         ^^^ Token(Identifier, "any", (53,41)->(53,44))
                                            ^ Token(AngleRight, ">", (53,44)->(53,45))
                                             ^ Token(Comma, ",", (53,45)->(53,46))
                                               ^^^ Token(Identifier, "req", (53,47)->(53,50))
                                                  ^^ Token(SpacedColon, ": ", (53,50)->(53,52))
                                                    ^^^^ Token(Identifier, "dict", (53,52)->(53,56))
                                                        ^ Token(AngleLeft, "<", (53,56)->(53,57))
                                                         ^^^ Token(Identifier, "any", (53,57)->(53,60))
                                                            ^ Token(AngleRight, ">", (53,60)->(53,61))
                                                             ^ Token(Comma, ",", (53,61)->(53,62))
                                                               ^^^^^ Token(Identifier, "reply", (53,63)->(53,68))
                                                                    ^^ Token(SpacedColon, ": ", (53,68)->(53,70))
                                                                      ^^^^ Token(Identifier, "dict", (53,70)->(53,74))
                                                                          ^ Token(AngleLeft, "<", (53,74)->(53,75))
                                                                           ^^^ Token(Identifier, "any", (53,75)->(53,78))
                                                                              ^ Token(AngleRight, ">", (53,78)->(53,79))
                                                                               ^ Token(RightParen, ")", (53,79)->(53,80))
                                                                                ^^ Token(SpacedColon, ": ", (53,80)->(53,82))
                                                                                  ^^^^ Token(Identifier, "void", (53,82)->(53,86))
                                                                                       Token(EndOfLine, "\n", (53,86)->(53,86))
  return
  ^^^^^^ Token(Identifier, "return", (54,2)->(54,8))
         Token(EndOfLine, "\n", (54,8)->(54,8))
enddef
^^^^^^ Token(Identifier, "enddef", (55,0)->(55,6))
       Token(EndOfLine, "\n", (55,6)->(55,6))

 Token(EndOfLine, "\n", (56,0)->(56,0))
# process the 'textDocument/signatureHelp' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/signatureHelp' reply from the LSP server", (57,0)->(57,68))
# Result: SignatureHelp | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: SignatureHelp | null", (58,0)->(58,30))
def ProcessSignaturehelpReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (59,0)->(59,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSignaturehelpReply", (59,4)->(59,29))
                             ^ Token(LeftParen, "(", (59,29)->(59,30))
                              ^^^^^^^^^ Token(Identifier, "lspserver", (59,30)->(59,39))
                                       ^^ Token(SpacedColon, ": ", (59,39)->(59,41))
                                         ^^^^ Token(Identifier, "dict", (59,41)->(59,45))
                                             ^ Token(AngleLeft, "<", (59,45)->(59,46))
                                              ^^^ Token(Identifier, "any", (59,46)->(59,49))
                                                 ^ Token(AngleRight, ">", (59,49)->(59,50))
                                                  ^ Token(Comma, ",", (59,50)->(59,51))
                                                    ^^^ Token(Identifier, "req", (59,52)->(59,55))
                                                       ^^ Token(SpacedColon, ": ", (59,55)->(59,57))
                                                         ^^^^ Token(Identifier, "dict", (59,57)->(59,61))
                                                             ^ Token(AngleLeft, "<", (59,61)->(59,62))
                                                              ^^^ Token(Identifier, "any", (59,62)->(59,65))
                                                                 ^ Token(AngleRight, ">", (59,65)->(59,66))
                                                                  ^ Token(Comma, ",", (59,66)->(59,67))
                                                                    ^^^^^ Token(Identifier, "reply", (59,68)->(59,73))
                                                                         ^^ Token(SpacedColon, ": ", (59,73)->(59,75))
                                                                           ^^^^ Token(Identifier, "dict", (59,75)->(59,79))
                                                                               ^ Token(AngleLeft, "<", (59,79)->(59,80))
                                                                                ^^^ Token(Identifier, "any", (59,80)->(59,83))
                                                                                   ^ Token(AngleRight, ">", (59,83)->(59,84))
                                                                                    ^ Token(RightParen, ")", (59,84)->(59,85))
                                                                                     ^^ Token(SpacedColon, ": ", (59,85)->(59,87))
                                                                                       ^^^^ Token(Identifier, "void", (59,87)->(59,91))
                                                                                            Token(EndOfLine, "\n", (59,91)->(59,91))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (60,2)->(60,4))
     ^^^^^ Token(Identifier, "reply", (60,5)->(60,10))
          ^ Token(Dot, ".", (60,10)->(60,11))
           ^^^^^^ Token(Identifier, "result", (60,11)->(60,17))
                 ^^ Token(MethodArrow, "->", (60,17)->(60,19))
                   ^^^^^ Token(Identifier, "empty", (60,19)->(60,24))
                        ^ Token(LeftParen, "(", (60,24)->(60,25))
                         ^ Token(RightParen, ")", (60,25)->(60,26))
                           Token(EndOfLine, "\n", (60,26)->(60,26))
    return
    ^^^^^^ Token(Identifier, "return", (61,4)->(61,10))
           Token(EndOfLine, "\n", (61,10)->(61,10))
  endif
  ^^^^^ Token(Identifier, "endif", (62,2)->(62,7))
        Token(EndOfLine, "\n", (62,7)->(62,7))
  signature.SignatureDisplay(lspserver, reply.result)
  ^^^^^^^^^ Token(Identifier, "signature", (63,2)->(63,11))
           ^ Token(Dot, ".", (63,11)->(63,12))
            ^^^^^^^^^^^^^^^^ Token(Identifier, "SignatureDisplay", (63,12)->(63,28))
                            ^ Token(LeftParen, "(", (63,28)->(63,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (63,29)->(63,38))
                                      ^ Token(Comma, ",", (63,38)->(63,39))
                                        ^^^^^ Token(Identifier, "reply", (63,40)->(63,45))
                                             ^ Token(Dot, ".", (63,45)->(63,46))
                                              ^^^^^^ Token(Identifier, "result", (63,46)->(63,52))
                                                    ^ Token(RightParen, ")", (63,52)->(63,53))
                                                      Token(EndOfLine, "\n", (63,53)->(63,53))
enddef
^^^^^^ Token(Identifier, "enddef", (64,0)->(64,6))
       Token(EndOfLine, "\n", (64,6)->(64,6))

 Token(EndOfLine, "\n", (65,0)->(65,0))
# Map LSP complete item kind to a character
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Map LSP complete item kind to a character", (66,0)->(66,43))
def LspCompleteItemKindChar(kind: number): string
^^^ Token(Identifier, "def", (67,0)->(67,3))
    ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspCompleteItemKindChar", (67,4)->(67,27))
                           ^ Token(LeftParen, "(", (67,27)->(67,28))
                            ^^^^ Token(Identifier, "kind", (67,28)->(67,32))
                                ^^ Token(SpacedColon, ": ", (67,32)->(67,34))
                                  ^^^^^^ Token(Identifier, "number", (67,34)->(67,40))
                                        ^ Token(RightParen, ")", (67,40)->(67,41))
                                         ^^ Token(SpacedColon, ": ", (67,41)->(67,43))
                                           ^^^^^^ Token(Identifier, "string", (67,43)->(67,49))
                                                  Token(EndOfLine, "\n", (67,49)->(67,49))
  var kindMap: list<string> = ['',
  ^^^ Token(Identifier, "var", (68,2)->(68,5))
      ^^^^^^^ Token(Identifier, "kindMap", (68,6)->(68,13))
             ^^ Token(SpacedColon, ": ", (68,13)->(68,15))
               ^^^^ Token(Identifier, "list", (68,15)->(68,19))
                   ^ Token(AngleLeft, "<", (68,19)->(68,20))
                    ^^^^^^ Token(Identifier, "string", (68,20)->(68,26))
                          ^ Token(GreaterThan, ">", (68,26)->(68,27))
                            ^ Token(Equal, "=", (68,28)->(68,29))
                              ^ Token(LeftBracket, "[", (68,30)->(68,31))
                                 Token(SingleQuoteString, "", (68,32)->(68,32))
                                 ^ Token(Comma, ",", (68,33)->(68,34))
                                   Token(EndOfLine, "\n", (68,34)->(68,34))
		't', # Text
    Token(SingleQuoteString, "t", (69,3)->(69,3))
     ^ Token(Comma, ",", (69,5)->(69,6))
       ^^^^^^ Token(Comment, "# Text", (69,7)->(69,13))
		'm', # Method
    Token(SingleQuoteString, "m", (70,3)->(70,3))
     ^ Token(Comma, ",", (70,5)->(70,6))
       ^^^^^^^^ Token(Comment, "# Method", (70,7)->(70,15))
		'f', # Function
    Token(SingleQuoteString, "f", (71,3)->(71,3))
     ^ Token(Comma, ",", (71,5)->(71,6))
       ^^^^^^^^^^ Token(Comment, "# Function", (71,7)->(71,17))
		'C', # Constructor
    Token(SingleQuoteString, "C", (72,3)->(72,3))
     ^ Token(Comma, ",", (72,5)->(72,6))
       ^^^^^^^^^^^^^ Token(Comment, "# Constructor", (72,7)->(72,20))
		'F', # Field
    Token(SingleQuoteString, "F", (73,3)->(73,3))
     ^ Token(Comma, ",", (73,5)->(73,6))
       ^^^^^^^ Token(Comment, "# Field", (73,7)->(73,14))
		'v', # Variable
    Token(SingleQuoteString, "v", (74,3)->(74,3))
     ^ Token(Comma, ",", (74,5)->(74,6))
       ^^^^^^^^^^ Token(Comment, "# Variable", (74,7)->(74,17))
		'c', # Class
    Token(SingleQuoteString, "c", (75,3)->(75,3))
     ^ Token(Comma, ",", (75,5)->(75,6))
       ^^^^^^^ Token(Comment, "# Class", (75,7)->(75,14))
		'i', # Interface
    Token(SingleQuoteString, "i", (76,3)->(76,3))
     ^ Token(Comma, ",", (76,5)->(76,6))
       ^^^^^^^^^^^ Token(Comment, "# Interface", (76,7)->(76,18))
		'M', # Module
    Token(SingleQuoteString, "M", (77,3)->(77,3))
     ^ Token(Comma, ",", (77,5)->(77,6))
       ^^^^^^^^ Token(Comment, "# Module", (77,7)->(77,15))
		'p', # Property
    Token(SingleQuoteString, "p", (78,3)->(78,3))
     ^ Token(Comma, ",", (78,5)->(78,6))
       ^^^^^^^^^^ Token(Comment, "# Property", (78,7)->(78,17))
		'u', # Unit
    Token(SingleQuoteString, "u", (79,3)->(79,3))
     ^ Token(Comma, ",", (79,5)->(79,6))
       ^^^^^^ Token(Comment, "# Unit", (79,7)->(79,13))
		'V', # Value
    Token(SingleQuoteString, "V", (80,3)->(80,3))
     ^ Token(Comma, ",", (80,5)->(80,6))
       ^^^^^^^ Token(Comment, "# Value", (80,7)->(80,14))
		'e', # Enum
    Token(SingleQuoteString, "e", (81,3)->(81,3))
     ^ Token(Comma, ",", (81,5)->(81,6))
       ^^^^^^ Token(Comment, "# Enum", (81,7)->(81,13))
		'k', # Keyword
    Token(SingleQuoteString, "k", (82,3)->(82,3))
     ^ Token(Comma, ",", (82,5)->(82,6))
       ^^^^^^^^^ Token(Comment, "# Keyword", (82,7)->(82,16))
		'S', # Snippet
    Token(SingleQuoteString, "S", (83,3)->(83,3))
     ^ Token(Comma, ",", (83,5)->(83,6))
       ^^^^^^^^^ Token(Comment, "# Snippet", (83,7)->(83,16))
		'C', # Color
    Token(SingleQuoteString, "C", (84,3)->(84,3))
     ^ Token(Comma, ",", (84,5)->(84,6))
       ^^^^^^^ Token(Comment, "# Color", (84,7)->(84,14))
		'f', # File
    Token(SingleQuoteString, "f", (85,3)->(85,3))
     ^ Token(Comma, ",", (85,5)->(85,6))
       ^^^^^^ Token(Comment, "# File", (85,7)->(85,13))
		'r', # Reference
    Token(SingleQuoteString, "r", (86,3)->(86,3))
     ^ Token(Comma, ",", (86,5)->(86,6))
       ^^^^^^^^^^^ Token(Comment, "# Reference", (86,7)->(86,18))
		'F', # Folder
    Token(SingleQuoteString, "F", (87,3)->(87,3))
     ^ Token(Comma, ",", (87,5)->(87,6))
       ^^^^^^^^ Token(Comment, "# Folder", (87,7)->(87,15))
		'E', # EnumMember
    Token(SingleQuoteString, "E", (88,3)->(88,3))
     ^ Token(Comma, ",", (88,5)->(88,6))
       ^^^^^^^^^^^^ Token(Comment, "# EnumMember", (88,7)->(88,19))
		'd', # Contant
    Token(SingleQuoteString, "d", (89,3)->(89,3))
     ^ Token(Comma, ",", (89,5)->(89,6))
       ^^^^^^^^^ Token(Comment, "# Contant", (89,7)->(89,16))
		's', # Struct
    Token(SingleQuoteString, "s", (90,3)->(90,3))
     ^ Token(Comma, ",", (90,5)->(90,6))
       ^^^^^^^^ Token(Comment, "# Struct", (90,7)->(90,15))
		'E', # Event
    Token(SingleQuoteString, "E", (91,3)->(91,3))
     ^ Token(Comma, ",", (91,5)->(91,6))
       ^^^^^^^ Token(Comment, "# Event", (91,7)->(91,14))
		'o', # Operator
    Token(SingleQuoteString, "o", (92,3)->(92,3))
     ^ Token(Comma, ",", (92,5)->(92,6))
       ^^^^^^^^^^ Token(Comment, "# Operator", (92,7)->(92,17))
		'T'  # TypeParameter
    Token(SingleQuoteString, "T", (93,3)->(93,3))
       ^^^^^^^^^^^^^^^ Token(Comment, "# TypeParameter", (93,7)->(93,22))
	]
 ^ Token(RightBracket, "]", (94,1)->(94,2))
   Token(EndOfLine, "\n", (94,2)->(94,2))
  if kind > 25
  ^^ Token(Identifier, "if", (95,2)->(95,4))
     ^^^^ Token(Identifier, "kind", (95,5)->(95,9))
          ^ Token(GreaterThan, ">", (95,10)->(95,11))
            ^^ Token(Integer, "25", (95,12)->(95,14))
               Token(EndOfLine, "\n", (95,14)->(95,14))
    return ''
    ^^^^^^ Token(Identifier, "return", (96,4)->(96,10))
             Token(SingleQuoteString, "", (96,12)->(96,12))
              Token(EndOfLine, "\n", (96,13)->(96,13))
  endif
  ^^^^^ Token(Identifier, "endif", (97,2)->(97,7))
        Token(EndOfLine, "\n", (97,7)->(97,7))
  return kindMap[kind]
  ^^^^^^ Token(Identifier, "return", (98,2)->(98,8))
         ^^^^^^^ Token(Identifier, "kindMap", (98,9)->(98,16))
                ^ Token(LeftBracket, "[", (98,16)->(98,17))
                 ^^^^ Token(Identifier, "kind", (98,17)->(98,21))
                     ^ Token(RightBracket, "]", (98,21)->(98,22))
                       Token(EndOfLine, "\n", (98,22)->(98,22))
enddef
^^^^^^ Token(Identifier, "enddef", (99,0)->(99,6))
       Token(EndOfLine, "\n", (99,6)->(99,6))

 Token(EndOfLine, "\n", (100,0)->(100,0))
# process the 'textDocument/completion' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/completion' reply from the LSP server", (101,0)->(101,65))
# Result: CompletionItem[] | CompletionList | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CompletionItem[] | CompletionList | null", (102,0)->(102,50))
def ProcessCompletionReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (103,0)->(103,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCompletionReply", (103,4)->(103,26))
                          ^ Token(LeftParen, "(", (103,26)->(103,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (103,27)->(103,36))
                                    ^^ Token(SpacedColon, ": ", (103,36)->(103,38))
                                      ^^^^ Token(Identifier, "dict", (103,38)->(103,42))
                                          ^ Token(AngleLeft, "<", (103,42)->(103,43))
                                           ^^^ Token(Identifier, "any", (103,43)->(103,46))
                                              ^ Token(AngleRight, ">", (103,46)->(103,47))
                                               ^ Token(Comma, ",", (103,47)->(103,48))
                                                 ^^^ Token(Identifier, "req", (103,49)->(103,52))
                                                    ^^ Token(SpacedColon, ": ", (103,52)->(103,54))
                                                      ^^^^ Token(Identifier, "dict", (103,54)->(103,58))
                                                          ^ Token(AngleLeft, "<", (103,58)->(103,59))
                                                           ^^^ Token(Identifier, "any", (103,59)->(103,62))
                                                              ^ Token(AngleRight, ">", (103,62)->(103,63))
                                                               ^ Token(Comma, ",", (103,63)->(103,64))
                                                                 ^^^^^ Token(Identifier, "reply", (103,65)->(103,70))
                                                                      ^^ Token(SpacedColon, ": ", (103,70)->(103,72))
                                                                        ^^^^ Token(Identifier, "dict", (103,72)->(103,76))
                                                                            ^ Token(AngleLeft, "<", (103,76)->(103,77))
                                                                             ^^^ Token(Identifier, "any", (103,77)->(103,80))
                                                                                ^ Token(AngleRight, ">", (103,80)->(103,81))
                                                                                 ^ Token(RightParen, ")", (103,81)->(103,82))
                                                                                  ^^ Token(SpacedColon, ": ", (103,82)->(103,84))
                                                                                    ^^^^ Token(Identifier, "void", (103,84)->(103,88))
                                                                                         Token(EndOfLine, "\n", (103,88)->(103,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (104,2)->(104,4))
     ^^^^^ Token(Identifier, "reply", (104,5)->(104,10))
          ^ Token(Dot, ".", (104,10)->(104,11))
           ^^^^^^ Token(Identifier, "result", (104,11)->(104,17))
                 ^^ Token(MethodArrow, "->", (104,17)->(104,19))
                   ^^^^^ Token(Identifier, "empty", (104,19)->(104,24))
                        ^ Token(LeftParen, "(", (104,24)->(104,25))
                         ^ Token(RightParen, ")", (104,25)->(104,26))
                           Token(EndOfLine, "\n", (104,26)->(104,26))
    return
    ^^^^^^ Token(Identifier, "return", (105,4)->(105,10))
           Token(EndOfLine, "\n", (105,10)->(105,10))
  endif
  ^^^^^ Token(Identifier, "endif", (106,2)->(106,7))
        Token(EndOfLine, "\n", (106,7)->(106,7))

 Token(EndOfLine, "\n", (107,0)->(107,0))
  var items: list<dict<any>>
  ^^^ Token(Identifier, "var", (108,2)->(108,5))
      ^^^^^ Token(Identifier, "items", (108,6)->(108,11))
           ^^ Token(SpacedColon, ": ", (108,11)->(108,13))
             ^^^^ Token(Identifier, "list", (108,13)->(108,17))
                 ^ Token(AngleLeft, "<", (108,17)->(108,18))
                  ^^^^ Token(Identifier, "dict", (108,18)->(108,22))
                      ^ Token(AngleLeft, "<", (108,22)->(108,23))
                       ^^^ Token(Identifier, "any", (108,23)->(108,26))
                          ^ Token(AngleRight, ">", (108,26)->(108,27))
                           ^ Token(GreaterThan, ">", (108,27)->(108,28))
                             Token(EndOfLine, "\n", (108,28)->(108,28))
  if reply.result->type() == v:t_list
  ^^ Token(Identifier, "if", (109,2)->(109,4))
     ^^^^^ Token(Identifier, "reply", (109,5)->(109,10))
          ^ Token(Dot, ".", (109,10)->(109,11))
           ^^^^^^ Token(Identifier, "result", (109,11)->(109,17))
                 ^^ Token(MethodArrow, "->", (109,17)->(109,19))
                   ^^^^ Token(Identifier, "type", (109,19)->(109,23))
                       ^ Token(LeftParen, "(", (109,23)->(109,24))
                        ^ Token(RightParen, ")", (109,24)->(109,25))
                          ^^ Token(EqualTo, "==", (109,26)->(109,28))
                             ^ Token(Identifier, "v", (109,29)->(109,30))
                              ^ Token(Colon, ":", (109,30)->(109,31))
                               ^^^^^^ Token(Identifier, "t_list", (109,31)->(109,37))
                                      Token(EndOfLine, "\n", (109,37)->(109,37))
    items = reply.result
    ^^^^^ Token(Identifier, "items", (110,4)->(110,9))
          ^ Token(Equal, "=", (110,10)->(110,11))
            ^^^^^ Token(Identifier, "reply", (110,12)->(110,17))
                 ^ Token(Dot, ".", (110,17)->(110,18))
                  ^^^^^^ Token(Identifier, "result", (110,18)->(110,24))
                         Token(EndOfLine, "\n", (110,24)->(110,24))
  else
  ^^^^ Token(Identifier, "else", (111,2)->(111,6))
       Token(EndOfLine, "\n", (111,6)->(111,6))
    items = reply.result.items
    ^^^^^ Token(Identifier, "items", (112,4)->(112,9))
          ^ Token(Equal, "=", (112,10)->(112,11))
            ^^^^^ Token(Identifier, "reply", (112,12)->(112,17))
                 ^ Token(Dot, ".", (112,17)->(112,18))
                  ^^^^^^ Token(Identifier, "result", (112,18)->(112,24))
                        ^ Token(Dot, ".", (112,24)->(112,25))
                         ^^^^^ Token(Identifier, "items", (112,25)->(112,30))
                               Token(EndOfLine, "\n", (112,30)->(112,30))
  endif
  ^^^^^ Token(Identifier, "endif", (113,2)->(113,7))
        Token(EndOfLine, "\n", (113,7)->(113,7))

 Token(EndOfLine, "\n", (114,0)->(114,0))
  var completeItems: list<dict<any>> = []
  ^^^ Token(Identifier, "var", (115,2)->(115,5))
      ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (115,6)->(115,19))
                   ^^ Token(SpacedColon, ": ", (115,19)->(115,21))
                     ^^^^ Token(Identifier, "list", (115,21)->(115,25))
                         ^ Token(AngleLeft, "<", (115,25)->(115,26))
                          ^^^^ Token(Identifier, "dict", (115,26)->(115,30))
                              ^ Token(AngleLeft, "<", (115,30)->(115,31))
                               ^^^ Token(Identifier, "any", (115,31)->(115,34))
                                  ^ Token(AngleRight, ">", (115,34)->(115,35))
                                   ^ Token(GreaterThan, ">", (115,35)->(115,36))
                                     ^ Token(Equal, "=", (115,37)->(115,38))
                                       ^ Token(LeftBracket, "[", (115,39)->(115,40))
                                        ^ Token(RightBracket, "]", (115,40)->(115,41))
                                          Token(EndOfLine, "\n", (115,41)->(115,41))
  for item in items
  ^^^ Token(Identifier, "for", (116,2)->(116,5))
      ^^^^ Token(Identifier, "item", (116,6)->(116,10))
           ^^ Token(Identifier, "in", (116,11)->(116,13))
              ^^^^^ Token(Identifier, "items", (116,14)->(116,19))
                    Token(EndOfLine, "\n", (116,19)->(116,19))
    var d: dict<any> = {}
    ^^^ Token(Identifier, "var", (117,4)->(117,7))
        ^ Token(Identifier, "d", (117,8)->(117,9))
         ^^ Token(SpacedColon, ": ", (117,9)->(117,11))
           ^^^^ Token(Identifier, "dict", (117,11)->(117,15))
               ^ Token(AngleLeft, "<", (117,15)->(117,16))
                ^^^ Token(Identifier, "any", (117,16)->(117,19))
                   ^ Token(GreaterThan, ">", (117,19)->(117,20))
                     ^ Token(Equal, "=", (117,21)->(117,22))
                       ^ Token(LeftBrace, "{", (117,23)->(117,24))
                        ^ Token(RightBrace, "}", (117,24)->(117,25))
                          Token(EndOfLine, "\n", (117,25)->(117,25))
    if item->has_key('textEdit') && item.textEdit->has_key('newText')
    ^^ Token(Identifier, "if", (118,4)->(118,6))
       ^^^^ Token(Identifier, "item", (118,7)->(118,11))
           ^^ Token(MethodArrow, "->", (118,11)->(118,13))
             ^^^^^^^ Token(Identifier, "has_key", (118,13)->(118,20))
                    ^ Token(LeftParen, "(", (118,20)->(118,21))
                      ^^^^^^^ Token(SingleQuoteString, "textEdit", (118,22)->(118,29))
                               ^ Token(RightParen, ")", (118,31)->(118,32))
                                 ^^ Token(And, "&&", (118,33)->(118,35))
                                    ^^^^ Token(Identifier, "item", (118,36)->(118,40))
                                        ^ Token(Dot, ".", (118,40)->(118,41))
                                         ^^^^^^^^ Token(Identifier, "textEdit", (118,41)->(118,49))
                                                 ^^ Token(MethodArrow, "->", (118,49)->(118,51))
                                                   ^^^^^^^ Token(Identifier, "has_key", (118,51)->(118,58))
                                                          ^ Token(LeftParen, "(", (118,58)->(118,59))
                                                            ^^^^^^ Token(SingleQuoteString, "newText", (118,60)->(118,66))
                                                                    ^ Token(RightParen, ")", (118,68)->(118,69))
                                                                      Token(EndOfLine, "\n", (118,69)->(118,69))
      d.word = item.textEdit.newText
      ^ Token(Identifier, "d", (119,6)->(119,7))
       ^ Token(Dot, ".", (119,7)->(119,8))
        ^^^^ Token(Identifier, "word", (119,8)->(119,12))
             ^ Token(Equal, "=", (119,13)->(119,14))
               ^^^^ Token(Identifier, "item", (119,15)->(119,19))
                   ^ Token(Dot, ".", (119,19)->(119,20))
                    ^^^^^^^^ Token(Identifier, "textEdit", (119,20)->(119,28))
                            ^ Token(Dot, ".", (119,28)->(119,29))
                             ^^^^^^^ Token(Identifier, "newText", (119,29)->(119,36))
                                     Token(EndOfLine, "\n", (119,36)->(119,36))
    elseif item->has_key('insertText')
    ^^^^^^ Token(Identifier, "elseif", (120,4)->(120,10))
           ^^^^ Token(Identifier, "item", (120,11)->(120,15))
               ^^ Token(MethodArrow, "->", (120,15)->(120,17))
                 ^^^^^^^ Token(Identifier, "has_key", (120,17)->(120,24))
                        ^ Token(LeftParen, "(", (120,24)->(120,25))
                          ^^^^^^^^^ Token(SingleQuoteString, "insertText", (120,26)->(120,35))
                                     ^ Token(RightParen, ")", (120,37)->(120,38))
                                       Token(EndOfLine, "\n", (120,38)->(120,38))
      d.word = item.insertText
      ^ Token(Identifier, "d", (121,6)->(121,7))
       ^ Token(Dot, ".", (121,7)->(121,8))
        ^^^^ Token(Identifier, "word", (121,8)->(121,12))
             ^ Token(Equal, "=", (121,13)->(121,14))
               ^^^^ Token(Identifier, "item", (121,15)->(121,19))
                   ^ Token(Dot, ".", (121,19)->(121,20))
                    ^^^^^^^^^^ Token(Identifier, "insertText", (121,20)->(121,30))
                               Token(EndOfLine, "\n", (121,30)->(121,30))
    else
    ^^^^ Token(Identifier, "else", (122,4)->(122,8))
         Token(EndOfLine, "\n", (122,8)->(122,8))
      d.word = item.label
      ^ Token(Identifier, "d", (123,6)->(123,7))
       ^ Token(Dot, ".", (123,7)->(123,8))
        ^^^^ Token(Identifier, "word", (123,8)->(123,12))
             ^ Token(Equal, "=", (123,13)->(123,14))
               ^^^^ Token(Identifier, "item", (123,15)->(123,19))
                   ^ Token(Dot, ".", (123,19)->(123,20))
                    ^^^^^ Token(Identifier, "label", (123,20)->(123,25))
                          Token(EndOfLine, "\n", (123,25)->(123,25))
    endif
    ^^^^^ Token(Identifier, "endif", (124,4)->(124,9))
          Token(EndOfLine, "\n", (124,9)->(124,9))
    d.abbr = item.label
    ^ Token(Identifier, "d", (125,4)->(125,5))
     ^ Token(Dot, ".", (125,5)->(125,6))
      ^^^^ Token(Identifier, "abbr", (125,6)->(125,10))
           ^ Token(Equal, "=", (125,11)->(125,12))
             ^^^^ Token(Identifier, "item", (125,13)->(125,17))
                 ^ Token(Dot, ".", (125,17)->(125,18))
                  ^^^^^ Token(Identifier, "label", (125,18)->(125,23))
                        Token(EndOfLine, "\n", (125,23)->(125,23))
    if item->has_key('kind')
    ^^ Token(Identifier, "if", (126,4)->(126,6))
       ^^^^ Token(Identifier, "item", (126,7)->(126,11))
           ^^ Token(MethodArrow, "->", (126,11)->(126,13))
             ^^^^^^^ Token(Identifier, "has_key", (126,13)->(126,20))
                    ^ Token(LeftParen, "(", (126,20)->(126,21))
                      ^^^ Token(SingleQuoteString, "kind", (126,22)->(126,25))
                           ^ Token(RightParen, ")", (126,27)->(126,28))
                             Token(EndOfLine, "\n", (126,28)->(126,28))
      # namespace CompletionItemKind
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# namespace CompletionItemKind", (127,6)->(127,36))
      # map LSP kind to complete-item-kind
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# map LSP kind to complete-item-kind", (128,6)->(128,42))
      d.kind = LspCompleteItemKindChar(item.kind)
      ^ Token(Identifier, "d", (129,6)->(129,7))
       ^ Token(Dot, ".", (129,7)->(129,8))
        ^^^^ Token(Identifier, "kind", (129,8)->(129,12))
             ^ Token(Equal, "=", (129,13)->(129,14))
               ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspCompleteItemKindChar", (129,15)->(129,38))
                                      ^ Token(LeftParen, "(", (129,38)->(129,39))
                                       ^^^^ Token(Identifier, "item", (129,39)->(129,43))
                                           ^ Token(Dot, ".", (129,43)->(129,44))
                                            ^^^^ Token(Identifier, "kind", (129,44)->(129,48))
                                                ^ Token(RightParen, ")", (129,48)->(129,49))
                                                  Token(EndOfLine, "\n", (129,49)->(129,49))
    endif
    ^^^^^ Token(Identifier, "endif", (130,4)->(130,9))
          Token(EndOfLine, "\n", (130,9)->(130,9))
    if item->has_key('detail')
    ^^ Token(Identifier, "if", (131,4)->(131,6))
       ^^^^ Token(Identifier, "item", (131,7)->(131,11))
           ^^ Token(MethodArrow, "->", (131,11)->(131,13))
             ^^^^^^^ Token(Identifier, "has_key", (131,13)->(131,20))
                    ^ Token(LeftParen, "(", (131,20)->(131,21))
                      ^^^^^ Token(SingleQuoteString, "detail", (131,22)->(131,27))
                             ^ Token(RightParen, ")", (131,29)->(131,30))
                               Token(EndOfLine, "\n", (131,30)->(131,30))
      d.menu = item.detail
      ^ Token(Identifier, "d", (132,6)->(132,7))
       ^ Token(Dot, ".", (132,7)->(132,8))
        ^^^^ Token(Identifier, "menu", (132,8)->(132,12))
             ^ Token(Equal, "=", (132,13)->(132,14))
               ^^^^ Token(Identifier, "item", (132,15)->(132,19))
                   ^ Token(Dot, ".", (132,19)->(132,20))
                    ^^^^^^ Token(Identifier, "detail", (132,20)->(132,26))
                           Token(EndOfLine, "\n", (132,26)->(132,26))
    endif
    ^^^^^ Token(Identifier, "endif", (133,4)->(133,9))
          Token(EndOfLine, "\n", (133,9)->(133,9))
    if item->has_key('documentation')
    ^^ Token(Identifier, "if", (134,4)->(134,6))
       ^^^^ Token(Identifier, "item", (134,7)->(134,11))
           ^^ Token(MethodArrow, "->", (134,11)->(134,13))
             ^^^^^^^ Token(Identifier, "has_key", (134,13)->(134,20))
                    ^ Token(LeftParen, "(", (134,20)->(134,21))
                      ^^^^^^^^^^^^ Token(SingleQuoteString, "documentation", (134,22)->(134,34))
                                    ^ Token(RightParen, ")", (134,36)->(134,37))
                                      Token(EndOfLine, "\n", (134,37)->(134,37))
      if item.documentation->type() == v:t_string && item.documentation != ''
      ^^ Token(Identifier, "if", (135,6)->(135,8))
         ^^^^ Token(Identifier, "item", (135,9)->(135,13))
             ^ Token(Dot, ".", (135,13)->(135,14))
              ^^^^^^^^^^^^^ Token(Identifier, "documentation", (135,14)->(135,27))
                           ^^ Token(MethodArrow, "->", (135,27)->(135,29))
                             ^^^^ Token(Identifier, "type", (135,29)->(135,33))
                                 ^ Token(LeftParen, "(", (135,33)->(135,34))
                                  ^ Token(RightParen, ")", (135,34)->(135,35))
                                    ^^ Token(EqualTo, "==", (135,36)->(135,38))
                                       ^ Token(Identifier, "v", (135,39)->(135,40))
                                        ^ Token(Colon, ":", (135,40)->(135,41))
                                         ^^^^^^^^ Token(Identifier, "t_string", (135,41)->(135,49))
                                                  ^^ Token(And, "&&", (135,50)->(135,52))
                                                     ^^^^ Token(Identifier, "item", (135,53)->(135,57))
                                                         ^ Token(Dot, ".", (135,57)->(135,58))
                                                          ^^^^^^^^^^^^^ Token(Identifier, "documentation", (135,58)->(135,71))
                                                                        ^^ Token(NotEqualTo, "!=", (135,72)->(135,74))
                                                                             Token(SingleQuoteString, "", (135,76)->(135,76))
                                                                              Token(EndOfLine, "\n", (135,77)->(135,77))
	d.info = item.documentation
 ^ Token(Identifier, "d", (136,1)->(136,2))
  ^ Token(Dot, ".", (136,2)->(136,3))
   ^^^^ Token(Identifier, "info", (136,3)->(136,7))
        ^ Token(Equal, "=", (136,8)->(136,9))
          ^^^^ Token(Identifier, "item", (136,10)->(136,14))
              ^ Token(Dot, ".", (136,14)->(136,15))
               ^^^^^^^^^^^^^ Token(Identifier, "documentation", (136,15)->(136,28))
                             Token(EndOfLine, "\n", (136,28)->(136,28))
      elseif item.documentation->type() == v:t_dict
      ^^^^^^ Token(Identifier, "elseif", (137,6)->(137,12))
             ^^^^ Token(Identifier, "item", (137,13)->(137,17))
                 ^ Token(Dot, ".", (137,17)->(137,18))
                  ^^^^^^^^^^^^^ Token(Identifier, "documentation", (137,18)->(137,31))
                               ^^ Token(MethodArrow, "->", (137,31)->(137,33))
                                 ^^^^ Token(Identifier, "type", (137,33)->(137,37))
                                     ^ Token(LeftParen, "(", (137,37)->(137,38))
                                      ^ Token(RightParen, ")", (137,38)->(137,39))
                                        ^^ Token(EqualTo, "==", (137,40)->(137,42))
                                           ^ Token(Identifier, "v", (137,43)->(137,44))
                                            ^ Token(Colon, ":", (137,44)->(137,45))
                                             ^^^^^^ Token(Identifier, "t_dict", (137,45)->(137,51))
                                                    Token(EndOfLine, "\n", (137,51)->(137,51))
			&& item.documentation.value->type() == v:t_string
   ^^ Token(And, "&&", (138,3)->(138,5))
      ^^^^ Token(Identifier, "item", (138,6)->(138,10))
          ^ Token(Dot, ".", (138,10)->(138,11))
           ^^^^^^^^^^^^^ Token(Identifier, "documentation", (138,11)->(138,24))
                        ^ Token(Dot, ".", (138,24)->(138,25))
                         ^^^^^ Token(Identifier, "value", (138,25)->(138,30))
                              ^^ Token(MethodArrow, "->", (138,30)->(138,32))
                                ^^^^ Token(Identifier, "type", (138,32)->(138,36))
                                    ^ Token(LeftParen, "(", (138,36)->(138,37))
                                     ^ Token(RightParen, ")", (138,37)->(138,38))
                                       ^^ Token(EqualTo, "==", (138,39)->(138,41))
                                          ^ Token(Identifier, "v", (138,42)->(138,43))
                                           ^ Token(Colon, ":", (138,43)->(138,44))
                                            ^^^^^^^^ Token(Identifier, "t_string", (138,44)->(138,52))
                                                     Token(EndOfLine, "\n", (138,52)->(138,52))
	d.info = item.documentation.value
 ^ Token(Identifier, "d", (139,1)->(139,2))
  ^ Token(Dot, ".", (139,2)->(139,3))
   ^^^^ Token(Identifier, "info", (139,3)->(139,7))
        ^ Token(Equal, "=", (139,8)->(139,9))
          ^^^^ Token(Identifier, "item", (139,10)->(139,14))
              ^ Token(Dot, ".", (139,14)->(139,15))
               ^^^^^^^^^^^^^ Token(Identifier, "documentation", (139,15)->(139,28))
                            ^ Token(Dot, ".", (139,28)->(139,29))
                             ^^^^^ Token(Identifier, "value", (139,29)->(139,34))
                                   Token(EndOfLine, "\n", (139,34)->(139,34))
      endif
      ^^^^^ Token(Identifier, "endif", (140,6)->(140,11))
            Token(EndOfLine, "\n", (140,11)->(140,11))
    endif
    ^^^^^ Token(Identifier, "endif", (141,4)->(141,9))
          Token(EndOfLine, "\n", (141,9)->(141,9))
    d.user_data = item
    ^ Token(Identifier, "d", (142,4)->(142,5))
     ^ Token(Dot, ".", (142,5)->(142,6))
      ^^^^^^^^^ Token(Identifier, "user_data", (142,6)->(142,15))
                ^ Token(Equal, "=", (142,16)->(142,17))
                  ^^^^ Token(Identifier, "item", (142,18)->(142,22))
                       Token(EndOfLine, "\n", (142,22)->(142,22))
    completeItems->add(d)
    ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (143,4)->(143,17))
                 ^^ Token(MethodArrow, "->", (143,17)->(143,19))
                   ^^^ Token(Identifier, "add", (143,19)->(143,22))
                      ^ Token(LeftParen, "(", (143,22)->(143,23))
                       ^ Token(Identifier, "d", (143,23)->(143,24))
                        ^ Token(RightParen, ")", (143,24)->(143,25))
                          Token(EndOfLine, "\n", (143,25)->(143,25))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (144,2)->(144,8))
         Token(EndOfLine, "\n", (144,8)->(144,8))

 Token(EndOfLine, "\n", (145,0)->(145,0))
  if opt.lspOptions.autoComplete
  ^^ Token(Identifier, "if", (146,2)->(146,4))
     ^^^ Token(Identifier, "opt", (146,5)->(146,8))
        ^ Token(Dot, ".", (146,8)->(146,9))
         ^^^^^^^^^^ Token(Identifier, "lspOptions", (146,9)->(146,19))
                   ^ Token(Dot, ".", (146,19)->(146,20))
                    ^^^^^^^^^^^^ Token(Identifier, "autoComplete", (146,20)->(146,32))
                                 Token(EndOfLine, "\n", (146,32)->(146,32))
    if completeItems->empty()
    ^^ Token(Identifier, "if", (147,4)->(147,6))
       ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (147,7)->(147,20))
                    ^^ Token(MethodArrow, "->", (147,20)->(147,22))
                      ^^^^^ Token(Identifier, "empty", (147,22)->(147,27))
                           ^ Token(LeftParen, "(", (147,27)->(147,28))
                            ^ Token(RightParen, ")", (147,28)->(147,29))
                              Token(EndOfLine, "\n", (147,29)->(147,29))
      # no matches
      ^^^^^^^^^^^^ Token(Comment, "# no matches", (148,6)->(148,18))
      return
      ^^^^^^ Token(Identifier, "return", (149,6)->(149,12))
             Token(EndOfLine, "\n", (149,12)->(149,12))
    endif
    ^^^^^ Token(Identifier, "endif", (150,4)->(150,9))
          Token(EndOfLine, "\n", (150,9)->(150,9))

 Token(EndOfLine, "\n", (151,0)->(151,0))
    if mode() != 'i' && mode() != 'R' && mode() != 'Rv'
    ^^ Token(Identifier, "if", (152,4)->(152,6))
       ^^^^ Token(Identifier, "mode", (152,7)->(152,11))
           ^ Token(LeftParen, "(", (152,11)->(152,12))
            ^ Token(RightParen, ")", (152,12)->(152,13))
              ^^ Token(NotEqualTo, "!=", (152,14)->(152,16))
                   Token(SingleQuoteString, "i", (152,18)->(152,18))
                     ^^ Token(And, "&&", (152,21)->(152,23))
                        ^^^^ Token(Identifier, "mode", (152,24)->(152,28))
                            ^ Token(LeftParen, "(", (152,28)->(152,29))
                             ^ Token(RightParen, ")", (152,29)->(152,30))
                               ^^ Token(NotEqualTo, "!=", (152,31)->(152,33))
                                    Token(SingleQuoteString, "R", (152,35)->(152,35))
                                      ^^ Token(And, "&&", (152,38)->(152,40))
                                         ^^^^ Token(Identifier, "mode", (152,41)->(152,45))
                                             ^ Token(LeftParen, "(", (152,45)->(152,46))
                                              ^ Token(RightParen, ")", (152,46)->(152,47))
                                                ^^ Token(NotEqualTo, "!=", (152,48)->(152,50))
                                                    ^ Token(SingleQuoteString, "Rv", (152,52)->(152,53))
                                                        Token(EndOfLine, "\n", (152,55)->(152,55))
      # If not in insert or replace mode, then don't start the completion
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# If not in insert or replace mode, then don't start the completion", (153,6)->(153,73))
      return
      ^^^^^^ Token(Identifier, "return", (154,6)->(154,12))
             Token(EndOfLine, "\n", (154,12)->(154,12))
    endif
    ^^^^^ Token(Identifier, "endif", (155,4)->(155,9))
          Token(EndOfLine, "\n", (155,9)->(155,9))

 Token(EndOfLine, "\n", (156,0)->(156,0))
    if completeItems->len() == 1
    ^^ Token(Identifier, "if", (157,4)->(157,6))
       ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (157,7)->(157,20))
                    ^^ Token(MethodArrow, "->", (157,20)->(157,22))
                      ^^^ Token(Identifier, "len", (157,22)->(157,25))
                         ^ Token(LeftParen, "(", (157,25)->(157,26))
                          ^ Token(RightParen, ")", (157,26)->(157,27))
                            ^^ Token(EqualTo, "==", (157,28)->(157,30))
                               ^ Token(Integer, "1", (157,31)->(157,32))
                                 Token(EndOfLine, "\n", (157,32)->(157,32))
	&& matchstr(getline('.'), completeItems[0].word .. '\>') != ''
 ^^ Token(And, "&&", (158,1)->(158,3))
    ^^^^^^^^ Token(Identifier, "matchstr", (158,4)->(158,12))
            ^ Token(LeftParen, "(", (158,12)->(158,13))
             ^^^^^^^ Token(Identifier, "getline", (158,13)->(158,20))
                    ^ Token(LeftParen, "(", (158,20)->(158,21))
                       Token(SingleQuoteString, ".", (158,22)->(158,22))
                        ^ Token(RightParen, ")", (158,24)->(158,25))
                         ^ Token(Comma, ",", (158,25)->(158,26))
                           ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (158,27)->(158,40))
                                        ^ Token(LeftBracket, "[", (158,40)->(158,41))
                                         ^ Token(Integer, "0", (158,41)->(158,42))
                                          ^ Token(RightBracket, "]", (158,42)->(158,43))
                                           ^ Token(Dot, ".", (158,43)->(158,44))
                                            ^^^^ Token(Identifier, "word", (158,44)->(158,48))
                                                 ^^ Token(StringConcat, "..", (158,49)->(158,51))
                                                     ^ Token(SingleQuoteString, "\\>", (158,53)->(158,54))
                                                        ^ Token(RightParen, ")", (158,56)->(158,57))
                                                          ^^ Token(NotEqualTo, "!=", (158,58)->(158,60))
                                                               Token(SingleQuoteString, "", (158,62)->(158,62))
                                                                Token(EndOfLine, "\n", (158,63)->(158,63))
      # only one complete match. No need to show the completion popup
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# only one complete match. No need to show the completion popup", (159,6)->(159,69))
      return
      ^^^^^^ Token(Identifier, "return", (160,6)->(160,12))
             Token(EndOfLine, "\n", (160,12)->(160,12))
    endif
    ^^^^^ Token(Identifier, "endif", (161,4)->(161,9))
          Token(EndOfLine, "\n", (161,9)->(161,9))

 Token(EndOfLine, "\n", (162,0)->(162,0))
    # Find the start column for the completion.  If any of the entries
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Find the start column for the completion.  If any of the entries", (163,4)->(163,70))
    # returned by the LSP server has a starting position, then use that.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# returned by the LSP server has a starting position, then use that.", (164,4)->(164,72))
    var start_col: number = 0
    ^^^ Token(Identifier, "var", (165,4)->(165,7))
        ^^^^^^^^^ Token(Identifier, "start_col", (165,8)->(165,17))
                 ^^ Token(SpacedColon, ": ", (165,17)->(165,19))
                   ^^^^^^ Token(Identifier, "number", (165,19)->(165,25))
                          ^ Token(Equal, "=", (165,26)->(165,27))
                            ^ Token(Integer, "0", (165,28)->(165,29))
                              Token(EndOfLine, "\n", (165,29)->(165,29))
    for item in items
    ^^^ Token(Identifier, "for", (166,4)->(166,7))
        ^^^^ Token(Identifier, "item", (166,8)->(166,12))
             ^^ Token(Identifier, "in", (166,13)->(166,15))
                ^^^^^ Token(Identifier, "items", (166,16)->(166,21))
                      Token(EndOfLine, "\n", (166,21)->(166,21))
      if item->has_key('textEdit')
      ^^ Token(Identifier, "if", (167,6)->(167,8))
         ^^^^ Token(Identifier, "item", (167,9)->(167,13))
             ^^ Token(MethodArrow, "->", (167,13)->(167,15))
               ^^^^^^^ Token(Identifier, "has_key", (167,15)->(167,22))
                      ^ Token(LeftParen, "(", (167,22)->(167,23))
                        ^^^^^^^ Token(SingleQuoteString, "textEdit", (167,24)->(167,31))
                                 ^ Token(RightParen, ")", (167,33)->(167,34))
                                   Token(EndOfLine, "\n", (167,34)->(167,34))
	start_col = item.textEdit.range.start.character + 1
 ^^^^^^^^^ Token(Identifier, "start_col", (168,1)->(168,10))
           ^ Token(Equal, "=", (168,11)->(168,12))
             ^^^^ Token(Identifier, "item", (168,13)->(168,17))
                 ^ Token(Dot, ".", (168,17)->(168,18))
                  ^^^^^^^^ Token(Identifier, "textEdit", (168,18)->(168,26))
                          ^ Token(Dot, ".", (168,26)->(168,27))
                           ^^^^^ Token(Identifier, "range", (168,27)->(168,32))
                                ^ Token(Dot, ".", (168,32)->(168,33))
                                 ^^^^^ Token(Identifier, "start", (168,33)->(168,38))
                                      ^ Token(Dot, ".", (168,38)->(168,39))
                                       ^^^^^^^^^ Token(Identifier, "character", (168,39)->(168,48))
                                                 ^ Token(Plus, "+", (168,49)->(168,50))
                                                   ^ Token(Integer, "1", (168,51)->(168,52))
                                                     Token(EndOfLine, "\n", (168,52)->(168,52))
	break
 ^^^^^ Token(Identifier, "break", (169,1)->(169,6))
       Token(EndOfLine, "\n", (169,6)->(169,6))
      endif
      ^^^^^ Token(Identifier, "endif", (170,6)->(170,11))
            Token(EndOfLine, "\n", (170,11)->(170,11))
    endfor
    ^^^^^^ Token(Identifier, "endfor", (171,4)->(171,10))
           Token(EndOfLine, "\n", (171,10)->(171,10))

 Token(EndOfLine, "\n", (172,0)->(172,0))
    # LSP server didn't return a starting position for completion, search
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# LSP server didn't return a starting position for completion, search", (173,4)->(173,73))
    # backwards from the current cursor position for a non-keyword character.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# backwards from the current cursor position for a non-keyword character.", (174,4)->(174,77))
    if start_col == 0
    ^^ Token(Identifier, "if", (175,4)->(175,6))
       ^^^^^^^^^ Token(Identifier, "start_col", (175,7)->(175,16))
                 ^^ Token(EqualTo, "==", (175,17)->(175,19))
                    ^ Token(Integer, "0", (175,20)->(175,21))
                      Token(EndOfLine, "\n", (175,21)->(175,21))
      var line: string = getline('.')
      ^^^ Token(Identifier, "var", (176,6)->(176,9))
          ^^^^ Token(Identifier, "line", (176,10)->(176,14))
              ^^ Token(SpacedColon, ": ", (176,14)->(176,16))
                ^^^^^^ Token(Identifier, "string", (176,16)->(176,22))
                       ^ Token(Equal, "=", (176,23)->(176,24))
                         ^^^^^^^ Token(Identifier, "getline", (176,25)->(176,32))
                                ^ Token(LeftParen, "(", (176,32)->(176,33))
                                   Token(SingleQuoteString, ".", (176,34)->(176,34))
                                    ^ Token(RightParen, ")", (176,36)->(176,37))
                                      Token(EndOfLine, "\n", (176,37)->(176,37))
      var start = col('.') - 1
      ^^^ Token(Identifier, "var", (177,6)->(177,9))
          ^^^^^ Token(Identifier, "start", (177,10)->(177,15))
                ^ Token(Equal, "=", (177,16)->(177,17))
                  ^^^ Token(Identifier, "col", (177,18)->(177,21))
                     ^ Token(LeftParen, "(", (177,21)->(177,22))
                        Token(SingleQuoteString, ".", (177,23)->(177,23))
                         ^ Token(RightParen, ")", (177,25)->(177,26))
                           ^ Token(Minus, "-", (177,27)->(177,28))
                             ^ Token(Integer, "1", (177,29)->(177,30))
                               Token(EndOfLine, "\n", (177,30)->(177,30))
      while start > 0 && line[start - 1] =~ '\k'
      ^^^^^ Token(Identifier, "while", (178,6)->(178,11))
            ^^^^^ Token(Identifier, "start", (178,12)->(178,17))
                  ^ Token(GreaterThan, ">", (178,18)->(178,19))
                    ^ Token(Integer, "0", (178,20)->(178,21))
                      ^^ Token(And, "&&", (178,22)->(178,24))
                         ^^^^ Token(Identifier, "line", (178,25)->(178,29))
                             ^ Token(LeftBracket, "[", (178,29)->(178,30))
                              ^^^^^ Token(Identifier, "start", (178,30)->(178,35))
                                    ^ Token(Minus, "-", (178,36)->(178,37))
                                      ^ Token(Integer, "1", (178,38)->(178,39))
                                       ^ Token(RightBracket, "]", (178,39)->(178,40))
                                         ^^ Token(RegexpMatches, "=~", (178,41)->(178,43))
                                             ^ Token(SingleQuoteString, "\\k", (178,45)->(178,46))
                                                 Token(EndOfLine, "\n", (178,48)->(178,48))
	start -= 1
 ^^^^^ Token(Identifier, "start", (179,1)->(179,6))
       ^^ Token(MinusEquals, "-=", (179,7)->(179,9))
          ^ Token(Integer, "1", (179,10)->(179,11))
            Token(EndOfLine, "\n", (179,11)->(179,11))
      endwhile
      ^^^^^^^^ Token(Identifier, "endwhile", (180,6)->(180,14))
               Token(EndOfLine, "\n", (180,14)->(180,14))
      start_col = start + 1
      ^^^^^^^^^ Token(Identifier, "start_col", (181,6)->(181,15))
                ^ Token(Equal, "=", (181,16)->(181,17))
                  ^^^^^ Token(Identifier, "start", (181,18)->(181,23))
                        ^ Token(Plus, "+", (181,24)->(181,25))
                          ^ Token(Integer, "1", (181,26)->(181,27))
                            Token(EndOfLine, "\n", (181,27)->(181,27))
    endif
    ^^^^^ Token(Identifier, "endif", (182,4)->(182,9))
          Token(EndOfLine, "\n", (182,9)->(182,9))

 Token(EndOfLine, "\n", (183,0)->(183,0))
    complete(start_col, completeItems)
    ^^^^^^^^ Token(Identifier, "complete", (184,4)->(184,12))
            ^ Token(LeftParen, "(", (184,12)->(184,13))
             ^^^^^^^^^ Token(Identifier, "start_col", (184,13)->(184,22))
                      ^ Token(Comma, ",", (184,22)->(184,23))
                        ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (184,24)->(184,37))
                                     ^ Token(RightParen, ")", (184,37)->(184,38))
                                       Token(EndOfLine, "\n", (184,38)->(184,38))
  else
  ^^^^ Token(Identifier, "else", (185,2)->(185,6))
       Token(EndOfLine, "\n", (185,6)->(185,6))
    lspserver.completeItems = completeItems
    ^^^^^^^^^ Token(Identifier, "lspserver", (186,4)->(186,13))
             ^ Token(Dot, ".", (186,13)->(186,14))
              ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (186,14)->(186,27))
                            ^ Token(Equal, "=", (186,28)->(186,29))
                              ^^^^^^^^^^^^^ Token(Identifier, "completeItems", (186,30)->(186,43))
                                            Token(EndOfLine, "\n", (186,43)->(186,43))
    lspserver.completePending = false
    ^^^^^^^^^ Token(Identifier, "lspserver", (187,4)->(187,13))
             ^ Token(Dot, ".", (187,13)->(187,14))
              ^^^^^^^^^^^^^^^ Token(Identifier, "completePending", (187,14)->(187,29))
                              ^ Token(Equal, "=", (187,30)->(187,31))
                                ^^^^^ Token(False, "false", (187,32)->(187,37))
                                      Token(EndOfLine, "\n", (187,37)->(187,37))
  endif
  ^^^^^ Token(Identifier, "endif", (188,2)->(188,7))
        Token(EndOfLine, "\n", (188,7)->(188,7))
enddef
^^^^^^ Token(Identifier, "enddef", (189,0)->(189,6))
       Token(EndOfLine, "\n", (189,6)->(189,6))

 Token(EndOfLine, "\n", (190,0)->(190,0))
# process the 'textDocument/hover' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/hover' reply from the LSP server", (191,0)->(191,60))
# Result: Hover | null
^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: Hover | null", (192,0)->(192,22))
def ProcessHoverReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (193,0)->(193,3))
    ^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessHoverReply", (193,4)->(193,21))
                     ^ Token(LeftParen, "(", (193,21)->(193,22))
                      ^^^^^^^^^ Token(Identifier, "lspserver", (193,22)->(193,31))
                               ^^ Token(SpacedColon, ": ", (193,31)->(193,33))
                                 ^^^^ Token(Identifier, "dict", (193,33)->(193,37))
                                     ^ Token(AngleLeft, "<", (193,37)->(193,38))
                                      ^^^ Token(Identifier, "any", (193,38)->(193,41))
                                         ^ Token(AngleRight, ">", (193,41)->(193,42))
                                          ^ Token(Comma, ",", (193,42)->(193,43))
                                            ^^^ Token(Identifier, "req", (193,44)->(193,47))
                                               ^^ Token(SpacedColon, ": ", (193,47)->(193,49))
                                                 ^^^^ Token(Identifier, "dict", (193,49)->(193,53))
                                                     ^ Token(AngleLeft, "<", (193,53)->(193,54))
                                                      ^^^ Token(Identifier, "any", (193,54)->(193,57))
                                                         ^ Token(AngleRight, ">", (193,57)->(193,58))
                                                          ^ Token(Comma, ",", (193,58)->(193,59))
                                                            ^^^^^ Token(Identifier, "reply", (193,60)->(193,65))
                                                                 ^^ Token(SpacedColon, ": ", (193,65)->(193,67))
                                                                   ^^^^ Token(Identifier, "dict", (193,67)->(193,71))
                                                                       ^ Token(AngleLeft, "<", (193,71)->(193,72))
                                                                        ^^^ Token(Identifier, "any", (193,72)->(193,75))
                                                                           ^ Token(AngleRight, ">", (193,75)->(193,76))
                                                                            ^ Token(RightParen, ")", (193,76)->(193,77))
                                                                             ^^ Token(SpacedColon, ": ", (193,77)->(193,79))
                                                                               ^^^^ Token(Identifier, "void", (193,79)->(193,83))
                                                                                    Token(EndOfLine, "\n", (193,83)->(193,83))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (194,2)->(194,4))
     ^^^^^ Token(Identifier, "reply", (194,5)->(194,10))
          ^ Token(Dot, ".", (194,10)->(194,11))
           ^^^^^^ Token(Identifier, "result", (194,11)->(194,17))
                 ^^ Token(MethodArrow, "->", (194,17)->(194,19))
                   ^^^^^ Token(Identifier, "empty", (194,19)->(194,24))
                        ^ Token(LeftParen, "(", (194,24)->(194,25))
                         ^ Token(RightParen, ")", (194,25)->(194,26))
                           Token(EndOfLine, "\n", (194,26)->(194,26))
    return
    ^^^^^^ Token(Identifier, "return", (195,4)->(195,10))
           Token(EndOfLine, "\n", (195,10)->(195,10))
  endif
  ^^^^^ Token(Identifier, "endif", (196,2)->(196,7))
        Token(EndOfLine, "\n", (196,7)->(196,7))

 Token(EndOfLine, "\n", (197,0)->(197,0))
  var hoverText: list<string>
  ^^^ Token(Identifier, "var", (198,2)->(198,5))
      ^^^^^^^^^ Token(Identifier, "hoverText", (198,6)->(198,15))
               ^^ Token(SpacedColon, ": ", (198,15)->(198,17))
                 ^^^^ Token(Identifier, "list", (198,17)->(198,21))
                     ^ Token(AngleLeft, "<", (198,21)->(198,22))
                      ^^^^^^ Token(Identifier, "string", (198,22)->(198,28))
                            ^ Token(GreaterThan, ">", (198,28)->(198,29))
                              Token(EndOfLine, "\n", (198,29)->(198,29))
  var hoverKind: string
  ^^^ Token(Identifier, "var", (199,2)->(199,5))
      ^^^^^^^^^ Token(Identifier, "hoverKind", (199,6)->(199,15))
               ^^ Token(SpacedColon, ": ", (199,15)->(199,17))
                 ^^^^^^ Token(Identifier, "string", (199,17)->(199,23))
                        Token(EndOfLine, "\n", (199,23)->(199,23))

 Token(EndOfLine, "\n", (200,0)->(200,0))
  if reply.result.contents->type() == v:t_dict
  ^^ Token(Identifier, "if", (201,2)->(201,4))
     ^^^^^ Token(Identifier, "reply", (201,5)->(201,10))
          ^ Token(Dot, ".", (201,10)->(201,11))
           ^^^^^^ Token(Identifier, "result", (201,11)->(201,17))
                 ^ Token(Dot, ".", (201,17)->(201,18))
                  ^^^^^^^^ Token(Identifier, "contents", (201,18)->(201,26))
                          ^^ Token(MethodArrow, "->", (201,26)->(201,28))
                            ^^^^ Token(Identifier, "type", (201,28)->(201,32))
                                ^ Token(LeftParen, "(", (201,32)->(201,33))
                                 ^ Token(RightParen, ")", (201,33)->(201,34))
                                   ^^ Token(EqualTo, "==", (201,35)->(201,37))
                                      ^ Token(Identifier, "v", (201,38)->(201,39))
                                       ^ Token(Colon, ":", (201,39)->(201,40))
                                        ^^^^^^ Token(Identifier, "t_dict", (201,40)->(201,46))
                                               Token(EndOfLine, "\n", (201,46)->(201,46))
    if reply.result.contents->has_key('kind')
    ^^ Token(Identifier, "if", (202,4)->(202,6))
       ^^^^^ Token(Identifier, "reply", (202,7)->(202,12))
            ^ Token(Dot, ".", (202,12)->(202,13))
             ^^^^^^ Token(Identifier, "result", (202,13)->(202,19))
                   ^ Token(Dot, ".", (202,19)->(202,20))
                    ^^^^^^^^ Token(Identifier, "contents", (202,20)->(202,28))
                            ^^ Token(MethodArrow, "->", (202,28)->(202,30))
                              ^^^^^^^ Token(Identifier, "has_key", (202,30)->(202,37))
                                     ^ Token(LeftParen, "(", (202,37)->(202,38))
                                       ^^^ Token(SingleQuoteString, "kind", (202,39)->(202,42))
                                            ^ Token(RightParen, ")", (202,44)->(202,45))
                                              Token(EndOfLine, "\n", (202,45)->(202,45))
      # MarkupContent
      ^^^^^^^^^^^^^^^ Token(Comment, "# MarkupContent", (203,6)->(203,21))
      if reply.result.contents.kind == 'plaintext'
      ^^ Token(Identifier, "if", (204,6)->(204,8))
         ^^^^^ Token(Identifier, "reply", (204,9)->(204,14))
              ^ Token(Dot, ".", (204,14)->(204,15))
               ^^^^^^ Token(Identifier, "result", (204,15)->(204,21))
                     ^ Token(Dot, ".", (204,21)->(204,22))
                      ^^^^^^^^ Token(Identifier, "contents", (204,22)->(204,30))
                              ^ Token(Dot, ".", (204,30)->(204,31))
                               ^^^^ Token(Identifier, "kind", (204,31)->(204,35))
                                    ^^ Token(EqualTo, "==", (204,36)->(204,38))
                                        ^^^^^^^^ Token(SingleQuoteString, "plaintext", (204,40)->(204,48))
                                                   Token(EndOfLine, "\n", (204,50)->(204,50))
        hoverText = reply.result.contents.value->split("\n")
        ^^^^^^^^^ Token(Identifier, "hoverText", (205,8)->(205,17))
                  ^ Token(Equal, "=", (205,18)->(205,19))
                    ^^^^^ Token(Identifier, "reply", (205,20)->(205,25))
                         ^ Token(Dot, ".", (205,25)->(205,26))
                          ^^^^^^ Token(Identifier, "result", (205,26)->(205,32))
                                ^ Token(Dot, ".", (205,32)->(205,33))
                                 ^^^^^^^^ Token(Identifier, "contents", (205,33)->(205,41))
                                         ^ Token(Dot, ".", (205,41)->(205,42))
                                          ^^^^^ Token(Identifier, "value", (205,42)->(205,47))
                                               ^^ Token(MethodArrow, "->", (205,47)->(205,49))
                                                 ^^^^^ Token(Identifier, "split", (205,49)->(205,54))
                                                      ^ Token(LeftParen, "(", (205,54)->(205,55))
                                                        ^ Token(DoubleQuoteString, "\\n", (205,56)->(205,57))
                                                           ^ Token(RightParen, ")", (205,59)->(205,60))
                                                             Token(EndOfLine, "\n", (205,60)->(205,60))
        hoverKind = 'text'
        ^^^^^^^^^ Token(Identifier, "hoverKind", (206,8)->(206,17))
                  ^ Token(Equal, "=", (206,18)->(206,19))
                     ^^^ Token(SingleQuoteString, "text", (206,21)->(206,24))
                           Token(EndOfLine, "\n", (206,26)->(206,26))
      elseif reply.result.contents.kind == 'markdown'
      ^^^^^^ Token(Identifier, "elseif", (207,6)->(207,12))
             ^^^^^ Token(Identifier, "reply", (207,13)->(207,18))
                  ^ Token(Dot, ".", (207,18)->(207,19))
                   ^^^^^^ Token(Identifier, "result", (207,19)->(207,25))
                         ^ Token(Dot, ".", (207,25)->(207,26))
                          ^^^^^^^^ Token(Identifier, "contents", (207,26)->(207,34))
                                  ^ Token(Dot, ".", (207,34)->(207,35))
                                   ^^^^ Token(Identifier, "kind", (207,35)->(207,39))
                                        ^^ Token(EqualTo, "==", (207,40)->(207,42))
                                            ^^^^^^^ Token(SingleQuoteString, "markdown", (207,44)->(207,51))
                                                      Token(EndOfLine, "\n", (207,53)->(207,53))
        hoverText = reply.result.contents.value->split("\n")
        ^^^^^^^^^ Token(Identifier, "hoverText", (208,8)->(208,17))
                  ^ Token(Equal, "=", (208,18)->(208,19))
                    ^^^^^ Token(Identifier, "reply", (208,20)->(208,25))
                         ^ Token(Dot, ".", (208,25)->(208,26))
                          ^^^^^^ Token(Identifier, "result", (208,26)->(208,32))
                                ^ Token(Dot, ".", (208,32)->(208,33))
                                 ^^^^^^^^ Token(Identifier, "contents", (208,33)->(208,41))
                                         ^ Token(Dot, ".", (208,41)->(208,42))
                                          ^^^^^ Token(Identifier, "value", (208,42)->(208,47))
                                               ^^ Token(MethodArrow, "->", (208,47)->(208,49))
                                                 ^^^^^ Token(Identifier, "split", (208,49)->(208,54))
                                                      ^ Token(LeftParen, "(", (208,54)->(208,55))
                                                        ^ Token(DoubleQuoteString, "\\n", (208,56)->(208,57))
                                                           ^ Token(RightParen, ")", (208,59)->(208,60))
                                                             Token(EndOfLine, "\n", (208,60)->(208,60))
        hoverKind = 'markdown'
        ^^^^^^^^^ Token(Identifier, "hoverKind", (209,8)->(209,17))
                  ^ Token(Equal, "=", (209,18)->(209,19))
                     ^^^^^^^ Token(SingleQuoteString, "markdown", (209,21)->(209,28))
                               Token(EndOfLine, "\n", (209,30)->(209,30))
      else
      ^^^^ Token(Identifier, "else", (210,6)->(210,10))
           Token(EndOfLine, "\n", (210,10)->(210,10))
        util.ErrMsg($'Error: Unsupported hover contents type ({reply.result.contents.kind})')
        ^^^^ Token(Identifier, "util", (211,8)->(211,12))
            ^ Token(Dot, ".", (211,12)->(211,13))
             ^^^^^^ Token(Identifier, "ErrMsg", (211,13)->(211,19))
                   ^ Token(LeftParen, "(", (211,19)->(211,20))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported hover contents type ({reply.result.contents.kind})", (211,22)->(211,90))
                                                                                            ^ Token(RightParen, ")", (211,92)->(211,93))
                                                                                              Token(EndOfLine, "\n", (211,93)->(211,93))
        return
        ^^^^^^ Token(Identifier, "return", (212,8)->(212,14))
               Token(EndOfLine, "\n", (212,14)->(212,14))
      endif
      ^^^^^ Token(Identifier, "endif", (213,6)->(213,11))
            Token(EndOfLine, "\n", (213,11)->(213,11))
    elseif reply.result.contents->has_key('value')
    ^^^^^^ Token(Identifier, "elseif", (214,4)->(214,10))
           ^^^^^ Token(Identifier, "reply", (214,11)->(214,16))
                ^ Token(Dot, ".", (214,16)->(214,17))
                 ^^^^^^ Token(Identifier, "result", (214,17)->(214,23))
                       ^ Token(Dot, ".", (214,23)->(214,24))
                        ^^^^^^^^ Token(Identifier, "contents", (214,24)->(214,32))
                                ^^ Token(MethodArrow, "->", (214,32)->(214,34))
                                  ^^^^^^^ Token(Identifier, "has_key", (214,34)->(214,41))
                                         ^ Token(LeftParen, "(", (214,41)->(214,42))
                                           ^^^^ Token(SingleQuoteString, "value", (214,43)->(214,47))
                                                 ^ Token(RightParen, ")", (214,49)->(214,50))
                                                   Token(EndOfLine, "\n", (214,50)->(214,50))
      # MarkedString
      ^^^^^^^^^^^^^^ Token(Comment, "# MarkedString", (215,6)->(215,20))
      hoverText = reply.result.contents.value->split("\n")
      ^^^^^^^^^ Token(Identifier, "hoverText", (216,6)->(216,15))
                ^ Token(Equal, "=", (216,16)->(216,17))
                  ^^^^^ Token(Identifier, "reply", (216,18)->(216,23))
                       ^ Token(Dot, ".", (216,23)->(216,24))
                        ^^^^^^ Token(Identifier, "result", (216,24)->(216,30))
                              ^ Token(Dot, ".", (216,30)->(216,31))
                               ^^^^^^^^ Token(Identifier, "contents", (216,31)->(216,39))
                                       ^ Token(Dot, ".", (216,39)->(216,40))
                                        ^^^^^ Token(Identifier, "value", (216,40)->(216,45))
                                             ^^ Token(MethodArrow, "->", (216,45)->(216,47))
                                               ^^^^^ Token(Identifier, "split", (216,47)->(216,52))
                                                    ^ Token(LeftParen, "(", (216,52)->(216,53))
                                                      ^ Token(DoubleQuoteString, "\\n", (216,54)->(216,55))
                                                         ^ Token(RightParen, ")", (216,57)->(216,58))
                                                           Token(EndOfLine, "\n", (216,58)->(216,58))
    else
    ^^^^ Token(Identifier, "else", (217,4)->(217,8))
         Token(EndOfLine, "\n", (217,8)->(217,8))
      util.ErrMsg($'Error: Unsupported hover contents ({reply.result.contents})')
      ^^^^ Token(Identifier, "util", (218,6)->(218,10))
          ^ Token(Dot, ".", (218,10)->(218,11))
           ^^^^^^ Token(Identifier, "ErrMsg", (218,11)->(218,17))
                 ^ Token(LeftParen, "(", (218,17)->(218,18))
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported hover contents ({reply.result.contents})", (218,20)->(218,78))
                                                                                ^ Token(RightParen, ")", (218,80)->(218,81))
                                                                                  Token(EndOfLine, "\n", (218,81)->(218,81))
      return
      ^^^^^^ Token(Identifier, "return", (219,6)->(219,12))
             Token(EndOfLine, "\n", (219,12)->(219,12))
    endif
    ^^^^^ Token(Identifier, "endif", (220,4)->(220,9))
          Token(EndOfLine, "\n", (220,9)->(220,9))
  elseif reply.result.contents->type() == v:t_list
  ^^^^^^ Token(Identifier, "elseif", (221,2)->(221,8))
         ^^^^^ Token(Identifier, "reply", (221,9)->(221,14))
              ^ Token(Dot, ".", (221,14)->(221,15))
               ^^^^^^ Token(Identifier, "result", (221,15)->(221,21))
                     ^ Token(Dot, ".", (221,21)->(221,22))
                      ^^^^^^^^ Token(Identifier, "contents", (221,22)->(221,30))
                              ^^ Token(MethodArrow, "->", (221,30)->(221,32))
                                ^^^^ Token(Identifier, "type", (221,32)->(221,36))
                                    ^ Token(LeftParen, "(", (221,36)->(221,37))
                                     ^ Token(RightParen, ")", (221,37)->(221,38))
                                       ^^ Token(EqualTo, "==", (221,39)->(221,41))
                                          ^ Token(Identifier, "v", (221,42)->(221,43))
                                           ^ Token(Colon, ":", (221,43)->(221,44))
                                            ^^^^^^ Token(Identifier, "t_list", (221,44)->(221,50))
                                                   Token(EndOfLine, "\n", (221,50)->(221,50))
    # interface MarkedString[]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# interface MarkedString[]", (222,4)->(222,30))
    for e in reply.result.contents
    ^^^ Token(Identifier, "for", (223,4)->(223,7))
        ^ Token(Identifier, "e", (223,8)->(223,9))
          ^^ Token(Identifier, "in", (223,10)->(223,12))
             ^^^^^ Token(Identifier, "reply", (223,13)->(223,18))
                  ^ Token(Dot, ".", (223,18)->(223,19))
                   ^^^^^^ Token(Identifier, "result", (223,19)->(223,25))
                         ^ Token(Dot, ".", (223,25)->(223,26))
                          ^^^^^^^^ Token(Identifier, "contents", (223,26)->(223,34))
                                   Token(EndOfLine, "\n", (223,34)->(223,34))
      if e->type() == v:t_string
      ^^ Token(Identifier, "if", (224,6)->(224,8))
         ^ Token(Identifier, "e", (224,9)->(224,10))
          ^^ Token(MethodArrow, "->", (224,10)->(224,12))
            ^^^^ Token(Identifier, "type", (224,12)->(224,16))
                ^ Token(LeftParen, "(", (224,16)->(224,17))
                 ^ Token(RightParen, ")", (224,17)->(224,18))
                   ^^ Token(EqualTo, "==", (224,19)->(224,21))
                      ^ Token(Identifier, "v", (224,22)->(224,23))
                       ^ Token(Colon, ":", (224,23)->(224,24))
                        ^^^^^^^^ Token(Identifier, "t_string", (224,24)->(224,32))
                                 Token(EndOfLine, "\n", (224,32)->(224,32))
        hoverText->extend(e->split("\n"))
        ^^^^^^^^^ Token(Identifier, "hoverText", (225,8)->(225,17))
                 ^^ Token(MethodArrow, "->", (225,17)->(225,19))
                   ^^^^^^ Token(Identifier, "extend", (225,19)->(225,25))
                         ^ Token(LeftParen, "(", (225,25)->(225,26))
                          ^ Token(Identifier, "e", (225,26)->(225,27))
                           ^^ Token(MethodArrow, "->", (225,27)->(225,29))
                             ^^^^^ Token(Identifier, "split", (225,29)->(225,34))
                                  ^ Token(LeftParen, "(", (225,34)->(225,35))
                                    ^ Token(DoubleQuoteString, "\\n", (225,36)->(225,37))
                                       ^ Token(RightParen, ")", (225,39)->(225,40))
                                        ^ Token(RightParen, ")", (225,40)->(225,41))
                                          Token(EndOfLine, "\n", (225,41)->(225,41))
      else
      ^^^^ Token(Identifier, "else", (226,6)->(226,10))
           Token(EndOfLine, "\n", (226,10)->(226,10))
        hoverText->extend(e.value->split("\n"))
        ^^^^^^^^^ Token(Identifier, "hoverText", (227,8)->(227,17))
                 ^^ Token(MethodArrow, "->", (227,17)->(227,19))
                   ^^^^^^ Token(Identifier, "extend", (227,19)->(227,25))
                         ^ Token(LeftParen, "(", (227,25)->(227,26))
                          ^ Token(Identifier, "e", (227,26)->(227,27))
                           ^ Token(Dot, ".", (227,27)->(227,28))
                            ^^^^^ Token(Identifier, "value", (227,28)->(227,33))
                                 ^^ Token(MethodArrow, "->", (227,33)->(227,35))
                                   ^^^^^ Token(Identifier, "split", (227,35)->(227,40))
                                        ^ Token(LeftParen, "(", (227,40)->(227,41))
                                          ^ Token(DoubleQuoteString, "\\n", (227,42)->(227,43))
                                             ^ Token(RightParen, ")", (227,45)->(227,46))
                                              ^ Token(RightParen, ")", (227,46)->(227,47))
                                                Token(EndOfLine, "\n", (227,47)->(227,47))
      endif
      ^^^^^ Token(Identifier, "endif", (228,6)->(228,11))
            Token(EndOfLine, "\n", (228,11)->(228,11))
    endfor
    ^^^^^^ Token(Identifier, "endfor", (229,4)->(229,10))
           Token(EndOfLine, "\n", (229,10)->(229,10))
  elseif reply.result.contents->type() == v:t_string
  ^^^^^^ Token(Identifier, "elseif", (230,2)->(230,8))
         ^^^^^ Token(Identifier, "reply", (230,9)->(230,14))
              ^ Token(Dot, ".", (230,14)->(230,15))
               ^^^^^^ Token(Identifier, "result", (230,15)->(230,21))
                     ^ Token(Dot, ".", (230,21)->(230,22))
                      ^^^^^^^^ Token(Identifier, "contents", (230,22)->(230,30))
                              ^^ Token(MethodArrow, "->", (230,30)->(230,32))
                                ^^^^ Token(Identifier, "type", (230,32)->(230,36))
                                    ^ Token(LeftParen, "(", (230,36)->(230,37))
                                     ^ Token(RightParen, ")", (230,37)->(230,38))
                                       ^^ Token(EqualTo, "==", (230,39)->(230,41))
                                          ^ Token(Identifier, "v", (230,42)->(230,43))
                                           ^ Token(Colon, ":", (230,43)->(230,44))
                                            ^^^^^^^^ Token(Identifier, "t_string", (230,44)->(230,52))
                                                     Token(EndOfLine, "\n", (230,52)->(230,52))
    if reply.result.contents->empty()
    ^^ Token(Identifier, "if", (231,4)->(231,6))
       ^^^^^ Token(Identifier, "reply", (231,7)->(231,12))
            ^ Token(Dot, ".", (231,12)->(231,13))
             ^^^^^^ Token(Identifier, "result", (231,13)->(231,19))
                   ^ Token(Dot, ".", (231,19)->(231,20))
                    ^^^^^^^^ Token(Identifier, "contents", (231,20)->(231,28))
                            ^^ Token(MethodArrow, "->", (231,28)->(231,30))
                              ^^^^^ Token(Identifier, "empty", (231,30)->(231,35))
                                   ^ Token(LeftParen, "(", (231,35)->(231,36))
                                    ^ Token(RightParen, ")", (231,36)->(231,37))
                                      Token(EndOfLine, "\n", (231,37)->(231,37))
      return
      ^^^^^^ Token(Identifier, "return", (232,6)->(232,12))
             Token(EndOfLine, "\n", (232,12)->(232,12))
    endif
    ^^^^^ Token(Identifier, "endif", (233,4)->(233,9))
          Token(EndOfLine, "\n", (233,9)->(233,9))
    hoverText->extend(reply.result.contents->split("\n"))
    ^^^^^^^^^ Token(Identifier, "hoverText", (234,4)->(234,13))
             ^^ Token(MethodArrow, "->", (234,13)->(234,15))
               ^^^^^^ Token(Identifier, "extend", (234,15)->(234,21))
                     ^ Token(LeftParen, "(", (234,21)->(234,22))
                      ^^^^^ Token(Identifier, "reply", (234,22)->(234,27))
                           ^ Token(Dot, ".", (234,27)->(234,28))
                            ^^^^^^ Token(Identifier, "result", (234,28)->(234,34))
                                  ^ Token(Dot, ".", (234,34)->(234,35))
                                   ^^^^^^^^ Token(Identifier, "contents", (234,35)->(234,43))
                                           ^^ Token(MethodArrow, "->", (234,43)->(234,45))
                                             ^^^^^ Token(Identifier, "split", (234,45)->(234,50))
                                                  ^ Token(LeftParen, "(", (234,50)->(234,51))
                                                    ^ Token(DoubleQuoteString, "\\n", (234,52)->(234,53))
                                                       ^ Token(RightParen, ")", (234,55)->(234,56))
                                                        ^ Token(RightParen, ")", (234,56)->(234,57))
                                                          Token(EndOfLine, "\n", (234,57)->(234,57))
  else
  ^^^^ Token(Identifier, "else", (235,2)->(235,6))
       Token(EndOfLine, "\n", (235,6)->(235,6))
    util.ErrMsg($'Error: Unsupported hover contents ({reply.result.contents})')
    ^^^^ Token(Identifier, "util", (236,4)->(236,8))
        ^ Token(Dot, ".", (236,8)->(236,9))
         ^^^^^^ Token(Identifier, "ErrMsg", (236,9)->(236,15))
               ^ Token(LeftParen, "(", (236,15)->(236,16))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported hover contents ({reply.result.contents})", (236,18)->(236,76))
                                                                              ^ Token(RightParen, ")", (236,78)->(236,79))
                                                                                Token(EndOfLine, "\n", (236,79)->(236,79))
    return
    ^^^^^^ Token(Identifier, "return", (237,4)->(237,10))
           Token(EndOfLine, "\n", (237,10)->(237,10))
  endif
  ^^^^^ Token(Identifier, "endif", (238,2)->(238,7))
        Token(EndOfLine, "\n", (238,7)->(238,7))
  if opt.lspOptions.hoverInPreview
  ^^ Token(Identifier, "if", (239,2)->(239,4))
     ^^^ Token(Identifier, "opt", (239,5)->(239,8))
        ^ Token(Dot, ".", (239,8)->(239,9))
         ^^^^^^^^^^ Token(Identifier, "lspOptions", (239,9)->(239,19))
                   ^ Token(Dot, ".", (239,19)->(239,20))
                    ^^^^^^^^^^^^^^ Token(Identifier, "hoverInPreview", (239,20)->(239,34))
                                   Token(EndOfLine, "\n", (239,34)->(239,34))
    silent! pedit HoverReply
    ^^^^^^ Token(Identifier, "silent", (240,4)->(240,10))
          ^ Token(Bang, "!", (240,10)->(240,11))
            ^^^^^ Token(Identifier, "pedit", (240,12)->(240,17))
                  ^^^^^^^^^^ Token(Identifier, "HoverReply", (240,18)->(240,28))
                             Token(EndOfLine, "\n", (240,28)->(240,28))
    wincmd P
    ^^^^^^ Token(Identifier, "wincmd", (241,4)->(241,10))
           ^ Token(Identifier, "P", (241,11)->(241,12))
             Token(EndOfLine, "\n", (241,12)->(241,12))
    setlocal buftype=nofile
    ^^^^^^^^ Token(Identifier, "setlocal", (242,4)->(242,12))
             ^^^^^^^ Token(Identifier, "buftype", (242,13)->(242,20))
                    ^ Token(Equal, "=", (242,20)->(242,21))
                     ^^^^^^ Token(Identifier, "nofile", (242,21)->(242,27))
                            Token(EndOfLine, "\n", (242,27)->(242,27))
    setlocal bufhidden=delete
    ^^^^^^^^ Token(Identifier, "setlocal", (243,4)->(243,12))
             ^^^^^^^^^ Token(Identifier, "bufhidden", (243,13)->(243,22))
                      ^ Token(Equal, "=", (243,22)->(243,23))
                       ^^^^^^ Token(Identifier, "delete", (243,23)->(243,29))
                              Token(EndOfLine, "\n", (243,29)->(243,29))
    exe $'setlocal ft={hoverKind}'
    ^^^ Token(Identifier, "exe", (244,4)->(244,7))
          ^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "setlocal ft={hoverKind}", (244,10)->(244,32))
                                   Token(EndOfLine, "\n", (244,34)->(244,34))
    deletebufline(bufnr(), 1, '$')
    ^^^^^^^^^^^^^ Token(Identifier, "deletebufline", (245,4)->(245,17))
                 ^ Token(LeftParen, "(", (245,17)->(245,18))
                  ^^^^^ Token(Identifier, "bufnr", (245,18)->(245,23))
                       ^ Token(LeftParen, "(", (245,23)->(245,24))
                        ^ Token(RightParen, ")", (245,24)->(245,25))
                         ^ Token(Comma, ",", (245,25)->(245,26))
                           ^ Token(Integer, "1", (245,27)->(245,28))
                            ^ Token(Comma, ",", (245,28)->(245,29))
                                Token(SingleQuoteString, "$", (245,31)->(245,31))
                                 ^ Token(RightParen, ")", (245,33)->(245,34))
                                   Token(EndOfLine, "\n", (245,34)->(245,34))
    append(0, hoverText)
    ^^^^^^ Token(Identifier, "append", (246,4)->(246,10))
          ^ Token(LeftParen, "(", (246,10)->(246,11))
           ^ Token(Integer, "0", (246,11)->(246,12))
            ^ Token(Comma, ",", (246,12)->(246,13))
              ^^^^^^^^^ Token(Identifier, "hoverText", (246,14)->(246,23))
                       ^ Token(RightParen, ")", (246,23)->(246,24))
                         Token(EndOfLine, "\n", (246,24)->(246,24))
    cursor(1, 1)
    ^^^^^^ Token(Identifier, "cursor", (247,4)->(247,10))
          ^ Token(LeftParen, "(", (247,10)->(247,11))
           ^ Token(Integer, "1", (247,11)->(247,12))
            ^ Token(Comma, ",", (247,12)->(247,13))
              ^ Token(Integer, "1", (247,14)->(247,15))
               ^ Token(RightParen, ")", (247,15)->(247,16))
                 Token(EndOfLine, "\n", (247,16)->(247,16))
    wincmd p
    ^^^^^^ Token(Identifier, "wincmd", (248,4)->(248,10))
           ^ Token(Identifier, "p", (248,11)->(248,12))
             Token(EndOfLine, "\n", (248,12)->(248,12))
  else
  ^^^^ Token(Identifier, "else", (249,2)->(249,6))
       Token(EndOfLine, "\n", (249,6)->(249,6))
    hoverText->popup_atcursor({moved: 'word'})
    ^^^^^^^^^ Token(Identifier, "hoverText", (250,4)->(250,13))
             ^^ Token(MethodArrow, "->", (250,13)->(250,15))
               ^^^^^^^^^^^^^^ Token(Identifier, "popup_atcursor", (250,15)->(250,29))
                             ^ Token(LeftParen, "(", (250,29)->(250,30))
                              ^ Token(LeftBrace, "{", (250,30)->(250,31))
                               ^^^^^ Token(Identifier, "moved", (250,31)->(250,36))
                                    ^^ Token(SpacedColon, ": ", (250,36)->(250,38))
                                       ^^^ Token(SingleQuoteString, "word", (250,39)->(250,42))
                                            ^ Token(RightBrace, "}", (250,44)->(250,45))
                                             ^ Token(RightParen, ")", (250,45)->(250,46))
                                               Token(EndOfLine, "\n", (250,46)->(250,46))
  endif
  ^^^^^ Token(Identifier, "endif", (251,2)->(251,7))
        Token(EndOfLine, "\n", (251,7)->(251,7))
enddef
^^^^^^ Token(Identifier, "enddef", (252,0)->(252,6))
       Token(EndOfLine, "\n", (252,6)->(252,6))

 Token(EndOfLine, "\n", (253,0)->(253,0))
# process the 'textDocument/references' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/references' reply from the LSP server", (254,0)->(254,65))
# Result: Location[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: Location[] | null", (255,0)->(255,27))
def ProcessReferencesReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (256,0)->(256,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessReferencesReply", (256,4)->(256,26))
                          ^ Token(LeftParen, "(", (256,26)->(256,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (256,27)->(256,36))
                                    ^^ Token(SpacedColon, ": ", (256,36)->(256,38))
                                      ^^^^ Token(Identifier, "dict", (256,38)->(256,42))
                                          ^ Token(AngleLeft, "<", (256,42)->(256,43))
                                           ^^^ Token(Identifier, "any", (256,43)->(256,46))
                                              ^ Token(AngleRight, ">", (256,46)->(256,47))
                                               ^ Token(Comma, ",", (256,47)->(256,48))
                                                 ^^^ Token(Identifier, "req", (256,49)->(256,52))
                                                    ^^ Token(SpacedColon, ": ", (256,52)->(256,54))
                                                      ^^^^ Token(Identifier, "dict", (256,54)->(256,58))
                                                          ^ Token(AngleLeft, "<", (256,58)->(256,59))
                                                           ^^^ Token(Identifier, "any", (256,59)->(256,62))
                                                              ^ Token(AngleRight, ">", (256,62)->(256,63))
                                                               ^ Token(Comma, ",", (256,63)->(256,64))
                                                                 ^^^^^ Token(Identifier, "reply", (256,65)->(256,70))
                                                                      ^^ Token(SpacedColon, ": ", (256,70)->(256,72))
                                                                        ^^^^ Token(Identifier, "dict", (256,72)->(256,76))
                                                                            ^ Token(AngleLeft, "<", (256,76)->(256,77))
                                                                             ^^^ Token(Identifier, "any", (256,77)->(256,80))
                                                                                ^ Token(AngleRight, ">", (256,80)->(256,81))
                                                                                 ^ Token(RightParen, ")", (256,81)->(256,82))
                                                                                  ^^ Token(SpacedColon, ": ", (256,82)->(256,84))
                                                                                    ^^^^ Token(Identifier, "void", (256,84)->(256,88))
                                                                                         Token(EndOfLine, "\n", (256,88)->(256,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (257,2)->(257,4))
     ^^^^^ Token(Identifier, "reply", (257,5)->(257,10))
          ^ Token(Dot, ".", (257,10)->(257,11))
           ^^^^^^ Token(Identifier, "result", (257,11)->(257,17))
                 ^^ Token(MethodArrow, "->", (257,17)->(257,19))
                   ^^^^^ Token(Identifier, "empty", (257,19)->(257,24))
                        ^ Token(LeftParen, "(", (257,24)->(257,25))
                         ^ Token(RightParen, ")", (257,25)->(257,26))
                           Token(EndOfLine, "\n", (257,26)->(257,26))
    util.WarnMsg('Error: No references found')
    ^^^^ Token(Identifier, "util", (258,4)->(258,8))
        ^ Token(Dot, ".", (258,8)->(258,9))
         ^^^^^^^ Token(Identifier, "WarnMsg", (258,9)->(258,16))
                ^ Token(LeftParen, "(", (258,16)->(258,17))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "Error: No references found", (258,18)->(258,43))
                                             ^ Token(RightParen, ")", (258,45)->(258,46))
                                               Token(EndOfLine, "\n", (258,46)->(258,46))
    lspserver.peekSymbol = false
    ^^^^^^^^^ Token(Identifier, "lspserver", (259,4)->(259,13))
             ^ Token(Dot, ".", (259,13)->(259,14))
              ^^^^^^^^^^ Token(Identifier, "peekSymbol", (259,14)->(259,24))
                         ^ Token(Equal, "=", (259,25)->(259,26))
                           ^^^^^ Token(False, "false", (259,27)->(259,32))
                                 Token(EndOfLine, "\n", (259,32)->(259,32))
    return
    ^^^^^^ Token(Identifier, "return", (260,4)->(260,10))
           Token(EndOfLine, "\n", (260,10)->(260,10))
  endif
  ^^^^^ Token(Identifier, "endif", (261,2)->(261,7))
        Token(EndOfLine, "\n", (261,7)->(261,7))

 Token(EndOfLine, "\n", (262,0)->(262,0))
  symbol.ShowReferences(lspserver, reply.result)
  ^^^^^^ Token(Identifier, "symbol", (263,2)->(263,8))
        ^ Token(Dot, ".", (263,8)->(263,9))
         ^^^^^^^^^^^^^^ Token(Identifier, "ShowReferences", (263,9)->(263,23))
                       ^ Token(LeftParen, "(", (263,23)->(263,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (263,24)->(263,33))
                                 ^ Token(Comma, ",", (263,33)->(263,34))
                                   ^^^^^ Token(Identifier, "reply", (263,35)->(263,40))
                                        ^ Token(Dot, ".", (263,40)->(263,41))
                                         ^^^^^^ Token(Identifier, "result", (263,41)->(263,47))
                                               ^ Token(RightParen, ")", (263,47)->(263,48))
                                                 Token(EndOfLine, "\n", (263,48)->(263,48))
enddef
^^^^^^ Token(Identifier, "enddef", (264,0)->(264,6))
       Token(EndOfLine, "\n", (264,6)->(264,6))

 Token(EndOfLine, "\n", (265,0)->(265,0))
# process the 'textDocument/documentHighlight' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/documentHighlight' reply from the LSP server", (266,0)->(266,72))
# Result: DocumentHighlight[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: DocumentHighlight[] | null", (267,0)->(267,36))
def ProcessDocHighlightReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (268,0)->(268,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocHighlightReply", (268,4)->(268,28))
                            ^ Token(LeftParen, "(", (268,28)->(268,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (268,29)->(268,38))
                                      ^^ Token(SpacedColon, ": ", (268,38)->(268,40))
                                        ^^^^ Token(Identifier, "dict", (268,40)->(268,44))
                                            ^ Token(AngleLeft, "<", (268,44)->(268,45))
                                             ^^^ Token(Identifier, "any", (268,45)->(268,48))
                                                ^ Token(AngleRight, ">", (268,48)->(268,49))
                                                 ^ Token(Comma, ",", (268,49)->(268,50))
                                                   ^^^ Token(Identifier, "req", (268,51)->(268,54))
                                                      ^^ Token(SpacedColon, ": ", (268,54)->(268,56))
                                                        ^^^^ Token(Identifier, "dict", (268,56)->(268,60))
                                                            ^ Token(AngleLeft, "<", (268,60)->(268,61))
                                                             ^^^ Token(Identifier, "any", (268,61)->(268,64))
                                                                ^ Token(AngleRight, ">", (268,64)->(268,65))
                                                                 ^ Token(Comma, ",", (268,65)->(268,66))
                                                                   ^^^^^ Token(Identifier, "reply", (268,67)->(268,72))
                                                                        ^^ Token(SpacedColon, ": ", (268,72)->(268,74))
                                                                          ^^^^ Token(Identifier, "dict", (268,74)->(268,78))
                                                                              ^ Token(AngleLeft, "<", (268,78)->(268,79))
                                                                               ^^^ Token(Identifier, "any", (268,79)->(268,82))
                                                                                  ^ Token(AngleRight, ">", (268,82)->(268,83))
                                                                                   ^ Token(RightParen, ")", (268,83)->(268,84))
                                                                                    ^^ Token(SpacedColon, ": ", (268,84)->(268,86))
                                                                                      ^^^^ Token(Identifier, "void", (268,86)->(268,90))
                                                                                           Token(EndOfLine, "\n", (268,90)->(268,90))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (269,2)->(269,4))
     ^^^^^ Token(Identifier, "reply", (269,5)->(269,10))
          ^ Token(Dot, ".", (269,10)->(269,11))
           ^^^^^^ Token(Identifier, "result", (269,11)->(269,17))
                 ^^ Token(MethodArrow, "->", (269,17)->(269,19))
                   ^^^^^ Token(Identifier, "empty", (269,19)->(269,24))
                        ^ Token(LeftParen, "(", (269,24)->(269,25))
                         ^ Token(RightParen, ")", (269,25)->(269,26))
                           Token(EndOfLine, "\n", (269,26)->(269,26))
    return
    ^^^^^^ Token(Identifier, "return", (270,4)->(270,10))
           Token(EndOfLine, "\n", (270,10)->(270,10))
  endif
  ^^^^^ Token(Identifier, "endif", (271,2)->(271,7))
        Token(EndOfLine, "\n", (271,7)->(271,7))

 Token(EndOfLine, "\n", (272,0)->(272,0))
  var fname: string = util.LspUriToFile(req.params.textDocument.uri)
  ^^^ Token(Identifier, "var", (273,2)->(273,5))
      ^^^^^ Token(Identifier, "fname", (273,6)->(273,11))
           ^^ Token(SpacedColon, ": ", (273,11)->(273,13))
             ^^^^^^ Token(Identifier, "string", (273,13)->(273,19))
                    ^ Token(Equal, "=", (273,20)->(273,21))
                      ^^^^ Token(Identifier, "util", (273,22)->(273,26))
                          ^ Token(Dot, ".", (273,26)->(273,27))
                           ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (273,27)->(273,39))
                                       ^ Token(LeftParen, "(", (273,39)->(273,40))
                                        ^^^ Token(Identifier, "req", (273,40)->(273,43))
                                           ^ Token(Dot, ".", (273,43)->(273,44))
                                            ^^^^^^ Token(Identifier, "params", (273,44)->(273,50))
                                                  ^ Token(Dot, ".", (273,50)->(273,51))
                                                   ^^^^^^^^^^^^ Token(Identifier, "textDocument", (273,51)->(273,63))
                                                               ^ Token(Dot, ".", (273,63)->(273,64))
                                                                ^^^ Token(Identifier, "uri", (273,64)->(273,67))
                                                                   ^ Token(RightParen, ")", (273,67)->(273,68))
                                                                     Token(EndOfLine, "\n", (273,68)->(273,68))
  var bnr = fname->bufnr()
  ^^^ Token(Identifier, "var", (274,2)->(274,5))
      ^^^ Token(Identifier, "bnr", (274,6)->(274,9))
          ^ Token(Equal, "=", (274,10)->(274,11))
            ^^^^^ Token(Identifier, "fname", (274,12)->(274,17))
                 ^^ Token(MethodArrow, "->", (274,17)->(274,19))
                   ^^^^^ Token(Identifier, "bufnr", (274,19)->(274,24))
                        ^ Token(LeftParen, "(", (274,24)->(274,25))
                         ^ Token(RightParen, ")", (274,25)->(274,26))
                           Token(EndOfLine, "\n", (274,26)->(274,26))

 Token(EndOfLine, "\n", (275,0)->(275,0))
  for docHL in reply.result
  ^^^ Token(Identifier, "for", (276,2)->(276,5))
      ^^^^^ Token(Identifier, "docHL", (276,6)->(276,11))
            ^^ Token(Identifier, "in", (276,12)->(276,14))
               ^^^^^ Token(Identifier, "reply", (276,15)->(276,20))
                    ^ Token(Dot, ".", (276,20)->(276,21))
                     ^^^^^^ Token(Identifier, "result", (276,21)->(276,27))
                            Token(EndOfLine, "\n", (276,27)->(276,27))
    var kind: number = docHL->get('kind', 1)
    ^^^ Token(Identifier, "var", (277,4)->(277,7))
        ^^^^ Token(Identifier, "kind", (277,8)->(277,12))
            ^^ Token(SpacedColon, ": ", (277,12)->(277,14))
              ^^^^^^ Token(Identifier, "number", (277,14)->(277,20))
                     ^ Token(Equal, "=", (277,21)->(277,22))
                       ^^^^^ Token(Identifier, "docHL", (277,23)->(277,28))
                            ^^ Token(MethodArrow, "->", (277,28)->(277,30))
                              ^^^ Token(Identifier, "get", (277,30)->(277,33))
                                 ^ Token(LeftParen, "(", (277,33)->(277,34))
                                   ^^^ Token(SingleQuoteString, "kind", (277,35)->(277,38))
                                        ^ Token(Comma, ",", (277,40)->(277,41))
                                          ^ Token(Integer, "1", (277,42)->(277,43))
                                           ^ Token(RightParen, ")", (277,43)->(277,44))
                                             Token(EndOfLine, "\n", (277,44)->(277,44))
    var propName: string
    ^^^ Token(Identifier, "var", (278,4)->(278,7))
        ^^^^^^^^ Token(Identifier, "propName", (278,8)->(278,16))
                ^^ Token(SpacedColon, ": ", (278,16)->(278,18))
                  ^^^^^^ Token(Identifier, "string", (278,18)->(278,24))
                         Token(EndOfLine, "\n", (278,24)->(278,24))
    if kind == 2
    ^^ Token(Identifier, "if", (279,4)->(279,6))
       ^^^^ Token(Identifier, "kind", (279,7)->(279,11))
            ^^ Token(EqualTo, "==", (279,12)->(279,14))
               ^ Token(Integer, "2", (279,15)->(279,16))
                 Token(EndOfLine, "\n", (279,16)->(279,16))
      # Read-access
      ^^^^^^^^^^^^^ Token(Comment, "# Read-access", (280,6)->(280,19))
      propName = 'LspReadRef'
      ^^^^^^^^ Token(Identifier, "propName", (281,6)->(281,14))
               ^ Token(Equal, "=", (281,15)->(281,16))
                  ^^^^^^^^^ Token(SingleQuoteString, "LspReadRef", (281,18)->(281,27))
                              Token(EndOfLine, "\n", (281,29)->(281,29))
    elseif kind == 3
    ^^^^^^ Token(Identifier, "elseif", (282,4)->(282,10))
           ^^^^ Token(Identifier, "kind", (282,11)->(282,15))
                ^^ Token(EqualTo, "==", (282,16)->(282,18))
                   ^ Token(Integer, "3", (282,19)->(282,20))
                     Token(EndOfLine, "\n", (282,20)->(282,20))
      # Write-access
      ^^^^^^^^^^^^^^ Token(Comment, "# Write-access", (283,6)->(283,20))
      propName = 'LspWriteRef'
      ^^^^^^^^ Token(Identifier, "propName", (284,6)->(284,14))
               ^ Token(Equal, "=", (284,15)->(284,16))
                  ^^^^^^^^^^ Token(SingleQuoteString, "LspWriteRef", (284,18)->(284,28))
                               Token(EndOfLine, "\n", (284,30)->(284,30))
    else
    ^^^^ Token(Identifier, "else", (285,4)->(285,8))
         Token(EndOfLine, "\n", (285,8)->(285,8))
      # textual reference
      ^^^^^^^^^^^^^^^^^^^ Token(Comment, "# textual reference", (286,6)->(286,25))
      propName = 'LspTextRef'
      ^^^^^^^^ Token(Identifier, "propName", (287,6)->(287,14))
               ^ Token(Equal, "=", (287,15)->(287,16))
                  ^^^^^^^^^ Token(SingleQuoteString, "LspTextRef", (287,18)->(287,27))
                              Token(EndOfLine, "\n", (287,29)->(287,29))
    endif
    ^^^^^ Token(Identifier, "endif", (288,4)->(288,9))
          Token(EndOfLine, "\n", (288,9)->(288,9))
    prop_add(docHL.range.start.line + 1,
    ^^^^^^^^ Token(Identifier, "prop_add", (289,4)->(289,12))
            ^ Token(LeftParen, "(", (289,12)->(289,13))
             ^^^^^ Token(Identifier, "docHL", (289,13)->(289,18))
                  ^ Token(Dot, ".", (289,18)->(289,19))
                   ^^^^^ Token(Identifier, "range", (289,19)->(289,24))
                        ^ Token(Dot, ".", (289,24)->(289,25))
                         ^^^^^ Token(Identifier, "start", (289,25)->(289,30))
                              ^ Token(Dot, ".", (289,30)->(289,31))
                               ^^^^ Token(Identifier, "line", (289,31)->(289,35))
                                    ^ Token(Plus, "+", (289,36)->(289,37))
                                      ^ Token(Integer, "1", (289,38)->(289,39))
                                       ^ Token(Comma, ",", (289,39)->(289,40))
                                         Token(EndOfLine, "\n", (289,40)->(289,40))
		util.GetLineByteFromPos(bnr, docHL.range.start) + 1,
  ^^^^ Token(Identifier, "util", (290,2)->(290,6))
      ^ Token(Dot, ".", (290,6)->(290,7))
       ^^^^^^^^^^^^^^^^^^ Token(Identifier, "GetLineByteFromPos", (290,7)->(290,25))
                         ^ Token(LeftParen, "(", (290,25)->(290,26))
                          ^^^ Token(Identifier, "bnr", (290,26)->(290,29))
                             ^ Token(Comma, ",", (290,29)->(290,30))
                               ^^^^^ Token(Identifier, "docHL", (290,31)->(290,36))
                                    ^ Token(Dot, ".", (290,36)->(290,37))
                                     ^^^^^ Token(Identifier, "range", (290,37)->(290,42))
                                          ^ Token(Dot, ".", (290,42)->(290,43))
                                           ^^^^^ Token(Identifier, "start", (290,43)->(290,48))
                                                ^ Token(RightParen, ")", (290,48)->(290,49))
                                                  ^ Token(Plus, "+", (290,50)->(290,51))
                                                    ^ Token(Integer, "1", (290,52)->(290,53))
                                                     ^ Token(Comma, ",", (290,53)->(290,54))
                                                       Token(EndOfLine, "\n", (290,54)->(290,54))
		{end_lnum: docHL.range.end.line + 1,
  ^ Token(LeftBrace, "{", (291,2)->(291,3))
   ^^^^^^^^ Token(Identifier, "end_lnum", (291,3)->(291,11))
           ^^ Token(SpacedColon, ": ", (291,11)->(291,13))
             ^^^^^ Token(Identifier, "docHL", (291,13)->(291,18))
                  ^ Token(Dot, ".", (291,18)->(291,19))
                   ^^^^^ Token(Identifier, "range", (291,19)->(291,24))
                        ^ Token(Dot, ".", (291,24)->(291,25))
                         ^^^ Token(Identifier, "end", (291,25)->(291,28))
                            ^ Token(Dot, ".", (291,28)->(291,29))
                             ^^^^ Token(Identifier, "line", (291,29)->(291,33))
                                  ^ Token(Plus, "+", (291,34)->(291,35))
                                    ^ Token(Integer, "1", (291,36)->(291,37))
                                     ^ Token(Comma, ",", (291,37)->(291,38))
                                       Token(EndOfLine, "\n", (291,38)->(291,38))
		  end_col: util.GetLineByteFromPos(bnr, docHL.range.end) + 1,
    ^^^^^^^ Token(Identifier, "end_col", (292,4)->(292,11))
           ^^ Token(SpacedColon, ": ", (292,11)->(292,13))
             ^^^^ Token(Identifier, "util", (292,13)->(292,17))
                 ^ Token(Dot, ".", (292,17)->(292,18))
                  ^^^^^^^^^^^^^^^^^^ Token(Identifier, "GetLineByteFromPos", (292,18)->(292,36))
                                    ^ Token(LeftParen, "(", (292,36)->(292,37))
                                     ^^^ Token(Identifier, "bnr", (292,37)->(292,40))
                                        ^ Token(Comma, ",", (292,40)->(292,41))
                                          ^^^^^ Token(Identifier, "docHL", (292,42)->(292,47))
                                               ^ Token(Dot, ".", (292,47)->(292,48))
                                                ^^^^^ Token(Identifier, "range", (292,48)->(292,53))
                                                     ^ Token(Dot, ".", (292,53)->(292,54))
                                                      ^^^ Token(Identifier, "end", (292,54)->(292,57))
                                                         ^ Token(RightParen, ")", (292,57)->(292,58))
                                                           ^ Token(Plus, "+", (292,59)->(292,60))
                                                             ^ Token(Integer, "1", (292,61)->(292,62))
                                                              ^ Token(Comma, ",", (292,62)->(292,63))
                                                                Token(EndOfLine, "\n", (292,63)->(292,63))
		  bufnr: bnr,
    ^^^^^ Token(Identifier, "bufnr", (293,4)->(293,9))
         ^^ Token(SpacedColon, ": ", (293,9)->(293,11))
           ^^^ Token(Identifier, "bnr", (293,11)->(293,14))
              ^ Token(Comma, ",", (293,14)->(293,15))
                Token(EndOfLine, "\n", (293,15)->(293,15))
		  type: propName})
    ^^^^ Token(Identifier, "type", (294,4)->(294,8))
        ^^ Token(SpacedColon, ": ", (294,8)->(294,10))
          ^^^^^^^^ Token(Identifier, "propName", (294,10)->(294,18))
                  ^ Token(RightBrace, "}", (294,18)->(294,19))
                   ^ Token(RightParen, ")", (294,19)->(294,20))
                     Token(EndOfLine, "\n", (294,20)->(294,20))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (295,2)->(295,8))
         Token(EndOfLine, "\n", (295,8)->(295,8))
enddef
^^^^^^ Token(Identifier, "enddef", (296,0)->(296,6))
       Token(EndOfLine, "\n", (296,6)->(296,6))

 Token(EndOfLine, "\n", (297,0)->(297,0))
# map the LSP symbol kind number to string
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# map the LSP symbol kind number to string", (298,0)->(298,42))
def LspSymbolKindToName(symkind: number): string
^^^ Token(Identifier, "def", (299,0)->(299,3))
    ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspSymbolKindToName", (299,4)->(299,23))
                       ^ Token(LeftParen, "(", (299,23)->(299,24))
                        ^^^^^^^ Token(Identifier, "symkind", (299,24)->(299,31))
                               ^^ Token(SpacedColon, ": ", (299,31)->(299,33))
                                 ^^^^^^ Token(Identifier, "number", (299,33)->(299,39))
                                       ^ Token(RightParen, ")", (299,39)->(299,40))
                                        ^^ Token(SpacedColon, ": ", (299,40)->(299,42))
                                          ^^^^^^ Token(Identifier, "string", (299,42)->(299,48))
                                                 Token(EndOfLine, "\n", (299,48)->(299,48))
  var symbolMap: list<string> = ['', 'File', 'Module', 'Namespace', 'Package',
  ^^^ Token(Identifier, "var", (300,2)->(300,5))
      ^^^^^^^^^ Token(Identifier, "symbolMap", (300,6)->(300,15))
               ^^ Token(SpacedColon, ": ", (300,15)->(300,17))
                 ^^^^ Token(Identifier, "list", (300,17)->(300,21))
                     ^ Token(AngleLeft, "<", (300,21)->(300,22))
                      ^^^^^^ Token(Identifier, "string", (300,22)->(300,28))
                            ^ Token(GreaterThan, ">", (300,28)->(300,29))
                              ^ Token(Equal, "=", (300,30)->(300,31))
                                ^ Token(LeftBracket, "[", (300,32)->(300,33))
                                   Token(SingleQuoteString, "", (300,34)->(300,34))
                                   ^ Token(Comma, ",", (300,35)->(300,36))
                                      ^^^ Token(SingleQuoteString, "File", (300,38)->(300,41))
                                           ^ Token(Comma, ",", (300,43)->(300,44))
                                              ^^^^^ Token(SingleQuoteString, "Module", (300,46)->(300,51))
                                                     ^ Token(Comma, ",", (300,53)->(300,54))
                                                        ^^^^^^^^ Token(SingleQuoteString, "Namespace", (300,56)->(300,64))
                                                                  ^ Token(Comma, ",", (300,66)->(300,67))
                                                                     ^^^^^^ Token(SingleQuoteString, "Package", (300,69)->(300,75))
                                                                             ^ Token(Comma, ",", (300,77)->(300,78))
                                                                               Token(EndOfLine, "\n", (300,78)->(300,78))
	'Class', 'Method', 'Property', 'Field', 'Constructor', 'Enum',
  ^^^^ Token(SingleQuoteString, "Class", (301,2)->(301,6))
        ^ Token(Comma, ",", (301,8)->(301,9))
           ^^^^^ Token(SingleQuoteString, "Method", (301,11)->(301,16))
                  ^ Token(Comma, ",", (301,18)->(301,19))
                     ^^^^^^^ Token(SingleQuoteString, "Property", (301,21)->(301,28))
                              ^ Token(Comma, ",", (301,30)->(301,31))
                                 ^^^^ Token(SingleQuoteString, "Field", (301,33)->(301,37))
                                       ^ Token(Comma, ",", (301,39)->(301,40))
                                          ^^^^^^^^^^ Token(SingleQuoteString, "Constructor", (301,42)->(301,52))
                                                      ^ Token(Comma, ",", (301,54)->(301,55))
                                                         ^^^ Token(SingleQuoteString, "Enum", (301,57)->(301,60))
                                                              ^ Token(Comma, ",", (301,62)->(301,63))
                                                                Token(EndOfLine, "\n", (301,63)->(301,63))
	'Interface', 'Function', 'Variable', 'Constant', 'String', 'Number',
  ^^^^^^^^ Token(SingleQuoteString, "Interface", (302,2)->(302,10))
            ^ Token(Comma, ",", (302,12)->(302,13))
               ^^^^^^^ Token(SingleQuoteString, "Function", (302,15)->(302,22))
                        ^ Token(Comma, ",", (302,24)->(302,25))
                           ^^^^^^^ Token(SingleQuoteString, "Variable", (302,27)->(302,34))
                                    ^ Token(Comma, ",", (302,36)->(302,37))
                                       ^^^^^^^ Token(SingleQuoteString, "Constant", (302,39)->(302,46))
                                                ^ Token(Comma, ",", (302,48)->(302,49))
                                                   ^^^^^ Token(SingleQuoteString, "String", (302,51)->(302,56))
                                                          ^ Token(Comma, ",", (302,58)->(302,59))
                                                             ^^^^^ Token(SingleQuoteString, "Number", (302,61)->(302,66))
                                                                    ^ Token(Comma, ",", (302,68)->(302,69))
                                                                      Token(EndOfLine, "\n", (302,69)->(302,69))
	'Boolean', 'Array', 'Object', 'Key', 'Null', 'EnumMember', 'Struct',
  ^^^^^^ Token(SingleQuoteString, "Boolean", (303,2)->(303,8))
          ^ Token(Comma, ",", (303,10)->(303,11))
             ^^^^ Token(SingleQuoteString, "Array", (303,13)->(303,17))
                   ^ Token(Comma, ",", (303,19)->(303,20))
                      ^^^^^ Token(SingleQuoteString, "Object", (303,22)->(303,27))
                             ^ Token(Comma, ",", (303,29)->(303,30))
                                ^^ Token(SingleQuoteString, "Key", (303,32)->(303,34))
                                    ^ Token(Comma, ",", (303,36)->(303,37))
                                       ^^^ Token(SingleQuoteString, "Null", (303,39)->(303,42))
                                            ^ Token(Comma, ",", (303,44)->(303,45))
                                               ^^^^^^^^^ Token(SingleQuoteString, "EnumMember", (303,47)->(303,56))
                                                          ^ Token(Comma, ",", (303,58)->(303,59))
                                                             ^^^^^ Token(SingleQuoteString, "Struct", (303,61)->(303,66))
                                                                    ^ Token(Comma, ",", (303,68)->(303,69))
                                                                      Token(EndOfLine, "\n", (303,69)->(303,69))
	'Event', 'Operator', 'TypeParameter']
  ^^^^ Token(SingleQuoteString, "Event", (304,2)->(304,6))
        ^ Token(Comma, ",", (304,8)->(304,9))
           ^^^^^^^ Token(SingleQuoteString, "Operator", (304,11)->(304,18))
                    ^ Token(Comma, ",", (304,20)->(304,21))
                       ^^^^^^^^^^^^ Token(SingleQuoteString, "TypeParameter", (304,23)->(304,35))
                                     ^ Token(RightBracket, "]", (304,37)->(304,38))
                                       Token(EndOfLine, "\n", (304,38)->(304,38))
  if symkind > 26
  ^^ Token(Identifier, "if", (305,2)->(305,4))
     ^^^^^^^ Token(Identifier, "symkind", (305,5)->(305,12))
             ^ Token(GreaterThan, ">", (305,13)->(305,14))
               ^^ Token(Integer, "26", (305,15)->(305,17))
                  Token(EndOfLine, "\n", (305,17)->(305,17))
    return ''
    ^^^^^^ Token(Identifier, "return", (306,4)->(306,10))
             Token(SingleQuoteString, "", (306,12)->(306,12))
              Token(EndOfLine, "\n", (306,13)->(306,13))
  endif
  ^^^^^ Token(Identifier, "endif", (307,2)->(307,7))
        Token(EndOfLine, "\n", (307,7)->(307,7))
  return symbolMap[symkind]
  ^^^^^^ Token(Identifier, "return", (308,2)->(308,8))
         ^^^^^^^^^ Token(Identifier, "symbolMap", (308,9)->(308,18))
                  ^ Token(LeftBracket, "[", (308,18)->(308,19))
                   ^^^^^^^ Token(Identifier, "symkind", (308,19)->(308,26))
                          ^ Token(RightBracket, "]", (308,26)->(308,27))
                            Token(EndOfLine, "\n", (308,27)->(308,27))
enddef
^^^^^^ Token(Identifier, "enddef", (309,0)->(309,6))
       Token(EndOfLine, "\n", (309,6)->(309,6))

 Token(EndOfLine, "\n", (310,0)->(310,0))
# process SymbolInformation[]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process SymbolInformation[]", (311,0)->(311,29))
def ProcessSymbolInfoTable(symbolInfoTable: list<dict<any>>,
^^^ Token(Identifier, "def", (312,0)->(312,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSymbolInfoTable", (312,4)->(312,26))
                          ^ Token(LeftParen, "(", (312,26)->(312,27))
                           ^^^^^^^^^^^^^^^ Token(Identifier, "symbolInfoTable", (312,27)->(312,42))
                                          ^^ Token(SpacedColon, ": ", (312,42)->(312,44))
                                            ^^^^ Token(Identifier, "list", (312,44)->(312,48))
                                                ^ Token(AngleLeft, "<", (312,48)->(312,49))
                                                 ^^^^ Token(Identifier, "dict", (312,49)->(312,53))
                                                     ^ Token(AngleLeft, "<", (312,53)->(312,54))
                                                      ^^^ Token(Identifier, "any", (312,54)->(312,57))
                                                         ^ Token(AngleRight, ">", (312,57)->(312,58))
                                                          ^ Token(AngleRight, ">", (312,58)->(312,59))
                                                           ^ Token(Comma, ",", (312,59)->(312,60))
                                                             Token(EndOfLine, "\n", (312,60)->(312,60))
				symbolTypeTable: dict<list<dict<any>>>,
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (313,4)->(313,19))
                   ^^ Token(SpacedColon, ": ", (313,19)->(313,21))
                     ^^^^ Token(Identifier, "dict", (313,21)->(313,25))
                         ^ Token(AngleLeft, "<", (313,25)->(313,26))
                          ^^^^ Token(Identifier, "list", (313,26)->(313,30))
                              ^ Token(AngleLeft, "<", (313,30)->(313,31))
                               ^^^^ Token(Identifier, "dict", (313,31)->(313,35))
                                   ^ Token(AngleLeft, "<", (313,35)->(313,36))
                                    ^^^ Token(Identifier, "any", (313,36)->(313,39))
                                       ^ Token(AngleRight, ">", (313,39)->(313,40))
                                        ^ Token(AngleRight, ">", (313,40)->(313,41))
                                         ^ Token(AngleRight, ">", (313,41)->(313,42))
                                          ^ Token(Comma, ",", (313,42)->(313,43))
                                            Token(EndOfLine, "\n", (313,43)->(313,43))
				symbolLineTable: list<dict<any>>)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (314,4)->(314,19))
                   ^^ Token(SpacedColon, ": ", (314,19)->(314,21))
                     ^^^^ Token(Identifier, "list", (314,21)->(314,25))
                         ^ Token(AngleLeft, "<", (314,25)->(314,26))
                          ^^^^ Token(Identifier, "dict", (314,26)->(314,30))
                              ^ Token(AngleLeft, "<", (314,30)->(314,31))
                               ^^^ Token(Identifier, "any", (314,31)->(314,34))
                                  ^ Token(AngleRight, ">", (314,34)->(314,35))
                                   ^ Token(AngleRight, ">", (314,35)->(314,36))
                                    ^ Token(RightParen, ")", (314,36)->(314,37))
                                      Token(EndOfLine, "\n", (314,37)->(314,37))
  var fname: string
  ^^^ Token(Identifier, "var", (315,2)->(315,5))
      ^^^^^ Token(Identifier, "fname", (315,6)->(315,11))
           ^^ Token(SpacedColon, ": ", (315,11)->(315,13))
             ^^^^^^ Token(Identifier, "string", (315,13)->(315,19))
                    Token(EndOfLine, "\n", (315,19)->(315,19))
  var symbolType: string
  ^^^ Token(Identifier, "var", (316,2)->(316,5))
      ^^^^^^^^^^ Token(Identifier, "symbolType", (316,6)->(316,16))
                ^^ Token(SpacedColon, ": ", (316,16)->(316,18))
                  ^^^^^^ Token(Identifier, "string", (316,18)->(316,24))
                         Token(EndOfLine, "\n", (316,24)->(316,24))
  var name: string
  ^^^ Token(Identifier, "var", (317,2)->(317,5))
      ^^^^ Token(Identifier, "name", (317,6)->(317,10))
          ^^ Token(SpacedColon, ": ", (317,10)->(317,12))
            ^^^^^^ Token(Identifier, "string", (317,12)->(317,18))
                   Token(EndOfLine, "\n", (317,18)->(317,18))
  var r: dict<dict<number>>
  ^^^ Token(Identifier, "var", (318,2)->(318,5))
      ^ Token(Identifier, "r", (318,6)->(318,7))
       ^^ Token(SpacedColon, ": ", (318,7)->(318,9))
         ^^^^ Token(Identifier, "dict", (318,9)->(318,13))
             ^ Token(AngleLeft, "<", (318,13)->(318,14))
              ^^^^ Token(Identifier, "dict", (318,14)->(318,18))
                  ^ Token(AngleLeft, "<", (318,18)->(318,19))
                   ^^^^^^ Token(Identifier, "number", (318,19)->(318,25))
                         ^ Token(AngleRight, ">", (318,25)->(318,26))
                          ^ Token(GreaterThan, ">", (318,26)->(318,27))
                            Token(EndOfLine, "\n", (318,27)->(318,27))
  var symInfo: dict<any>
  ^^^ Token(Identifier, "var", (319,2)->(319,5))
      ^^^^^^^ Token(Identifier, "symInfo", (319,6)->(319,13))
             ^^ Token(SpacedColon, ": ", (319,13)->(319,15))
               ^^^^ Token(Identifier, "dict", (319,15)->(319,19))
                   ^ Token(AngleLeft, "<", (319,19)->(319,20))
                    ^^^ Token(Identifier, "any", (319,20)->(319,23))
                       ^ Token(GreaterThan, ">", (319,23)->(319,24))
                         Token(EndOfLine, "\n", (319,24)->(319,24))

 Token(EndOfLine, "\n", (320,0)->(320,0))
  for symbol in symbolInfoTable
  ^^^ Token(Identifier, "for", (321,2)->(321,5))
      ^^^^^^ Token(Identifier, "symbol", (321,6)->(321,12))
             ^^ Token(Identifier, "in", (321,13)->(321,15))
                ^^^^^^^^^^^^^^^ Token(Identifier, "symbolInfoTable", (321,16)->(321,31))
                                Token(EndOfLine, "\n", (321,31)->(321,31))
    fname = util.LspUriToFile(symbol.location.uri)
    ^^^^^ Token(Identifier, "fname", (322,4)->(322,9))
          ^ Token(Equal, "=", (322,10)->(322,11))
            ^^^^ Token(Identifier, "util", (322,12)->(322,16))
                ^ Token(Dot, ".", (322,16)->(322,17))
                 ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (322,17)->(322,29))
                             ^ Token(LeftParen, "(", (322,29)->(322,30))
                              ^^^^^^ Token(Identifier, "symbol", (322,30)->(322,36))
                                    ^ Token(Dot, ".", (322,36)->(322,37))
                                     ^^^^^^^^ Token(Identifier, "location", (322,37)->(322,45))
                                             ^ Token(Dot, ".", (322,45)->(322,46))
                                              ^^^ Token(Identifier, "uri", (322,46)->(322,49))
                                                 ^ Token(RightParen, ")", (322,49)->(322,50))
                                                   Token(EndOfLine, "\n", (322,50)->(322,50))
    symbolType = LspSymbolKindToName(symbol.kind)
    ^^^^^^^^^^ Token(Identifier, "symbolType", (323,4)->(323,14))
               ^ Token(Equal, "=", (323,15)->(323,16))
                 ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspSymbolKindToName", (323,17)->(323,36))
                                    ^ Token(LeftParen, "(", (323,36)->(323,37))
                                     ^^^^^^ Token(Identifier, "symbol", (323,37)->(323,43))
                                           ^ Token(Dot, ".", (323,43)->(323,44))
                                            ^^^^ Token(Identifier, "kind", (323,44)->(323,48))
                                                ^ Token(RightParen, ")", (323,48)->(323,49))
                                                  Token(EndOfLine, "\n", (323,49)->(323,49))
    name = symbol.name
    ^^^^ Token(Identifier, "name", (324,4)->(324,8))
         ^ Token(Equal, "=", (324,9)->(324,10))
           ^^^^^^ Token(Identifier, "symbol", (324,11)->(324,17))
                 ^ Token(Dot, ".", (324,17)->(324,18))
                  ^^^^ Token(Identifier, "name", (324,18)->(324,22))
                       Token(EndOfLine, "\n", (324,22)->(324,22))
    if symbol->has_key('containerName')
    ^^ Token(Identifier, "if", (325,4)->(325,6))
       ^^^^^^ Token(Identifier, "symbol", (325,7)->(325,13))
             ^^ Token(MethodArrow, "->", (325,13)->(325,15))
               ^^^^^^^ Token(Identifier, "has_key", (325,15)->(325,22))
                      ^ Token(LeftParen, "(", (325,22)->(325,23))
                        ^^^^^^^^^^^^ Token(SingleQuoteString, "containerName", (325,24)->(325,36))
                                      ^ Token(RightParen, ")", (325,38)->(325,39))
                                        Token(EndOfLine, "\n", (325,39)->(325,39))
      if symbol.containerName != ''
      ^^ Token(Identifier, "if", (326,6)->(326,8))
         ^^^^^^ Token(Identifier, "symbol", (326,9)->(326,15))
               ^ Token(Dot, ".", (326,15)->(326,16))
                ^^^^^^^^^^^^^ Token(Identifier, "containerName", (326,16)->(326,29))
                              ^^ Token(NotEqualTo, "!=", (326,30)->(326,32))
                                   Token(SingleQuoteString, "", (326,34)->(326,34))
                                    Token(EndOfLine, "\n", (326,35)->(326,35))
	name ..= $' [{symbol.containerName}]'
 ^^^^ Token(Identifier, "name", (327,1)->(327,5))
      ^^^ Token(StringConcatEquals, "..=", (327,6)->(327,9))
            ^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, " [{symbol.containerName}]", (327,12)->(327,36))
                                       Token(EndOfLine, "\n", (327,38)->(327,38))
      endif
      ^^^^^ Token(Identifier, "endif", (328,6)->(328,11))
            Token(EndOfLine, "\n", (328,11)->(328,11))
    endif
    ^^^^^ Token(Identifier, "endif", (329,4)->(329,9))
          Token(EndOfLine, "\n", (329,9)->(329,9))
    r = symbol.location.range
    ^ Token(Identifier, "r", (330,4)->(330,5))
      ^ Token(Equal, "=", (330,6)->(330,7))
        ^^^^^^ Token(Identifier, "symbol", (330,8)->(330,14))
              ^ Token(Dot, ".", (330,14)->(330,15))
               ^^^^^^^^ Token(Identifier, "location", (330,15)->(330,23))
                       ^ Token(Dot, ".", (330,23)->(330,24))
                        ^^^^^ Token(Identifier, "range", (330,24)->(330,29))
                              Token(EndOfLine, "\n", (330,29)->(330,29))

 Token(EndOfLine, "\n", (331,0)->(331,0))
    if !symbolTypeTable->has_key(symbolType)
    ^^ Token(Identifier, "if", (332,4)->(332,6))
       ^ Token(Bang, "!", (332,7)->(332,8))
        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (332,8)->(332,23))
                       ^^ Token(MethodArrow, "->", (332,23)->(332,25))
                         ^^^^^^^ Token(Identifier, "has_key", (332,25)->(332,32))
                                ^ Token(LeftParen, "(", (332,32)->(332,33))
                                 ^^^^^^^^^^ Token(Identifier, "symbolType", (332,33)->(332,43))
                                           ^ Token(RightParen, ")", (332,43)->(332,44))
                                             Token(EndOfLine, "\n", (332,44)->(332,44))
      symbolTypeTable[symbolType] = []
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (333,6)->(333,21))
                     ^ Token(LeftBracket, "[", (333,21)->(333,22))
                      ^^^^^^^^^^ Token(Identifier, "symbolType", (333,22)->(333,32))
                                ^ Token(RightBracket, "]", (333,32)->(333,33))
                                  ^ Token(Equal, "=", (333,34)->(333,35))
                                    ^ Token(LeftBracket, "[", (333,36)->(333,37))
                                     ^ Token(RightBracket, "]", (333,37)->(333,38))
                                       Token(EndOfLine, "\n", (333,38)->(333,38))
    endif
    ^^^^^ Token(Identifier, "endif", (334,4)->(334,9))
          Token(EndOfLine, "\n", (334,9)->(334,9))
    symInfo = {name: name, range: r}
    ^^^^^^^ Token(Identifier, "symInfo", (335,4)->(335,11))
            ^ Token(Equal, "=", (335,12)->(335,13))
              ^ Token(LeftBrace, "{", (335,14)->(335,15))
               ^^^^ Token(Identifier, "name", (335,15)->(335,19))
                   ^^ Token(SpacedColon, ": ", (335,19)->(335,21))
                     ^^^^ Token(Identifier, "name", (335,21)->(335,25))
                         ^ Token(Comma, ",", (335,25)->(335,26))
                           ^^^^^ Token(Identifier, "range", (335,27)->(335,32))
                                ^^ Token(SpacedColon, ": ", (335,32)->(335,34))
                                  ^ Token(Identifier, "r", (335,34)->(335,35))
                                   ^ Token(RightBrace, "}", (335,35)->(335,36))
                                     Token(EndOfLine, "\n", (335,36)->(335,36))
    symbolTypeTable[symbolType]->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (336,4)->(336,19))
                   ^ Token(LeftBracket, "[", (336,19)->(336,20))
                    ^^^^^^^^^^ Token(Identifier, "symbolType", (336,20)->(336,30))
                              ^ Token(RightBracket, "]", (336,30)->(336,31))
                               ^^ Token(MethodArrow, "->", (336,31)->(336,33))
                                 ^^^ Token(Identifier, "add", (336,33)->(336,36))
                                    ^ Token(LeftParen, "(", (336,36)->(336,37))
                                     ^^^^^^^ Token(Identifier, "symInfo", (336,37)->(336,44))
                                            ^ Token(RightParen, ")", (336,44)->(336,45))
                                              Token(EndOfLine, "\n", (336,45)->(336,45))
    symbolLineTable->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (337,4)->(337,19))
                   ^^ Token(MethodArrow, "->", (337,19)->(337,21))
                     ^^^ Token(Identifier, "add", (337,21)->(337,24))
                        ^ Token(LeftParen, "(", (337,24)->(337,25))
                         ^^^^^^^ Token(Identifier, "symInfo", (337,25)->(337,32))
                                ^ Token(RightParen, ")", (337,32)->(337,33))
                                  Token(EndOfLine, "\n", (337,33)->(337,33))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (338,2)->(338,8))
         Token(EndOfLine, "\n", (338,8)->(338,8))
enddef
^^^^^^ Token(Identifier, "enddef", (339,0)->(339,6))
       Token(EndOfLine, "\n", (339,6)->(339,6))

 Token(EndOfLine, "\n", (340,0)->(340,0))
# process DocumentSymbol[]
^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process DocumentSymbol[]", (341,0)->(341,26))
def ProcessDocSymbolTable(docSymbolTable: list<dict<any>>,
^^^ Token(Identifier, "def", (342,0)->(342,3))
    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolTable", (342,4)->(342,25))
                         ^ Token(LeftParen, "(", (342,25)->(342,26))
                          ^^^^^^^^^^^^^^ Token(Identifier, "docSymbolTable", (342,26)->(342,40))
                                        ^^ Token(SpacedColon, ": ", (342,40)->(342,42))
                                          ^^^^ Token(Identifier, "list", (342,42)->(342,46))
                                              ^ Token(AngleLeft, "<", (342,46)->(342,47))
                                               ^^^^ Token(Identifier, "dict", (342,47)->(342,51))
                                                   ^ Token(AngleLeft, "<", (342,51)->(342,52))
                                                    ^^^ Token(Identifier, "any", (342,52)->(342,55))
                                                       ^ Token(AngleRight, ">", (342,55)->(342,56))
                                                        ^ Token(AngleRight, ">", (342,56)->(342,57))
                                                         ^ Token(Comma, ",", (342,57)->(342,58))
                                                           Token(EndOfLine, "\n", (342,58)->(342,58))
				symbolTypeTable: dict<list<dict<any>>>,
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (343,4)->(343,19))
                   ^^ Token(SpacedColon, ": ", (343,19)->(343,21))
                     ^^^^ Token(Identifier, "dict", (343,21)->(343,25))
                         ^ Token(AngleLeft, "<", (343,25)->(343,26))
                          ^^^^ Token(Identifier, "list", (343,26)->(343,30))
                              ^ Token(AngleLeft, "<", (343,30)->(343,31))
                               ^^^^ Token(Identifier, "dict", (343,31)->(343,35))
                                   ^ Token(AngleLeft, "<", (343,35)->(343,36))
                                    ^^^ Token(Identifier, "any", (343,36)->(343,39))
                                       ^ Token(AngleRight, ">", (343,39)->(343,40))
                                        ^ Token(AngleRight, ">", (343,40)->(343,41))
                                         ^ Token(AngleRight, ">", (343,41)->(343,42))
                                          ^ Token(Comma, ",", (343,42)->(343,43))
                                            Token(EndOfLine, "\n", (343,43)->(343,43))
				symbolLineTable: list<dict<any>>)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (344,4)->(344,19))
                   ^^ Token(SpacedColon, ": ", (344,19)->(344,21))
                     ^^^^ Token(Identifier, "list", (344,21)->(344,25))
                         ^ Token(AngleLeft, "<", (344,25)->(344,26))
                          ^^^^ Token(Identifier, "dict", (344,26)->(344,30))
                              ^ Token(AngleLeft, "<", (344,30)->(344,31))
                               ^^^ Token(Identifier, "any", (344,31)->(344,34))
                                  ^ Token(AngleRight, ">", (344,34)->(344,35))
                                   ^ Token(AngleRight, ">", (344,35)->(344,36))
                                    ^ Token(RightParen, ")", (344,36)->(344,37))
                                      Token(EndOfLine, "\n", (344,37)->(344,37))
  var symbolType: string
  ^^^ Token(Identifier, "var", (345,2)->(345,5))
      ^^^^^^^^^^ Token(Identifier, "symbolType", (345,6)->(345,16))
                ^^ Token(SpacedColon, ": ", (345,16)->(345,18))
                  ^^^^^^ Token(Identifier, "string", (345,18)->(345,24))
                         Token(EndOfLine, "\n", (345,24)->(345,24))
  var name: string
  ^^^ Token(Identifier, "var", (346,2)->(346,5))
      ^^^^ Token(Identifier, "name", (346,6)->(346,10))
          ^^ Token(SpacedColon, ": ", (346,10)->(346,12))
            ^^^^^^ Token(Identifier, "string", (346,12)->(346,18))
                   Token(EndOfLine, "\n", (346,18)->(346,18))
  var r: dict<dict<number>>
  ^^^ Token(Identifier, "var", (347,2)->(347,5))
      ^ Token(Identifier, "r", (347,6)->(347,7))
       ^^ Token(SpacedColon, ": ", (347,7)->(347,9))
         ^^^^ Token(Identifier, "dict", (347,9)->(347,13))
             ^ Token(AngleLeft, "<", (347,13)->(347,14))
              ^^^^ Token(Identifier, "dict", (347,14)->(347,18))
                  ^ Token(AngleLeft, "<", (347,18)->(347,19))
                   ^^^^^^ Token(Identifier, "number", (347,19)->(347,25))
                         ^ Token(AngleRight, ">", (347,25)->(347,26))
                          ^ Token(GreaterThan, ">", (347,26)->(347,27))
                            Token(EndOfLine, "\n", (347,27)->(347,27))
  var symInfo: dict<any>
  ^^^ Token(Identifier, "var", (348,2)->(348,5))
      ^^^^^^^ Token(Identifier, "symInfo", (348,6)->(348,13))
             ^^ Token(SpacedColon, ": ", (348,13)->(348,15))
               ^^^^ Token(Identifier, "dict", (348,15)->(348,19))
                   ^ Token(AngleLeft, "<", (348,19)->(348,20))
                    ^^^ Token(Identifier, "any", (348,20)->(348,23))
                       ^ Token(GreaterThan, ">", (348,23)->(348,24))
                         Token(EndOfLine, "\n", (348,24)->(348,24))
  var symbolDetail: string
  ^^^ Token(Identifier, "var", (349,2)->(349,5))
      ^^^^^^^^^^^^ Token(Identifier, "symbolDetail", (349,6)->(349,18))
                  ^^ Token(SpacedColon, ": ", (349,18)->(349,20))
                    ^^^^^^ Token(Identifier, "string", (349,20)->(349,26))
                           Token(EndOfLine, "\n", (349,26)->(349,26))
  var childSymbols: dict<list<dict<any>>>
  ^^^ Token(Identifier, "var", (350,2)->(350,5))
      ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (350,6)->(350,18))
                  ^^ Token(SpacedColon, ": ", (350,18)->(350,20))
                    ^^^^ Token(Identifier, "dict", (350,20)->(350,24))
                        ^ Token(AngleLeft, "<", (350,24)->(350,25))
                         ^^^^ Token(Identifier, "list", (350,25)->(350,29))
                             ^ Token(AngleLeft, "<", (350,29)->(350,30))
                              ^^^^ Token(Identifier, "dict", (350,30)->(350,34))
                                  ^ Token(AngleLeft, "<", (350,34)->(350,35))
                                   ^^^ Token(Identifier, "any", (350,35)->(350,38))
                                      ^ Token(AngleRight, ">", (350,38)->(350,39))
                                       ^ Token(AngleRight, ">", (350,39)->(350,40))
                                        ^ Token(GreaterThan, ">", (350,40)->(350,41))
                                          Token(EndOfLine, "\n", (350,41)->(350,41))

 Token(EndOfLine, "\n", (351,0)->(351,0))
  for symbol in docSymbolTable
  ^^^ Token(Identifier, "for", (352,2)->(352,5))
      ^^^^^^ Token(Identifier, "symbol", (352,6)->(352,12))
             ^^ Token(Identifier, "in", (352,13)->(352,15))
                ^^^^^^^^^^^^^^ Token(Identifier, "docSymbolTable", (352,16)->(352,30))
                               Token(EndOfLine, "\n", (352,30)->(352,30))
    name = symbol.name
    ^^^^ Token(Identifier, "name", (353,4)->(353,8))
         ^ Token(Equal, "=", (353,9)->(353,10))
           ^^^^^^ Token(Identifier, "symbol", (353,11)->(353,17))
                 ^ Token(Dot, ".", (353,17)->(353,18))
                  ^^^^ Token(Identifier, "name", (353,18)->(353,22))
                       Token(EndOfLine, "\n", (353,22)->(353,22))
    symbolType = LspSymbolKindToName(symbol.kind)
    ^^^^^^^^^^ Token(Identifier, "symbolType", (354,4)->(354,14))
               ^ Token(Equal, "=", (354,15)->(354,16))
                 ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspSymbolKindToName", (354,17)->(354,36))
                                    ^ Token(LeftParen, "(", (354,36)->(354,37))
                                     ^^^^^^ Token(Identifier, "symbol", (354,37)->(354,43))
                                           ^ Token(Dot, ".", (354,43)->(354,44))
                                            ^^^^ Token(Identifier, "kind", (354,44)->(354,48))
                                                ^ Token(RightParen, ")", (354,48)->(354,49))
                                                  Token(EndOfLine, "\n", (354,49)->(354,49))
    r = symbol.range
    ^ Token(Identifier, "r", (355,4)->(355,5))
      ^ Token(Equal, "=", (355,6)->(355,7))
        ^^^^^^ Token(Identifier, "symbol", (355,8)->(355,14))
              ^ Token(Dot, ".", (355,14)->(355,15))
               ^^^^^ Token(Identifier, "range", (355,15)->(355,20))
                     Token(EndOfLine, "\n", (355,20)->(355,20))
    if symbol->has_key('detail')
    ^^ Token(Identifier, "if", (356,4)->(356,6))
       ^^^^^^ Token(Identifier, "symbol", (356,7)->(356,13))
             ^^ Token(MethodArrow, "->", (356,13)->(356,15))
               ^^^^^^^ Token(Identifier, "has_key", (356,15)->(356,22))
                      ^ Token(LeftParen, "(", (356,22)->(356,23))
                        ^^^^^ Token(SingleQuoteString, "detail", (356,24)->(356,29))
                               ^ Token(RightParen, ")", (356,31)->(356,32))
                                 Token(EndOfLine, "\n", (356,32)->(356,32))
      symbolDetail = symbol.detail
      ^^^^^^^^^^^^ Token(Identifier, "symbolDetail", (357,6)->(357,18))
                   ^ Token(Equal, "=", (357,19)->(357,20))
                     ^^^^^^ Token(Identifier, "symbol", (357,21)->(357,27))
                           ^ Token(Dot, ".", (357,27)->(357,28))
                            ^^^^^^ Token(Identifier, "detail", (357,28)->(357,34))
                                   Token(EndOfLine, "\n", (357,34)->(357,34))
    endif
    ^^^^^ Token(Identifier, "endif", (358,4)->(358,9))
          Token(EndOfLine, "\n", (358,9)->(358,9))
    if !symbolTypeTable->has_key(symbolType)
    ^^ Token(Identifier, "if", (359,4)->(359,6))
       ^ Token(Bang, "!", (359,7)->(359,8))
        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (359,8)->(359,23))
                       ^^ Token(MethodArrow, "->", (359,23)->(359,25))
                         ^^^^^^^ Token(Identifier, "has_key", (359,25)->(359,32))
                                ^ Token(LeftParen, "(", (359,32)->(359,33))
                                 ^^^^^^^^^^ Token(Identifier, "symbolType", (359,33)->(359,43))
                                           ^ Token(RightParen, ")", (359,43)->(359,44))
                                             Token(EndOfLine, "\n", (359,44)->(359,44))
      symbolTypeTable[symbolType] = []
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (360,6)->(360,21))
                     ^ Token(LeftBracket, "[", (360,21)->(360,22))
                      ^^^^^^^^^^ Token(Identifier, "symbolType", (360,22)->(360,32))
                                ^ Token(RightBracket, "]", (360,32)->(360,33))
                                  ^ Token(Equal, "=", (360,34)->(360,35))
                                    ^ Token(LeftBracket, "[", (360,36)->(360,37))
                                     ^ Token(RightBracket, "]", (360,37)->(360,38))
                                       Token(EndOfLine, "\n", (360,38)->(360,38))
    endif
    ^^^^^ Token(Identifier, "endif", (361,4)->(361,9))
          Token(EndOfLine, "\n", (361,9)->(361,9))
    childSymbols = {}
    ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (362,4)->(362,16))
                 ^ Token(Equal, "=", (362,17)->(362,18))
                   ^ Token(LeftBrace, "{", (362,19)->(362,20))
                    ^ Token(RightBrace, "}", (362,20)->(362,21))
                      Token(EndOfLine, "\n", (362,21)->(362,21))
    if symbol->has_key('children')
    ^^ Token(Identifier, "if", (363,4)->(363,6))
       ^^^^^^ Token(Identifier, "symbol", (363,7)->(363,13))
             ^^ Token(MethodArrow, "->", (363,13)->(363,15))
               ^^^^^^^ Token(Identifier, "has_key", (363,15)->(363,22))
                      ^ Token(LeftParen, "(", (363,22)->(363,23))
                        ^^^^^^^ Token(SingleQuoteString, "children", (363,24)->(363,31))
                                 ^ Token(RightParen, ")", (363,33)->(363,34))
                                   Token(EndOfLine, "\n", (363,34)->(363,34))
      ProcessDocSymbolTable(symbol.children, childSymbols, symbolLineTable)
      ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolTable", (364,6)->(364,27))
                           ^ Token(LeftParen, "(", (364,27)->(364,28))
                            ^^^^^^ Token(Identifier, "symbol", (364,28)->(364,34))
                                  ^ Token(Dot, ".", (364,34)->(364,35))
                                   ^^^^^^^^ Token(Identifier, "children", (364,35)->(364,43))
                                           ^ Token(Comma, ",", (364,43)->(364,44))
                                             ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (364,45)->(364,57))
                                                         ^ Token(Comma, ",", (364,57)->(364,58))
                                                           ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (364,59)->(364,74))
                                                                          ^ Token(RightParen, ")", (364,74)->(364,75))
                                                                            Token(EndOfLine, "\n", (364,75)->(364,75))
    endif
    ^^^^^ Token(Identifier, "endif", (365,4)->(365,9))
          Token(EndOfLine, "\n", (365,9)->(365,9))
    symInfo = {name: name, range: r, detail: symbolDetail,
    ^^^^^^^ Token(Identifier, "symInfo", (366,4)->(366,11))
            ^ Token(Equal, "=", (366,12)->(366,13))
              ^ Token(LeftBrace, "{", (366,14)->(366,15))
               ^^^^ Token(Identifier, "name", (366,15)->(366,19))
                   ^^ Token(SpacedColon, ": ", (366,19)->(366,21))
                     ^^^^ Token(Identifier, "name", (366,21)->(366,25))
                         ^ Token(Comma, ",", (366,25)->(366,26))
                           ^^^^^ Token(Identifier, "range", (366,27)->(366,32))
                                ^^ Token(SpacedColon, ": ", (366,32)->(366,34))
                                  ^ Token(Identifier, "r", (366,34)->(366,35))
                                   ^ Token(Comma, ",", (366,35)->(366,36))
                                     ^^^^^^ Token(Identifier, "detail", (366,37)->(366,43))
                                           ^^ Token(SpacedColon, ": ", (366,43)->(366,45))
                                             ^^^^^^^^^^^^ Token(Identifier, "symbolDetail", (366,45)->(366,57))
                                                         ^ Token(Comma, ",", (366,57)->(366,58))
                                                           Token(EndOfLine, "\n", (366,58)->(366,58))
						children: childSymbols}
      ^^^^^^^^ Token(Identifier, "children", (367,6)->(367,14))
              ^^ Token(SpacedColon, ": ", (367,14)->(367,16))
                ^^^^^^^^^^^^ Token(Identifier, "childSymbols", (367,16)->(367,28))
                            ^ Token(RightBrace, "}", (367,28)->(367,29))
                              Token(EndOfLine, "\n", (367,29)->(367,29))
    symbolTypeTable[symbolType]->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (368,4)->(368,19))
                   ^ Token(LeftBracket, "[", (368,19)->(368,20))
                    ^^^^^^^^^^ Token(Identifier, "symbolType", (368,20)->(368,30))
                              ^ Token(RightBracket, "]", (368,30)->(368,31))
                               ^^ Token(MethodArrow, "->", (368,31)->(368,33))
                                 ^^^ Token(Identifier, "add", (368,33)->(368,36))
                                    ^ Token(LeftParen, "(", (368,36)->(368,37))
                                     ^^^^^^^ Token(Identifier, "symInfo", (368,37)->(368,44))
                                            ^ Token(RightParen, ")", (368,44)->(368,45))
                                              Token(EndOfLine, "\n", (368,45)->(368,45))
    symbolLineTable->add(symInfo)
    ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (369,4)->(369,19))
                   ^^ Token(MethodArrow, "->", (369,19)->(369,21))
                     ^^^ Token(Identifier, "add", (369,21)->(369,24))
                        ^ Token(LeftParen, "(", (369,24)->(369,25))
                         ^^^^^^^ Token(Identifier, "symInfo", (369,25)->(369,32))
                                ^ Token(RightParen, ")", (369,32)->(369,33))
                                  Token(EndOfLine, "\n", (369,33)->(369,33))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (370,2)->(370,8))
         Token(EndOfLine, "\n", (370,8)->(370,8))
enddef
^^^^^^ Token(Identifier, "enddef", (371,0)->(371,6))
       Token(EndOfLine, "\n", (371,6)->(371,6))

 Token(EndOfLine, "\n", (372,0)->(372,0))
# process the 'textDocument/documentSymbol' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/documentSymbol' reply from the LSP server", (373,0)->(373,69))
# Open a symbols window and display the symbols as a tree
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Open a symbols window and display the symbols as a tree", (374,0)->(374,57))
# Result: DocumentSymbol[] | SymbolInformation[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: DocumentSymbol[] | SymbolInformation[] | null", (375,0)->(375,55))
def ProcessDocSymbolReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (376,0)->(376,3))
    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolReply", (376,4)->(376,25))
                         ^ Token(LeftParen, "(", (376,25)->(376,26))
                          ^^^^^^^^^ Token(Identifier, "lspserver", (376,26)->(376,35))
                                   ^^ Token(SpacedColon, ": ", (376,35)->(376,37))
                                     ^^^^ Token(Identifier, "dict", (376,37)->(376,41))
                                         ^ Token(AngleLeft, "<", (376,41)->(376,42))
                                          ^^^ Token(Identifier, "any", (376,42)->(376,45))
                                             ^ Token(AngleRight, ">", (376,45)->(376,46))
                                              ^ Token(Comma, ",", (376,46)->(376,47))
                                                ^^^ Token(Identifier, "req", (376,48)->(376,51))
                                                   ^^ Token(SpacedColon, ": ", (376,51)->(376,53))
                                                     ^^^^ Token(Identifier, "dict", (376,53)->(376,57))
                                                         ^ Token(AngleLeft, "<", (376,57)->(376,58))
                                                          ^^^ Token(Identifier, "any", (376,58)->(376,61))
                                                             ^ Token(AngleRight, ">", (376,61)->(376,62))
                                                              ^ Token(Comma, ",", (376,62)->(376,63))
                                                                ^^^^^ Token(Identifier, "reply", (376,64)->(376,69))
                                                                     ^^ Token(SpacedColon, ": ", (376,69)->(376,71))
                                                                       ^^^^ Token(Identifier, "dict", (376,71)->(376,75))
                                                                           ^ Token(AngleLeft, "<", (376,75)->(376,76))
                                                                            ^^^ Token(Identifier, "any", (376,76)->(376,79))
                                                                               ^ Token(AngleRight, ">", (376,79)->(376,80))
                                                                                ^ Token(RightParen, ")", (376,80)->(376,81))
                                                                                 ^^ Token(SpacedColon, ": ", (376,81)->(376,83))
                                                                                   ^^^^ Token(Identifier, "void", (376,83)->(376,87))
                                                                                        Token(EndOfLine, "\n", (376,87)->(376,87))
  var fname: string
  ^^^ Token(Identifier, "var", (377,2)->(377,5))
      ^^^^^ Token(Identifier, "fname", (377,6)->(377,11))
           ^^ Token(SpacedColon, ": ", (377,11)->(377,13))
             ^^^^^^ Token(Identifier, "string", (377,13)->(377,19))
                    Token(EndOfLine, "\n", (377,19)->(377,19))
  var symbolTypeTable: dict<list<dict<any>>> = {}
  ^^^ Token(Identifier, "var", (378,2)->(378,5))
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (378,6)->(378,21))
                     ^^ Token(SpacedColon, ": ", (378,21)->(378,23))
                       ^^^^ Token(Identifier, "dict", (378,23)->(378,27))
                           ^ Token(AngleLeft, "<", (378,27)->(378,28))
                            ^^^^ Token(Identifier, "list", (378,28)->(378,32))
                                ^ Token(AngleLeft, "<", (378,32)->(378,33))
                                 ^^^^ Token(Identifier, "dict", (378,33)->(378,37))
                                     ^ Token(AngleLeft, "<", (378,37)->(378,38))
                                      ^^^ Token(Identifier, "any", (378,38)->(378,41))
                                         ^ Token(AngleRight, ">", (378,41)->(378,42))
                                          ^ Token(AngleRight, ">", (378,42)->(378,43))
                                           ^ Token(GreaterThan, ">", (378,43)->(378,44))
                                             ^ Token(Equal, "=", (378,45)->(378,46))
                                               ^ Token(LeftBrace, "{", (378,47)->(378,48))
                                                ^ Token(RightBrace, "}", (378,48)->(378,49))
                                                  Token(EndOfLine, "\n", (378,49)->(378,49))
  var symbolLineTable: list<dict<any>> = []
  ^^^ Token(Identifier, "var", (379,2)->(379,5))
      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (379,6)->(379,21))
                     ^^ Token(SpacedColon, ": ", (379,21)->(379,23))
                       ^^^^ Token(Identifier, "list", (379,23)->(379,27))
                           ^ Token(AngleLeft, "<", (379,27)->(379,28))
                            ^^^^ Token(Identifier, "dict", (379,28)->(379,32))
                                ^ Token(AngleLeft, "<", (379,32)->(379,33))
                                 ^^^ Token(Identifier, "any", (379,33)->(379,36))
                                    ^ Token(AngleRight, ">", (379,36)->(379,37))
                                     ^ Token(GreaterThan, ">", (379,37)->(379,38))
                                       ^ Token(Equal, "=", (379,39)->(379,40))
                                         ^ Token(LeftBracket, "[", (379,41)->(379,42))
                                          ^ Token(RightBracket, "]", (379,42)->(379,43))
                                            Token(EndOfLine, "\n", (379,43)->(379,43))

 Token(EndOfLine, "\n", (380,0)->(380,0))
  if req.params.textDocument.uri != ''
  ^^ Token(Identifier, "if", (381,2)->(381,4))
     ^^^ Token(Identifier, "req", (381,5)->(381,8))
        ^ Token(Dot, ".", (381,8)->(381,9))
         ^^^^^^ Token(Identifier, "params", (381,9)->(381,15))
               ^ Token(Dot, ".", (381,15)->(381,16))
                ^^^^^^^^^^^^ Token(Identifier, "textDocument", (381,16)->(381,28))
                            ^ Token(Dot, ".", (381,28)->(381,29))
                             ^^^ Token(Identifier, "uri", (381,29)->(381,32))
                                 ^^ Token(NotEqualTo, "!=", (381,33)->(381,35))
                                      Token(SingleQuoteString, "", (381,37)->(381,37))
                                       Token(EndOfLine, "\n", (381,38)->(381,38))
    fname = util.LspUriToFile(req.params.textDocument.uri)
    ^^^^^ Token(Identifier, "fname", (382,4)->(382,9))
          ^ Token(Equal, "=", (382,10)->(382,11))
            ^^^^ Token(Identifier, "util", (382,12)->(382,16))
                ^ Token(Dot, ".", (382,16)->(382,17))
                 ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (382,17)->(382,29))
                             ^ Token(LeftParen, "(", (382,29)->(382,30))
                              ^^^ Token(Identifier, "req", (382,30)->(382,33))
                                 ^ Token(Dot, ".", (382,33)->(382,34))
                                  ^^^^^^ Token(Identifier, "params", (382,34)->(382,40))
                                        ^ Token(Dot, ".", (382,40)->(382,41))
                                         ^^^^^^^^^^^^ Token(Identifier, "textDocument", (382,41)->(382,53))
                                                     ^ Token(Dot, ".", (382,53)->(382,54))
                                                      ^^^ Token(Identifier, "uri", (382,54)->(382,57))
                                                         ^ Token(RightParen, ")", (382,57)->(382,58))
                                                           Token(EndOfLine, "\n", (382,58)->(382,58))
  endif
  ^^^^^ Token(Identifier, "endif", (383,2)->(383,7))
        Token(EndOfLine, "\n", (383,7)->(383,7))

 Token(EndOfLine, "\n", (384,0)->(384,0))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (385,2)->(385,4))
     ^^^^^ Token(Identifier, "reply", (385,5)->(385,10))
          ^ Token(Dot, ".", (385,10)->(385,11))
           ^^^^^^ Token(Identifier, "result", (385,11)->(385,17))
                 ^^ Token(MethodArrow, "->", (385,17)->(385,19))
                   ^^^^^ Token(Identifier, "empty", (385,19)->(385,24))
                        ^ Token(LeftParen, "(", (385,24)->(385,25))
                         ^ Token(RightParen, ")", (385,25)->(385,26))
                           Token(EndOfLine, "\n", (385,26)->(385,26))
    # No symbols defined for this file. Clear the outline window.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# No symbols defined for this file. Clear the outline window.", (386,4)->(386,65))
    outline.UpdateOutlineWindow(fname, symbolTypeTable, symbolLineTable)
    ^^^^^^^ Token(Identifier, "outline", (387,4)->(387,11))
           ^ Token(Dot, ".", (387,11)->(387,12))
            ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "UpdateOutlineWindow", (387,12)->(387,31))
                               ^ Token(LeftParen, "(", (387,31)->(387,32))
                                ^^^^^ Token(Identifier, "fname", (387,32)->(387,37))
                                     ^ Token(Comma, ",", (387,37)->(387,38))
                                       ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (387,39)->(387,54))
                                                      ^ Token(Comma, ",", (387,54)->(387,55))
                                                        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (387,56)->(387,71))
                                                                       ^ Token(RightParen, ")", (387,71)->(387,72))
                                                                         Token(EndOfLine, "\n", (387,72)->(387,72))
    return
    ^^^^^^ Token(Identifier, "return", (388,4)->(388,10))
           Token(EndOfLine, "\n", (388,10)->(388,10))
  endif
  ^^^^^ Token(Identifier, "endif", (389,2)->(389,7))
        Token(EndOfLine, "\n", (389,7)->(389,7))

 Token(EndOfLine, "\n", (390,0)->(390,0))
  if reply.result[0]->has_key('location')
  ^^ Token(Identifier, "if", (391,2)->(391,4))
     ^^^^^ Token(Identifier, "reply", (391,5)->(391,10))
          ^ Token(Dot, ".", (391,10)->(391,11))
           ^^^^^^ Token(Identifier, "result", (391,11)->(391,17))
                 ^ Token(LeftBracket, "[", (391,17)->(391,18))
                  ^ Token(Integer, "0", (391,18)->(391,19))
                   ^ Token(RightBracket, "]", (391,19)->(391,20))
                    ^^ Token(MethodArrow, "->", (391,20)->(391,22))
                      ^^^^^^^ Token(Identifier, "has_key", (391,22)->(391,29))
                             ^ Token(LeftParen, "(", (391,29)->(391,30))
                               ^^^^^^^ Token(SingleQuoteString, "location", (391,31)->(391,38))
                                        ^ Token(RightParen, ")", (391,40)->(391,41))
                                          Token(EndOfLine, "\n", (391,41)->(391,41))
    # SymbolInformation[]
    ^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# SymbolInformation[]", (392,4)->(392,25))
    ProcessSymbolInfoTable(reply.result, symbolTypeTable, symbolLineTable)
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSymbolInfoTable", (393,4)->(393,26))
                          ^ Token(LeftParen, "(", (393,26)->(393,27))
                           ^^^^^ Token(Identifier, "reply", (393,27)->(393,32))
                                ^ Token(Dot, ".", (393,32)->(393,33))
                                 ^^^^^^ Token(Identifier, "result", (393,33)->(393,39))
                                       ^ Token(Comma, ",", (393,39)->(393,40))
                                         ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (393,41)->(393,56))
                                                        ^ Token(Comma, ",", (393,56)->(393,57))
                                                          ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (393,58)->(393,73))
                                                                         ^ Token(RightParen, ")", (393,73)->(393,74))
                                                                           Token(EndOfLine, "\n", (393,74)->(393,74))
  else
  ^^^^ Token(Identifier, "else", (394,2)->(394,6))
       Token(EndOfLine, "\n", (394,6)->(394,6))
    # DocumentSymbol[]
    ^^^^^^^^^^^^^^^^^^ Token(Comment, "# DocumentSymbol[]", (395,4)->(395,22))
    ProcessDocSymbolTable(reply.result, symbolTypeTable, symbolLineTable)
    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolTable", (396,4)->(396,25))
                         ^ Token(LeftParen, "(", (396,25)->(396,26))
                          ^^^^^ Token(Identifier, "reply", (396,26)->(396,31))
                               ^ Token(Dot, ".", (396,31)->(396,32))
                                ^^^^^^ Token(Identifier, "result", (396,32)->(396,38))
                                      ^ Token(Comma, ",", (396,38)->(396,39))
                                        ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (396,40)->(396,55))
                                                       ^ Token(Comma, ",", (396,55)->(396,56))
                                                         ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (396,57)->(396,72))
                                                                        ^ Token(RightParen, ")", (396,72)->(396,73))
                                                                          Token(EndOfLine, "\n", (396,73)->(396,73))
  endif
  ^^^^^ Token(Identifier, "endif", (397,2)->(397,7))
        Token(EndOfLine, "\n", (397,7)->(397,7))

 Token(EndOfLine, "\n", (398,0)->(398,0))
  # sort the symbols by line number
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# sort the symbols by line number", (399,2)->(399,35))
  symbolLineTable->sort((a, b) => a.range.start.line - b.range.start.line)
  ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (400,2)->(400,17))
                 ^^ Token(MethodArrow, "->", (400,17)->(400,19))
                   ^^^^ Token(Identifier, "sort", (400,19)->(400,23))
                       ^ Token(LeftParen, "(", (400,23)->(400,24))
                        ^ Token(LeftParen, "(", (400,24)->(400,25))
                         ^ Token(Identifier, "a", (400,25)->(400,26))
                          ^ Token(Comma, ",", (400,26)->(400,27))
                            ^ Token(Identifier, "b", (400,28)->(400,29))
                             ^ Token(RightParen, ")", (400,29)->(400,30))
                               ^^ Token(Arrow, "=>", (400,31)->(400,33))
                                  ^ Token(Identifier, "a", (400,34)->(400,35))
                                   ^ Token(Dot, ".", (400,35)->(400,36))
                                    ^^^^^ Token(Identifier, "range", (400,36)->(400,41))
                                         ^ Token(Dot, ".", (400,41)->(400,42))
                                          ^^^^^ Token(Identifier, "start", (400,42)->(400,47))
                                               ^ Token(Dot, ".", (400,47)->(400,48))
                                                ^^^^ Token(Identifier, "line", (400,48)->(400,52))
                                                     ^ Token(Minus, "-", (400,53)->(400,54))
                                                       ^ Token(Identifier, "b", (400,55)->(400,56))
                                                        ^ Token(Dot, ".", (400,56)->(400,57))
                                                         ^^^^^ Token(Identifier, "range", (400,57)->(400,62))
                                                              ^ Token(Dot, ".", (400,62)->(400,63))
                                                               ^^^^^ Token(Identifier, "start", (400,63)->(400,68))
                                                                    ^ Token(Dot, ".", (400,68)->(400,69))
                                                                     ^^^^ Token(Identifier, "line", (400,69)->(400,73))
                                                                         ^ Token(RightParen, ")", (400,73)->(400,74))
                                                                           Token(EndOfLine, "\n", (400,74)->(400,74))
  outline.UpdateOutlineWindow(fname, symbolTypeTable, symbolLineTable)
  ^^^^^^^ Token(Identifier, "outline", (401,2)->(401,9))
         ^ Token(Dot, ".", (401,9)->(401,10))
          ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "UpdateOutlineWindow", (401,10)->(401,29))
                             ^ Token(LeftParen, "(", (401,29)->(401,30))
                              ^^^^^ Token(Identifier, "fname", (401,30)->(401,35))
                                   ^ Token(Comma, ",", (401,35)->(401,36))
                                     ^^^^^^^^^^^^^^^ Token(Identifier, "symbolTypeTable", (401,37)->(401,52))
                                                    ^ Token(Comma, ",", (401,52)->(401,53))
                                                      ^^^^^^^^^^^^^^^ Token(Identifier, "symbolLineTable", (401,54)->(401,69))
                                                                     ^ Token(RightParen, ")", (401,69)->(401,70))
                                                                       Token(EndOfLine, "\n", (401,70)->(401,70))
enddef
^^^^^^ Token(Identifier, "enddef", (402,0)->(402,6))
       Token(EndOfLine, "\n", (402,6)->(402,6))

 Token(EndOfLine, "\n", (403,0)->(403,0))
# process the 'textDocument/codeAction' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/codeAction' reply from the LSP server", (404,0)->(404,65))
# Result: (Command | CodeAction)[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: (Command | CodeAction)[] | null", (405,0)->(405,41))
def ProcessCodeActionReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (406,0)->(406,3))
    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCodeActionReply", (406,4)->(406,26))
                          ^ Token(LeftParen, "(", (406,26)->(406,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (406,27)->(406,36))
                                    ^^ Token(SpacedColon, ": ", (406,36)->(406,38))
                                      ^^^^ Token(Identifier, "dict", (406,38)->(406,42))
                                          ^ Token(AngleLeft, "<", (406,42)->(406,43))
                                           ^^^ Token(Identifier, "any", (406,43)->(406,46))
                                              ^ Token(AngleRight, ">", (406,46)->(406,47))
                                               ^ Token(Comma, ",", (406,47)->(406,48))
                                                 ^^^ Token(Identifier, "req", (406,49)->(406,52))
                                                    ^^ Token(SpacedColon, ": ", (406,52)->(406,54))
                                                      ^^^^ Token(Identifier, "dict", (406,54)->(406,58))
                                                          ^ Token(AngleLeft, "<", (406,58)->(406,59))
                                                           ^^^ Token(Identifier, "any", (406,59)->(406,62))
                                                              ^ Token(AngleRight, ">", (406,62)->(406,63))
                                                               ^ Token(Comma, ",", (406,63)->(406,64))
                                                                 ^^^^^ Token(Identifier, "reply", (406,65)->(406,70))
                                                                      ^^ Token(SpacedColon, ": ", (406,70)->(406,72))
                                                                        ^^^^ Token(Identifier, "dict", (406,72)->(406,76))
                                                                            ^ Token(AngleLeft, "<", (406,76)->(406,77))
                                                                             ^^^ Token(Identifier, "any", (406,77)->(406,80))
                                                                                ^ Token(AngleRight, ">", (406,80)->(406,81))
                                                                                 ^ Token(RightParen, ")", (406,81)->(406,82))
                                                                                   Token(EndOfLine, "\n", (406,82)->(406,82))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (407,2)->(407,4))
     ^^^^^ Token(Identifier, "reply", (407,5)->(407,10))
          ^ Token(Dot, ".", (407,10)->(407,11))
           ^^^^^^ Token(Identifier, "result", (407,11)->(407,17))
                 ^^ Token(MethodArrow, "->", (407,17)->(407,19))
                   ^^^^^ Token(Identifier, "empty", (407,19)->(407,24))
                        ^ Token(LeftParen, "(", (407,24)->(407,25))
                         ^ Token(RightParen, ")", (407,25)->(407,26))
                           Token(EndOfLine, "\n", (407,26)->(407,26))
    # no action can be performed
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# no action can be performed", (408,4)->(408,32))
    util.WarnMsg('No code action is available')
    ^^^^ Token(Identifier, "util", (409,4)->(409,8))
        ^ Token(Dot, ".", (409,8)->(409,9))
         ^^^^^^^ Token(Identifier, "WarnMsg", (409,9)->(409,16))
                ^ Token(LeftParen, "(", (409,16)->(409,17))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "No code action is available", (409,18)->(409,44))
                                              ^ Token(RightParen, ")", (409,46)->(409,47))
                                                Token(EndOfLine, "\n", (409,47)->(409,47))
    return
    ^^^^^^ Token(Identifier, "return", (410,4)->(410,10))
           Token(EndOfLine, "\n", (410,10)->(410,10))
  endif
  ^^^^^ Token(Identifier, "endif", (411,2)->(411,7))
        Token(EndOfLine, "\n", (411,7)->(411,7))

 Token(EndOfLine, "\n", (412,0)->(412,0))
  codeaction.ApplyCodeAction(lspserver, reply.result)
  ^^^^^^^^^^ Token(Identifier, "codeaction", (413,2)->(413,12))
            ^ Token(Dot, ".", (413,12)->(413,13))
             ^^^^^^^^^^^^^^^ Token(Identifier, "ApplyCodeAction", (413,13)->(413,28))
                            ^ Token(LeftParen, "(", (413,28)->(413,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (413,29)->(413,38))
                                      ^ Token(Comma, ",", (413,38)->(413,39))
                                        ^^^^^ Token(Identifier, "reply", (413,40)->(413,45))
                                             ^ Token(Dot, ".", (413,45)->(413,46))
                                              ^^^^^^ Token(Identifier, "result", (413,46)->(413,52))
                                                    ^ Token(RightParen, ")", (413,52)->(413,53))
                                                      Token(EndOfLine, "\n", (413,53)->(413,53))
enddef
^^^^^^ Token(Identifier, "enddef", (414,0)->(414,6))
       Token(EndOfLine, "\n", (414,6)->(414,6))

 Token(EndOfLine, "\n", (415,0)->(415,0))
# Reply: 'textDocument/foldingRange'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Reply: 'textDocument/foldingRange'", (416,0)->(416,36))
# Result: FoldingRange[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: FoldingRange[] | null", (417,0)->(417,31))
def ProcessFoldingRangeReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (418,0)->(418,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessFoldingRangeReply", (418,4)->(418,28))
                            ^ Token(LeftParen, "(", (418,28)->(418,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (418,29)->(418,38))
                                      ^^ Token(SpacedColon, ": ", (418,38)->(418,40))
                                        ^^^^ Token(Identifier, "dict", (418,40)->(418,44))
                                            ^ Token(AngleLeft, "<", (418,44)->(418,45))
                                             ^^^ Token(Identifier, "any", (418,45)->(418,48))
                                                ^ Token(AngleRight, ">", (418,48)->(418,49))
                                                 ^ Token(Comma, ",", (418,49)->(418,50))
                                                   ^^^ Token(Identifier, "req", (418,51)->(418,54))
                                                      ^^ Token(SpacedColon, ": ", (418,54)->(418,56))
                                                        ^^^^ Token(Identifier, "dict", (418,56)->(418,60))
                                                            ^ Token(AngleLeft, "<", (418,60)->(418,61))
                                                             ^^^ Token(Identifier, "any", (418,61)->(418,64))
                                                                ^ Token(AngleRight, ">", (418,64)->(418,65))
                                                                 ^ Token(Comma, ",", (418,65)->(418,66))
                                                                   ^^^^^ Token(Identifier, "reply", (418,67)->(418,72))
                                                                        ^^ Token(SpacedColon, ": ", (418,72)->(418,74))
                                                                          ^^^^ Token(Identifier, "dict", (418,74)->(418,78))
                                                                              ^ Token(AngleLeft, "<", (418,78)->(418,79))
                                                                               ^^^ Token(Identifier, "any", (418,79)->(418,82))
                                                                                  ^ Token(AngleRight, ">", (418,82)->(418,83))
                                                                                   ^ Token(RightParen, ")", (418,83)->(418,84))
                                                                                     Token(EndOfLine, "\n", (418,84)->(418,84))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (419,2)->(419,4))
     ^^^^^ Token(Identifier, "reply", (419,5)->(419,10))
          ^ Token(Dot, ".", (419,10)->(419,11))
           ^^^^^^ Token(Identifier, "result", (419,11)->(419,17))
                 ^^ Token(MethodArrow, "->", (419,17)->(419,19))
                   ^^^^^ Token(Identifier, "empty", (419,19)->(419,24))
                        ^ Token(LeftParen, "(", (419,24)->(419,25))
                         ^ Token(RightParen, ")", (419,25)->(419,26))
                           Token(EndOfLine, "\n", (419,26)->(419,26))
    return
    ^^^^^^ Token(Identifier, "return", (420,4)->(420,10))
           Token(EndOfLine, "\n", (420,10)->(420,10))
  endif
  ^^^^^ Token(Identifier, "endif", (421,2)->(421,7))
        Token(EndOfLine, "\n", (421,7)->(421,7))

 Token(EndOfLine, "\n", (422,0)->(422,0))
  # result: FoldingRange[]
  ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# result: FoldingRange[]", (423,2)->(423,26))
  var end_lnum: number
  ^^^ Token(Identifier, "var", (424,2)->(424,5))
      ^^^^^^^^ Token(Identifier, "end_lnum", (424,6)->(424,14))
              ^^ Token(SpacedColon, ": ", (424,14)->(424,16))
                ^^^^^^ Token(Identifier, "number", (424,16)->(424,22))
                       Token(EndOfLine, "\n", (424,22)->(424,22))
  var last_lnum: number = line('$')
  ^^^ Token(Identifier, "var", (425,2)->(425,5))
      ^^^^^^^^^ Token(Identifier, "last_lnum", (425,6)->(425,15))
               ^^ Token(SpacedColon, ": ", (425,15)->(425,17))
                 ^^^^^^ Token(Identifier, "number", (425,17)->(425,23))
                        ^ Token(Equal, "=", (425,24)->(425,25))
                          ^^^^ Token(Identifier, "line", (425,26)->(425,30))
                              ^ Token(LeftParen, "(", (425,30)->(425,31))
                                 Token(SingleQuoteString, "$", (425,32)->(425,32))
                                  ^ Token(RightParen, ")", (425,34)->(425,35))
                                    Token(EndOfLine, "\n", (425,35)->(425,35))
  for foldRange in reply.result
  ^^^ Token(Identifier, "for", (426,2)->(426,5))
      ^^^^^^^^^ Token(Identifier, "foldRange", (426,6)->(426,15))
                ^^ Token(Identifier, "in", (426,16)->(426,18))
                   ^^^^^ Token(Identifier, "reply", (426,19)->(426,24))
                        ^ Token(Dot, ".", (426,24)->(426,25))
                         ^^^^^^ Token(Identifier, "result", (426,25)->(426,31))
                                Token(EndOfLine, "\n", (426,31)->(426,31))
    end_lnum = foldRange.endLine + 1
    ^^^^^^^^ Token(Identifier, "end_lnum", (427,4)->(427,12))
             ^ Token(Equal, "=", (427,13)->(427,14))
               ^^^^^^^^^ Token(Identifier, "foldRange", (427,15)->(427,24))
                        ^ Token(Dot, ".", (427,24)->(427,25))
                         ^^^^^^^ Token(Identifier, "endLine", (427,25)->(427,32))
                                 ^ Token(Plus, "+", (427,33)->(427,34))
                                   ^ Token(Integer, "1", (427,35)->(427,36))
                                     Token(EndOfLine, "\n", (427,36)->(427,36))
    if end_lnum < foldRange.startLine + 2
    ^^ Token(Identifier, "if", (428,4)->(428,6))
       ^^^^^^^^ Token(Identifier, "end_lnum", (428,7)->(428,15))
                ^ Token(LessThan, "<", (428,16)->(428,17))
                  ^^^^^^^^^ Token(Identifier, "foldRange", (428,18)->(428,27))
                           ^ Token(Dot, ".", (428,27)->(428,28))
                            ^^^^^^^^^ Token(Identifier, "startLine", (428,28)->(428,37))
                                      ^ Token(Plus, "+", (428,38)->(428,39))
                                        ^ Token(Integer, "2", (428,40)->(428,41))
                                          Token(EndOfLine, "\n", (428,41)->(428,41))
      end_lnum = foldRange.startLine + 2
      ^^^^^^^^ Token(Identifier, "end_lnum", (429,6)->(429,14))
               ^ Token(Equal, "=", (429,15)->(429,16))
                 ^^^^^^^^^ Token(Identifier, "foldRange", (429,17)->(429,26))
                          ^ Token(Dot, ".", (429,26)->(429,27))
                           ^^^^^^^^^ Token(Identifier, "startLine", (429,27)->(429,36))
                                     ^ Token(Plus, "+", (429,37)->(429,38))
                                       ^ Token(Integer, "2", (429,39)->(429,40))
                                         Token(EndOfLine, "\n", (429,40)->(429,40))
    endif
    ^^^^^ Token(Identifier, "endif", (430,4)->(430,9))
          Token(EndOfLine, "\n", (430,9)->(430,9))
    exe $':{foldRange.startLine + 2}, {end_lnum}fold'
    ^^^ Token(Identifier, "exe", (431,4)->(431,7))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, ":{foldRange.startLine + 2}, {end_lnum}fold", (431,10)->(431,51))
                                                      Token(EndOfLine, "\n", (431,53)->(431,53))
    # Open all the folds, otherwise the subsequently created folds are not
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Open all the folds, otherwise the subsequently created folds are not", (432,4)->(432,74))
    # correct.
    ^^^^^^^^^^ Token(Comment, "# correct.", (433,4)->(433,14))
    :silent! foldopen!
    ^ Token(Colon, ":", (434,4)->(434,5))
     ^^^^^^ Token(Identifier, "silent", (434,5)->(434,11))
           ^ Token(Bang, "!", (434,11)->(434,12))
             ^^^^^^^^ Token(Identifier, "foldopen", (434,13)->(434,21))
                     ^ Token(Bang, "!", (434,21)->(434,22))
                       Token(EndOfLine, "\n", (434,22)->(434,22))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (435,2)->(435,8))
         Token(EndOfLine, "\n", (435,8)->(435,8))

 Token(EndOfLine, "\n", (436,0)->(436,0))
  if &foldcolumn == 0
  ^^ Token(Identifier, "if", (437,2)->(437,4))
     ^ Token(Ampersand, "&", (437,5)->(437,6))
      ^^^^^^^^^^ Token(Identifier, "foldcolumn", (437,6)->(437,16))
                 ^^ Token(EqualTo, "==", (437,17)->(437,19))
                    ^ Token(Integer, "0", (437,20)->(437,21))
                      Token(EndOfLine, "\n", (437,21)->(437,21))
    :setlocal foldcolumn=2
    ^ Token(Colon, ":", (438,4)->(438,5))
     ^^^^^^^^ Token(Identifier, "setlocal", (438,5)->(438,13))
              ^^^^^^^^^^ Token(Identifier, "foldcolumn", (438,14)->(438,24))
                        ^ Token(Equal, "=", (438,24)->(438,25))
                         ^ Token(Integer, "2", (438,25)->(438,26))
                           Token(EndOfLine, "\n", (438,26)->(438,26))
  endif
  ^^^^^ Token(Identifier, "endif", (439,2)->(439,7))
        Token(EndOfLine, "\n", (439,7)->(439,7))
enddef
^^^^^^ Token(Identifier, "enddef", (440,0)->(440,6))
       Token(EndOfLine, "\n", (440,6)->(440,6))

 Token(EndOfLine, "\n", (441,0)->(441,0))
# process the 'workspace/executeCommand' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'workspace/executeCommand' reply from the LSP server", (442,0)->(442,66))
# Result: any | null
^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: any | null", (443,0)->(443,20))
def ProcessWorkspaceExecuteReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (444,0)->(444,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceExecuteReply", (444,4)->(444,32))
                                ^ Token(LeftParen, "(", (444,32)->(444,33))
                                 ^^^^^^^^^ Token(Identifier, "lspserver", (444,33)->(444,42))
                                          ^^ Token(SpacedColon, ": ", (444,42)->(444,44))
                                            ^^^^ Token(Identifier, "dict", (444,44)->(444,48))
                                                ^ Token(AngleLeft, "<", (444,48)->(444,49))
                                                 ^^^ Token(Identifier, "any", (444,49)->(444,52))
                                                    ^ Token(AngleRight, ">", (444,52)->(444,53))
                                                     ^ Token(Comma, ",", (444,53)->(444,54))
                                                       ^^^ Token(Identifier, "req", (444,55)->(444,58))
                                                          ^^ Token(SpacedColon, ": ", (444,58)->(444,60))
                                                            ^^^^ Token(Identifier, "dict", (444,60)->(444,64))
                                                                ^ Token(AngleLeft, "<", (444,64)->(444,65))
                                                                 ^^^ Token(Identifier, "any", (444,65)->(444,68))
                                                                    ^ Token(AngleRight, ">", (444,68)->(444,69))
                                                                     ^ Token(Comma, ",", (444,69)->(444,70))
                                                                       ^^^^^ Token(Identifier, "reply", (444,71)->(444,76))
                                                                            ^^ Token(SpacedColon, ": ", (444,76)->(444,78))
                                                                              ^^^^ Token(Identifier, "dict", (444,78)->(444,82))
                                                                                  ^ Token(AngleLeft, "<", (444,82)->(444,83))
                                                                                   ^^^ Token(Identifier, "any", (444,83)->(444,86))
                                                                                      ^ Token(AngleRight, ">", (444,86)->(444,87))
                                                                                       ^ Token(RightParen, ")", (444,87)->(444,88))
                                                                                         Token(EndOfLine, "\n", (444,88)->(444,88))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (445,2)->(445,4))
     ^^^^^ Token(Identifier, "reply", (445,5)->(445,10))
          ^ Token(Dot, ".", (445,10)->(445,11))
           ^^^^^^ Token(Identifier, "result", (445,11)->(445,17))
                 ^^ Token(MethodArrow, "->", (445,17)->(445,19))
                   ^^^^^ Token(Identifier, "empty", (445,19)->(445,24))
                        ^ Token(LeftParen, "(", (445,24)->(445,25))
                         ^ Token(RightParen, ")", (445,25)->(445,26))
                           Token(EndOfLine, "\n", (445,26)->(445,26))
    return
    ^^^^^^ Token(Identifier, "return", (446,4)->(446,10))
           Token(EndOfLine, "\n", (446,10)->(446,10))
  endif
  ^^^^^ Token(Identifier, "endif", (447,2)->(447,7))
        Token(EndOfLine, "\n", (447,7)->(447,7))

 Token(EndOfLine, "\n", (448,0)->(448,0))
  # Nothing to do for the reply
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Nothing to do for the reply", (449,2)->(449,31))
enddef
^^^^^^ Token(Identifier, "enddef", (450,0)->(450,6))
       Token(EndOfLine, "\n", (450,6)->(450,6))

 Token(EndOfLine, "\n", (451,0)->(451,0))
# Convert a file name <filename> (<dirname>) format.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Convert a file name <filename> (<dirname>) format.", (452,0)->(452,52))
# Make sure the popup does't occupy the entire screen by reducing the width.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Make sure the popup does't occupy the entire screen by reducing the width.", (453,0)->(453,76))
def MakeMenuName(popupWidth: number, fname: string): string
^^^ Token(Identifier, "def", (454,0)->(454,3))
    ^^^^^^^^^^^^ Token(Identifier, "MakeMenuName", (454,4)->(454,16))
                ^ Token(LeftParen, "(", (454,16)->(454,17))
                 ^^^^^^^^^^ Token(Identifier, "popupWidth", (454,17)->(454,27))
                           ^^ Token(SpacedColon, ": ", (454,27)->(454,29))
                             ^^^^^^ Token(Identifier, "number", (454,29)->(454,35))
                                   ^ Token(Comma, ",", (454,35)->(454,36))
                                     ^^^^^ Token(Identifier, "fname", (454,37)->(454,42))
                                          ^^ Token(SpacedColon, ": ", (454,42)->(454,44))
                                            ^^^^^^ Token(Identifier, "string", (454,44)->(454,50))
                                                  ^ Token(RightParen, ")", (454,50)->(454,51))
                                                   ^^ Token(SpacedColon, ": ", (454,51)->(454,53))
                                                     ^^^^^^ Token(Identifier, "string", (454,53)->(454,59))
                                                            Token(EndOfLine, "\n", (454,59)->(454,59))
  var filename: string = fname->fnamemodify(':t')
  ^^^ Token(Identifier, "var", (455,2)->(455,5))
      ^^^^^^^^ Token(Identifier, "filename", (455,6)->(455,14))
              ^^ Token(SpacedColon, ": ", (455,14)->(455,16))
                ^^^^^^ Token(Identifier, "string", (455,16)->(455,22))
                       ^ Token(Equal, "=", (455,23)->(455,24))
                         ^^^^^ Token(Identifier, "fname", (455,25)->(455,30))
                              ^^ Token(MethodArrow, "->", (455,30)->(455,32))
                                ^^^^^^^^^^^ Token(Identifier, "fnamemodify", (455,32)->(455,43))
                                           ^ Token(LeftParen, "(", (455,43)->(455,44))
                                             ^ Token(SingleQuoteString, ":t", (455,45)->(455,46))
                                                ^ Token(RightParen, ")", (455,48)->(455,49))
                                                  Token(EndOfLine, "\n", (455,49)->(455,49))
  var flen: number = filename->len()
  ^^^ Token(Identifier, "var", (456,2)->(456,5))
      ^^^^ Token(Identifier, "flen", (456,6)->(456,10))
          ^^ Token(SpacedColon, ": ", (456,10)->(456,12))
            ^^^^^^ Token(Identifier, "number", (456,12)->(456,18))
                   ^ Token(Equal, "=", (456,19)->(456,20))
                     ^^^^^^^^ Token(Identifier, "filename", (456,21)->(456,29))
                             ^^ Token(MethodArrow, "->", (456,29)->(456,31))
                               ^^^ Token(Identifier, "len", (456,31)->(456,34))
                                  ^ Token(LeftParen, "(", (456,34)->(456,35))
                                   ^ Token(RightParen, ")", (456,35)->(456,36))
                                     Token(EndOfLine, "\n", (456,36)->(456,36))
  var dirname: string = fname->fnamemodify(':h')
  ^^^ Token(Identifier, "var", (457,2)->(457,5))
      ^^^^^^^ Token(Identifier, "dirname", (457,6)->(457,13))
             ^^ Token(SpacedColon, ": ", (457,13)->(457,15))
               ^^^^^^ Token(Identifier, "string", (457,15)->(457,21))
                      ^ Token(Equal, "=", (457,22)->(457,23))
                        ^^^^^ Token(Identifier, "fname", (457,24)->(457,29))
                             ^^ Token(MethodArrow, "->", (457,29)->(457,31))
                               ^^^^^^^^^^^ Token(Identifier, "fnamemodify", (457,31)->(457,42))
                                          ^ Token(LeftParen, "(", (457,42)->(457,43))
                                            ^ Token(SingleQuoteString, ":h", (457,44)->(457,45))
                                               ^ Token(RightParen, ")", (457,47)->(457,48))
                                                 Token(EndOfLine, "\n", (457,48)->(457,48))

 Token(EndOfLine, "\n", (458,0)->(458,0))
  if fname->len() > popupWidth && flen < popupWidth
  ^^ Token(Identifier, "if", (459,2)->(459,4))
     ^^^^^ Token(Identifier, "fname", (459,5)->(459,10))
          ^^ Token(MethodArrow, "->", (459,10)->(459,12))
            ^^^ Token(Identifier, "len", (459,12)->(459,15))
               ^ Token(LeftParen, "(", (459,15)->(459,16))
                ^ Token(RightParen, ")", (459,16)->(459,17))
                  ^ Token(GreaterThan, ">", (459,18)->(459,19))
                    ^^^^^^^^^^ Token(Identifier, "popupWidth", (459,20)->(459,30))
                               ^^ Token(And, "&&", (459,31)->(459,33))
                                  ^^^^ Token(Identifier, "flen", (459,34)->(459,38))
                                       ^ Token(LessThan, "<", (459,39)->(459,40))
                                         ^^^^^^^^^^ Token(Identifier, "popupWidth", (459,41)->(459,51))
                                                    Token(EndOfLine, "\n", (459,51)->(459,51))
    # keep the full file name and reduce directory name length
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# keep the full file name and reduce directory name length", (460,4)->(460,62))
    # keep some characters at the beginning and end (equally).
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# keep some characters at the beginning and end (equally).", (461,4)->(461,62))
    # 6 spaces are used for "..." and " ()"
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# 6 spaces are used for \"...\" and \" ()\"", (462,4)->(462,43))
    var dirsz = (popupWidth - flen - 6) / 2
    ^^^ Token(Identifier, "var", (463,4)->(463,7))
        ^^^^^ Token(Identifier, "dirsz", (463,8)->(463,13))
              ^ Token(Equal, "=", (463,14)->(463,15))
                ^ Token(LeftParen, "(", (463,16)->(463,17))
                 ^^^^^^^^^^ Token(Identifier, "popupWidth", (463,17)->(463,27))
                            ^ Token(Minus, "-", (463,28)->(463,29))
                              ^^^^ Token(Identifier, "flen", (463,30)->(463,34))
                                   ^ Token(Minus, "-", (463,35)->(463,36))
                                     ^ Token(Integer, "6", (463,37)->(463,38))
                                      ^ Token(RightParen, ")", (463,38)->(463,39))
                                        ^ Token(Div, "/", (463,40)->(463,41))
                                          ^ Token(Integer, "2", (463,42)->(463,43))
                                            Token(EndOfLine, "\n", (463,43)->(463,43))
    dirname = dirname[: dirsz] .. '...' .. dirname[-dirsz : ]
    ^^^^^^^ Token(Identifier, "dirname", (464,4)->(464,11))
            ^ Token(Equal, "=", (464,12)->(464,13))
              ^^^^^^^ Token(Identifier, "dirname", (464,14)->(464,21))
                     ^ Token(LeftBracket, "[", (464,21)->(464,22))
                      ^^ Token(SpacedColon, ": ", (464,22)->(464,24))
                        ^^^^^ Token(Identifier, "dirsz", (464,24)->(464,29))
                             ^ Token(RightBracket, "]", (464,29)->(464,30))
                               ^^ Token(StringConcat, "..", (464,31)->(464,33))
                                   ^^ Token(SingleQuoteString, "...", (464,35)->(464,37))
                                        ^^ Token(StringConcat, "..", (464,40)->(464,42))
                                           ^^^^^^^ Token(Identifier, "dirname", (464,43)->(464,50))
                                                  ^ Token(LeftBracket, "[", (464,50)->(464,51))
                                                   ^ Token(Minus, "-", (464,51)->(464,52))
                                                    ^^^^^ Token(Identifier, "dirsz", (464,52)->(464,57))
                                                          ^^ Token(SpacedColon, ": ", (464,58)->(464,60))
                                                            ^ Token(RightBracket, "]", (464,60)->(464,61))
                                                              Token(EndOfLine, "\n", (464,61)->(464,61))
  endif
  ^^^^^ Token(Identifier, "endif", (465,2)->(465,7))
        Token(EndOfLine, "\n", (465,7)->(465,7))
  var str: string = filename
  ^^^ Token(Identifier, "var", (466,2)->(466,5))
      ^^^ Token(Identifier, "str", (466,6)->(466,9))
         ^^ Token(SpacedColon, ": ", (466,9)->(466,11))
           ^^^^^^ Token(Identifier, "string", (466,11)->(466,17))
                  ^ Token(Equal, "=", (466,18)->(466,19))
                    ^^^^^^^^ Token(Identifier, "filename", (466,20)->(466,28))
                             Token(EndOfLine, "\n", (466,28)->(466,28))
  if dirname != '.'
  ^^ Token(Identifier, "if", (467,2)->(467,4))
     ^^^^^^^ Token(Identifier, "dirname", (467,5)->(467,12))
             ^^ Token(NotEqualTo, "!=", (467,13)->(467,15))
                  Token(SingleQuoteString, ".", (467,17)->(467,17))
                    Token(EndOfLine, "\n", (467,19)->(467,19))
    str ..= $' ({dirname}/)'
    ^^^ Token(Identifier, "str", (468,4)->(468,7))
        ^^^ Token(StringConcatEquals, "..=", (468,8)->(468,11))
              ^^^^^^^^^^^^ Token(InterpolatedLiteralString, " ({dirname}/)", (468,14)->(468,26))
                             Token(EndOfLine, "\n", (468,28)->(468,28))
  endif
  ^^^^^ Token(Identifier, "endif", (469,2)->(469,7))
        Token(EndOfLine, "\n", (469,7)->(469,7))
  return str
  ^^^^^^ Token(Identifier, "return", (470,2)->(470,8))
         ^^^ Token(Identifier, "str", (470,9)->(470,12))
             Token(EndOfLine, "\n", (470,12)->(470,12))
enddef
^^^^^^ Token(Identifier, "enddef", (471,0)->(471,6))
       Token(EndOfLine, "\n", (471,6)->(471,6))

 Token(EndOfLine, "\n", (472,0)->(472,0))
# process the 'workspace/symbol' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'workspace/symbol' reply from the LSP server", (473,0)->(473,58))
# Result: SymbolInformation[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: SymbolInformation[] | null", (474,0)->(474,36))
def ProcessWorkspaceSymbolReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (475,0)->(475,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceSymbolReply", (475,4)->(475,31))
                               ^ Token(LeftParen, "(", (475,31)->(475,32))
                                ^^^^^^^^^ Token(Identifier, "lspserver", (475,32)->(475,41))
                                         ^^ Token(SpacedColon, ": ", (475,41)->(475,43))
                                           ^^^^ Token(Identifier, "dict", (475,43)->(475,47))
                                               ^ Token(AngleLeft, "<", (475,47)->(475,48))
                                                ^^^ Token(Identifier, "any", (475,48)->(475,51))
                                                   ^ Token(AngleRight, ">", (475,51)->(475,52))
                                                    ^ Token(Comma, ",", (475,52)->(475,53))
                                                      ^^^ Token(Identifier, "req", (475,54)->(475,57))
                                                         ^^ Token(SpacedColon, ": ", (475,57)->(475,59))
                                                           ^^^^ Token(Identifier, "dict", (475,59)->(475,63))
                                                               ^ Token(AngleLeft, "<", (475,63)->(475,64))
                                                                ^^^ Token(Identifier, "any", (475,64)->(475,67))
                                                                   ^ Token(AngleRight, ">", (475,67)->(475,68))
                                                                    ^ Token(Comma, ",", (475,68)->(475,69))
                                                                      ^^^^^ Token(Identifier, "reply", (475,70)->(475,75))
                                                                           ^^ Token(SpacedColon, ": ", (475,75)->(475,77))
                                                                             ^^^^ Token(Identifier, "dict", (475,77)->(475,81))
                                                                                 ^ Token(AngleLeft, "<", (475,81)->(475,82))
                                                                                  ^^^ Token(Identifier, "any", (475,82)->(475,85))
                                                                                     ^ Token(AngleRight, ">", (475,85)->(475,86))
                                                                                      ^ Token(RightParen, ")", (475,86)->(475,87))
                                                                                        Token(EndOfLine, "\n", (475,87)->(475,87))
  var symbols: list<dict<any>> = []
  ^^^ Token(Identifier, "var", (476,2)->(476,5))
      ^^^^^^^ Token(Identifier, "symbols", (476,6)->(476,13))
             ^^ Token(SpacedColon, ": ", (476,13)->(476,15))
               ^^^^ Token(Identifier, "list", (476,15)->(476,19))
                   ^ Token(AngleLeft, "<", (476,19)->(476,20))
                    ^^^^ Token(Identifier, "dict", (476,20)->(476,24))
                        ^ Token(AngleLeft, "<", (476,24)->(476,25))
                         ^^^ Token(Identifier, "any", (476,25)->(476,28))
                            ^ Token(AngleRight, ">", (476,28)->(476,29))
                             ^ Token(GreaterThan, ">", (476,29)->(476,30))
                               ^ Token(Equal, "=", (476,31)->(476,32))
                                 ^ Token(LeftBracket, "[", (476,33)->(476,34))
                                  ^ Token(RightBracket, "]", (476,34)->(476,35))
                                    Token(EndOfLine, "\n", (476,35)->(476,35))
  var symbolType: string
  ^^^ Token(Identifier, "var", (477,2)->(477,5))
      ^^^^^^^^^^ Token(Identifier, "symbolType", (477,6)->(477,16))
                ^^ Token(SpacedColon, ": ", (477,16)->(477,18))
                  ^^^^^^ Token(Identifier, "string", (477,18)->(477,24))
                         Token(EndOfLine, "\n", (477,24)->(477,24))
  var fileName: string
  ^^^ Token(Identifier, "var", (478,2)->(478,5))
      ^^^^^^^^ Token(Identifier, "fileName", (478,6)->(478,14))
              ^^ Token(SpacedColon, ": ", (478,14)->(478,16))
                ^^^^^^ Token(Identifier, "string", (478,16)->(478,22))
                       Token(EndOfLine, "\n", (478,22)->(478,22))
  var r: dict<dict<number>>
  ^^^ Token(Identifier, "var", (479,2)->(479,5))
      ^ Token(Identifier, "r", (479,6)->(479,7))
       ^^ Token(SpacedColon, ": ", (479,7)->(479,9))
         ^^^^ Token(Identifier, "dict", (479,9)->(479,13))
             ^ Token(AngleLeft, "<", (479,13)->(479,14))
              ^^^^ Token(Identifier, "dict", (479,14)->(479,18))
                  ^ Token(AngleLeft, "<", (479,18)->(479,19))
                   ^^^^^^ Token(Identifier, "number", (479,19)->(479,25))
                         ^ Token(AngleRight, ">", (479,25)->(479,26))
                          ^ Token(GreaterThan, ">", (479,26)->(479,27))
                            Token(EndOfLine, "\n", (479,27)->(479,27))
  var symName: string
  ^^^ Token(Identifier, "var", (480,2)->(480,5))
      ^^^^^^^ Token(Identifier, "symName", (480,6)->(480,13))
             ^^ Token(SpacedColon, ": ", (480,13)->(480,15))
               ^^^^^^ Token(Identifier, "string", (480,15)->(480,21))
                      Token(EndOfLine, "\n", (480,21)->(480,21))

 Token(EndOfLine, "\n", (481,0)->(481,0))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (482,2)->(482,4))
     ^^^^^ Token(Identifier, "reply", (482,5)->(482,10))
          ^ Token(Dot, ".", (482,10)->(482,11))
           ^^^^^^ Token(Identifier, "result", (482,11)->(482,17))
                 ^^ Token(MethodArrow, "->", (482,17)->(482,19))
                   ^^^^^ Token(Identifier, "empty", (482,19)->(482,24))
                        ^ Token(LeftParen, "(", (482,24)->(482,25))
                         ^ Token(RightParen, ")", (482,25)->(482,26))
                           Token(EndOfLine, "\n", (482,26)->(482,26))
    return
    ^^^^^^ Token(Identifier, "return", (483,4)->(483,10))
           Token(EndOfLine, "\n", (483,10)->(483,10))
  endif
  ^^^^^ Token(Identifier, "endif", (484,2)->(484,7))
        Token(EndOfLine, "\n", (484,7)->(484,7))

 Token(EndOfLine, "\n", (485,0)->(485,0))
  for symbol in reply.result
  ^^^ Token(Identifier, "for", (486,2)->(486,5))
      ^^^^^^ Token(Identifier, "symbol", (486,6)->(486,12))
             ^^ Token(Identifier, "in", (486,13)->(486,15))
                ^^^^^ Token(Identifier, "reply", (486,16)->(486,21))
                     ^ Token(Dot, ".", (486,21)->(486,22))
                      ^^^^^^ Token(Identifier, "result", (486,22)->(486,28))
                             Token(EndOfLine, "\n", (486,28)->(486,28))
    if !symbol->has_key('location')
    ^^ Token(Identifier, "if", (487,4)->(487,6))
       ^ Token(Bang, "!", (487,7)->(487,8))
        ^^^^^^ Token(Identifier, "symbol", (487,8)->(487,14))
              ^^ Token(MethodArrow, "->", (487,14)->(487,16))
                ^^^^^^^ Token(Identifier, "has_key", (487,16)->(487,23))
                       ^ Token(LeftParen, "(", (487,23)->(487,24))
                         ^^^^^^^ Token(SingleQuoteString, "location", (487,25)->(487,32))
                                  ^ Token(RightParen, ")", (487,34)->(487,35))
                                    Token(EndOfLine, "\n", (487,35)->(487,35))
      # ignore entries without location information
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# ignore entries without location information", (488,6)->(488,51))
      continue
      ^^^^^^^^ Token(Identifier, "continue", (489,6)->(489,14))
               Token(EndOfLine, "\n", (489,14)->(489,14))
    endif
    ^^^^^ Token(Identifier, "endif", (490,4)->(490,9))
          Token(EndOfLine, "\n", (490,9)->(490,9))

 Token(EndOfLine, "\n", (491,0)->(491,0))
    # interface SymbolInformation
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# interface SymbolInformation", (492,4)->(492,33))
    fileName = util.LspUriToFile(symbol.location.uri)
    ^^^^^^^^ Token(Identifier, "fileName", (493,4)->(493,12))
             ^ Token(Equal, "=", (493,13)->(493,14))
               ^^^^ Token(Identifier, "util", (493,15)->(493,19))
                   ^ Token(Dot, ".", (493,19)->(493,20))
                    ^^^^^^^^^^^^ Token(Identifier, "LspUriToFile", (493,20)->(493,32))
                                ^ Token(LeftParen, "(", (493,32)->(493,33))
                                 ^^^^^^ Token(Identifier, "symbol", (493,33)->(493,39))
                                       ^ Token(Dot, ".", (493,39)->(493,40))
                                        ^^^^^^^^ Token(Identifier, "location", (493,40)->(493,48))
                                                ^ Token(Dot, ".", (493,48)->(493,49))
                                                 ^^^ Token(Identifier, "uri", (493,49)->(493,52))
                                                    ^ Token(RightParen, ")", (493,52)->(493,53))
                                                      Token(EndOfLine, "\n", (493,53)->(493,53))
    r = symbol.location.range
    ^ Token(Identifier, "r", (494,4)->(494,5))
      ^ Token(Equal, "=", (494,6)->(494,7))
        ^^^^^^ Token(Identifier, "symbol", (494,8)->(494,14))
              ^ Token(Dot, ".", (494,14)->(494,15))
               ^^^^^^^^ Token(Identifier, "location", (494,15)->(494,23))
                       ^ Token(Dot, ".", (494,23)->(494,24))
                        ^^^^^ Token(Identifier, "range", (494,24)->(494,29))
                              Token(EndOfLine, "\n", (494,29)->(494,29))

 Token(EndOfLine, "\n", (495,0)->(495,0))
    symName = symbol.name
    ^^^^^^^ Token(Identifier, "symName", (496,4)->(496,11))
            ^ Token(Equal, "=", (496,12)->(496,13))
              ^^^^^^ Token(Identifier, "symbol", (496,14)->(496,20))
                    ^ Token(Dot, ".", (496,20)->(496,21))
                     ^^^^ Token(Identifier, "name", (496,21)->(496,25))
                          Token(EndOfLine, "\n", (496,25)->(496,25))
    if symbol->has_key('containerName') && symbol.containerName != ''
    ^^ Token(Identifier, "if", (497,4)->(497,6))
       ^^^^^^ Token(Identifier, "symbol", (497,7)->(497,13))
             ^^ Token(MethodArrow, "->", (497,13)->(497,15))
               ^^^^^^^ Token(Identifier, "has_key", (497,15)->(497,22))
                      ^ Token(LeftParen, "(", (497,22)->(497,23))
                        ^^^^^^^^^^^^ Token(SingleQuoteString, "containerName", (497,24)->(497,36))
                                      ^ Token(RightParen, ")", (497,38)->(497,39))
                                        ^^ Token(And, "&&", (497,40)->(497,42))
                                           ^^^^^^ Token(Identifier, "symbol", (497,43)->(497,49))
                                                 ^ Token(Dot, ".", (497,49)->(497,50))
                                                  ^^^^^^^^^^^^^ Token(Identifier, "containerName", (497,50)->(497,63))
                                                                ^^ Token(NotEqualTo, "!=", (497,64)->(497,66))
                                                                     Token(SingleQuoteString, "", (497,68)->(497,68))
                                                                      Token(EndOfLine, "\n", (497,69)->(497,69))
      symName = $'{symbol.containerName}::{symName}'
      ^^^^^^^ Token(Identifier, "symName", (498,6)->(498,13))
              ^ Token(Equal, "=", (498,14)->(498,15))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "{symbol.containerName}::{symName}", (498,18)->(498,50))
                                                     Token(EndOfLine, "\n", (498,52)->(498,52))
    endif
    ^^^^^ Token(Identifier, "endif", (499,4)->(499,9))
          Token(EndOfLine, "\n", (499,9)->(499,9))
    symName ..= $' [{LspSymbolKindToName(symbol.kind)}]'
    ^^^^^^^ Token(Identifier, "symName", (500,4)->(500,11))
            ^^^ Token(StringConcatEquals, "..=", (500,12)->(500,15))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, " [{LspSymbolKindToName(symbol.kind)}]", (500,18)->(500,54))
                                                         Token(EndOfLine, "\n", (500,56)->(500,56))
    symName ..= ' ' .. MakeMenuName(
    ^^^^^^^ Token(Identifier, "symName", (501,4)->(501,11))
            ^^^ Token(StringConcatEquals, "..=", (501,12)->(501,15))
                  Token(SingleQuoteString, " ", (501,17)->(501,17))
                    ^^ Token(StringConcat, "..", (501,20)->(501,22))
                       ^^^^^^^^^^^^ Token(Identifier, "MakeMenuName", (501,23)->(501,35))
                                   ^ Token(LeftParen, "(", (501,35)->(501,36))
                                     Token(EndOfLine, "\n", (501,36)->(501,36))
		lspserver.workspaceSymbolPopup->popup_getpos().core_width,
  ^^^^^^^^^ Token(Identifier, "lspserver", (502,2)->(502,11))
           ^ Token(Dot, ".", (502,11)->(502,12))
            ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceSymbolPopup", (502,12)->(502,32))
                                ^^ Token(MethodArrow, "->", (502,32)->(502,34))
                                  ^^^^^^^^^^^^ Token(Identifier, "popup_getpos", (502,34)->(502,46))
                                              ^ Token(LeftParen, "(", (502,46)->(502,47))
                                               ^ Token(RightParen, ")", (502,47)->(502,48))
                                                ^ Token(Dot, ".", (502,48)->(502,49))
                                                 ^^^^^^^^^^ Token(Identifier, "core_width", (502,49)->(502,59))
                                                           ^ Token(Comma, ",", (502,59)->(502,60))
                                                             Token(EndOfLine, "\n", (502,60)->(502,60))
		fileName)
  ^^^^^^^^ Token(Identifier, "fileName", (503,2)->(503,10))
          ^ Token(RightParen, ")", (503,10)->(503,11))
            Token(EndOfLine, "\n", (503,11)->(503,11))

 Token(EndOfLine, "\n", (504,0)->(504,0))
    symbols->add({name: symName,
    ^^^^^^^ Token(Identifier, "symbols", (505,4)->(505,11))
           ^^ Token(MethodArrow, "->", (505,11)->(505,13))
             ^^^ Token(Identifier, "add", (505,13)->(505,16))
                ^ Token(LeftParen, "(", (505,16)->(505,17))
                 ^ Token(LeftBrace, "{", (505,17)->(505,18))
                  ^^^^ Token(Identifier, "name", (505,18)->(505,22))
                      ^^ Token(SpacedColon, ": ", (505,22)->(505,24))
                        ^^^^^^^ Token(Identifier, "symName", (505,24)->(505,31))
                               ^ Token(Comma, ",", (505,31)->(505,32))
                                 Token(EndOfLine, "\n", (505,32)->(505,32))
			file: fileName,
   ^^^^ Token(Identifier, "file", (506,3)->(506,7))
       ^^ Token(SpacedColon, ": ", (506,7)->(506,9))
         ^^^^^^^^ Token(Identifier, "fileName", (506,9)->(506,17))
                 ^ Token(Comma, ",", (506,17)->(506,18))
                   Token(EndOfLine, "\n", (506,18)->(506,18))
			pos: r.start})
   ^^^ Token(Identifier, "pos", (507,3)->(507,6))
      ^^ Token(SpacedColon, ": ", (507,6)->(507,8))
        ^ Token(Identifier, "r", (507,8)->(507,9))
         ^ Token(Dot, ".", (507,9)->(507,10))
          ^^^^^ Token(Identifier, "start", (507,10)->(507,15))
               ^ Token(RightBrace, "}", (507,15)->(507,16))
                ^ Token(RightParen, ")", (507,16)->(507,17))
                  Token(EndOfLine, "\n", (507,17)->(507,17))
  endfor
  ^^^^^^ Token(Identifier, "endfor", (508,2)->(508,8))
         Token(EndOfLine, "\n", (508,8)->(508,8))
  symbols->setwinvar(lspserver.workspaceSymbolPopup, 'LspSymbolTable')
  ^^^^^^^ Token(Identifier, "symbols", (509,2)->(509,9))
         ^^ Token(MethodArrow, "->", (509,9)->(509,11))
           ^^^^^^^^^ Token(Identifier, "setwinvar", (509,11)->(509,20))
                    ^ Token(LeftParen, "(", (509,20)->(509,21))
                     ^^^^^^^^^ Token(Identifier, "lspserver", (509,21)->(509,30))
                              ^ Token(Dot, ".", (509,30)->(509,31))
                               ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceSymbolPopup", (509,31)->(509,51))
                                                   ^ Token(Comma, ",", (509,51)->(509,52))
                                                      ^^^^^^^^^^^^^ Token(SingleQuoteString, "LspSymbolTable", (509,54)->(509,67))
                                                                     ^ Token(RightParen, ")", (509,69)->(509,70))
                                                                       Token(EndOfLine, "\n", (509,70)->(509,70))
  lspserver.workspaceSymbolPopup->popup_settext(
  ^^^^^^^^^ Token(Identifier, "lspserver", (510,2)->(510,11))
           ^ Token(Dot, ".", (510,11)->(510,12))
            ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceSymbolPopup", (510,12)->(510,32))
                                ^^ Token(MethodArrow, "->", (510,32)->(510,34))
                                  ^^^^^^^^^^^^^ Token(Identifier, "popup_settext", (510,34)->(510,47))
                                               ^ Token(LeftParen, "(", (510,47)->(510,48))
                                                 Token(EndOfLine, "\n", (510,48)->(510,48))
				symbols->copy()->mapnew('v:val.name'))
    ^^^^^^^ Token(Identifier, "symbols", (511,4)->(511,11))
           ^^ Token(MethodArrow, "->", (511,11)->(511,13))
             ^^^^ Token(Identifier, "copy", (511,13)->(511,17))
                 ^ Token(LeftParen, "(", (511,17)->(511,18))
                  ^ Token(RightParen, ")", (511,18)->(511,19))
                   ^^ Token(MethodArrow, "->", (511,19)->(511,21))
                     ^^^^^^ Token(Identifier, "mapnew", (511,21)->(511,27))
                           ^ Token(LeftParen, "(", (511,27)->(511,28))
                             ^^^^^^^^^ Token(SingleQuoteString, "v:val.name", (511,29)->(511,38))
                                        ^ Token(RightParen, ")", (511,40)->(511,41))
                                         ^ Token(RightParen, ")", (511,41)->(511,42))
                                           Token(EndOfLine, "\n", (511,42)->(511,42))
enddef
^^^^^^ Token(Identifier, "enddef", (512,0)->(512,6))
       Token(EndOfLine, "\n", (512,6)->(512,6))

 Token(EndOfLine, "\n", (513,0)->(513,0))
# process the 'textDocument/prepareCallHierarchy' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'textDocument/prepareCallHierarchy' reply from the LSP server", (514,0)->(514,75))
# Result: CallHierarchyItem[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CallHierarchyItem[] | null", (515,0)->(515,36))
def ProcessPrepareCallHierarchy(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (516,0)->(516,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessPrepareCallHierarchy", (516,4)->(516,31))
                               ^ Token(LeftParen, "(", (516,31)->(516,32))
                                ^^^^^^^^^ Token(Identifier, "lspserver", (516,32)->(516,41))
                                         ^^ Token(SpacedColon, ": ", (516,41)->(516,43))
                                           ^^^^ Token(Identifier, "dict", (516,43)->(516,47))
                                               ^ Token(AngleLeft, "<", (516,47)->(516,48))
                                                ^^^ Token(Identifier, "any", (516,48)->(516,51))
                                                   ^ Token(AngleRight, ">", (516,51)->(516,52))
                                                    ^ Token(Comma, ",", (516,52)->(516,53))
                                                      ^^^ Token(Identifier, "req", (516,54)->(516,57))
                                                         ^^ Token(SpacedColon, ": ", (516,57)->(516,59))
                                                           ^^^^ Token(Identifier, "dict", (516,59)->(516,63))
                                                               ^ Token(AngleLeft, "<", (516,63)->(516,64))
                                                                ^^^ Token(Identifier, "any", (516,64)->(516,67))
                                                                   ^ Token(AngleRight, ">", (516,67)->(516,68))
                                                                    ^ Token(Comma, ",", (516,68)->(516,69))
                                                                      ^^^^^ Token(Identifier, "reply", (516,70)->(516,75))
                                                                           ^^ Token(SpacedColon, ": ", (516,75)->(516,77))
                                                                             ^^^^ Token(Identifier, "dict", (516,77)->(516,81))
                                                                                 ^ Token(AngleLeft, "<", (516,81)->(516,82))
                                                                                  ^^^ Token(Identifier, "any", (516,82)->(516,85))
                                                                                     ^ Token(AngleRight, ">", (516,85)->(516,86))
                                                                                      ^ Token(RightParen, ")", (516,86)->(516,87))
                                                                                        Token(EndOfLine, "\n", (516,87)->(516,87))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (517,2)->(517,4))
     ^^^^^ Token(Identifier, "reply", (517,5)->(517,10))
          ^ Token(Dot, ".", (517,10)->(517,11))
           ^^^^^^ Token(Identifier, "result", (517,11)->(517,17))
                 ^^ Token(MethodArrow, "->", (517,17)->(517,19))
                   ^^^^^ Token(Identifier, "empty", (517,19)->(517,24))
                        ^ Token(LeftParen, "(", (517,24)->(517,25))
                         ^ Token(RightParen, ")", (517,25)->(517,26))
                           Token(EndOfLine, "\n", (517,26)->(517,26))
    if lspserver.callHierarchyType == 'incoming'
    ^^ Token(Identifier, "if", (518,4)->(518,6))
       ^^^^^^^^^ Token(Identifier, "lspserver", (518,7)->(518,16))
                ^ Token(Dot, ".", (518,16)->(518,17))
                 ^^^^^^^^^^^^^^^^^ Token(Identifier, "callHierarchyType", (518,17)->(518,34))
                                   ^^ Token(EqualTo, "==", (518,35)->(518,37))
                                       ^^^^^^^ Token(SingleQuoteString, "incoming", (518,39)->(518,46))
                                                 Token(EndOfLine, "\n", (518,48)->(518,48))
      util.WarnMsg('No incoming calls')
      ^^^^ Token(Identifier, "util", (519,6)->(519,10))
          ^ Token(Dot, ".", (519,10)->(519,11))
           ^^^^^^^ Token(Identifier, "WarnMsg", (519,11)->(519,18))
                  ^ Token(LeftParen, "(", (519,18)->(519,19))
                    ^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "No incoming calls", (519,20)->(519,36))
                                      ^ Token(RightParen, ")", (519,38)->(519,39))
                                        Token(EndOfLine, "\n", (519,39)->(519,39))
    else
    ^^^^ Token(Identifier, "else", (520,4)->(520,8))
         Token(EndOfLine, "\n", (520,8)->(520,8))
      util.WarnMsg('No outgoing calls')
      ^^^^ Token(Identifier, "util", (521,6)->(521,10))
          ^ Token(Dot, ".", (521,10)->(521,11))
           ^^^^^^^ Token(Identifier, "WarnMsg", (521,11)->(521,18))
                  ^ Token(LeftParen, "(", (521,18)->(521,19))
                    ^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "No outgoing calls", (521,20)->(521,36))
                                      ^ Token(RightParen, ")", (521,38)->(521,39))
                                        Token(EndOfLine, "\n", (521,39)->(521,39))
    endif
    ^^^^^ Token(Identifier, "endif", (522,4)->(522,9))
          Token(EndOfLine, "\n", (522,9)->(522,9))
    return
    ^^^^^^ Token(Identifier, "return", (523,4)->(523,10))
           Token(EndOfLine, "\n", (523,10)->(523,10))
  endif
  ^^^^^ Token(Identifier, "endif", (524,2)->(524,7))
        Token(EndOfLine, "\n", (524,7)->(524,7))

 Token(EndOfLine, "\n", (525,0)->(525,0))
  var choice: number = 1
  ^^^ Token(Identifier, "var", (526,2)->(526,5))
      ^^^^^^ Token(Identifier, "choice", (526,6)->(526,12))
            ^^ Token(SpacedColon, ": ", (526,12)->(526,14))
              ^^^^^^ Token(Identifier, "number", (526,14)->(526,20))
                     ^ Token(Equal, "=", (526,21)->(526,22))
                       ^ Token(Integer, "1", (526,23)->(526,24))
                         Token(EndOfLine, "\n", (526,24)->(526,24))
  if reply.result->len() > 1
  ^^ Token(Identifier, "if", (527,2)->(527,4))
     ^^^^^ Token(Identifier, "reply", (527,5)->(527,10))
          ^ Token(Dot, ".", (527,10)->(527,11))
           ^^^^^^ Token(Identifier, "result", (527,11)->(527,17))
                 ^^ Token(MethodArrow, "->", (527,17)->(527,19))
                   ^^^ Token(Identifier, "len", (527,19)->(527,22))
                      ^ Token(LeftParen, "(", (527,22)->(527,23))
                       ^ Token(RightParen, ")", (527,23)->(527,24))
                         ^ Token(GreaterThan, ">", (527,25)->(527,26))
                           ^ Token(Integer, "1", (527,27)->(527,28))
                             Token(EndOfLine, "\n", (527,28)->(527,28))
    var items: list<string> = ['Select a Call Hierarchy Item:']
    ^^^ Token(Identifier, "var", (528,4)->(528,7))
        ^^^^^ Token(Identifier, "items", (528,8)->(528,13))
             ^^ Token(SpacedColon, ": ", (528,13)->(528,15))
               ^^^^ Token(Identifier, "list", (528,15)->(528,19))
                   ^ Token(AngleLeft, "<", (528,19)->(528,20))
                    ^^^^^^ Token(Identifier, "string", (528,20)->(528,26))
                          ^ Token(GreaterThan, ">", (528,26)->(528,27))
                            ^ Token(Equal, "=", (528,28)->(528,29))
                              ^ Token(LeftBracket, "[", (528,30)->(528,31))
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "Select a Call Hierarchy Item:", (528,32)->(528,60))
                                                              ^ Token(RightBracket, "]", (528,62)->(528,63))
                                                                Token(EndOfLine, "\n", (528,63)->(528,63))
    for i in range(reply.result->len())
    ^^^ Token(Identifier, "for", (529,4)->(529,7))
        ^ Token(Identifier, "i", (529,8)->(529,9))
          ^^ Token(Identifier, "in", (529,10)->(529,12))
             ^^^^^ Token(Identifier, "range", (529,13)->(529,18))
                  ^ Token(LeftParen, "(", (529,18)->(529,19))
                   ^^^^^ Token(Identifier, "reply", (529,19)->(529,24))
                        ^ Token(Dot, ".", (529,24)->(529,25))
                         ^^^^^^ Token(Identifier, "result", (529,25)->(529,31))
                               ^^ Token(MethodArrow, "->", (529,31)->(529,33))
                                 ^^^ Token(Identifier, "len", (529,33)->(529,36))
                                    ^ Token(LeftParen, "(", (529,36)->(529,37))
                                     ^ Token(RightParen, ")", (529,37)->(529,38))
                                      ^ Token(RightParen, ")", (529,38)->(529,39))
                                        Token(EndOfLine, "\n", (529,39)->(529,39))
      items->add(printf("%d. %s", i + 1, reply.result[i].name))
      ^^^^^ Token(Identifier, "items", (530,6)->(530,11))
           ^^ Token(MethodArrow, "->", (530,11)->(530,13))
             ^^^ Token(Identifier, "add", (530,13)->(530,16))
                ^ Token(LeftParen, "(", (530,16)->(530,17))
                 ^^^^^^ Token(Identifier, "printf", (530,17)->(530,23))
                       ^ Token(LeftParen, "(", (530,23)->(530,24))
                         ^^^^^ Token(DoubleQuoteString, "%d. %s", (530,25)->(530,30))
                                ^ Token(Comma, ",", (530,32)->(530,33))
                                  ^ Token(Identifier, "i", (530,34)->(530,35))
                                    ^ Token(Plus, "+", (530,36)->(530,37))
                                      ^ Token(Integer, "1", (530,38)->(530,39))
                                       ^ Token(Comma, ",", (530,39)->(530,40))
                                         ^^^^^ Token(Identifier, "reply", (530,41)->(530,46))
                                              ^ Token(Dot, ".", (530,46)->(530,47))
                                               ^^^^^^ Token(Identifier, "result", (530,47)->(530,53))
                                                     ^ Token(LeftBracket, "[", (530,53)->(530,54))
                                                      ^ Token(Identifier, "i", (530,54)->(530,55))
                                                       ^ Token(RightBracket, "]", (530,55)->(530,56))
                                                        ^ Token(Dot, ".", (530,56)->(530,57))
                                                         ^^^^ Token(Identifier, "name", (530,57)->(530,61))
                                                             ^ Token(RightParen, ")", (530,61)->(530,62))
                                                              ^ Token(RightParen, ")", (530,62)->(530,63))
                                                                Token(EndOfLine, "\n", (530,63)->(530,63))
    endfor
    ^^^^^^ Token(Identifier, "endfor", (531,4)->(531,10))
           Token(EndOfLine, "\n", (531,10)->(531,10))
    choice = inputlist(items)
    ^^^^^^ Token(Identifier, "choice", (532,4)->(532,10))
           ^ Token(Equal, "=", (532,11)->(532,12))
             ^^^^^^^^^ Token(Identifier, "inputlist", (532,13)->(532,22))
                      ^ Token(LeftParen, "(", (532,22)->(532,23))
                       ^^^^^ Token(Identifier, "items", (532,23)->(532,28))
                            ^ Token(RightParen, ")", (532,28)->(532,29))
                              Token(EndOfLine, "\n", (532,29)->(532,29))
    if choice < 1 || choice > items->len()
    ^^ Token(Identifier, "if", (533,4)->(533,6))
       ^^^^^^ Token(Identifier, "choice", (533,7)->(533,13))
              ^ Token(LessThan, "<", (533,14)->(533,15))
                ^ Token(Integer, "1", (533,16)->(533,17))
                  ^^ Token(Or, "||", (533,18)->(533,20))
                     ^^^^^^ Token(Identifier, "choice", (533,21)->(533,27))
                            ^ Token(GreaterThan, ">", (533,28)->(533,29))
                              ^^^^^ Token(Identifier, "items", (533,30)->(533,35))
                                   ^^ Token(MethodArrow, "->", (533,35)->(533,37))
                                     ^^^ Token(Identifier, "len", (533,37)->(533,40))
                                        ^ Token(LeftParen, "(", (533,40)->(533,41))
                                         ^ Token(RightParen, ")", (533,41)->(533,42))
                                           Token(EndOfLine, "\n", (533,42)->(533,42))
      return
      ^^^^^^ Token(Identifier, "return", (534,6)->(534,12))
             Token(EndOfLine, "\n", (534,12)->(534,12))
    endif
    ^^^^^ Token(Identifier, "endif", (535,4)->(535,9))
          Token(EndOfLine, "\n", (535,9)->(535,9))
  endif
  ^^^^^ Token(Identifier, "endif", (536,2)->(536,7))
        Token(EndOfLine, "\n", (536,7)->(536,7))

 Token(EndOfLine, "\n", (537,0)->(537,0))
  if lspserver.callHierarchyType == 'incoming'
  ^^ Token(Identifier, "if", (538,2)->(538,4))
     ^^^^^^^^^ Token(Identifier, "lspserver", (538,5)->(538,14))
              ^ Token(Dot, ".", (538,14)->(538,15))
               ^^^^^^^^^^^^^^^^^ Token(Identifier, "callHierarchyType", (538,15)->(538,32))
                                 ^^ Token(EqualTo, "==", (538,33)->(538,35))
                                     ^^^^^^^ Token(SingleQuoteString, "incoming", (538,37)->(538,44))
                                               Token(EndOfLine, "\n", (538,46)->(538,46))
    g:LspGetIncomingCalls(reply.result[choice - 1])
    ^ Token(Identifier, "g", (539,4)->(539,5))
     ^ Token(Colon, ":", (539,5)->(539,6))
      ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspGetIncomingCalls", (539,6)->(539,25))
                         ^ Token(LeftParen, "(", (539,25)->(539,26))
                          ^^^^^ Token(Identifier, "reply", (539,26)->(539,31))
                               ^ Token(Dot, ".", (539,31)->(539,32))
                                ^^^^^^ Token(Identifier, "result", (539,32)->(539,38))
                                      ^ Token(LeftBracket, "[", (539,38)->(539,39))
                                       ^^^^^^ Token(Identifier, "choice", (539,39)->(539,45))
                                              ^ Token(Minus, "-", (539,46)->(539,47))
                                                ^ Token(Integer, "1", (539,48)->(539,49))
                                                 ^ Token(RightBracket, "]", (539,49)->(539,50))
                                                  ^ Token(RightParen, ")", (539,50)->(539,51))
                                                    Token(EndOfLine, "\n", (539,51)->(539,51))
  else
  ^^^^ Token(Identifier, "else", (540,2)->(540,6))
       Token(EndOfLine, "\n", (540,6)->(540,6))
    g:LspGetOutgoingCalls(reply.result[choice - 1])
    ^ Token(Identifier, "g", (541,4)->(541,5))
     ^ Token(Colon, ":", (541,5)->(541,6))
      ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "LspGetOutgoingCalls", (541,6)->(541,25))
                         ^ Token(LeftParen, "(", (541,25)->(541,26))
                          ^^^^^ Token(Identifier, "reply", (541,26)->(541,31))
                               ^ Token(Dot, ".", (541,31)->(541,32))
                                ^^^^^^ Token(Identifier, "result", (541,32)->(541,38))
                                      ^ Token(LeftBracket, "[", (541,38)->(541,39))
                                       ^^^^^^ Token(Identifier, "choice", (541,39)->(541,45))
                                              ^ Token(Minus, "-", (541,46)->(541,47))
                                                ^ Token(Integer, "1", (541,48)->(541,49))
                                                 ^ Token(RightBracket, "]", (541,49)->(541,50))
                                                  ^ Token(RightParen, ")", (541,50)->(541,51))
                                                    Token(EndOfLine, "\n", (541,51)->(541,51))
  endif
  ^^^^^ Token(Identifier, "endif", (542,2)->(542,7))
        Token(EndOfLine, "\n", (542,7)->(542,7))
enddef
^^^^^^ Token(Identifier, "enddef", (543,0)->(543,6))
       Token(EndOfLine, "\n", (543,6)->(543,6))

 Token(EndOfLine, "\n", (544,0)->(544,0))
# process the 'callHierarchy/incomingCalls' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'callHierarchy/incomingCalls' reply from the LSP server", (545,0)->(545,69))
# Result: CallHierarchyIncomingCall[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CallHierarchyIncomingCall[] | null", (546,0)->(546,44))
def ProcessIncomingCalls(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (547,0)->(547,3))
    ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessIncomingCalls", (547,4)->(547,24))
                        ^ Token(LeftParen, "(", (547,24)->(547,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (547,25)->(547,34))
                                  ^^ Token(SpacedColon, ": ", (547,34)->(547,36))
                                    ^^^^ Token(Identifier, "dict", (547,36)->(547,40))
                                        ^ Token(AngleLeft, "<", (547,40)->(547,41))
                                         ^^^ Token(Identifier, "any", (547,41)->(547,44))
                                            ^ Token(AngleRight, ">", (547,44)->(547,45))
                                             ^ Token(Comma, ",", (547,45)->(547,46))
                                               ^^^ Token(Identifier, "req", (547,47)->(547,50))
                                                  ^^ Token(SpacedColon, ": ", (547,50)->(547,52))
                                                    ^^^^ Token(Identifier, "dict", (547,52)->(547,56))
                                                        ^ Token(AngleLeft, "<", (547,56)->(547,57))
                                                         ^^^ Token(Identifier, "any", (547,57)->(547,60))
                                                            ^ Token(AngleRight, ">", (547,60)->(547,61))
                                                             ^ Token(Comma, ",", (547,61)->(547,62))
                                                               ^^^^^ Token(Identifier, "reply", (547,63)->(547,68))
                                                                    ^^ Token(SpacedColon, ": ", (547,68)->(547,70))
                                                                      ^^^^ Token(Identifier, "dict", (547,70)->(547,74))
                                                                          ^ Token(AngleLeft, "<", (547,74)->(547,75))
                                                                           ^^^ Token(Identifier, "any", (547,75)->(547,78))
                                                                              ^ Token(AngleRight, ">", (547,78)->(547,79))
                                                                               ^ Token(RightParen, ")", (547,79)->(547,80))
                                                                                 Token(EndOfLine, "\n", (547,80)->(547,80))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (548,2)->(548,4))
     ^^^^^ Token(Identifier, "reply", (548,5)->(548,10))
          ^ Token(Dot, ".", (548,10)->(548,11))
           ^^^^^^ Token(Identifier, "result", (548,11)->(548,17))
                 ^^ Token(MethodArrow, "->", (548,17)->(548,19))
                   ^^^^^ Token(Identifier, "empty", (548,19)->(548,24))
                        ^ Token(LeftParen, "(", (548,24)->(548,25))
                         ^ Token(RightParen, ")", (548,25)->(548,26))
                           Token(EndOfLine, "\n", (548,26)->(548,26))
    return
    ^^^^^^ Token(Identifier, "return", (549,4)->(549,10))
           Token(EndOfLine, "\n", (549,10)->(549,10))
  endif
  ^^^^^ Token(Identifier, "endif", (550,2)->(550,7))
        Token(EndOfLine, "\n", (550,7)->(550,7))

 Token(EndOfLine, "\n", (551,0)->(551,0))
  callhier.IncomingCalls(reply.result)
  ^^^^^^^^ Token(Identifier, "callhier", (552,2)->(552,10))
          ^ Token(Dot, ".", (552,10)->(552,11))
           ^^^^^^^^^^^^^ Token(Identifier, "IncomingCalls", (552,11)->(552,24))
                        ^ Token(LeftParen, "(", (552,24)->(552,25))
                         ^^^^^ Token(Identifier, "reply", (552,25)->(552,30))
                              ^ Token(Dot, ".", (552,30)->(552,31))
                               ^^^^^^ Token(Identifier, "result", (552,31)->(552,37))
                                     ^ Token(RightParen, ")", (552,37)->(552,38))
                                       Token(EndOfLine, "\n", (552,38)->(552,38))
enddef
^^^^^^ Token(Identifier, "enddef", (553,0)->(553,6))
       Token(EndOfLine, "\n", (553,6)->(553,6))

 Token(EndOfLine, "\n", (554,0)->(554,0))
# process the 'callHierarchy/outgoingCalls' reply from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the 'callHierarchy/outgoingCalls' reply from the LSP server", (555,0)->(555,69))
# Result: CallHierarchyOutgoingCall[] | null
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Result: CallHierarchyOutgoingCall[] | null", (556,0)->(556,44))
def ProcessOutgoingCalls(lspserver: dict<any>, req: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (557,0)->(557,3))
    ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessOutgoingCalls", (557,4)->(557,24))
                        ^ Token(LeftParen, "(", (557,24)->(557,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (557,25)->(557,34))
                                  ^^ Token(SpacedColon, ": ", (557,34)->(557,36))
                                    ^^^^ Token(Identifier, "dict", (557,36)->(557,40))
                                        ^ Token(AngleLeft, "<", (557,40)->(557,41))
                                         ^^^ Token(Identifier, "any", (557,41)->(557,44))
                                            ^ Token(AngleRight, ">", (557,44)->(557,45))
                                             ^ Token(Comma, ",", (557,45)->(557,46))
                                               ^^^ Token(Identifier, "req", (557,47)->(557,50))
                                                  ^^ Token(SpacedColon, ": ", (557,50)->(557,52))
                                                    ^^^^ Token(Identifier, "dict", (557,52)->(557,56))
                                                        ^ Token(AngleLeft, "<", (557,56)->(557,57))
                                                         ^^^ Token(Identifier, "any", (557,57)->(557,60))
                                                            ^ Token(AngleRight, ">", (557,60)->(557,61))
                                                             ^ Token(Comma, ",", (557,61)->(557,62))
                                                               ^^^^^ Token(Identifier, "reply", (557,63)->(557,68))
                                                                    ^^ Token(SpacedColon, ": ", (557,68)->(557,70))
                                                                      ^^^^ Token(Identifier, "dict", (557,70)->(557,74))
                                                                          ^ Token(AngleLeft, "<", (557,74)->(557,75))
                                                                           ^^^ Token(Identifier, "any", (557,75)->(557,78))
                                                                              ^ Token(AngleRight, ">", (557,78)->(557,79))
                                                                               ^ Token(RightParen, ")", (557,79)->(557,80))
                                                                                 Token(EndOfLine, "\n", (557,80)->(557,80))
  if reply.result->empty()
  ^^ Token(Identifier, "if", (558,2)->(558,4))
     ^^^^^ Token(Identifier, "reply", (558,5)->(558,10))
          ^ Token(Dot, ".", (558,10)->(558,11))
           ^^^^^^ Token(Identifier, "result", (558,11)->(558,17))
                 ^^ Token(MethodArrow, "->", (558,17)->(558,19))
                   ^^^^^ Token(Identifier, "empty", (558,19)->(558,24))
                        ^ Token(LeftParen, "(", (558,24)->(558,25))
                         ^ Token(RightParen, ")", (558,25)->(558,26))
                           Token(EndOfLine, "\n", (558,26)->(558,26))
    return
    ^^^^^^ Token(Identifier, "return", (559,4)->(559,10))
           Token(EndOfLine, "\n", (559,10)->(559,10))
  endif
  ^^^^^ Token(Identifier, "endif", (560,2)->(560,7))
        Token(EndOfLine, "\n", (560,7)->(560,7))

 Token(EndOfLine, "\n", (561,0)->(561,0))
  callhier.OutgoingCalls(reply.result)
  ^^^^^^^^ Token(Identifier, "callhier", (562,2)->(562,10))
          ^ Token(Dot, ".", (562,10)->(562,11))
           ^^^^^^^^^^^^^ Token(Identifier, "OutgoingCalls", (562,11)->(562,24))
                        ^ Token(LeftParen, "(", (562,24)->(562,25))
                         ^^^^^ Token(Identifier, "reply", (562,25)->(562,30))
                              ^ Token(Dot, ".", (562,30)->(562,31))
                               ^^^^^^ Token(Identifier, "result", (562,31)->(562,37))
                                     ^ Token(RightParen, ")", (562,37)->(562,38))
                                       Token(EndOfLine, "\n", (562,38)->(562,38))
enddef
^^^^^^ Token(Identifier, "enddef", (563,0)->(563,6))
       Token(EndOfLine, "\n", (563,6)->(563,6))

 Token(EndOfLine, "\n", (564,0)->(564,0))
# Process various reply messages from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Process various reply messages from the LSP server", (565,0)->(565,52))
export def ProcessReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void
^^^^^^ Token(Identifier, "export", (566,0)->(566,6))
       ^^^ Token(Identifier, "def", (566,7)->(566,10))
           ^^^^^^^^^^^^ Token(Identifier, "ProcessReply", (566,11)->(566,23))
                       ^ Token(LeftParen, "(", (566,23)->(566,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (566,24)->(566,33))
                                 ^^ Token(SpacedColon, ": ", (566,33)->(566,35))
                                   ^^^^ Token(Identifier, "dict", (566,35)->(566,39))
                                       ^ Token(AngleLeft, "<", (566,39)->(566,40))
                                        ^^^ Token(Identifier, "any", (566,40)->(566,43))
                                           ^ Token(AngleRight, ">", (566,43)->(566,44))
                                            ^ Token(Comma, ",", (566,44)->(566,45))
                                              ^^^ Token(Identifier, "req", (566,46)->(566,49))
                                                 ^^ Token(SpacedColon, ": ", (566,49)->(566,51))
                                                   ^^^^ Token(Identifier, "dict", (566,51)->(566,55))
                                                       ^ Token(AngleLeft, "<", (566,55)->(566,56))
                                                        ^^^ Token(Identifier, "any", (566,56)->(566,59))
                                                           ^ Token(AngleRight, ">", (566,59)->(566,60))
                                                            ^ Token(Comma, ",", (566,60)->(566,61))
                                                              ^^^^^ Token(Identifier, "reply", (566,62)->(566,67))
                                                                   ^^ Token(SpacedColon, ": ", (566,67)->(566,69))
                                                                     ^^^^ Token(Identifier, "dict", (566,69)->(566,73))
                                                                         ^ Token(AngleLeft, "<", (566,73)->(566,74))
                                                                          ^^^ Token(Identifier, "any", (566,74)->(566,77))
                                                                             ^ Token(AngleRight, ">", (566,77)->(566,78))
                                                                              ^ Token(RightParen, ")", (566,78)->(566,79))
                                                                               ^^ Token(SpacedColon, ": ", (566,79)->(566,81))
                                                                                 ^^^^ Token(Identifier, "void", (566,81)->(566,85))
                                                                                      Token(EndOfLine, "\n", (566,85)->(566,85))
  var lsp_reply_handlers: dict<func> =
  ^^^ Token(Identifier, "var", (567,2)->(567,5))
      ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_reply_handlers", (567,6)->(567,24))
                        ^^ Token(SpacedColon, ": ", (567,24)->(567,26))
                          ^^^^ Token(Identifier, "dict", (567,26)->(567,30))
                              ^ Token(AngleLeft, "<", (567,30)->(567,31))
                               ^^^^ Token(Identifier, "func", (567,31)->(567,35))
                                   ^ Token(GreaterThan, ">", (567,35)->(567,36))
                                     ^ Token(Equal, "=", (567,37)->(567,38))
                                       Token(EndOfLine, "\n", (567,38)->(567,38))
    {
    ^ Token(LeftBrace, "{", (568,4)->(568,5))
      Token(EndOfLine, "\n", (568,5)->(568,5))
      'initialize': ProcessInitializeReply,
       ^^^^^^^^^ Token(SingleQuoteString, "initialize", (569,7)->(569,16))
                  ^^ Token(SpacedColon, ": ", (569,18)->(569,20))
                    ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessInitializeReply", (569,20)->(569,42))
                                          ^ Token(Comma, ",", (569,42)->(569,43))
                                            Token(EndOfLine, "\n", (569,43)->(569,43))
      'shutdown': ProcessShutdownReply,
       ^^^^^^^ Token(SingleQuoteString, "shutdown", (570,7)->(570,14))
                ^^ Token(SpacedColon, ": ", (570,16)->(570,18))
                  ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessShutdownReply", (570,18)->(570,38))
                                      ^ Token(Comma, ",", (570,38)->(570,39))
                                        Token(EndOfLine, "\n", (570,39)->(570,39))
      'textDocument/signatureHelp': ProcessSignaturehelpReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/signatureHelp", (571,7)->(571,32))
                                  ^^ Token(SpacedColon, ": ", (571,34)->(571,36))
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessSignaturehelpReply", (571,36)->(571,61))
                                                             ^ Token(Comma, ",", (571,61)->(571,62))
                                                               Token(EndOfLine, "\n", (571,62)->(571,62))
      'textDocument/completion': ProcessCompletionReply,
       ^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/completion", (572,7)->(572,29))
                               ^^ Token(SpacedColon, ": ", (572,31)->(572,33))
                                 ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCompletionReply", (572,33)->(572,55))
                                                       ^ Token(Comma, ",", (572,55)->(572,56))
                                                         Token(EndOfLine, "\n", (572,56)->(572,56))
      'textDocument/hover': ProcessHoverReply,
       ^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/hover", (573,7)->(573,24))
                          ^^ Token(SpacedColon, ": ", (573,26)->(573,28))
                            ^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessHoverReply", (573,28)->(573,45))
                                             ^ Token(Comma, ",", (573,45)->(573,46))
                                               Token(EndOfLine, "\n", (573,46)->(573,46))
      'textDocument/references': ProcessReferencesReply,
       ^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/references", (574,7)->(574,29))
                               ^^ Token(SpacedColon, ": ", (574,31)->(574,33))
                                 ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessReferencesReply", (574,33)->(574,55))
                                                       ^ Token(Comma, ",", (574,55)->(574,56))
                                                         Token(EndOfLine, "\n", (574,56)->(574,56))
      'textDocument/documentHighlight': ProcessDocHighlightReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/documentHighlight", (575,7)->(575,36))
                                      ^^ Token(SpacedColon, ": ", (575,38)->(575,40))
                                        ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocHighlightReply", (575,40)->(575,64))
                                                                ^ Token(Comma, ",", (575,64)->(575,65))
                                                                  Token(EndOfLine, "\n", (575,65)->(575,65))
      'textDocument/documentSymbol': ProcessDocSymbolReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/documentSymbol", (576,7)->(576,33))
                                   ^^ Token(SpacedColon, ": ", (576,35)->(576,37))
                                     ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDocSymbolReply", (576,37)->(576,58))
                                                          ^ Token(Comma, ",", (576,58)->(576,59))
                                                            Token(EndOfLine, "\n", (576,59)->(576,59))
      'textDocument/codeAction': ProcessCodeActionReply,
       ^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/codeAction", (577,7)->(577,29))
                               ^^ Token(SpacedColon, ": ", (577,31)->(577,33))
                                 ^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessCodeActionReply", (577,33)->(577,55))
                                                       ^ Token(Comma, ",", (577,55)->(577,56))
                                                         Token(EndOfLine, "\n", (577,56)->(577,56))
      'textDocument/foldingRange': ProcessFoldingRangeReply,
       ^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/foldingRange", (578,7)->(578,31))
                                 ^^ Token(SpacedColon, ": ", (578,33)->(578,35))
                                   ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessFoldingRangeReply", (578,35)->(578,59))
                                                           ^ Token(Comma, ",", (578,59)->(578,60))
                                                             Token(EndOfLine, "\n", (578,60)->(578,60))
      'workspace/executeCommand': ProcessWorkspaceExecuteReply,
       ^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/executeCommand", (579,7)->(579,30))
                                ^^ Token(SpacedColon, ": ", (579,32)->(579,34))
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceExecuteReply", (579,34)->(579,62))
                                                              ^ Token(Comma, ",", (579,62)->(579,63))
                                                                Token(EndOfLine, "\n", (579,63)->(579,63))
      'workspace/symbol': ProcessWorkspaceSymbolReply,
       ^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/symbol", (580,7)->(580,22))
                        ^^ Token(SpacedColon, ": ", (580,24)->(580,26))
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceSymbolReply", (580,26)->(580,53))
                                                     ^ Token(Comma, ",", (580,53)->(580,54))
                                                       Token(EndOfLine, "\n", (580,54)->(580,54))
      'textDocument/prepareCallHierarchy': ProcessPrepareCallHierarchy,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/prepareCallHierarchy", (581,7)->(581,39))
                                         ^^ Token(SpacedColon, ": ", (581,41)->(581,43))
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessPrepareCallHierarchy", (581,43)->(581,70))
                                                                      ^ Token(Comma, ",", (581,70)->(581,71))
                                                                        Token(EndOfLine, "\n", (581,71)->(581,71))
      'callHierarchy/incomingCalls': ProcessIncomingCalls,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "callHierarchy/incomingCalls", (582,7)->(582,33))
                                   ^^ Token(SpacedColon, ": ", (582,35)->(582,37))
                                     ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessIncomingCalls", (582,37)->(582,57))
                                                         ^ Token(Comma, ",", (582,57)->(582,58))
                                                           Token(EndOfLine, "\n", (582,58)->(582,58))
      'callHierarchy/outgoingCalls': ProcessOutgoingCalls
       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "callHierarchy/outgoingCalls", (583,7)->(583,33))
                                   ^^ Token(SpacedColon, ": ", (583,35)->(583,37))
                                     ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessOutgoingCalls", (583,37)->(583,57))
                                                          Token(EndOfLine, "\n", (583,57)->(583,57))
    }
    ^ Token(RightBrace, "}", (584,4)->(584,5))
      Token(EndOfLine, "\n", (584,5)->(584,5))

 Token(EndOfLine, "\n", (585,0)->(585,0))
  if lsp_reply_handlers->has_key(req.method)
  ^^ Token(Identifier, "if", (586,2)->(586,4))
     ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_reply_handlers", (586,5)->(586,23))
                       ^^ Token(MethodArrow, "->", (586,23)->(586,25))
                         ^^^^^^^ Token(Identifier, "has_key", (586,25)->(586,32))
                                ^ Token(LeftParen, "(", (586,32)->(586,33))
                                 ^^^ Token(Identifier, "req", (586,33)->(586,36))
                                    ^ Token(Dot, ".", (586,36)->(586,37))
                                     ^^^^^^ Token(Identifier, "method", (586,37)->(586,43))
                                           ^ Token(RightParen, ")", (586,43)->(586,44))
                                             Token(EndOfLine, "\n", (586,44)->(586,44))
    lsp_reply_handlers[req.method](lspserver, req, reply)
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_reply_handlers", (587,4)->(587,22))
                      ^ Token(LeftBracket, "[", (587,22)->(587,23))
                       ^^^ Token(Identifier, "req", (587,23)->(587,26))
                          ^ Token(Dot, ".", (587,26)->(587,27))
                           ^^^^^^ Token(Identifier, "method", (587,27)->(587,33))
                                 ^ Token(RightBracket, "]", (587,33)->(587,34))
                                  ^ Token(LeftParen, "(", (587,34)->(587,35))
                                   ^^^^^^^^^ Token(Identifier, "lspserver", (587,35)->(587,44))
                                            ^ Token(Comma, ",", (587,44)->(587,45))
                                              ^^^ Token(Identifier, "req", (587,46)->(587,49))
                                                 ^ Token(Comma, ",", (587,49)->(587,50))
                                                   ^^^^^ Token(Identifier, "reply", (587,51)->(587,56))
                                                        ^ Token(RightParen, ")", (587,56)->(587,57))
                                                          Token(EndOfLine, "\n", (587,57)->(587,57))
  else
  ^^^^ Token(Identifier, "else", (588,2)->(588,6))
       Token(EndOfLine, "\n", (588,6)->(588,6))
    util.ErrMsg($'Error: Unsupported reply received from LSP server: {reply->string()} for request: {req->string()}')
    ^^^^ Token(Identifier, "util", (589,4)->(589,8))
        ^ Token(Dot, ".", (589,8)->(589,9))
         ^^^^^^ Token(Identifier, "ErrMsg", (589,9)->(589,15))
               ^ Token(LeftParen, "(", (589,15)->(589,16))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported reply received from LSP server: {reply->string()} for request: {req->string()}", (589,18)->(589,114))
                                                                                                                    ^ Token(RightParen, ")", (589,116)->(589,117))
                                                                                                                      Token(EndOfLine, "\n", (589,117)->(589,117))
  endif
  ^^^^^ Token(Identifier, "endif", (590,2)->(590,7))
        Token(EndOfLine, "\n", (590,7)->(590,7))
enddef
^^^^^^ Token(Identifier, "enddef", (591,0)->(591,6))
       Token(EndOfLine, "\n", (591,6)->(591,6))

 Token(EndOfLine, "\n", (592,0)->(592,0))
# process a diagnostic notification message from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process a diagnostic notification message from the LSP server", (593,0)->(593,63))
# Notification: textDocument/publishDiagnostics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Notification: textDocument/publishDiagnostics", (594,0)->(594,47))
# Param: PublishDiagnosticsParams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: PublishDiagnosticsParams", (595,0)->(595,33))
def ProcessDiagNotif(lspserver: dict<any>, reply: dict<any>): void
^^^ Token(Identifier, "def", (596,0)->(596,3))
    ^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDiagNotif", (596,4)->(596,20))
                    ^ Token(LeftParen, "(", (596,20)->(596,21))
                     ^^^^^^^^^ Token(Identifier, "lspserver", (596,21)->(596,30))
                              ^^ Token(SpacedColon, ": ", (596,30)->(596,32))
                                ^^^^ Token(Identifier, "dict", (596,32)->(596,36))
                                    ^ Token(AngleLeft, "<", (596,36)->(596,37))
                                     ^^^ Token(Identifier, "any", (596,37)->(596,40))
                                        ^ Token(AngleRight, ">", (596,40)->(596,41))
                                         ^ Token(Comma, ",", (596,41)->(596,42))
                                           ^^^^^ Token(Identifier, "reply", (596,43)->(596,48))
                                                ^^ Token(SpacedColon, ": ", (596,48)->(596,50))
                                                  ^^^^ Token(Identifier, "dict", (596,50)->(596,54))
                                                      ^ Token(AngleLeft, "<", (596,54)->(596,55))
                                                       ^^^ Token(Identifier, "any", (596,55)->(596,58))
                                                          ^ Token(AngleRight, ">", (596,58)->(596,59))
                                                           ^ Token(RightParen, ")", (596,59)->(596,60))
                                                            ^^ Token(SpacedColon, ": ", (596,60)->(596,62))
                                                              ^^^^ Token(Identifier, "void", (596,62)->(596,66))
                                                                   Token(EndOfLine, "\n", (596,66)->(596,66))
  diag.DiagNotification(lspserver, reply.params.uri, reply.params.diagnostics)
  ^^^^ Token(Identifier, "diag", (597,2)->(597,6))
      ^ Token(Dot, ".", (597,6)->(597,7))
       ^^^^^^^^^^^^^^^^ Token(Identifier, "DiagNotification", (597,7)->(597,23))
                       ^ Token(LeftParen, "(", (597,23)->(597,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (597,24)->(597,33))
                                 ^ Token(Comma, ",", (597,33)->(597,34))
                                   ^^^^^ Token(Identifier, "reply", (597,35)->(597,40))
                                        ^ Token(Dot, ".", (597,40)->(597,41))
                                         ^^^^^^ Token(Identifier, "params", (597,41)->(597,47))
                                               ^ Token(Dot, ".", (597,47)->(597,48))
                                                ^^^ Token(Identifier, "uri", (597,48)->(597,51))
                                                   ^ Token(Comma, ",", (597,51)->(597,52))
                                                     ^^^^^ Token(Identifier, "reply", (597,53)->(597,58))
                                                          ^ Token(Dot, ".", (597,58)->(597,59))
                                                           ^^^^^^ Token(Identifier, "params", (597,59)->(597,65))
                                                                 ^ Token(Dot, ".", (597,65)->(597,66))
                                                                  ^^^^^^^^^^^ Token(Identifier, "diagnostics", (597,66)->(597,77))
                                                                             ^ Token(RightParen, ")", (597,77)->(597,78))
                                                                               Token(EndOfLine, "\n", (597,78)->(597,78))
enddef
^^^^^^ Token(Identifier, "enddef", (598,0)->(598,6))
       Token(EndOfLine, "\n", (598,6)->(598,6))

 Token(EndOfLine, "\n", (599,0)->(599,0))
# process a show notification message from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process a show notification message from the LSP server", (600,0)->(600,57))
# Notification: window/showMessage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Notification: window/showMessage", (601,0)->(601,34))
# Param: ShowMessageParams
^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: ShowMessageParams", (602,0)->(602,26))
def ProcessShowMsgNotif(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (603,0)->(603,3))
    ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessShowMsgNotif", (603,4)->(603,23))
                       ^ Token(LeftParen, "(", (603,23)->(603,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (603,24)->(603,33))
                                 ^^ Token(SpacedColon, ": ", (603,33)->(603,35))
                                   ^^^^ Token(Identifier, "dict", (603,35)->(603,39))
                                       ^ Token(AngleLeft, "<", (603,39)->(603,40))
                                        ^^^ Token(Identifier, "any", (603,40)->(603,43))
                                           ^ Token(AngleRight, ">", (603,43)->(603,44))
                                            ^ Token(Comma, ",", (603,44)->(603,45))
                                              ^^^^^ Token(Identifier, "reply", (603,46)->(603,51))
                                                   ^^ Token(SpacedColon, ": ", (603,51)->(603,53))
                                                     ^^^^ Token(Identifier, "dict", (603,53)->(603,57))
                                                         ^ Token(AngleLeft, "<", (603,57)->(603,58))
                                                          ^^^ Token(Identifier, "any", (603,58)->(603,61))
                                                             ^ Token(AngleRight, ">", (603,61)->(603,62))
                                                              ^ Token(RightParen, ")", (603,62)->(603,63))
                                                                Token(EndOfLine, "\n", (603,63)->(603,63))
  var msgType: list<string> = ['', 'Error: ', 'Warning: ', 'Info: ', 'Log: ']
  ^^^ Token(Identifier, "var", (604,2)->(604,5))
      ^^^^^^^ Token(Identifier, "msgType", (604,6)->(604,13))
             ^^ Token(SpacedColon, ": ", (604,13)->(604,15))
               ^^^^ Token(Identifier, "list", (604,15)->(604,19))
                   ^ Token(AngleLeft, "<", (604,19)->(604,20))
                    ^^^^^^ Token(Identifier, "string", (604,20)->(604,26))
                          ^ Token(GreaterThan, ">", (604,26)->(604,27))
                            ^ Token(Equal, "=", (604,28)->(604,29))
                              ^ Token(LeftBracket, "[", (604,30)->(604,31))
                                 Token(SingleQuoteString, "", (604,32)->(604,32))
                                 ^ Token(Comma, ",", (604,33)->(604,34))
                                    ^^^^^^ Token(SingleQuoteString, "Error: ", (604,36)->(604,42))
                                            ^ Token(Comma, ",", (604,44)->(604,45))
                                               ^^^^^^^^ Token(SingleQuoteString, "Warning: ", (604,47)->(604,55))
                                                         ^ Token(Comma, ",", (604,57)->(604,58))
                                                            ^^^^^ Token(SingleQuoteString, "Info: ", (604,60)->(604,65))
                                                                   ^ Token(Comma, ",", (604,67)->(604,68))
                                                                      ^^^^ Token(SingleQuoteString, "Log: ", (604,70)->(604,74))
                                                                            ^ Token(RightBracket, "]", (604,76)->(604,77))
                                                                              Token(EndOfLine, "\n", (604,77)->(604,77))
  if reply.params.type == 4
  ^^ Token(Identifier, "if", (605,2)->(605,4))
     ^^^^^ Token(Identifier, "reply", (605,5)->(605,10))
          ^ Token(Dot, ".", (605,10)->(605,11))
           ^^^^^^ Token(Identifier, "params", (605,11)->(605,17))
                 ^ Token(Dot, ".", (605,17)->(605,18))
                  ^^^^ Token(Identifier, "type", (605,18)->(605,22))
                       ^^ Token(EqualTo, "==", (605,23)->(605,25))
                          ^ Token(Integer, "4", (605,26)->(605,27))
                            Token(EndOfLine, "\n", (605,27)->(605,27))
    # ignore log messages from the LSP server (too chatty)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# ignore log messages from the LSP server (too chatty)", (606,4)->(606,58))
    # TODO: Add a configuration to control the message level that will be
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# TODO: Add a configuration to control the message level that will be", (607,4)->(607,73))
    # displayed. Also store these messages and provide a command to display
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# displayed. Also store these messages and provide a command to display", (608,4)->(608,75))
    # them.
    ^^^^^^^ Token(Comment, "# them.", (609,4)->(609,11))
    return
    ^^^^^^ Token(Identifier, "return", (610,4)->(610,10))
           Token(EndOfLine, "\n", (610,10)->(610,10))
  endif
  ^^^^^ Token(Identifier, "endif", (611,2)->(611,7))
        Token(EndOfLine, "\n", (611,7)->(611,7))
  var mtype: string = 'Log: '
  ^^^ Token(Identifier, "var", (612,2)->(612,5))
      ^^^^^ Token(Identifier, "mtype", (612,6)->(612,11))
           ^^ Token(SpacedColon, ": ", (612,11)->(612,13))
             ^^^^^^ Token(Identifier, "string", (612,13)->(612,19))
                    ^ Token(Equal, "=", (612,20)->(612,21))
                       ^^^^ Token(SingleQuoteString, "Log: ", (612,23)->(612,27))
                              Token(EndOfLine, "\n", (612,29)->(612,29))
  if reply.params.type > 0 && reply.params.type < 5
  ^^ Token(Identifier, "if", (613,2)->(613,4))
     ^^^^^ Token(Identifier, "reply", (613,5)->(613,10))
          ^ Token(Dot, ".", (613,10)->(613,11))
           ^^^^^^ Token(Identifier, "params", (613,11)->(613,17))
                 ^ Token(Dot, ".", (613,17)->(613,18))
                  ^^^^ Token(Identifier, "type", (613,18)->(613,22))
                       ^ Token(GreaterThan, ">", (613,23)->(613,24))
                         ^ Token(Integer, "0", (613,25)->(613,26))
                           ^^ Token(And, "&&", (613,27)->(613,29))
                              ^^^^^ Token(Identifier, "reply", (613,30)->(613,35))
                                   ^ Token(Dot, ".", (613,35)->(613,36))
                                    ^^^^^^ Token(Identifier, "params", (613,36)->(613,42))
                                          ^ Token(Dot, ".", (613,42)->(613,43))
                                           ^^^^ Token(Identifier, "type", (613,43)->(613,47))
                                                ^ Token(LessThan, "<", (613,48)->(613,49))
                                                  ^ Token(Integer, "5", (613,50)->(613,51))
                                                    Token(EndOfLine, "\n", (613,51)->(613,51))
    mtype = msgType[reply.params.type]
    ^^^^^ Token(Identifier, "mtype", (614,4)->(614,9))
          ^ Token(Equal, "=", (614,10)->(614,11))
            ^^^^^^^ Token(Identifier, "msgType", (614,12)->(614,19))
                   ^ Token(LeftBracket, "[", (614,19)->(614,20))
                    ^^^^^ Token(Identifier, "reply", (614,20)->(614,25))
                         ^ Token(Dot, ".", (614,25)->(614,26))
                          ^^^^^^ Token(Identifier, "params", (614,26)->(614,32))
                                ^ Token(Dot, ".", (614,32)->(614,33))
                                 ^^^^ Token(Identifier, "type", (614,33)->(614,37))
                                     ^ Token(RightBracket, "]", (614,37)->(614,38))
                                       Token(EndOfLine, "\n", (614,38)->(614,38))
  endif
  ^^^^^ Token(Identifier, "endif", (615,2)->(615,7))
        Token(EndOfLine, "\n", (615,7)->(615,7))

 Token(EndOfLine, "\n", (616,0)->(616,0))
  :echomsg $'Lsp {mtype} {reply.params.message}'
  ^ Token(Colon, ":", (617,2)->(617,3))
   ^^^^^^^ Token(Identifier, "echomsg", (617,3)->(617,10))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Lsp {mtype} {reply.params.message}", (617,13)->(617,46))
                                                 Token(EndOfLine, "\n", (617,48)->(617,48))
enddef
^^^^^^ Token(Identifier, "enddef", (618,0)->(618,6))
       Token(EndOfLine, "\n", (618,6)->(618,6))

 Token(EndOfLine, "\n", (619,0)->(619,0))
# process a log notification message from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process a log notification message from the LSP server", (620,0)->(620,56))
# Notification: window/logMessage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Notification: window/logMessage", (621,0)->(621,33))
# Param: LogMessageParams
^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: LogMessageParams", (622,0)->(622,25))
def ProcessLogMsgNotif(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (623,0)->(623,3))
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessLogMsgNotif", (623,4)->(623,22))
                      ^ Token(LeftParen, "(", (623,22)->(623,23))
                       ^^^^^^^^^ Token(Identifier, "lspserver", (623,23)->(623,32))
                                ^^ Token(SpacedColon, ": ", (623,32)->(623,34))
                                  ^^^^ Token(Identifier, "dict", (623,34)->(623,38))
                                      ^ Token(AngleLeft, "<", (623,38)->(623,39))
                                       ^^^ Token(Identifier, "any", (623,39)->(623,42))
                                          ^ Token(AngleRight, ">", (623,42)->(623,43))
                                           ^ Token(Comma, ",", (623,43)->(623,44))
                                             ^^^^^ Token(Identifier, "reply", (623,45)->(623,50))
                                                  ^^ Token(SpacedColon, ": ", (623,50)->(623,52))
                                                    ^^^^ Token(Identifier, "dict", (623,52)->(623,56))
                                                        ^ Token(AngleLeft, "<", (623,56)->(623,57))
                                                         ^^^ Token(Identifier, "any", (623,57)->(623,60))
                                                            ^ Token(AngleRight, ">", (623,60)->(623,61))
                                                             ^ Token(RightParen, ")", (623,61)->(623,62))
                                                               Token(EndOfLine, "\n", (623,62)->(623,62))
  var msgType: list<string> = ['', 'Error: ', 'Warning: ', 'Info: ', 'Log: ']
  ^^^ Token(Identifier, "var", (624,2)->(624,5))
      ^^^^^^^ Token(Identifier, "msgType", (624,6)->(624,13))
             ^^ Token(SpacedColon, ": ", (624,13)->(624,15))
               ^^^^ Token(Identifier, "list", (624,15)->(624,19))
                   ^ Token(AngleLeft, "<", (624,19)->(624,20))
                    ^^^^^^ Token(Identifier, "string", (624,20)->(624,26))
                          ^ Token(GreaterThan, ">", (624,26)->(624,27))
                            ^ Token(Equal, "=", (624,28)->(624,29))
                              ^ Token(LeftBracket, "[", (624,30)->(624,31))
                                 Token(SingleQuoteString, "", (624,32)->(624,32))
                                 ^ Token(Comma, ",", (624,33)->(624,34))
                                    ^^^^^^ Token(SingleQuoteString, "Error: ", (624,36)->(624,42))
                                            ^ Token(Comma, ",", (624,44)->(624,45))
                                               ^^^^^^^^ Token(SingleQuoteString, "Warning: ", (624,47)->(624,55))
                                                         ^ Token(Comma, ",", (624,57)->(624,58))
                                                            ^^^^^ Token(SingleQuoteString, "Info: ", (624,60)->(624,65))
                                                                   ^ Token(Comma, ",", (624,67)->(624,68))
                                                                      ^^^^ Token(SingleQuoteString, "Log: ", (624,70)->(624,74))
                                                                            ^ Token(RightBracket, "]", (624,76)->(624,77))
                                                                              Token(EndOfLine, "\n", (624,77)->(624,77))
  var mtype: string = 'Log: '
  ^^^ Token(Identifier, "var", (625,2)->(625,5))
      ^^^^^ Token(Identifier, "mtype", (625,6)->(625,11))
           ^^ Token(SpacedColon, ": ", (625,11)->(625,13))
             ^^^^^^ Token(Identifier, "string", (625,13)->(625,19))
                    ^ Token(Equal, "=", (625,20)->(625,21))
                       ^^^^ Token(SingleQuoteString, "Log: ", (625,23)->(625,27))
                              Token(EndOfLine, "\n", (625,29)->(625,29))
  if reply.params.type > 0 && reply.params.type < 5
  ^^ Token(Identifier, "if", (626,2)->(626,4))
     ^^^^^ Token(Identifier, "reply", (626,5)->(626,10))
          ^ Token(Dot, ".", (626,10)->(626,11))
           ^^^^^^ Token(Identifier, "params", (626,11)->(626,17))
                 ^ Token(Dot, ".", (626,17)->(626,18))
                  ^^^^ Token(Identifier, "type", (626,18)->(626,22))
                       ^ Token(GreaterThan, ">", (626,23)->(626,24))
                         ^ Token(Integer, "0", (626,25)->(626,26))
                           ^^ Token(And, "&&", (626,27)->(626,29))
                              ^^^^^ Token(Identifier, "reply", (626,30)->(626,35))
                                   ^ Token(Dot, ".", (626,35)->(626,36))
                                    ^^^^^^ Token(Identifier, "params", (626,36)->(626,42))
                                          ^ Token(Dot, ".", (626,42)->(626,43))
                                           ^^^^ Token(Identifier, "type", (626,43)->(626,47))
                                                ^ Token(LessThan, "<", (626,48)->(626,49))
                                                  ^ Token(Integer, "5", (626,50)->(626,51))
                                                    Token(EndOfLine, "\n", (626,51)->(626,51))
    mtype = msgType[reply.params.type]
    ^^^^^ Token(Identifier, "mtype", (627,4)->(627,9))
          ^ Token(Equal, "=", (627,10)->(627,11))
            ^^^^^^^ Token(Identifier, "msgType", (627,12)->(627,19))
                   ^ Token(LeftBracket, "[", (627,19)->(627,20))
                    ^^^^^ Token(Identifier, "reply", (627,20)->(627,25))
                         ^ Token(Dot, ".", (627,25)->(627,26))
                          ^^^^^^ Token(Identifier, "params", (627,26)->(627,32))
                                ^ Token(Dot, ".", (627,32)->(627,33))
                                 ^^^^ Token(Identifier, "type", (627,33)->(627,37))
                                     ^ Token(RightBracket, "]", (627,37)->(627,38))
                                       Token(EndOfLine, "\n", (627,38)->(627,38))
  endif
  ^^^^^ Token(Identifier, "endif", (628,2)->(628,7))
        Token(EndOfLine, "\n", (628,7)->(628,7))

 Token(EndOfLine, "\n", (629,0)->(629,0))
  util.TraceLog(false, $'[{mtype}]: {reply.params.message}')
  ^^^^ Token(Identifier, "util", (630,2)->(630,6))
      ^ Token(Dot, ".", (630,6)->(630,7))
       ^^^^^^^^ Token(Identifier, "TraceLog", (630,7)->(630,15))
               ^ Token(LeftParen, "(", (630,15)->(630,16))
                ^^^^^ Token(False, "false", (630,16)->(630,21))
                     ^ Token(Comma, ",", (630,21)->(630,22))
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "[{mtype}]: {reply.params.message}", (630,25)->(630,57))
                                                           ^ Token(RightParen, ")", (630,59)->(630,60))
                                                             Token(EndOfLine, "\n", (630,60)->(630,60))
enddef
^^^^^^ Token(Identifier, "enddef", (631,0)->(631,6))
       Token(EndOfLine, "\n", (631,6)->(631,6))

 Token(EndOfLine, "\n", (632,0)->(632,0))
# process unsupported notification messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process unsupported notification messages", (633,0)->(633,43))
def ProcessUnsupportedNotif(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (634,0)->(634,3))
    ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotif", (634,4)->(634,27))
                           ^ Token(LeftParen, "(", (634,27)->(634,28))
                            ^^^^^^^^^ Token(Identifier, "lspserver", (634,28)->(634,37))
                                     ^^ Token(SpacedColon, ": ", (634,37)->(634,39))
                                       ^^^^ Token(Identifier, "dict", (634,39)->(634,43))
                                           ^ Token(AngleLeft, "<", (634,43)->(634,44))
                                            ^^^ Token(Identifier, "any", (634,44)->(634,47))
                                               ^ Token(AngleRight, ">", (634,47)->(634,48))
                                                ^ Token(Comma, ",", (634,48)->(634,49))
                                                  ^^^^^ Token(Identifier, "reply", (634,50)->(634,55))
                                                       ^^ Token(SpacedColon, ": ", (634,55)->(634,57))
                                                         ^^^^ Token(Identifier, "dict", (634,57)->(634,61))
                                                             ^ Token(AngleLeft, "<", (634,61)->(634,62))
                                                              ^^^ Token(Identifier, "any", (634,62)->(634,65))
                                                                 ^ Token(AngleRight, ">", (634,65)->(634,66))
                                                                  ^ Token(RightParen, ")", (634,66)->(634,67))
                                                                    Token(EndOfLine, "\n", (634,67)->(634,67))
  util.ErrMsg($'Error: Unsupported notification message received from the LSP server ({lspserver.path}), message = {reply->string()}')
  ^^^^ Token(Identifier, "util", (635,2)->(635,6))
      ^ Token(Dot, ".", (635,6)->(635,7))
       ^^^^^^ Token(Identifier, "ErrMsg", (635,7)->(635,13))
             ^ Token(LeftParen, "(", (635,13)->(635,14))
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported notification message received from the LSP server ({lspserver.path}), message = {reply->string()}", (635,16)->(635,131))
                                                                                                                                     ^ Token(RightParen, ")", (635,133)->(635,134))
                                                                                                                                       Token(EndOfLine, "\n", (635,134)->(635,134))
enddef
^^^^^^ Token(Identifier, "enddef", (636,0)->(636,6))
       Token(EndOfLine, "\n", (636,6)->(636,6))

 Token(EndOfLine, "\n", (637,0)->(637,0))
# per-filetype private map inside to record if ntf once or not
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# per-filetype private map inside to record if ntf once or not", (638,0)->(638,62))
var ftypeNtfOnceMap: dict<bool> = {}
^^^ Token(Identifier, "var", (639,0)->(639,3))
    ^^^^^^^^^^^^^^^ Token(Identifier, "ftypeNtfOnceMap", (639,4)->(639,19))
                   ^^ Token(SpacedColon, ": ", (639,19)->(639,21))
                     ^^^^ Token(Identifier, "dict", (639,21)->(639,25))
                         ^ Token(AngleLeft, "<", (639,25)->(639,26))
                          ^^^^ Token(Identifier, "bool", (639,26)->(639,30))
                              ^ Token(GreaterThan, ">", (639,30)->(639,31))
                                ^ Token(Equal, "=", (639,32)->(639,33))
                                  ^ Token(LeftBrace, "{", (639,34)->(639,35))
                                   ^ Token(RightBrace, "}", (639,35)->(639,36))
                                     Token(EndOfLine, "\n", (639,36)->(639,36))
# process unsupported notification messages but only notify once
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process unsupported notification messages but only notify once", (640,0)->(640,64))
def ProcessUnsupportedNotifOnce(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (641,0)->(641,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotifOnce", (641,4)->(641,31))
                               ^ Token(LeftParen, "(", (641,31)->(641,32))
                                ^^^^^^^^^ Token(Identifier, "lspserver", (641,32)->(641,41))
                                         ^^ Token(SpacedColon, ": ", (641,41)->(641,43))
                                           ^^^^ Token(Identifier, "dict", (641,43)->(641,47))
                                               ^ Token(AngleLeft, "<", (641,47)->(641,48))
                                                ^^^ Token(Identifier, "any", (641,48)->(641,51))
                                                   ^ Token(AngleRight, ">", (641,51)->(641,52))
                                                    ^ Token(Comma, ",", (641,52)->(641,53))
                                                      ^^^^^ Token(Identifier, "reply", (641,54)->(641,59))
                                                           ^^ Token(SpacedColon, ": ", (641,59)->(641,61))
                                                             ^^^^ Token(Identifier, "dict", (641,61)->(641,65))
                                                                 ^ Token(AngleLeft, "<", (641,65)->(641,66))
                                                                  ^^^ Token(Identifier, "any", (641,66)->(641,69))
                                                                     ^ Token(AngleRight, ">", (641,69)->(641,70))
                                                                      ^ Token(RightParen, ")", (641,70)->(641,71))
                                                                        Token(EndOfLine, "\n", (641,71)->(641,71))
  if !ftypeNtfOnceMap->get(&ft, v:false)
  ^^ Token(Identifier, "if", (642,2)->(642,4))
     ^ Token(Bang, "!", (642,5)->(642,6))
      ^^^^^^^^^^^^^^^ Token(Identifier, "ftypeNtfOnceMap", (642,6)->(642,21))
                     ^^ Token(MethodArrow, "->", (642,21)->(642,23))
                       ^^^ Token(Identifier, "get", (642,23)->(642,26))
                          ^ Token(LeftParen, "(", (642,26)->(642,27))
                           ^ Token(Ampersand, "&", (642,27)->(642,28))
                            ^^ Token(Identifier, "ft", (642,28)->(642,30))
                              ^ Token(Comma, ",", (642,30)->(642,31))
                                ^ Token(Identifier, "v", (642,32)->(642,33))
                                 ^ Token(Colon, ":", (642,33)->(642,34))
                                  ^^^^^ Token(False, "false", (642,34)->(642,39))
                                       ^ Token(RightParen, ")", (642,39)->(642,40))
                                         Token(EndOfLine, "\n", (642,40)->(642,40))
	ProcessUnsupportedNotif(lspserver, reply)
 ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotif", (643,1)->(643,24))
                        ^ Token(LeftParen, "(", (643,24)->(643,25))
                         ^^^^^^^^^ Token(Identifier, "lspserver", (643,25)->(643,34))
                                  ^ Token(Comma, ",", (643,34)->(643,35))
                                    ^^^^^ Token(Identifier, "reply", (643,36)->(643,41))
                                         ^ Token(RightParen, ")", (643,41)->(643,42))
                                           Token(EndOfLine, "\n", (643,42)->(643,42))
	ftypeNtfOnceMap->extend({[&ft]: v:true})
 ^^^^^^^^^^^^^^^ Token(Identifier, "ftypeNtfOnceMap", (644,1)->(644,16))
                ^^ Token(MethodArrow, "->", (644,16)->(644,18))
                  ^^^^^^ Token(Identifier, "extend", (644,18)->(644,24))
                        ^ Token(LeftParen, "(", (644,24)->(644,25))
                         ^ Token(LeftBrace, "{", (644,25)->(644,26))
                          ^ Token(LeftBracket, "[", (644,26)->(644,27))
                           ^ Token(Ampersand, "&", (644,27)->(644,28))
                            ^^ Token(Identifier, "ft", (644,28)->(644,30))
                              ^ Token(RightBracket, "]", (644,30)->(644,31))
                               ^^ Token(SpacedColon, ": ", (644,31)->(644,33))
                                 ^ Token(Identifier, "v", (644,33)->(644,34))
                                  ^ Token(Colon, ":", (644,34)->(644,35))
                                   ^^^^ Token(True, "true", (644,35)->(644,39))
                                       ^ Token(RightBrace, "}", (644,39)->(644,40))
                                        ^ Token(RightParen, ")", (644,40)->(644,41))
                                          Token(EndOfLine, "\n", (644,41)->(644,41))
  endif
  ^^^^^ Token(Identifier, "endif", (645,2)->(645,7))
        Token(EndOfLine, "\n", (645,7)->(645,7))
enddef
^^^^^^ Token(Identifier, "enddef", (646,0)->(646,6))
       Token(EndOfLine, "\n", (646,6)->(646,6))

 Token(EndOfLine, "\n", (647,0)->(647,0))
# ignore unsupported notification message
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# ignore unsupported notification message", (648,0)->(648,41))
def IgnoreNotif(lspserver: dict<any>, reply: dict<any>)
^^^ Token(Identifier, "def", (649,0)->(649,3))
    ^^^^^^^^^^^ Token(Identifier, "IgnoreNotif", (649,4)->(649,15))
               ^ Token(LeftParen, "(", (649,15)->(649,16))
                ^^^^^^^^^ Token(Identifier, "lspserver", (649,16)->(649,25))
                         ^^ Token(SpacedColon, ": ", (649,25)->(649,27))
                           ^^^^ Token(Identifier, "dict", (649,27)->(649,31))
                               ^ Token(AngleLeft, "<", (649,31)->(649,32))
                                ^^^ Token(Identifier, "any", (649,32)->(649,35))
                                   ^ Token(AngleRight, ">", (649,35)->(649,36))
                                    ^ Token(Comma, ",", (649,36)->(649,37))
                                      ^^^^^ Token(Identifier, "reply", (649,38)->(649,43))
                                           ^^ Token(SpacedColon, ": ", (649,43)->(649,45))
                                             ^^^^ Token(Identifier, "dict", (649,45)->(649,49))
                                                 ^ Token(AngleLeft, "<", (649,49)->(649,50))
                                                  ^^^ Token(Identifier, "any", (649,50)->(649,53))
                                                     ^ Token(AngleRight, ">", (649,53)->(649,54))
                                                      ^ Token(RightParen, ")", (649,54)->(649,55))
                                                        Token(EndOfLine, "\n", (649,55)->(649,55))
enddef
^^^^^^ Token(Identifier, "enddef", (650,0)->(650,6))
       Token(EndOfLine, "\n", (650,6)->(650,6))

 Token(EndOfLine, "\n", (651,0)->(651,0))
# process notification messages from the LSP server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process notification messages from the LSP server", (652,0)->(652,51))
export def ProcessNotif(lspserver: dict<any>, reply: dict<any>): void
^^^^^^ Token(Identifier, "export", (653,0)->(653,6))
       ^^^ Token(Identifier, "def", (653,7)->(653,10))
           ^^^^^^^^^^^^ Token(Identifier, "ProcessNotif", (653,11)->(653,23))
                       ^ Token(LeftParen, "(", (653,23)->(653,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (653,24)->(653,33))
                                 ^^ Token(SpacedColon, ": ", (653,33)->(653,35))
                                   ^^^^ Token(Identifier, "dict", (653,35)->(653,39))
                                       ^ Token(AngleLeft, "<", (653,39)->(653,40))
                                        ^^^ Token(Identifier, "any", (653,40)->(653,43))
                                           ^ Token(AngleRight, ">", (653,43)->(653,44))
                                            ^ Token(Comma, ",", (653,44)->(653,45))
                                              ^^^^^ Token(Identifier, "reply", (653,46)->(653,51))
                                                   ^^ Token(SpacedColon, ": ", (653,51)->(653,53))
                                                     ^^^^ Token(Identifier, "dict", (653,53)->(653,57))
                                                         ^ Token(AngleLeft, "<", (653,57)->(653,58))
                                                          ^^^ Token(Identifier, "any", (653,58)->(653,61))
                                                             ^ Token(AngleRight, ">", (653,61)->(653,62))
                                                              ^ Token(RightParen, ")", (653,62)->(653,63))
                                                               ^^ Token(SpacedColon, ": ", (653,63)->(653,65))
                                                                 ^^^^ Token(Identifier, "void", (653,65)->(653,69))
                                                                      Token(EndOfLine, "\n", (653,69)->(653,69))
  var lsp_notif_handlers: dict<func> =
  ^^^ Token(Identifier, "var", (654,2)->(654,5))
      ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_notif_handlers", (654,6)->(654,24))
                        ^^ Token(SpacedColon, ": ", (654,24)->(654,26))
                          ^^^^ Token(Identifier, "dict", (654,26)->(654,30))
                              ^ Token(AngleLeft, "<", (654,30)->(654,31))
                               ^^^^ Token(Identifier, "func", (654,31)->(654,35))
                                   ^ Token(GreaterThan, ">", (654,35)->(654,36))
                                     ^ Token(Equal, "=", (654,37)->(654,38))
                                       Token(EndOfLine, "\n", (654,38)->(654,38))
    {
    ^ Token(LeftBrace, "{", (655,4)->(655,5))
      Token(EndOfLine, "\n", (655,5)->(655,5))
      'window/showMessage': ProcessShowMsgNotif,
       ^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "window/showMessage", (656,7)->(656,24))
                          ^^ Token(SpacedColon, ": ", (656,26)->(656,28))
                            ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessShowMsgNotif", (656,28)->(656,47))
                                               ^ Token(Comma, ",", (656,47)->(656,48))
                                                 Token(EndOfLine, "\n", (656,48)->(656,48))
      'window/logMessage': ProcessLogMsgNotif,
       ^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "window/logMessage", (657,7)->(657,23))
                         ^^ Token(SpacedColon, ": ", (657,25)->(657,27))
                           ^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessLogMsgNotif", (657,27)->(657,45))
                                             ^ Token(Comma, ",", (657,45)->(657,46))
                                               Token(EndOfLine, "\n", (657,46)->(657,46))
      'textDocument/publishDiagnostics': ProcessDiagNotif,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "textDocument/publishDiagnostics", (658,7)->(658,37))
                                       ^^ Token(SpacedColon, ": ", (658,39)->(658,41))
                                         ^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessDiagNotif", (658,41)->(658,57))
                                                         ^ Token(Comma, ",", (658,57)->(658,58))
                                                           Token(EndOfLine, "\n", (658,58)->(658,58))
      '$/progress': ProcessUnsupportedNotif,
       ^^^^^^^^^ Token(SingleQuoteString, "$/progress", (659,7)->(659,16))
                  ^^ Token(SpacedColon, ": ", (659,18)->(659,20))
                    ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotif", (659,20)->(659,43))
                                           ^ Token(Comma, ",", (659,43)->(659,44))
                                             Token(EndOfLine, "\n", (659,44)->(659,44))
      'telemetry/event': ProcessUnsupportedNotifOnce,
       ^^^^^^^^^^^^^^ Token(SingleQuoteString, "telemetry/event", (660,7)->(660,21))
                       ^^ Token(SpacedColon, ": ", (660,23)->(660,25))
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedNotifOnce", (660,25)->(660,52))
                                                    ^ Token(Comma, ",", (660,52)->(660,53))
                                                      Token(EndOfLine, "\n", (660,53)->(660,53))
      # Java language server sends the 'language/status' notification which is
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Java language server sends the 'language/status' notification which is", (661,6)->(661,78))
      # not in the LSP specification
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# not in the LSP specification", (662,6)->(662,36))
      'language/status': IgnoreNotif
       ^^^^^^^^^^^^^^ Token(SingleQuoteString, "language/status", (663,7)->(663,21))
                       ^^ Token(SpacedColon, ": ", (663,23)->(663,25))
                         ^^^^^^^^^^^ Token(Identifier, "IgnoreNotif", (663,25)->(663,36))
                                     Token(EndOfLine, "\n", (663,36)->(663,36))
    }
    ^ Token(RightBrace, "}", (664,4)->(664,5))
      Token(EndOfLine, "\n", (664,5)->(664,5))

 Token(EndOfLine, "\n", (665,0)->(665,0))
  if lsp_notif_handlers->has_key(reply.method)
  ^^ Token(Identifier, "if", (666,2)->(666,4))
     ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_notif_handlers", (666,5)->(666,23))
                       ^^ Token(MethodArrow, "->", (666,23)->(666,25))
                         ^^^^^^^ Token(Identifier, "has_key", (666,25)->(666,32))
                                ^ Token(LeftParen, "(", (666,32)->(666,33))
                                 ^^^^^ Token(Identifier, "reply", (666,33)->(666,38))
                                      ^ Token(Dot, ".", (666,38)->(666,39))
                                       ^^^^^^ Token(Identifier, "method", (666,39)->(666,45))
                                             ^ Token(RightParen, ")", (666,45)->(666,46))
                                               Token(EndOfLine, "\n", (666,46)->(666,46))
    lsp_notif_handlers[reply.method](lspserver, reply)
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lsp_notif_handlers", (667,4)->(667,22))
                      ^ Token(LeftBracket, "[", (667,22)->(667,23))
                       ^^^^^ Token(Identifier, "reply", (667,23)->(667,28))
                            ^ Token(Dot, ".", (667,28)->(667,29))
                             ^^^^^^ Token(Identifier, "method", (667,29)->(667,35))
                                   ^ Token(RightBracket, "]", (667,35)->(667,36))
                                    ^ Token(LeftParen, "(", (667,36)->(667,37))
                                     ^^^^^^^^^ Token(Identifier, "lspserver", (667,37)->(667,46))
                                              ^ Token(Comma, ",", (667,46)->(667,47))
                                                ^^^^^ Token(Identifier, "reply", (667,48)->(667,53))
                                                     ^ Token(RightParen, ")", (667,53)->(667,54))
                                                       Token(EndOfLine, "\n", (667,54)->(667,54))
  else
  ^^^^ Token(Identifier, "else", (668,2)->(668,6))
       Token(EndOfLine, "\n", (668,6)->(668,6))
    util.ErrMsg($'Error: Unsupported notification received from LSP server {reply->string()}')
    ^^^^ Token(Identifier, "util", (669,4)->(669,8))
        ^ Token(Dot, ".", (669,8)->(669,9))
         ^^^^^^ Token(Identifier, "ErrMsg", (669,9)->(669,15))
               ^ Token(LeftParen, "(", (669,15)->(669,16))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported notification received from LSP server {reply->string()}", (669,18)->(669,91))
                                                                                             ^ Token(RightParen, ")", (669,93)->(669,94))
                                                                                               Token(EndOfLine, "\n", (669,94)->(669,94))
  endif
  ^^^^^ Token(Identifier, "endif", (670,2)->(670,7))
        Token(EndOfLine, "\n", (670,7)->(670,7))
enddef
^^^^^^ Token(Identifier, "enddef", (671,0)->(671,6))
       Token(EndOfLine, "\n", (671,6)->(671,6))

 Token(EndOfLine, "\n", (672,0)->(672,0))
# process the workspace/applyEdit LSP server request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the workspace/applyEdit LSP server request", (673,0)->(673,52))
# Request: "workspace/applyEdit"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Request: \"workspace/applyEdit\"", (674,0)->(674,32))
# Param: ApplyWorkspaceEditParams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: ApplyWorkspaceEditParams", (675,0)->(675,33))
def ProcessApplyEditReq(lspserver: dict<any>, request: dict<any>)
^^^ Token(Identifier, "def", (676,0)->(676,3))
    ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessApplyEditReq", (676,4)->(676,23))
                       ^ Token(LeftParen, "(", (676,23)->(676,24))
                        ^^^^^^^^^ Token(Identifier, "lspserver", (676,24)->(676,33))
                                 ^^ Token(SpacedColon, ": ", (676,33)->(676,35))
                                   ^^^^ Token(Identifier, "dict", (676,35)->(676,39))
                                       ^ Token(AngleLeft, "<", (676,39)->(676,40))
                                        ^^^ Token(Identifier, "any", (676,40)->(676,43))
                                           ^ Token(AngleRight, ">", (676,43)->(676,44))
                                            ^ Token(Comma, ",", (676,44)->(676,45))
                                              ^^^^^^^ Token(Identifier, "request", (676,46)->(676,53))
                                                     ^^ Token(SpacedColon, ": ", (676,53)->(676,55))
                                                       ^^^^ Token(Identifier, "dict", (676,55)->(676,59))
                                                           ^ Token(AngleLeft, "<", (676,59)->(676,60))
                                                            ^^^ Token(Identifier, "any", (676,60)->(676,63))
                                                               ^ Token(AngleRight, ">", (676,63)->(676,64))
                                                                ^ Token(RightParen, ")", (676,64)->(676,65))
                                                                  Token(EndOfLine, "\n", (676,65)->(676,65))
  # interface ApplyWorkspaceEditParams
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# interface ApplyWorkspaceEditParams", (677,2)->(677,38))
  if !request->has_key('params')
  ^^ Token(Identifier, "if", (678,2)->(678,4))
     ^ Token(Bang, "!", (678,5)->(678,6))
      ^^^^^^^ Token(Identifier, "request", (678,6)->(678,13))
             ^^ Token(MethodArrow, "->", (678,13)->(678,15))
               ^^^^^^^ Token(Identifier, "has_key", (678,15)->(678,22))
                      ^ Token(LeftParen, "(", (678,22)->(678,23))
                        ^^^^^ Token(SingleQuoteString, "params", (678,24)->(678,29))
                               ^ Token(RightParen, ")", (678,31)->(678,32))
                                 Token(EndOfLine, "\n", (678,32)->(678,32))
    return
    ^^^^^^ Token(Identifier, "return", (679,4)->(679,10))
           Token(EndOfLine, "\n", (679,10)->(679,10))
  endif
  ^^^^^ Token(Identifier, "endif", (680,2)->(680,7))
        Token(EndOfLine, "\n", (680,7)->(680,7))
  var workspaceEditParams: dict<any> = request.params
  ^^^ Token(Identifier, "var", (681,2)->(681,5))
      ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceEditParams", (681,6)->(681,25))
                         ^^ Token(SpacedColon, ": ", (681,25)->(681,27))
                           ^^^^ Token(Identifier, "dict", (681,27)->(681,31))
                               ^ Token(AngleLeft, "<", (681,31)->(681,32))
                                ^^^ Token(Identifier, "any", (681,32)->(681,35))
                                   ^ Token(GreaterThan, ">", (681,35)->(681,36))
                                     ^ Token(Equal, "=", (681,37)->(681,38))
                                       ^^^^^^^ Token(Identifier, "request", (681,39)->(681,46))
                                              ^ Token(Dot, ".", (681,46)->(681,47))
                                               ^^^^^^ Token(Identifier, "params", (681,47)->(681,53))
                                                      Token(EndOfLine, "\n", (681,53)->(681,53))
  if workspaceEditParams->has_key('label')
  ^^ Token(Identifier, "if", (682,2)->(682,4))
     ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceEditParams", (682,5)->(682,24))
                        ^^ Token(MethodArrow, "->", (682,24)->(682,26))
                          ^^^^^^^ Token(Identifier, "has_key", (682,26)->(682,33))
                                 ^ Token(LeftParen, "(", (682,33)->(682,34))
                                   ^^^^ Token(SingleQuoteString, "label", (682,35)->(682,39))
                                         ^ Token(RightParen, ")", (682,41)->(682,42))
                                           Token(EndOfLine, "\n", (682,42)->(682,42))
    :echomsg $'Workspace edit {workspaceEditParams.label}'
    ^ Token(Colon, ":", (683,4)->(683,5))
     ^^^^^^^ Token(Identifier, "echomsg", (683,5)->(683,12))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Workspace edit {workspaceEditParams.label}", (683,15)->(683,56))
                                                           Token(EndOfLine, "\n", (683,58)->(683,58))
  endif
  ^^^^^ Token(Identifier, "endif", (684,2)->(684,7))
        Token(EndOfLine, "\n", (684,7)->(684,7))
  textedit.ApplyWorkspaceEdit(workspaceEditParams.edit)
  ^^^^^^^^ Token(Identifier, "textedit", (685,2)->(685,10))
          ^ Token(Dot, ".", (685,10)->(685,11))
           ^^^^^^^^^^^^^^^^^^ Token(Identifier, "ApplyWorkspaceEdit", (685,11)->(685,29))
                             ^ Token(LeftParen, "(", (685,29)->(685,30))
                              ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "workspaceEditParams", (685,30)->(685,49))
                                                 ^ Token(Dot, ".", (685,49)->(685,50))
                                                  ^^^^ Token(Identifier, "edit", (685,50)->(685,54))
                                                      ^ Token(RightParen, ")", (685,54)->(685,55))
                                                        Token(EndOfLine, "\n", (685,55)->(685,55))
  # TODO: Need to return the proper result of the edit operation
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# TODO: Need to return the proper result of the edit operation", (686,2)->(686,64))
  lspserver.sendResponse(request, {applied: true}, {})
  ^^^^^^^^^ Token(Identifier, "lspserver", (687,2)->(687,11))
           ^ Token(Dot, ".", (687,11)->(687,12))
            ^^^^^^^^^^^^ Token(Identifier, "sendResponse", (687,12)->(687,24))
                        ^ Token(LeftParen, "(", (687,24)->(687,25))
                         ^^^^^^^ Token(Identifier, "request", (687,25)->(687,32))
                                ^ Token(Comma, ",", (687,32)->(687,33))
                                  ^ Token(LeftBrace, "{", (687,34)->(687,35))
                                   ^^^^^^^ Token(Identifier, "applied", (687,35)->(687,42))
                                          ^^ Token(SpacedColon, ": ", (687,42)->(687,44))
                                            ^^^^ Token(True, "true", (687,44)->(687,48))
                                                ^ Token(RightBrace, "}", (687,48)->(687,49))
                                                 ^ Token(Comma, ",", (687,49)->(687,50))
                                                   ^ Token(LeftBrace, "{", (687,51)->(687,52))
                                                    ^ Token(RightBrace, "}", (687,52)->(687,53))
                                                     ^ Token(RightParen, ")", (687,53)->(687,54))
                                                       Token(EndOfLine, "\n", (687,54)->(687,54))
enddef
^^^^^^ Token(Identifier, "enddef", (688,0)->(688,6))
       Token(EndOfLine, "\n", (688,6)->(688,6))

 Token(EndOfLine, "\n", (689,0)->(689,0))
# process the workspace/workspaceFolders LSP server request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the workspace/workspaceFolders LSP server request", (690,0)->(690,59))
# Request: "workspace/workspaceFolders"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Request: \"workspace/workspaceFolders\"", (691,0)->(691,39))
# Param: none
^^^^^^^^^^^^^ Token(Comment, "# Param: none", (692,0)->(692,13))
def ProcessWorkspaceFoldersReq(lspserver: dict<any>, request: dict<any>)
^^^ Token(Identifier, "def", (693,0)->(693,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceFoldersReq", (693,4)->(693,30))
                              ^ Token(LeftParen, "(", (693,30)->(693,31))
                               ^^^^^^^^^ Token(Identifier, "lspserver", (693,31)->(693,40))
                                        ^^ Token(SpacedColon, ": ", (693,40)->(693,42))
                                          ^^^^ Token(Identifier, "dict", (693,42)->(693,46))
                                              ^ Token(AngleLeft, "<", (693,46)->(693,47))
                                               ^^^ Token(Identifier, "any", (693,47)->(693,50))
                                                  ^ Token(AngleRight, ">", (693,50)->(693,51))
                                                   ^ Token(Comma, ",", (693,51)->(693,52))
                                                     ^^^^^^^ Token(Identifier, "request", (693,53)->(693,60))
                                                            ^^ Token(SpacedColon, ": ", (693,60)->(693,62))
                                                              ^^^^ Token(Identifier, "dict", (693,62)->(693,66))
                                                                  ^ Token(AngleLeft, "<", (693,66)->(693,67))
                                                                   ^^^ Token(Identifier, "any", (693,67)->(693,70))
                                                                      ^ Token(AngleRight, ">", (693,70)->(693,71))
                                                                       ^ Token(RightParen, ")", (693,71)->(693,72))
                                                                         Token(EndOfLine, "\n", (693,72)->(693,72))
  lspserver.sendResponse(request, {}, {})
  ^^^^^^^^^ Token(Identifier, "lspserver", (694,2)->(694,11))
           ^ Token(Dot, ".", (694,11)->(694,12))
            ^^^^^^^^^^^^ Token(Identifier, "sendResponse", (694,12)->(694,24))
                        ^ Token(LeftParen, "(", (694,24)->(694,25))
                         ^^^^^^^ Token(Identifier, "request", (694,25)->(694,32))
                                ^ Token(Comma, ",", (694,32)->(694,33))
                                  ^ Token(LeftBrace, "{", (694,34)->(694,35))
                                   ^ Token(RightBrace, "}", (694,35)->(694,36))
                                    ^ Token(Comma, ",", (694,36)->(694,37))
                                      ^ Token(LeftBrace, "{", (694,38)->(694,39))
                                       ^ Token(RightBrace, "}", (694,39)->(694,40))
                                        ^ Token(RightParen, ")", (694,40)->(694,41))
                                          Token(EndOfLine, "\n", (694,41)->(694,41))
enddef
^^^^^^ Token(Identifier, "enddef", (695,0)->(695,6))
       Token(EndOfLine, "\n", (695,6)->(695,6))

 Token(EndOfLine, "\n", (696,0)->(696,0))
# process the client/registerCapability LSP server request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the client/registerCapability LSP server request", (697,0)->(697,58))
# Request: "client/registerCapability"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Request: \"client/registerCapability\"", (698,0)->(698,38))
# Param: RegistrationParams
^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: RegistrationParams", (699,0)->(699,27))
def ProcessClientRegisterCap(lspserver: dict<any>, request: dict<any>)
^^^ Token(Identifier, "def", (700,0)->(700,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessClientRegisterCap", (700,4)->(700,28))
                            ^ Token(LeftParen, "(", (700,28)->(700,29))
                             ^^^^^^^^^ Token(Identifier, "lspserver", (700,29)->(700,38))
                                      ^^ Token(SpacedColon, ": ", (700,38)->(700,40))
                                        ^^^^ Token(Identifier, "dict", (700,40)->(700,44))
                                            ^ Token(AngleLeft, "<", (700,44)->(700,45))
                                             ^^^ Token(Identifier, "any", (700,45)->(700,48))
                                                ^ Token(AngleRight, ">", (700,48)->(700,49))
                                                 ^ Token(Comma, ",", (700,49)->(700,50))
                                                   ^^^^^^^ Token(Identifier, "request", (700,51)->(700,58))
                                                          ^^ Token(SpacedColon, ": ", (700,58)->(700,60))
                                                            ^^^^ Token(Identifier, "dict", (700,60)->(700,64))
                                                                ^ Token(AngleLeft, "<", (700,64)->(700,65))
                                                                 ^^^ Token(Identifier, "any", (700,65)->(700,68))
                                                                    ^ Token(AngleRight, ">", (700,68)->(700,69))
                                                                     ^ Token(RightParen, ")", (700,69)->(700,70))
                                                                       Token(EndOfLine, "\n", (700,70)->(700,70))
  lspserver.sendResponse(request, {}, {})
  ^^^^^^^^^ Token(Identifier, "lspserver", (701,2)->(701,11))
           ^ Token(Dot, ".", (701,11)->(701,12))
            ^^^^^^^^^^^^ Token(Identifier, "sendResponse", (701,12)->(701,24))
                        ^ Token(LeftParen, "(", (701,24)->(701,25))
                         ^^^^^^^ Token(Identifier, "request", (701,25)->(701,32))
                                ^ Token(Comma, ",", (701,32)->(701,33))
                                  ^ Token(LeftBrace, "{", (701,34)->(701,35))
                                   ^ Token(RightBrace, "}", (701,35)->(701,36))
                                    ^ Token(Comma, ",", (701,36)->(701,37))
                                      ^ Token(LeftBrace, "{", (701,38)->(701,39))
                                       ^ Token(RightBrace, "}", (701,39)->(701,40))
                                        ^ Token(RightParen, ")", (701,40)->(701,41))
                                          Token(EndOfLine, "\n", (701,41)->(701,41))
enddef
^^^^^^ Token(Identifier, "enddef", (702,0)->(702,6))
       Token(EndOfLine, "\n", (702,6)->(702,6))

 Token(EndOfLine, "\n", (703,0)->(703,0))
# process the client/unregisterCapability LSP server request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process the client/unregisterCapability LSP server request", (704,0)->(704,60))
# Request: "client/unregisterCapability"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Request: \"client/unregisterCapability\"", (705,0)->(705,40))
# Param: UnregistrationParams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Param: UnregistrationParams", (706,0)->(706,29))
def ProcessClientUnregisterCap(lspserver: dict<any>, request: dict<any>)
^^^ Token(Identifier, "def", (707,0)->(707,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessClientUnregisterCap", (707,4)->(707,30))
                              ^ Token(LeftParen, "(", (707,30)->(707,31))
                               ^^^^^^^^^ Token(Identifier, "lspserver", (707,31)->(707,40))
                                        ^^ Token(SpacedColon, ": ", (707,40)->(707,42))
                                          ^^^^ Token(Identifier, "dict", (707,42)->(707,46))
                                              ^ Token(AngleLeft, "<", (707,46)->(707,47))
                                               ^^^ Token(Identifier, "any", (707,47)->(707,50))
                                                  ^ Token(AngleRight, ">", (707,50)->(707,51))
                                                   ^ Token(Comma, ",", (707,51)->(707,52))
                                                     ^^^^^^^ Token(Identifier, "request", (707,53)->(707,60))
                                                            ^^ Token(SpacedColon, ": ", (707,60)->(707,62))
                                                              ^^^^ Token(Identifier, "dict", (707,62)->(707,66))
                                                                  ^ Token(AngleLeft, "<", (707,66)->(707,67))
                                                                   ^^^ Token(Identifier, "any", (707,67)->(707,70))
                                                                      ^ Token(AngleRight, ">", (707,70)->(707,71))
                                                                       ^ Token(RightParen, ")", (707,71)->(707,72))
                                                                         Token(EndOfLine, "\n", (707,72)->(707,72))
  lspserver.sendResponse(request, {}, {})
  ^^^^^^^^^ Token(Identifier, "lspserver", (708,2)->(708,11))
           ^ Token(Dot, ".", (708,11)->(708,12))
            ^^^^^^^^^^^^ Token(Identifier, "sendResponse", (708,12)->(708,24))
                        ^ Token(LeftParen, "(", (708,24)->(708,25))
                         ^^^^^^^ Token(Identifier, "request", (708,25)->(708,32))
                                ^ Token(Comma, ",", (708,32)->(708,33))
                                  ^ Token(LeftBrace, "{", (708,34)->(708,35))
                                   ^ Token(RightBrace, "}", (708,35)->(708,36))
                                    ^ Token(Comma, ",", (708,36)->(708,37))
                                      ^ Token(LeftBrace, "{", (708,38)->(708,39))
                                       ^ Token(RightBrace, "}", (708,39)->(708,40))
                                        ^ Token(RightParen, ")", (708,40)->(708,41))
                                          Token(EndOfLine, "\n", (708,41)->(708,41))
enddef
^^^^^^ Token(Identifier, "enddef", (709,0)->(709,6))
       Token(EndOfLine, "\n", (709,6)->(709,6))

 Token(EndOfLine, "\n", (710,0)->(710,0))
def ProcessUnsupportedReq(lspserver: dict<any>, request: dict<any>)
^^^ Token(Identifier, "def", (711,0)->(711,3))
    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedReq", (711,4)->(711,25))
                         ^ Token(LeftParen, "(", (711,25)->(711,26))
                          ^^^^^^^^^ Token(Identifier, "lspserver", (711,26)->(711,35))
                                   ^^ Token(SpacedColon, ": ", (711,35)->(711,37))
                                     ^^^^ Token(Identifier, "dict", (711,37)->(711,41))
                                         ^ Token(AngleLeft, "<", (711,41)->(711,42))
                                          ^^^ Token(Identifier, "any", (711,42)->(711,45))
                                             ^ Token(AngleRight, ">", (711,45)->(711,46))
                                              ^ Token(Comma, ",", (711,46)->(711,47))
                                                ^^^^^^^ Token(Identifier, "request", (711,48)->(711,55))
                                                       ^^ Token(SpacedColon, ": ", (711,55)->(711,57))
                                                         ^^^^ Token(Identifier, "dict", (711,57)->(711,61))
                                                             ^ Token(AngleLeft, "<", (711,61)->(711,62))
                                                              ^^^ Token(Identifier, "any", (711,62)->(711,65))
                                                                 ^ Token(AngleRight, ">", (711,65)->(711,66))
                                                                  ^ Token(RightParen, ")", (711,66)->(711,67))
                                                                    Token(EndOfLine, "\n", (711,67)->(711,67))
  util.ErrMsg($'Error: Unsupported request message received from the LSP server ({lspserver.path}), message = {request->string()}')
  ^^^^ Token(Identifier, "util", (712,2)->(712,6))
      ^ Token(Dot, ".", (712,6)->(712,7))
       ^^^^^^ Token(Identifier, "ErrMsg", (712,7)->(712,13))
             ^ Token(LeftParen, "(", (712,13)->(712,14))
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported request message received from the LSP server ({lspserver.path}), message = {request->string()}", (712,16)->(712,128))
                                                                                                                                  ^ Token(RightParen, ")", (712,130)->(712,131))
                                                                                                                                    Token(EndOfLine, "\n", (712,131)->(712,131))
enddef
^^^^^^ Token(Identifier, "enddef", (713,0)->(713,6))
       Token(EndOfLine, "\n", (713,6)->(713,6))

 Token(EndOfLine, "\n", (714,0)->(714,0))
# process a request message from the server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process a request message from the server", (715,0)->(715,43))
export def ProcessRequest(lspserver: dict<any>, request: dict<any>)
^^^^^^ Token(Identifier, "export", (716,0)->(716,6))
       ^^^ Token(Identifier, "def", (716,7)->(716,10))
           ^^^^^^^^^^^^^^ Token(Identifier, "ProcessRequest", (716,11)->(716,25))
                         ^ Token(LeftParen, "(", (716,25)->(716,26))
                          ^^^^^^^^^ Token(Identifier, "lspserver", (716,26)->(716,35))
                                   ^^ Token(SpacedColon, ": ", (716,35)->(716,37))
                                     ^^^^ Token(Identifier, "dict", (716,37)->(716,41))
                                         ^ Token(AngleLeft, "<", (716,41)->(716,42))
                                          ^^^ Token(Identifier, "any", (716,42)->(716,45))
                                             ^ Token(AngleRight, ">", (716,45)->(716,46))
                                              ^ Token(Comma, ",", (716,46)->(716,47))
                                                ^^^^^^^ Token(Identifier, "request", (716,48)->(716,55))
                                                       ^^ Token(SpacedColon, ": ", (716,55)->(716,57))
                                                         ^^^^ Token(Identifier, "dict", (716,57)->(716,61))
                                                             ^ Token(AngleLeft, "<", (716,61)->(716,62))
                                                              ^^^ Token(Identifier, "any", (716,62)->(716,65))
                                                                 ^ Token(AngleRight, ">", (716,65)->(716,66))
                                                                  ^ Token(RightParen, ")", (716,66)->(716,67))
                                                                    Token(EndOfLine, "\n", (716,67)->(716,67))
  var lspRequestHandlers: dict<func> =
  ^^^ Token(Identifier, "var", (717,2)->(717,5))
      ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lspRequestHandlers", (717,6)->(717,24))
                        ^^ Token(SpacedColon, ": ", (717,24)->(717,26))
                          ^^^^ Token(Identifier, "dict", (717,26)->(717,30))
                              ^ Token(AngleLeft, "<", (717,30)->(717,31))
                               ^^^^ Token(Identifier, "func", (717,31)->(717,35))
                                   ^ Token(GreaterThan, ">", (717,35)->(717,36))
                                     ^ Token(Equal, "=", (717,37)->(717,38))
                                       Token(EndOfLine, "\n", (717,38)->(717,38))
    {
    ^ Token(LeftBrace, "{", (718,4)->(718,5))
      Token(EndOfLine, "\n", (718,5)->(718,5))
      'workspace/applyEdit': ProcessApplyEditReq,
       ^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/applyEdit", (719,7)->(719,25))
                           ^^ Token(SpacedColon, ": ", (719,27)->(719,29))
                             ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessApplyEditReq", (719,29)->(719,48))
                                                ^ Token(Comma, ",", (719,48)->(719,49))
                                                  Token(EndOfLine, "\n", (719,49)->(719,49))
      'workspace/workspaceFolders': ProcessWorkspaceFoldersReq,
       ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/workspaceFolders", (720,7)->(720,32))
                                  ^^ Token(SpacedColon, ": ", (720,34)->(720,36))
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessWorkspaceFoldersReq", (720,36)->(720,62))
                                                              ^ Token(Comma, ",", (720,62)->(720,63))
                                                                Token(EndOfLine, "\n", (720,63)->(720,63))
      'window/workDoneProgress/create': ProcessUnsupportedReq,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "window/workDoneProgress/create", (721,7)->(721,36))
                                      ^^ Token(SpacedColon, ": ", (721,38)->(721,40))
                                        ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedReq", (721,40)->(721,61))
                                                             ^ Token(Comma, ",", (721,61)->(721,62))
                                                               Token(EndOfLine, "\n", (721,62)->(721,62))
      'client/registerCapability': ProcessClientRegisterCap,
       ^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "client/registerCapability", (722,7)->(722,31))
                                 ^^ Token(SpacedColon, ": ", (722,33)->(722,35))
                                   ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessClientRegisterCap", (722,35)->(722,59))
                                                           ^ Token(Comma, ",", (722,59)->(722,60))
                                                             Token(EndOfLine, "\n", (722,60)->(722,60))
      'client/unregisterCapability': ProcessClientUnregisterCap,
       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "client/unregisterCapability", (723,7)->(723,33))
                                   ^^ Token(SpacedColon, ": ", (723,35)->(723,37))
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessClientUnregisterCap", (723,37)->(723,63))
                                                               ^ Token(Comma, ",", (723,63)->(723,64))
                                                                 Token(EndOfLine, "\n", (723,64)->(723,64))
      'workspace/configuration': ProcessUnsupportedReq,
       ^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/configuration", (724,7)->(724,29))
                               ^^ Token(SpacedColon, ": ", (724,31)->(724,33))
                                 ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedReq", (724,33)->(724,54))
                                                      ^ Token(Comma, ",", (724,54)->(724,55))
                                                        Token(EndOfLine, "\n", (724,55)->(724,55))
      'workspace/codeLens/refresh': ProcessUnsupportedReq,
       ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/codeLens/refresh", (725,7)->(725,32))
                                  ^^ Token(SpacedColon, ": ", (725,34)->(725,36))
                                    ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedReq", (725,36)->(725,57))
                                                         ^ Token(Comma, ",", (725,57)->(725,58))
                                                           Token(EndOfLine, "\n", (725,58)->(725,58))
      'workspace/semanticTokens/refresh': ProcessUnsupportedReq
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "workspace/semanticTokens/refresh", (726,7)->(726,38))
                                        ^^ Token(SpacedColon, ": ", (726,40)->(726,42))
                                          ^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "ProcessUnsupportedReq", (726,42)->(726,63))
                                                                Token(EndOfLine, "\n", (726,63)->(726,63))
    }
    ^ Token(RightBrace, "}", (727,4)->(727,5))
      Token(EndOfLine, "\n", (727,5)->(727,5))

 Token(EndOfLine, "\n", (728,0)->(728,0))
  if lspRequestHandlers->has_key(request.method)
  ^^ Token(Identifier, "if", (729,2)->(729,4))
     ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lspRequestHandlers", (729,5)->(729,23))
                       ^^ Token(MethodArrow, "->", (729,23)->(729,25))
                         ^^^^^^^ Token(Identifier, "has_key", (729,25)->(729,32))
                                ^ Token(LeftParen, "(", (729,32)->(729,33))
                                 ^^^^^^^ Token(Identifier, "request", (729,33)->(729,40))
                                        ^ Token(Dot, ".", (729,40)->(729,41))
                                         ^^^^^^ Token(Identifier, "method", (729,41)->(729,47))
                                               ^ Token(RightParen, ")", (729,47)->(729,48))
                                                 Token(EndOfLine, "\n", (729,48)->(729,48))
    lspRequestHandlers[request.method](lspserver, request)
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lspRequestHandlers", (730,4)->(730,22))
                      ^ Token(LeftBracket, "[", (730,22)->(730,23))
                       ^^^^^^^ Token(Identifier, "request", (730,23)->(730,30))
                              ^ Token(Dot, ".", (730,30)->(730,31))
                               ^^^^^^ Token(Identifier, "method", (730,31)->(730,37))
                                     ^ Token(RightBracket, "]", (730,37)->(730,38))
                                      ^ Token(LeftParen, "(", (730,38)->(730,39))
                                       ^^^^^^^^^ Token(Identifier, "lspserver", (730,39)->(730,48))
                                                ^ Token(Comma, ",", (730,48)->(730,49))
                                                  ^^^^^^^ Token(Identifier, "request", (730,50)->(730,57))
                                                         ^ Token(RightParen, ")", (730,57)->(730,58))
                                                           Token(EndOfLine, "\n", (730,58)->(730,58))
  else
  ^^^^ Token(Identifier, "else", (731,2)->(731,6))
       Token(EndOfLine, "\n", (731,6)->(731,6))
    util.ErrMsg($'Error: Unsupported request message received from the LSP server ({lspserver.path}), message = {request->string()}')
    ^^^^ Token(Identifier, "util", (732,4)->(732,8))
        ^ Token(Dot, ".", (732,8)->(732,9))
         ^^^^^^ Token(Identifier, "ErrMsg", (732,9)->(732,15))
               ^ Token(LeftParen, "(", (732,15)->(732,16))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error: Unsupported request message received from the LSP server ({lspserver.path}), message = {request->string()}", (732,18)->(732,130))
                                                                                                                                    ^ Token(RightParen, ")", (732,132)->(732,133))
                                                                                                                                      Token(EndOfLine, "\n", (732,133)->(732,133))
  endif
  ^^^^^ Token(Identifier, "endif", (733,2)->(733,7))
        Token(EndOfLine, "\n", (733,7)->(733,7))
enddef
^^^^^^ Token(Identifier, "enddef", (734,0)->(734,6))
       Token(EndOfLine, "\n", (734,6)->(734,6))

 Token(EndOfLine, "\n", (735,0)->(735,0))
# process one or more LSP server messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# process one or more LSP server messages", (736,0)->(736,41))
export def ProcessMessages(lspserver: dict<any>): void
^^^^^^ Token(Identifier, "export", (737,0)->(737,6))
       ^^^ Token(Identifier, "def", (737,7)->(737,10))
           ^^^^^^^^^^^^^^^ Token(Identifier, "ProcessMessages", (737,11)->(737,26))
                          ^ Token(LeftParen, "(", (737,26)->(737,27))
                           ^^^^^^^^^ Token(Identifier, "lspserver", (737,27)->(737,36))
                                    ^^ Token(SpacedColon, ": ", (737,36)->(737,38))
                                      ^^^^ Token(Identifier, "dict", (737,38)->(737,42))
                                          ^ Token(AngleLeft, "<", (737,42)->(737,43))
                                           ^^^ Token(Identifier, "any", (737,43)->(737,46))
                                              ^ Token(AngleRight, ">", (737,46)->(737,47))
                                               ^ Token(RightParen, ")", (737,47)->(737,48))
                                                ^^ Token(SpacedColon, ": ", (737,48)->(737,50))
                                                  ^^^^ Token(Identifier, "void", (737,50)->(737,54))
                                                       Token(EndOfLine, "\n", (737,54)->(737,54))
  var idx: number
  ^^^ Token(Identifier, "var", (738,2)->(738,5))
      ^^^ Token(Identifier, "idx", (738,6)->(738,9))
         ^^ Token(SpacedColon, ": ", (738,9)->(738,11))
           ^^^^^^ Token(Identifier, "number", (738,11)->(738,17))
                  Token(EndOfLine, "\n", (738,17)->(738,17))
  var len: number
  ^^^ Token(Identifier, "var", (739,2)->(739,5))
      ^^^ Token(Identifier, "len", (739,6)->(739,9))
         ^^ Token(SpacedColon, ": ", (739,9)->(739,11))
           ^^^^^^ Token(Identifier, "number", (739,11)->(739,17))
                  Token(EndOfLine, "\n", (739,17)->(739,17))
  var content: string
  ^^^ Token(Identifier, "var", (740,2)->(740,5))
      ^^^^^^^ Token(Identifier, "content", (740,6)->(740,13))
             ^^ Token(SpacedColon, ": ", (740,13)->(740,15))
               ^^^^^^ Token(Identifier, "string", (740,15)->(740,21))
                      Token(EndOfLine, "\n", (740,21)->(740,21))
  var msg: dict<any>
  ^^^ Token(Identifier, "var", (741,2)->(741,5))
      ^^^ Token(Identifier, "msg", (741,6)->(741,9))
         ^^ Token(SpacedColon, ": ", (741,9)->(741,11))
           ^^^^ Token(Identifier, "dict", (741,11)->(741,15))
               ^ Token(AngleLeft, "<", (741,15)->(741,16))
                ^^^ Token(Identifier, "any", (741,16)->(741,19))
                   ^ Token(GreaterThan, ">", (741,19)->(741,20))
                     Token(EndOfLine, "\n", (741,20)->(741,20))
  var req: dict<any>
  ^^^ Token(Identifier, "var", (742,2)->(742,5))
      ^^^ Token(Identifier, "req", (742,6)->(742,9))
         ^^ Token(SpacedColon, ": ", (742,9)->(742,11))
           ^^^^ Token(Identifier, "dict", (742,11)->(742,15))
               ^ Token(AngleLeft, "<", (742,15)->(742,16))
                ^^^ Token(Identifier, "any", (742,16)->(742,19))
                   ^ Token(GreaterThan, ">", (742,19)->(742,20))
                     Token(EndOfLine, "\n", (742,20)->(742,20))

 Token(EndOfLine, "\n", (743,0)->(743,0))
  msg = lspserver.data
  ^^^ Token(Identifier, "msg", (744,2)->(744,5))
      ^ Token(Equal, "=", (744,6)->(744,7))
        ^^^^^^^^^ Token(Identifier, "lspserver", (744,8)->(744,17))
                 ^ Token(Dot, ".", (744,17)->(744,18))
                  ^^^^ Token(Identifier, "data", (744,18)->(744,22))
                       Token(EndOfLine, "\n", (744,22)->(744,22))
  if msg->has_key('result') || msg->has_key('error')
  ^^ Token(Identifier, "if", (745,2)->(745,4))
     ^^^ Token(Identifier, "msg", (745,5)->(745,8))
        ^^ Token(MethodArrow, "->", (745,8)->(745,10))
          ^^^^^^^ Token(Identifier, "has_key", (745,10)->(745,17))
                 ^ Token(LeftParen, "(", (745,17)->(745,18))
                   ^^^^^ Token(SingleQuoteString, "result", (745,19)->(745,24))
                          ^ Token(RightParen, ")", (745,26)->(745,27))
                            ^^ Token(Or, "||", (745,28)->(745,30))
                               ^^^ Token(Identifier, "msg", (745,31)->(745,34))
                                  ^^ Token(MethodArrow, "->", (745,34)->(745,36))
                                    ^^^^^^^ Token(Identifier, "has_key", (745,36)->(745,43))
                                           ^ Token(LeftParen, "(", (745,43)->(745,44))
                                             ^^^^ Token(SingleQuoteString, "error", (745,45)->(745,49))
                                                   ^ Token(RightParen, ")", (745,51)->(745,52))
                                                     Token(EndOfLine, "\n", (745,52)->(745,52))
    # response message from the server
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# response message from the server", (746,4)->(746,38))
    req = lspserver.requests->get(msg.id->string(), {})
    ^^^ Token(Identifier, "req", (747,4)->(747,7))
        ^ Token(Equal, "=", (747,8)->(747,9))
          ^^^^^^^^^ Token(Identifier, "lspserver", (747,10)->(747,19))
                   ^ Token(Dot, ".", (747,19)->(747,20))
                    ^^^^^^^^ Token(Identifier, "requests", (747,20)->(747,28))
                            ^^ Token(MethodArrow, "->", (747,28)->(747,30))
                              ^^^ Token(Identifier, "get", (747,30)->(747,33))
                                 ^ Token(LeftParen, "(", (747,33)->(747,34))
                                  ^^^ Token(Identifier, "msg", (747,34)->(747,37))
                                     ^ Token(Dot, ".", (747,37)->(747,38))
                                      ^^ Token(Identifier, "id", (747,38)->(747,40))
                                        ^^ Token(MethodArrow, "->", (747,40)->(747,42))
                                          ^^^^^^ Token(Identifier, "string", (747,42)->(747,48))
                                                ^ Token(LeftParen, "(", (747,48)->(747,49))
                                                 ^ Token(RightParen, ")", (747,49)->(747,50))
                                                  ^ Token(Comma, ",", (747,50)->(747,51))
                                                    ^ Token(LeftBrace, "{", (747,52)->(747,53))
                                                     ^ Token(RightBrace, "}", (747,53)->(747,54))
                                                      ^ Token(RightParen, ")", (747,54)->(747,55))
                                                        Token(EndOfLine, "\n", (747,55)->(747,55))
    if !req->empty()
    ^^ Token(Identifier, "if", (748,4)->(748,6))
       ^ Token(Bang, "!", (748,7)->(748,8))
        ^^^ Token(Identifier, "req", (748,8)->(748,11))
           ^^ Token(MethodArrow, "->", (748,11)->(748,13))
             ^^^^^ Token(Identifier, "empty", (748,13)->(748,18))
                  ^ Token(LeftParen, "(", (748,18)->(748,19))
                   ^ Token(RightParen, ")", (748,19)->(748,20))
                     Token(EndOfLine, "\n", (748,20)->(748,20))
      # Remove the corresponding stored request message
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Remove the corresponding stored request message", (749,6)->(749,55))
      lspserver.requests->remove(msg.id->string())
      ^^^^^^^^^ Token(Identifier, "lspserver", (750,6)->(750,15))
               ^ Token(Dot, ".", (750,15)->(750,16))
                ^^^^^^^^ Token(Identifier, "requests", (750,16)->(750,24))
                        ^^ Token(MethodArrow, "->", (750,24)->(750,26))
                          ^^^^^^ Token(Identifier, "remove", (750,26)->(750,32))
                                ^ Token(LeftParen, "(", (750,32)->(750,33))
                                 ^^^ Token(Identifier, "msg", (750,33)->(750,36))
                                    ^ Token(Dot, ".", (750,36)->(750,37))
                                     ^^ Token(Identifier, "id", (750,37)->(750,39))
                                       ^^ Token(MethodArrow, "->", (750,39)->(750,41))
                                         ^^^^^^ Token(Identifier, "string", (750,41)->(750,47))
                                               ^ Token(LeftParen, "(", (750,47)->(750,48))
                                                ^ Token(RightParen, ")", (750,48)->(750,49))
                                                 ^ Token(RightParen, ")", (750,49)->(750,50))
                                                   Token(EndOfLine, "\n", (750,50)->(750,50))

 Token(EndOfLine, "\n", (751,0)->(751,0))
      if msg->has_key('result')
      ^^ Token(Identifier, "if", (752,6)->(752,8))
         ^^^ Token(Identifier, "msg", (752,9)->(752,12))
            ^^ Token(MethodArrow, "->", (752,12)->(752,14))
              ^^^^^^^ Token(Identifier, "has_key", (752,14)->(752,21))
                     ^ Token(LeftParen, "(", (752,21)->(752,22))
                       ^^^^^ Token(SingleQuoteString, "result", (752,23)->(752,28))
                              ^ Token(RightParen, ")", (752,30)->(752,31))
                                Token(EndOfLine, "\n", (752,31)->(752,31))
	lspserver.processReply(req, msg)
 ^^^^^^^^^ Token(Identifier, "lspserver", (753,1)->(753,10))
          ^ Token(Dot, ".", (753,10)->(753,11))
           ^^^^^^^^^^^^ Token(Identifier, "processReply", (753,11)->(753,23))
                       ^ Token(LeftParen, "(", (753,23)->(753,24))
                        ^^^ Token(Identifier, "req", (753,24)->(753,27))
                           ^ Token(Comma, ",", (753,27)->(753,28))
                             ^^^ Token(Identifier, "msg", (753,29)->(753,32))
                                ^ Token(RightParen, ")", (753,32)->(753,33))
                                  Token(EndOfLine, "\n", (753,33)->(753,33))
      else
      ^^^^ Token(Identifier, "else", (754,6)->(754,10))
           Token(EndOfLine, "\n", (754,10)->(754,10))
	# request failed
 ^^^^^^^^^^^^^^^^ Token(Comment, "# request failed", (755,1)->(755,17))
	var emsg: string = msg.error.message
 ^^^ Token(Identifier, "var", (756,1)->(756,4))
     ^^^^ Token(Identifier, "emsg", (756,5)->(756,9))
         ^^ Token(SpacedColon, ": ", (756,9)->(756,11))
           ^^^^^^ Token(Identifier, "string", (756,11)->(756,17))
                  ^ Token(Equal, "=", (756,18)->(756,19))
                    ^^^ Token(Identifier, "msg", (756,20)->(756,23))
                       ^ Token(Dot, ".", (756,23)->(756,24))
                        ^^^^^ Token(Identifier, "error", (756,24)->(756,29))
                             ^ Token(Dot, ".", (756,29)->(756,30))
                              ^^^^^^^ Token(Identifier, "message", (756,30)->(756,37))
                                      Token(EndOfLine, "\n", (756,37)->(756,37))
	emsg ..= ', code = ' .. msg.error.code
 ^^^^ Token(Identifier, "emsg", (757,1)->(757,5))
      ^^^ Token(StringConcatEquals, "..=", (757,6)->(757,9))
           ^^^^^^^^ Token(SingleQuoteString, ", code = ", (757,11)->(757,19))
                      ^^ Token(StringConcat, "..", (757,22)->(757,24))
                         ^^^ Token(Identifier, "msg", (757,25)->(757,28))
                            ^ Token(Dot, ".", (757,28)->(757,29))
                             ^^^^^ Token(Identifier, "error", (757,29)->(757,34))
                                  ^ Token(Dot, ".", (757,34)->(757,35))
                                   ^^^^ Token(Identifier, "code", (757,35)->(757,39))
                                        Token(EndOfLine, "\n", (757,39)->(757,39))
	if msg.error->has_key('data')
 ^^ Token(Identifier, "if", (758,1)->(758,3))
    ^^^ Token(Identifier, "msg", (758,4)->(758,7))
       ^ Token(Dot, ".", (758,7)->(758,8))
        ^^^^^ Token(Identifier, "error", (758,8)->(758,13))
             ^^ Token(MethodArrow, "->", (758,13)->(758,15))
               ^^^^^^^ Token(Identifier, "has_key", (758,15)->(758,22))
                      ^ Token(LeftParen, "(", (758,22)->(758,23))
                        ^^^ Token(SingleQuoteString, "data", (758,24)->(758,27))
                             ^ Token(RightParen, ")", (758,29)->(758,30))
                               Token(EndOfLine, "\n", (758,30)->(758,30))
	  emsg = emsg .. ', data = ' .. msg.error.data->string()
   ^^^^ Token(Identifier, "emsg", (759,3)->(759,7))
        ^ Token(Equal, "=", (759,8)->(759,9))
          ^^^^ Token(Identifier, "emsg", (759,10)->(759,14))
               ^^ Token(StringConcat, "..", (759,15)->(759,17))
                   ^^^^^^^^ Token(SingleQuoteString, ", data = ", (759,19)->(759,27))
                              ^^ Token(StringConcat, "..", (759,30)->(759,32))
                                 ^^^ Token(Identifier, "msg", (759,33)->(759,36))
                                    ^ Token(Dot, ".", (759,36)->(759,37))
                                     ^^^^^ Token(Identifier, "error", (759,37)->(759,42))
                                          ^ Token(Dot, ".", (759,42)->(759,43))
                                           ^^^^ Token(Identifier, "data", (759,43)->(759,47))
                                               ^^ Token(MethodArrow, "->", (759,47)->(759,49))
                                                 ^^^^^^ Token(Identifier, "string", (759,49)->(759,55))
                                                       ^ Token(LeftParen, "(", (759,55)->(759,56))
                                                        ^ Token(RightParen, ")", (759,56)->(759,57))
                                                          Token(EndOfLine, "\n", (759,57)->(759,57))
	endif
 ^^^^^ Token(Identifier, "endif", (760,1)->(760,6))
       Token(EndOfLine, "\n", (760,6)->(760,6))
	util.ErrMsg($'Error(LSP): request {req.method} failed ({emsg})')
 ^^^^ Token(Identifier, "util", (761,1)->(761,5))
     ^ Token(Dot, ".", (761,5)->(761,6))
      ^^^^^^ Token(Identifier, "ErrMsg", (761,6)->(761,12))
            ^ Token(LeftParen, "(", (761,12)->(761,13))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error(LSP): request {req.method} failed ({emsg})", (761,15)->(761,62))
                                                                ^ Token(RightParen, ")", (761,64)->(761,65))
                                                                  Token(EndOfLine, "\n", (761,65)->(761,65))
      endif
      ^^^^^ Token(Identifier, "endif", (762,6)->(762,11))
            Token(EndOfLine, "\n", (762,11)->(762,11))
    endif
    ^^^^^ Token(Identifier, "endif", (763,4)->(763,9))
          Token(EndOfLine, "\n", (763,9)->(763,9))
  elseif msg->has_key('id') && msg->has_key('method')
  ^^^^^^ Token(Identifier, "elseif", (764,2)->(764,8))
         ^^^ Token(Identifier, "msg", (764,9)->(764,12))
            ^^ Token(MethodArrow, "->", (764,12)->(764,14))
              ^^^^^^^ Token(Identifier, "has_key", (764,14)->(764,21))
                     ^ Token(LeftParen, "(", (764,21)->(764,22))
                       ^ Token(SingleQuoteString, "id", (764,23)->(764,24))
                          ^ Token(RightParen, ")", (764,26)->(764,27))
                            ^^ Token(And, "&&", (764,28)->(764,30))
                               ^^^ Token(Identifier, "msg", (764,31)->(764,34))
                                  ^^ Token(MethodArrow, "->", (764,34)->(764,36))
                                    ^^^^^^^ Token(Identifier, "has_key", (764,36)->(764,43))
                                           ^ Token(LeftParen, "(", (764,43)->(764,44))
                                             ^^^^^ Token(SingleQuoteString, "method", (764,45)->(764,50))
                                                    ^ Token(RightParen, ")", (764,52)->(764,53))
                                                      Token(EndOfLine, "\n", (764,53)->(764,53))
    # request message from the server
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# request message from the server", (765,4)->(765,37))
    lspserver.processRequest(msg)
    ^^^^^^^^^ Token(Identifier, "lspserver", (766,4)->(766,13))
             ^ Token(Dot, ".", (766,13)->(766,14))
              ^^^^^^^^^^^^^^ Token(Identifier, "processRequest", (766,14)->(766,28))
                            ^ Token(LeftParen, "(", (766,28)->(766,29))
                             ^^^ Token(Identifier, "msg", (766,29)->(766,32))
                                ^ Token(RightParen, ")", (766,32)->(766,33))
                                  Token(EndOfLine, "\n", (766,33)->(766,33))
  elseif msg->has_key('method')
  ^^^^^^ Token(Identifier, "elseif", (767,2)->(767,8))
         ^^^ Token(Identifier, "msg", (767,9)->(767,12))
            ^^ Token(MethodArrow, "->", (767,12)->(767,14))
              ^^^^^^^ Token(Identifier, "has_key", (767,14)->(767,21))
                     ^ Token(LeftParen, "(", (767,21)->(767,22))
                       ^^^^^ Token(SingleQuoteString, "method", (767,23)->(767,28))
                              ^ Token(RightParen, ")", (767,30)->(767,31))
                                Token(EndOfLine, "\n", (767,31)->(767,31))
    # notification message from the server
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# notification message from the server", (768,4)->(768,42))
    lspserver.processNotif(msg)
    ^^^^^^^^^ Token(Identifier, "lspserver", (769,4)->(769,13))
             ^ Token(Dot, ".", (769,13)->(769,14))
              ^^^^^^^^^^^^ Token(Identifier, "processNotif", (769,14)->(769,26))
                          ^ Token(LeftParen, "(", (769,26)->(769,27))
                           ^^^ Token(Identifier, "msg", (769,27)->(769,30))
                              ^ Token(RightParen, ")", (769,30)->(769,31))
                                Token(EndOfLine, "\n", (769,31)->(769,31))
  else
  ^^^^ Token(Identifier, "else", (770,2)->(770,6))
       Token(EndOfLine, "\n", (770,6)->(770,6))
    util.ErrMsg($'Error(LSP): Unsupported message ({msg->string()})')
    ^^^^ Token(Identifier, "util", (771,4)->(771,8))
        ^ Token(Dot, ".", (771,8)->(771,9))
         ^^^^^^ Token(Identifier, "ErrMsg", (771,9)->(771,15))
               ^ Token(LeftParen, "(", (771,15)->(771,16))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(InterpolatedLiteralString, "Error(LSP): Unsupported message ({msg->string()})", (771,18)->(771,66))
                                                                    ^ Token(RightParen, ")", (771,68)->(771,69))
                                                                      Token(EndOfLine, "\n", (771,69)->(771,69))
  endif
  ^^^^^ Token(Identifier, "endif", (772,2)->(772,7))
        Token(EndOfLine, "\n", (772,7)->(772,7))
enddef
^^^^^^ Token(Identifier, "enddef", (773,0)->(773,6))
       Token(EndOfLine, "\n", (773,6)->(773,6))

 Token(EndOfLine, "\n", (774,0)->(774,0))
# vim: shiftwidth=2 softtabstop=2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# vim: shiftwidth=2 softtabstop=2", (775,0)->(775,33))

