---
source: crates/vim9-lexer/src/lib.rs
assertion_line: 738
expression: snapshot_lexing(contents)
---
vim9script
^^^^^^^^^^ Token(Identifier, "vim9script", (0,0)->(0,10))
           Token(EndOfLine, "\n", (0,10)->(0,10))

 Token(EndOfLine, "\n", (1,0)->(1,0))
var x = 10
^^^ Token(Identifier, "var", (2,0)->(2,3))
    ^ Token(Identifier, "x", (2,4)->(2,5))
      ^ Token(Equal, "=", (2,6)->(2,7))
        ^^ Token(Integer, "10", (2,8)->(2,10))
           Token(EndOfLine, "\n", (2,10)->(2,10))
if x == 10 || x >= 10 || x <= 10 || x > 10 || x < 10
^^ Token(Identifier, "if", (3,0)->(3,2))
   ^ Token(Identifier, "x", (3,3)->(3,4))
     ^^ Token(EqualTo, "==", (3,5)->(3,7))
        ^^ Token(Integer, "10", (3,8)->(3,10))
           ^^ Token(Or, "||", (3,11)->(3,13))
              ^ Token(Identifier, "x", (3,14)->(3,15))
                ^^ Token(GreaterThanOrEqual, ">=", (3,16)->(3,18))
                   ^^ Token(Integer, "10", (3,19)->(3,21))
                      ^^ Token(Or, "||", (3,22)->(3,24))
                         ^ Token(Identifier, "x", (3,25)->(3,26))
                           ^^ Token(LessThanOrEqual, "<=", (3,27)->(3,29))
                              ^^ Token(Integer, "10", (3,30)->(3,32))
                                 ^^ Token(Or, "||", (3,33)->(3,35))
                                    ^ Token(Identifier, "x", (3,36)->(3,37))
                                      ^ Token(GreaterThan, ">", (3,38)->(3,39))
                                        ^^ Token(Integer, "10", (3,40)->(3,42))
                                           ^^ Token(Or, "||", (3,43)->(3,45))
                                              ^ Token(Identifier, "x", (3,46)->(3,47))
                                                ^ Token(LessThan, "<", (3,48)->(3,49))
                                                  ^^ Token(Integer, "10", (3,50)->(3,52))
                                                     Token(EndOfLine, "\n", (3,52)->(3,52))
  x += 1
  ^ Token(Identifier, "x", (4,2)->(4,3))
    ^^ Token(PlusEquals, "+=", (4,4)->(4,6))
       ^ Token(Integer, "1", (4,7)->(4,8))
         Token(EndOfLine, "\n", (4,8)->(4,8))
  x *= 1
  ^ Token(Identifier, "x", (5,2)->(5,3))
    ^^ Token(MulEquals, "*=", (5,4)->(5,6))
       ^ Token(Integer, "1", (5,7)->(5,8))
         Token(EndOfLine, "\n", (5,8)->(5,8))
  x /= 1
  ^ Token(Identifier, "x", (6,2)->(6,3))
    ^^ Token(DivEquals, "/=", (6,4)->(6,6))
       ^ Token(Integer, "1", (6,7)->(6,8))
         Token(EndOfLine, "\n", (6,8)->(6,8))
  x -= 1
  ^ Token(Identifier, "x", (7,2)->(7,3))
    ^^ Token(MinusEquals, "-=", (7,4)->(7,6))
       ^ Token(Integer, "1", (7,7)->(7,8))
         Token(EndOfLine, "\n", (7,8)->(7,8))
  echo x
  ^^^^ Token(Identifier, "echo", (8,2)->(8,6))
       ^ Token(Identifier, "x", (8,7)->(8,8))
         Token(EndOfLine, "\n", (8,8)->(8,8))
endif
^^^^^ Token(Identifier, "endif", (9,0)->(9,5))
      Token(EndOfLine, "\n", (9,5)->(9,5))

 Token(EndOfLine, "\n", (10,0)->(10,0))
var a = "hello"
^^^ Token(Identifier, "var", (11,0)->(11,3))
    ^ Token(Identifier, "a", (11,4)->(11,5))
      ^ Token(Equal, "=", (11,6)->(11,7))
         ^^^^ Token(DoubleQuoteString, "hello", (11,9)->(11,13))
                Token(EndOfLine, "\n", (11,15)->(11,15))
var b = "world"
^^^ Token(Identifier, "var", (12,0)->(12,3))
    ^ Token(Identifier, "b", (12,4)->(12,5))
      ^ Token(Equal, "=", (12,6)->(12,7))
         ^^^^ Token(DoubleQuoteString, "world", (12,9)->(12,13))
                Token(EndOfLine, "\n", (12,15)->(12,15))

 Token(EndOfLine, "\n", (13,0)->(13,0))
var equal = a == b || a ==# b
^^^ Token(Identifier, "var", (14,0)->(14,3))
    ^^^^^ Token(Identifier, "equal", (14,4)->(14,9))
          ^ Token(Equal, "=", (14,10)->(14,11))
            ^ Token(Identifier, "a", (14,12)->(14,13))
              ^^ Token(EqualTo, "==", (14,14)->(14,16))
                 ^ Token(Identifier, "b", (14,17)->(14,18))
                   ^^ Token(Or, "||", (14,19)->(14,21))
                      ^ Token(Identifier, "a", (14,22)->(14,23))
                        ^^^ Token(EqualTo, "==#", (14,24)->(14,27))
                            ^ Token(Identifier, "b", (14,28)->(14,29))
                              Token(EndOfLine, "\n", (14,29)->(14,29))
var equal_ins = a ==? b
^^^ Token(Identifier, "var", (15,0)->(15,3))
    ^^^^^^^^^ Token(Identifier, "equal_ins", (15,4)->(15,13))
              ^ Token(Equal, "=", (15,14)->(15,15))
                ^ Token(Identifier, "a", (15,16)->(15,17))
                  ^^^ Token(EqualToIns, "==?", (15,18)->(15,21))
                      ^ Token(Identifier, "b", (15,22)->(15,23))
                        Token(EndOfLine, "\n", (15,23)->(15,23))

 Token(EndOfLine, "\n", (16,0)->(16,0))
var neq = a != b || a !=# b
^^^ Token(Identifier, "var", (17,0)->(17,3))
    ^^^ Token(Identifier, "neq", (17,4)->(17,7))
        ^ Token(Equal, "=", (17,8)->(17,9))
          ^ Token(Identifier, "a", (17,10)->(17,11))
            ^^ Token(NotEqualTo, "!=", (17,12)->(17,14))
               ^ Token(Identifier, "b", (17,15)->(17,16))
                 ^^ Token(Or, "||", (17,17)->(17,19))
                    ^ Token(Identifier, "a", (17,20)->(17,21))
                      ^^^ Token(NotEqualTo, "!=#", (17,22)->(17,25))
                          ^ Token(Identifier, "b", (17,26)->(17,27))
                            Token(EndOfLine, "\n", (17,27)->(17,27))
var neq_ins = a !=? b
^^^ Token(Identifier, "var", (18,0)->(18,3))
    ^^^^^^^ Token(Identifier, "neq_ins", (18,4)->(18,11))
            ^ Token(Equal, "=", (18,12)->(18,13))
              ^ Token(Identifier, "a", (18,14)->(18,15))
                ^^^ Token(NotEqualToIns, "!=?", (18,16)->(18,19))
                    ^ Token(Identifier, "b", (18,20)->(18,21))
                      Token(EndOfLine, "\n", (18,21)->(18,21))

 Token(EndOfLine, "\n", (19,0)->(19,0))
var gt = a > b || a ># b
^^^ Token(Identifier, "var", (20,0)->(20,3))
    ^^ Token(Identifier, "gt", (20,4)->(20,6))
       ^ Token(Equal, "=", (20,7)->(20,8))
         ^ Token(Identifier, "a", (20,9)->(20,10))
           ^ Token(GreaterThan, ">", (20,11)->(20,12))
             ^ Token(Identifier, "b", (20,13)->(20,14))
               ^^ Token(Or, "||", (20,15)->(20,17))
                  ^ Token(Identifier, "a", (20,18)->(20,19))
                    ^^ Token(GreaterThan, ">#", (20,20)->(20,22))
                       ^ Token(Identifier, "b", (20,23)->(20,24))
                         Token(EndOfLine, "\n", (20,24)->(20,24))
var gt_ins = a >? b
^^^ Token(Identifier, "var", (21,0)->(21,3))
    ^^^^^^ Token(Identifier, "gt_ins", (21,4)->(21,10))
           ^ Token(Equal, "=", (21,11)->(21,12))
             ^ Token(Identifier, "a", (21,13)->(21,14))
               ^^ Token(GreaterThanIns, ">?", (21,15)->(21,17))
                  ^ Token(Identifier, "b", (21,18)->(21,19))
                    Token(EndOfLine, "\n", (21,19)->(21,19))

 Token(EndOfLine, "\n", (22,0)->(22,0))
var gte = a >= b || a >=# b
^^^ Token(Identifier, "var", (23,0)->(23,3))
    ^^^ Token(Identifier, "gte", (23,4)->(23,7))
        ^ Token(Equal, "=", (23,8)->(23,9))
          ^ Token(Identifier, "a", (23,10)->(23,11))
            ^^ Token(GreaterThanOrEqual, ">=", (23,12)->(23,14))
               ^ Token(Identifier, "b", (23,15)->(23,16))
                 ^^ Token(Or, "||", (23,17)->(23,19))
                    ^ Token(Identifier, "a", (23,20)->(23,21))
                      ^^^ Token(GreaterThanOrEqual, ">=#", (23,22)->(23,25))
                          ^ Token(Identifier, "b", (23,26)->(23,27))
                            Token(EndOfLine, "\n", (23,27)->(23,27))
var gte_ins = a >=? b
^^^ Token(Identifier, "var", (24,0)->(24,3))
    ^^^^^^^ Token(Identifier, "gte_ins", (24,4)->(24,11))
            ^ Token(Equal, "=", (24,12)->(24,13))
              ^ Token(Identifier, "a", (24,14)->(24,15))
                ^^^ Token(GreaterThanOrEqualIns, ">=?", (24,16)->(24,19))
                    ^ Token(Identifier, "b", (24,20)->(24,21))
                      Token(EndOfLine, "\n", (24,21)->(24,21))

 Token(EndOfLine, "\n", (25,0)->(25,0))
var lt = a < b || a <# b
^^^ Token(Identifier, "var", (26,0)->(26,3))
    ^^ Token(Identifier, "lt", (26,4)->(26,6))
       ^ Token(Equal, "=", (26,7)->(26,8))
         ^ Token(Identifier, "a", (26,9)->(26,10))
           ^ Token(LessThan, "<", (26,11)->(26,12))
             ^ Token(Identifier, "b", (26,13)->(26,14))
               ^^ Token(Or, "||", (26,15)->(26,17))
                  ^ Token(Identifier, "a", (26,18)->(26,19))
                    ^^ Token(LessThan, "<#", (26,20)->(26,22))
                       ^ Token(Identifier, "b", (26,23)->(26,24))
                         Token(EndOfLine, "\n", (26,24)->(26,24))
var lt_ins = a <? b
^^^ Token(Identifier, "var", (27,0)->(27,3))
    ^^^^^^ Token(Identifier, "lt_ins", (27,4)->(27,10))
           ^ Token(Equal, "=", (27,11)->(27,12))
             ^ Token(Identifier, "a", (27,13)->(27,14))
               ^^ Token(LessThanIns, "<?", (27,15)->(27,17))
                  ^ Token(Identifier, "b", (27,18)->(27,19))
                    Token(EndOfLine, "\n", (27,19)->(27,19))

 Token(EndOfLine, "\n", (28,0)->(28,0))
var lte = a <= b || a <=# b
^^^ Token(Identifier, "var", (29,0)->(29,3))
    ^^^ Token(Identifier, "lte", (29,4)->(29,7))
        ^ Token(Equal, "=", (29,8)->(29,9))
          ^ Token(Identifier, "a", (29,10)->(29,11))
            ^^ Token(LessThanOrEqual, "<=", (29,12)->(29,14))
               ^ Token(Identifier, "b", (29,15)->(29,16))
                 ^^ Token(Or, "||", (29,17)->(29,19))
                    ^ Token(Identifier, "a", (29,20)->(29,21))
                      ^^^ Token(LessThanOrEqual, "<=#", (29,22)->(29,25))
                          ^ Token(Identifier, "b", (29,26)->(29,27))
                            Token(EndOfLine, "\n", (29,27)->(29,27))
var lte_ins = a <=? b
^^^ Token(Identifier, "var", (30,0)->(30,3))
    ^^^^^^^ Token(Identifier, "lte_ins", (30,4)->(30,11))
            ^ Token(Equal, "=", (30,12)->(30,13))
              ^ Token(Identifier, "a", (30,14)->(30,15))
                ^^^ Token(LessThanOrEqualIns, "<=?", (30,16)->(30,19))
                    ^ Token(Identifier, "b", (30,20)->(30,21))
                      Token(EndOfLine, "\n", (30,21)->(30,21))

 Token(EndOfLine, "\n", (31,0)->(31,0))
var reg = a =~ b || a =~# b
^^^ Token(Identifier, "var", (32,0)->(32,3))
    ^^^ Token(Identifier, "reg", (32,4)->(32,7))
        ^ Token(Equal, "=", (32,8)->(32,9))
          ^ Token(Identifier, "a", (32,10)->(32,11))
            ^^ Token(RegexpMatches, "=~", (32,12)->(32,14))
               ^ Token(Identifier, "b", (32,15)->(32,16))
                 ^^ Token(Or, "||", (32,17)->(32,19))
                    ^ Token(Identifier, "a", (32,20)->(32,21))
                      ^^^ Token(RegexpMatches, "=~#", (32,22)->(32,25))
                          ^ Token(Identifier, "b", (32,26)->(32,27))
                            Token(EndOfLine, "\n", (32,27)->(32,27))
var reg_ins = a =~? b
^^^ Token(Identifier, "var", (33,0)->(33,3))
    ^^^^^^^ Token(Identifier, "reg_ins", (33,4)->(33,11))
            ^ Token(Equal, "=", (33,12)->(33,13))
              ^ Token(Identifier, "a", (33,14)->(33,15))
                ^^^ Token(RegexpMatchesIns, "=~?", (33,16)->(33,19))
                    ^ Token(Identifier, "b", (33,20)->(33,21))
                      Token(EndOfLine, "\n", (33,21)->(33,21))

 Token(EndOfLine, "\n", (34,0)->(34,0))
var no_reg = a !~ b || a !~# b
^^^ Token(Identifier, "var", (35,0)->(35,3))
    ^^^^^^ Token(Identifier, "no_reg", (35,4)->(35,10))
           ^ Token(Equal, "=", (35,11)->(35,12))
             ^ Token(Identifier, "a", (35,13)->(35,14))
               ^^ Token(NotRegexpMatches, "!~", (35,15)->(35,17))
                  ^ Token(Identifier, "b", (35,18)->(35,19))
                    ^^ Token(Or, "||", (35,20)->(35,22))
                       ^ Token(Identifier, "a", (35,23)->(35,24))
                         ^^^ Token(NotRegexpMatches, "!~#", (35,25)->(35,28))
                             ^ Token(Identifier, "b", (35,29)->(35,30))
                               Token(EndOfLine, "\n", (35,30)->(35,30))
var no_reg_ins = a !~? b
^^^ Token(Identifier, "var", (36,0)->(36,3))
    ^^^^^^^^^^ Token(Identifier, "no_reg_ins", (36,4)->(36,14))
               ^ Token(Equal, "=", (36,15)->(36,16))
                 ^ Token(Identifier, "a", (36,17)->(36,18))
                   ^^^ Token(NotRegexpMatchesIns, "!~?", (36,19)->(36,22))
                       ^ Token(Identifier, "b", (36,23)->(36,24))
                         Token(EndOfLine, "\n", (36,24)->(36,24))

 Token(EndOfLine, "\n", (37,0)->(37,0))
var is_ = a is b || a is# b
^^^ Token(Identifier, "var", (38,0)->(38,3))
    ^^^ Token(Identifier, "is_", (38,4)->(38,7))
        ^ Token(Equal, "=", (38,8)->(38,9))
          ^ Token(Identifier, "a", (38,10)->(38,11))
            ^^ Token(Is, "is", (38,12)->(38,14))
               ^ Token(Identifier, "b", (38,15)->(38,16))
                 ^^ Token(Or, "||", (38,17)->(38,19))
                    ^ Token(Identifier, "a", (38,20)->(38,21))
                      ^^^ Token(Is, "is", (38,22)->(38,25))
                          ^ Token(Identifier, "b", (38,26)->(38,27))
                            Token(EndOfLine, "\n", (38,27)->(38,27))
var is__ins = a is? b
^^^ Token(Identifier, "var", (39,0)->(39,3))
    ^^^^^^^ Token(Identifier, "is__ins", (39,4)->(39,11))
            ^ Token(Equal, "=", (39,12)->(39,13))
              ^ Token(Identifier, "a", (39,14)->(39,15))
                ^^^ Token(IsInsensitive, "is", (39,16)->(39,19))
                    ^ Token(Identifier, "b", (39,20)->(39,21))
                      Token(EndOfLine, "\n", (39,21)->(39,21))

 Token(EndOfLine, "\n", (40,0)->(40,0))
var is_not = a isnot b || a isnot# b
^^^ Token(Identifier, "var", (41,0)->(41,3))
    ^^^^^^ Token(Identifier, "is_not", (41,4)->(41,10))
           ^ Token(Equal, "=", (41,11)->(41,12))
             ^ Token(Identifier, "a", (41,13)->(41,14))
               ^^^^^ Token(IsNot, "isnot", (41,15)->(41,20))
                     ^ Token(Identifier, "b", (41,21)->(41,22))
                       ^^ Token(Or, "||", (41,23)->(41,25))
                          ^ Token(Identifier, "a", (41,26)->(41,27))
                            ^^^^^^ Token(IsNot, "isnot", (41,28)->(41,34))
                                   ^ Token(Identifier, "b", (41,35)->(41,36))
                                     Token(EndOfLine, "\n", (41,36)->(41,36))
var is_not_ins = a isnot? b
^^^ Token(Identifier, "var", (42,0)->(42,3))
    ^^^^^^^^^^ Token(Identifier, "is_not_ins", (42,4)->(42,14))
               ^ Token(Equal, "=", (42,15)->(42,16))
                 ^ Token(Identifier, "a", (42,17)->(42,18))
                   ^^^^^^ Token(IsNotInsensitive, "isnot", (42,19)->(42,25))
                          ^ Token(Identifier, "b", (42,26)->(42,27))
                            Token(EndOfLine, "\n", (42,27)->(42,27))

