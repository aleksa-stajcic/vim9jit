---
source: src/lib.rs
assertion_line: 374
expression: snapshot_lexing(contents)
---
vim9script
^^^^^^^^^^^Token(Identifier, "vim9script", (0,0)->(0,10))
          ^Token(NewLine, "\n", (0,10)->(0,10))

^Token(NewLine, "\n", (1,0)->(1,0))
var x = 10
^^^^Token(Identifier, "var", (2,0)->(2,3))
    ^^Token(Identifier, "x", (2,4)->(2,5))
      ^Token(Equal, "=", (2,6)->(2,6))
        ^^^Token(Integer, "10", (2,8)->(2,10))
          ^Token(NewLine, "\n", (2,10)->(2,10))
if x == 10 || x >= 10 || x <= 10 || x > 10 || x < 10
^^^Token(Identifier, "if", (3,0)->(3,2))
   ^^Token(Identifier, "x", (3,3)->(3,4))
     ^^Token(EqualTo, "==", (3,5)->(3,6))
        ^^^Token(Integer, "10", (3,8)->(3,10))
           ^^Token(Or, "||", (3,11)->(3,12))
              ^^Token(Identifier, "x", (3,14)->(3,15))
                ^^Token(GreaterThanOrEqual, ">=", (3,16)->(3,17))
                   ^^^Token(Integer, "10", (3,19)->(3,21))
                      ^^Token(Or, "||", (3,22)->(3,23))
                         ^^Token(Identifier, "x", (3,25)->(3,26))
                           ^^Token(LessThanOrEqual, "<=", (3,27)->(3,28))
                              ^^^Token(Integer, "10", (3,30)->(3,32))
                                 ^^Token(Or, "||", (3,33)->(3,34))
                                    ^^Token(Identifier, "x", (3,36)->(3,37))
                                      ^Token(GreaterThan, ">", (3,38)->(3,38))
                                        ^^^Token(Integer, "10", (3,40)->(3,42))
                                           ^^Token(Or, "||", (3,43)->(3,44))
                                              ^^Token(Identifier, "x", (3,46)->(3,47))
                                                ^Token(LessThan, "<", (3,48)->(3,48))
                                                  ^^^Token(Integer, "10", (3,50)->(3,52))
                                                    ^Token(NewLine, "\n", (3,52)->(3,52))
  x += 1
  ^^Token(Identifier, "x", (4,2)->(4,3))
    ^^Token(PlusEquals, "+=", (4,4)->(4,5))
       ^^Token(Integer, "1", (4,7)->(4,8))
        ^Token(NewLine, "\n", (4,8)->(4,8))
  x *= 1
  ^^Token(Identifier, "x", (5,2)->(5,3))
    ^^Token(MulEquals, "*=", (5,4)->(5,5))
       ^^Token(Integer, "1", (5,7)->(5,8))
        ^Token(NewLine, "\n", (5,8)->(5,8))
  x /= 1
  ^^Token(Identifier, "x", (6,2)->(6,3))
    ^^Token(DivEquals, "/=", (6,4)->(6,5))
       ^^Token(Integer, "1", (6,7)->(6,8))
        ^Token(NewLine, "\n", (6,8)->(6,8))
  x -= 1
  ^^Token(Identifier, "x", (7,2)->(7,3))
    ^^Token(MinusEquals, "-=", (7,4)->(7,5))
       ^^Token(Integer, "1", (7,7)->(7,8))
        ^Token(NewLine, "\n", (7,8)->(7,8))
  echo x
  ^^^^^Token(Identifier, "echo", (8,2)->(8,6))
       ^^Token(Identifier, "x", (8,7)->(8,8))
        ^Token(NewLine, "\n", (8,8)->(8,8))
endif
^^^^^^Token(Identifier, "endif", (9,0)->(9,5))
     ^Token(NewLine, "\n", (9,5)->(9,5))

