---
source: src/lib.rs
assertion_line: 457
expression: snapshot_lexing(contents)
---
vim9script noclear
^^^^^^^^^^ Token(Identifier, "vim9script", (0,0)->(0,10))
           ^^^^^^^ Token(Identifier, "noclear", (0,11)->(0,18))
                   Token(EndOfLine, "\n", (0,18)->(0,18))
# Vim plugin for showing matching parens
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Vim plugin for showing matching parens", (1,0)->(1,40))
# Maintainer:  Bram Moolenaar <Bram@vim.org>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Maintainer:  Bram Moolenaar <Bram@vim.org>", (2,0)->(2,44))
# Last Change: 2022 Aug 22
^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Last Change: 2022 Aug 22", (3,0)->(3,26))

 Token(EndOfLine, "\n", (4,0)->(4,0))
# Exit quickly when:
^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Exit quickly when:", (5,0)->(5,20))
# - this plugin was already loaded (or disabled)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# - this plugin was already loaded (or disabled)", (6,0)->(6,48))
# - 'compatible' is set
^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# - 'compatible' is set", (7,0)->(7,23))
if exists('g:loaded_matchparen') || &cp
^^ Token(Identifier, "if", (8,0)->(8,2))
   ^^^^^^ Token(Identifier, "exists", (8,3)->(8,9))
         ^ Token(LeftParen, "(", (8,9)->(8,10))
           ^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "g:loaded_matchparen", (8,11)->(8,29))
                               ^ Token(RightParen, ")", (8,31)->(8,32))
                                 ^^ Token(Or, "||", (8,33)->(8,35))
                                    ^ Token(Ampersand, "&", (8,36)->(8,37))
                                     ^^ Token(Identifier, "cp", (8,37)->(8,39))
                                        Token(EndOfLine, "\n", (8,39)->(8,39))
  finish
  ^^^^^^ Token(Identifier, "finish", (9,2)->(9,8))
         Token(EndOfLine, "\n", (9,8)->(9,8))
endif
^^^^^ Token(Identifier, "endif", (10,0)->(10,5))
      Token(EndOfLine, "\n", (10,5)->(10,5))
g:loaded_matchparen = 1
^ Token(Identifier, "g", (11,0)->(11,1))
 ^ Token(Colon, ":", (11,1)->(11,2))
  ^^^^^^^^^^^^^^^^^ Token(Identifier, "loaded_matchparen", (11,2)->(11,19))
                    ^ Token(Equal, "=", (11,20)->(11,21))
                      ^ Token(Integer, "1", (11,22)->(11,23))
                        Token(EndOfLine, "\n", (11,23)->(11,23))

 Token(EndOfLine, "\n", (12,0)->(12,0))
if !exists('g:matchparen_timeout')
^^ Token(Identifier, "if", (13,0)->(13,2))
   ^ Token(Bang, "!", (13,3)->(13,4))
    ^^^^^^ Token(Identifier, "exists", (13,4)->(13,10))
          ^ Token(LeftParen, "(", (13,10)->(13,11))
            ^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "g:matchparen_timeout", (13,12)->(13,31))
                                 ^ Token(RightParen, ")", (13,33)->(13,34))
                                   Token(EndOfLine, "\n", (13,34)->(13,34))
  g:matchparen_timeout = 300
  ^ Token(Identifier, "g", (14,2)->(14,3))
   ^ Token(Colon, ":", (14,3)->(14,4))
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (14,4)->(14,22))
                       ^ Token(Equal, "=", (14,23)->(14,24))
                         ^^^ Token(Integer, "300", (14,25)->(14,28))
                             Token(EndOfLine, "\n", (14,28)->(14,28))
endif
^^^^^ Token(Identifier, "endif", (15,0)->(15,5))
      Token(EndOfLine, "\n", (15,5)->(15,5))
if !exists('g:matchparen_insert_timeout')
^^ Token(Identifier, "if", (16,0)->(16,2))
   ^ Token(Bang, "!", (16,3)->(16,4))
    ^^^^^^ Token(Identifier, "exists", (16,4)->(16,10))
          ^ Token(LeftParen, "(", (16,10)->(16,11))
            ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "g:matchparen_insert_timeout", (16,12)->(16,38))
                                        ^ Token(RightParen, ")", (16,40)->(16,41))
                                          Token(EndOfLine, "\n", (16,41)->(16,41))
  g:matchparen_insert_timeout = 60
  ^ Token(Identifier, "g", (17,2)->(17,3))
   ^ Token(Colon, ":", (17,3)->(17,4))
    ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (17,4)->(17,29))
                              ^ Token(Equal, "=", (17,30)->(17,31))
                                ^^ Token(Integer, "60", (17,32)->(17,34))
                                   Token(EndOfLine, "\n", (17,34)->(17,34))
endif
^^^^^ Token(Identifier, "endif", (18,0)->(18,5))
      Token(EndOfLine, "\n", (18,5)->(18,5))

 Token(EndOfLine, "\n", (19,0)->(19,0))
augroup matchparen
^^^^^^^ Token(Identifier, "augroup", (20,0)->(20,7))
        ^^^^^^^^^^ Token(Identifier, "matchparen", (20,8)->(20,18))
                   Token(EndOfLine, "\n", (20,18)->(20,18))
  # Replace all matchparen autocommands
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Replace all matchparen autocommands", (21,2)->(21,39))
  autocmd! CursorMoved,CursorMovedI,WinEnter * {
  ^^^^^^^ Token(Identifier, "autocmd", (22,2)->(22,9))
         ^ Token(Bang, "!", (22,9)->(22,10))
           ^^^^^^^^^^^ Token(Identifier, "CursorMoved", (22,11)->(22,22))
                      ^ Token(Comma, ",", (22,22)->(22,23))
                       ^^^^^^^^^^^^ Token(Identifier, "CursorMovedI", (22,23)->(22,35))
                                   ^ Token(Comma, ",", (22,35)->(22,36))
                                    ^^^^^^^^ Token(Identifier, "WinEnter", (22,36)->(22,44))
                                             ^ Token(Mul, "*", (22,45)->(22,46))
                                               ^ Token(LeftBrace, "{", (22,47)->(22,48))
                                                 Token(EndOfLine, "\n", (22,48)->(22,48))
      Highlight_Matching_Pair()
      ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "Highlight_Matching_Pair", (23,6)->(23,29))
                             ^ Token(LeftParen, "(", (23,29)->(23,30))
                              ^ Token(RightParen, ")", (23,30)->(23,31))
                                Token(EndOfLine, "\n", (23,31)->(23,31))
    }
    ^ Token(RightBrace, "}", (24,4)->(24,5))
      Token(EndOfLine, "\n", (24,5)->(24,5))
  autocmd! WinLeave * {
  ^^^^^^^ Token(Identifier, "autocmd", (25,2)->(25,9))
         ^ Token(Bang, "!", (25,9)->(25,10))
           ^^^^^^^^ Token(Identifier, "WinLeave", (25,11)->(25,19))
                    ^ Token(Mul, "*", (25,20)->(25,21))
                      ^ Token(LeftBrace, "{", (25,22)->(25,23))
                        Token(EndOfLine, "\n", (25,23)->(25,23))
      Remove_Matches()
      ^^^^^^^^^^^^^^ Token(Identifier, "Remove_Matches", (26,6)->(26,20))
                    ^ Token(LeftParen, "(", (26,20)->(26,21))
                     ^ Token(RightParen, ")", (26,21)->(26,22))
                       Token(EndOfLine, "\n", (26,22)->(26,22))
    }
    ^ Token(RightBrace, "}", (27,4)->(27,5))
      Token(EndOfLine, "\n", (27,5)->(27,5))
  autocmd! TextChanged,TextChangedI * {
  ^^^^^^^ Token(Identifier, "autocmd", (28,2)->(28,9))
         ^ Token(Bang, "!", (28,9)->(28,10))
           ^^^^^^^^^^^ Token(Identifier, "TextChanged", (28,11)->(28,22))
                      ^ Token(Comma, ",", (28,22)->(28,23))
                       ^^^^^^^^^^^^ Token(Identifier, "TextChangedI", (28,23)->(28,35))
                                    ^ Token(Mul, "*", (28,36)->(28,37))
                                      ^ Token(LeftBrace, "{", (28,38)->(28,39))
                                        Token(EndOfLine, "\n", (28,39)->(28,39))
      Highlight_Matching_Pair()
      ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "Highlight_Matching_Pair", (29,6)->(29,29))
                             ^ Token(LeftParen, "(", (29,29)->(29,30))
                              ^ Token(RightParen, ")", (29,30)->(29,31))
                                Token(EndOfLine, "\n", (29,31)->(29,31))
    }
    ^ Token(RightBrace, "}", (30,4)->(30,5))
      Token(EndOfLine, "\n", (30,5)->(30,5))
augroup END
^^^^^^^ Token(Identifier, "augroup", (31,0)->(31,7))
        ^^^ Token(Identifier, "END", (31,8)->(31,11))
            Token(EndOfLine, "\n", (31,11)->(31,11))

 Token(EndOfLine, "\n", (32,0)->(32,0))
# Skip the rest if it was already done.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Skip the rest if it was already done.", (33,0)->(33,39))
if exists('*Highlight_Matching_Pair')
^^ Token(Identifier, "if", (34,0)->(34,2))
   ^^^^^^ Token(Identifier, "exists", (34,3)->(34,9))
         ^ Token(LeftParen, "(", (34,9)->(34,10))
           ^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "*Highlight_Matching_Pair", (34,11)->(34,34))
                                    ^ Token(RightParen, ")", (34,36)->(34,37))
                                      Token(EndOfLine, "\n", (34,37)->(34,37))
  finish
  ^^^^^^ Token(Identifier, "finish", (35,2)->(35,8))
         Token(EndOfLine, "\n", (35,8)->(35,8))
endif
^^^^^ Token(Identifier, "endif", (36,0)->(36,5))
      Token(EndOfLine, "\n", (36,5)->(36,5))

 Token(EndOfLine, "\n", (37,0)->(37,0))
# The function that is invoked (very often) to define a ":match" highlighting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# The function that is invoked (very often) to define a \":match\" highlighting", (38,0)->(38,77))
# for any matching paren.
^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# for any matching paren.", (39,0)->(39,25))
def Highlight_Matching_Pair(): void
^^^ Token(Identifier, "def", (40,0)->(40,3))
    ^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "Highlight_Matching_Pair", (40,4)->(40,27))
                           ^ Token(LeftParen, "(", (40,27)->(40,28))
                            ^ Token(RightParen, ")", (40,28)->(40,29))
                             ^ Token(Colon, ":", (40,29)->(40,30))
                               ^^^^ Token(Identifier, "void", (40,31)->(40,35))
                                    Token(EndOfLine, "\n", (40,35)->(40,35))
  # Remove any previous match.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Remove any previous match.", (41,2)->(41,30))
  Remove_Matches()
  ^^^^^^^^^^^^^^ Token(Identifier, "Remove_Matches", (42,2)->(42,16))
                ^ Token(LeftParen, "(", (42,16)->(42,17))
                 ^ Token(RightParen, ")", (42,17)->(42,18))
                   Token(EndOfLine, "\n", (42,18)->(42,18))

 Token(EndOfLine, "\n", (43,0)->(43,0))
  # Avoid that we remove the popup menu.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Avoid that we remove the popup menu.", (44,2)->(44,40))
  # Return when there are no colors (looks like the cursor jumps).
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Return when there are no colors (looks like the cursor jumps).", (45,2)->(45,66))
  if pumvisible() || (str2nr(&t_Co) < 8 && !has('gui_running'))
  ^^ Token(Identifier, "if", (46,2)->(46,4))
     ^^^^^^^^^^ Token(Identifier, "pumvisible", (46,5)->(46,15))
               ^ Token(LeftParen, "(", (46,15)->(46,16))
                ^ Token(RightParen, ")", (46,16)->(46,17))
                  ^^ Token(Or, "||", (46,18)->(46,20))
                     ^ Token(LeftParen, "(", (46,21)->(46,22))
                      ^^^^^^ Token(Identifier, "str2nr", (46,22)->(46,28))
                            ^ Token(LeftParen, "(", (46,28)->(46,29))
                             ^ Token(Ampersand, "&", (46,29)->(46,30))
                              ^^^^ Token(Identifier, "t_Co", (46,30)->(46,34))
                                  ^ Token(RightParen, ")", (46,34)->(46,35))
                                    ^ Token(LessThan, "<", (46,36)->(46,37))
                                      ^ Token(Integer, "8", (46,38)->(46,39))
                                        ^^ Token(And, "&&", (46,40)->(46,42))
                                           ^ Token(Bang, "!", (46,43)->(46,44))
                                            ^^^ Token(Identifier, "has", (46,44)->(46,47))
                                               ^ Token(LeftParen, "(", (46,47)->(46,48))
                                                 ^^^^^^^^^^ Token(SingleQuoteString, "gui_running", (46,49)->(46,59))
                                                             ^ Token(RightParen, ")", (46,61)->(46,62))
                                                              ^ Token(RightParen, ")", (46,62)->(46,63))
                                                                Token(EndOfLine, "\n", (46,63)->(46,63))
    return
    ^^^^^^ Token(Identifier, "return", (47,4)->(47,10))
           Token(EndOfLine, "\n", (47,10)->(47,10))
  endif
  ^^^^^ Token(Identifier, "endif", (48,2)->(48,7))
        Token(EndOfLine, "\n", (48,7)->(48,7))

 Token(EndOfLine, "\n", (49,0)->(49,0))
  # Get the character under the cursor and check if it's in 'matchpairs'.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Get the character under the cursor and check if it's in 'matchpairs'.", (50,2)->(50,73))
  var c_lnum = line('.')
  ^^^ Token(Identifier, "var", (51,2)->(51,5))
      ^^^^^^ Token(Identifier, "c_lnum", (51,6)->(51,12))
             ^ Token(Equal, "=", (51,13)->(51,14))
               ^^^^ Token(Identifier, "line", (51,15)->(51,19))
                   ^ Token(LeftParen, "(", (51,19)->(51,20))
                      Token(SingleQuoteString, ".", (51,21)->(51,21))
                       ^ Token(RightParen, ")", (51,23)->(51,24))
                         Token(EndOfLine, "\n", (51,24)->(51,24))
  var c_col = col('.')
  ^^^ Token(Identifier, "var", (52,2)->(52,5))
      ^^^^^ Token(Identifier, "c_col", (52,6)->(52,11))
            ^ Token(Equal, "=", (52,12)->(52,13))
              ^^^ Token(Identifier, "col", (52,14)->(52,17))
                 ^ Token(LeftParen, "(", (52,17)->(52,18))
                    Token(SingleQuoteString, ".", (52,19)->(52,19))
                     ^ Token(RightParen, ")", (52,21)->(52,22))
                       Token(EndOfLine, "\n", (52,22)->(52,22))
  var before = 0
  ^^^ Token(Identifier, "var", (53,2)->(53,5))
      ^^^^^^ Token(Identifier, "before", (53,6)->(53,12))
             ^ Token(Equal, "=", (53,13)->(53,14))
               ^ Token(Integer, "0", (53,15)->(53,16))
                 Token(EndOfLine, "\n", (53,16)->(53,16))

 Token(EndOfLine, "\n", (54,0)->(54,0))
  var text = getline(c_lnum)
  ^^^ Token(Identifier, "var", (55,2)->(55,5))
      ^^^^ Token(Identifier, "text", (55,6)->(55,10))
           ^ Token(Equal, "=", (55,11)->(55,12))
             ^^^^^^^ Token(Identifier, "getline", (55,13)->(55,20))
                    ^ Token(LeftParen, "(", (55,20)->(55,21))
                     ^^^^^^ Token(Identifier, "c_lnum", (55,21)->(55,27))
                           ^ Token(RightParen, ")", (55,27)->(55,28))
                             Token(EndOfLine, "\n", (55,28)->(55,28))
  var matches = matchlist(text, '\(.\)\=\%' .. c_col .. 'c\(.\=\)')
  ^^^ Token(Identifier, "var", (56,2)->(56,5))
      ^^^^^^^ Token(Identifier, "matches", (56,6)->(56,13))
              ^ Token(Equal, "=", (56,14)->(56,15))
                ^^^^^^^^^ Token(Identifier, "matchlist", (56,16)->(56,25))
                         ^ Token(LeftParen, "(", (56,25)->(56,26))
                          ^^^^ Token(Identifier, "text", (56,26)->(56,30))
                              ^ Token(Comma, ",", (56,30)->(56,31))
                                 ^^^^^^^^ Token(SingleQuoteString, "\\(.\\)\\=\\%", (56,33)->(56,41))
                                             Token(Illegal, ".", (56,44)->(56,44))
                                              Token(Illegal, ".", (56,45)->(56,45))
                                               ^^^^^ Token(Identifier, "c_col", (56,47)->(56,52))
                                                      Token(Illegal, ".", (56,53)->(56,53))
                                                       Token(Illegal, ".", (56,54)->(56,54))
                                                         ^^^^^^^ Token(SingleQuoteString, "c\\(.\\=\\)", (56,57)->(56,64))
                                                                  ^ Token(RightParen, ")", (56,66)->(56,67))
                                                                    Token(EndOfLine, "\n", (56,67)->(56,67))
  var [c_before, c] = ['', '']
  ^^^ Token(Identifier, "var", (57,2)->(57,5))
      ^ Token(LeftBracket, "[", (57,6)->(57,7))
       ^^^^^^^^ Token(Identifier, "c_before", (57,7)->(57,15))
               ^ Token(Comma, ",", (57,15)->(57,16))
                 ^ Token(Identifier, "c", (57,17)->(57,18))
                  ^ Token(RightBracket, "]", (57,18)->(57,19))
                    ^ Token(Equal, "=", (57,20)->(57,21))
                      ^ Token(LeftBracket, "[", (57,22)->(57,23))
                         Token(SingleQuoteString, "", (57,24)->(57,24))
                         ^ Token(Comma, ",", (57,25)->(57,26))
                             Token(SingleQuoteString, "", (57,28)->(57,28))
                             ^ Token(RightBracket, "]", (57,29)->(57,30))
                               Token(EndOfLine, "\n", (57,30)->(57,30))
  if !empty(matches)
  ^^ Token(Identifier, "if", (58,2)->(58,4))
     ^ Token(Bang, "!", (58,5)->(58,6))
      ^^^^^ Token(Identifier, "empty", (58,6)->(58,11))
           ^ Token(LeftParen, "(", (58,11)->(58,12))
            ^^^^^^^ Token(Identifier, "matches", (58,12)->(58,19))
                   ^ Token(RightParen, ")", (58,19)->(58,20))
                     Token(EndOfLine, "\n", (58,20)->(58,20))
    [c_before, c] = matches[1 : 2]
    ^ Token(LeftBracket, "[", (59,4)->(59,5))
     ^^^^^^^^ Token(Identifier, "c_before", (59,5)->(59,13))
             ^ Token(Comma, ",", (59,13)->(59,14))
               ^ Token(Identifier, "c", (59,15)->(59,16))
                ^ Token(RightBracket, "]", (59,16)->(59,17))
                  ^ Token(Equal, "=", (59,18)->(59,19))
                    ^^^^^^^ Token(Identifier, "matches", (59,20)->(59,27))
                           ^ Token(LeftBracket, "[", (59,27)->(59,28))
                            ^ Token(Integer, "1", (59,28)->(59,29))
                              ^ Token(Colon, ":", (59,30)->(59,31))
                                ^ Token(Integer, "2", (59,32)->(59,33))
                                 ^ Token(RightBracket, "]", (59,33)->(59,34))
                                   Token(EndOfLine, "\n", (59,34)->(59,34))
  endif
  ^^^^^ Token(Identifier, "endif", (60,2)->(60,7))
        Token(EndOfLine, "\n", (60,7)->(60,7))
  var plist = split(&matchpairs, '.\zs[:,]')
  ^^^ Token(Identifier, "var", (61,2)->(61,5))
      ^^^^^ Token(Identifier, "plist", (61,6)->(61,11))
            ^ Token(Equal, "=", (61,12)->(61,13))
              ^^^^^ Token(Identifier, "split", (61,14)->(61,19))
                   ^ Token(LeftParen, "(", (61,19)->(61,20))
                    ^ Token(Ampersand, "&", (61,20)->(61,21))
                     ^^^^^^^^^^ Token(Identifier, "matchpairs", (61,21)->(61,31))
                               ^ Token(Comma, ",", (61,31)->(61,32))
                                  ^^^^^^^ Token(SingleQuoteString, ".\\zs[:,]", (61,34)->(61,41))
                                           ^ Token(RightParen, ")", (61,43)->(61,44))
                                             Token(EndOfLine, "\n", (61,44)->(61,44))
  var i = index(plist, c)
  ^^^ Token(Identifier, "var", (62,2)->(62,5))
      ^ Token(Identifier, "i", (62,6)->(62,7))
        ^ Token(Equal, "=", (62,8)->(62,9))
          ^^^^^ Token(Identifier, "index", (62,10)->(62,15))
               ^ Token(LeftParen, "(", (62,15)->(62,16))
                ^^^^^ Token(Identifier, "plist", (62,16)->(62,21))
                     ^ Token(Comma, ",", (62,21)->(62,22))
                       ^ Token(Identifier, "c", (62,23)->(62,24))
                        ^ Token(RightParen, ")", (62,24)->(62,25))
                          Token(EndOfLine, "\n", (62,25)->(62,25))
  if i < 0
  ^^ Token(Identifier, "if", (63,2)->(63,4))
     ^ Token(Identifier, "i", (63,5)->(63,6))
       ^ Token(LessThan, "<", (63,7)->(63,8))
         ^ Token(Integer, "0", (63,9)->(63,10))
           Token(EndOfLine, "\n", (63,10)->(63,10))
    # not found, in Insert mode try character before the cursor
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# not found, in Insert mode try character before the cursor", (64,4)->(64,63))
    if c_col > 1 && (mode() == 'i' || mode() == 'R')
    ^^ Token(Identifier, "if", (65,4)->(65,6))
       ^^^^^ Token(Identifier, "c_col", (65,7)->(65,12))
             ^ Token(GreaterThan, ">", (65,13)->(65,14))
               ^ Token(Integer, "1", (65,15)->(65,16))
                 ^^ Token(And, "&&", (65,17)->(65,19))
                    ^ Token(LeftParen, "(", (65,20)->(65,21))
                     ^^^^ Token(Identifier, "mode", (65,21)->(65,25))
                         ^ Token(LeftParen, "(", (65,25)->(65,26))
                          ^ Token(RightParen, ")", (65,26)->(65,27))
                            ^^ Token(EqualTo, "==", (65,28)->(65,30))
                                 Token(SingleQuoteString, "i", (65,32)->(65,32))
                                   ^^ Token(Or, "||", (65,35)->(65,37))
                                      ^^^^ Token(Identifier, "mode", (65,38)->(65,42))
                                          ^ Token(LeftParen, "(", (65,42)->(65,43))
                                           ^ Token(RightParen, ")", (65,43)->(65,44))
                                             ^^ Token(EqualTo, "==", (65,45)->(65,47))
                                                  Token(SingleQuoteString, "R", (65,49)->(65,49))
                                                   ^ Token(RightParen, ")", (65,51)->(65,52))
                                                     Token(EndOfLine, "\n", (65,52)->(65,52))
      before = strlen(c_before)
      ^^^^^^ Token(Identifier, "before", (66,6)->(66,12))
             ^ Token(Equal, "=", (66,13)->(66,14))
               ^^^^^^ Token(Identifier, "strlen", (66,15)->(66,21))
                     ^ Token(LeftParen, "(", (66,21)->(66,22))
                      ^^^^^^^^ Token(Identifier, "c_before", (66,22)->(66,30))
                              ^ Token(RightParen, ")", (66,30)->(66,31))
                                Token(EndOfLine, "\n", (66,31)->(66,31))
      c = c_before
      ^ Token(Identifier, "c", (67,6)->(67,7))
        ^ Token(Equal, "=", (67,8)->(67,9))
          ^^^^^^^^ Token(Identifier, "c_before", (67,10)->(67,18))
                   Token(EndOfLine, "\n", (67,18)->(67,18))
      i = index(plist, c)
      ^ Token(Identifier, "i", (68,6)->(68,7))
        ^ Token(Equal, "=", (68,8)->(68,9))
          ^^^^^ Token(Identifier, "index", (68,10)->(68,15))
               ^ Token(LeftParen, "(", (68,15)->(68,16))
                ^^^^^ Token(Identifier, "plist", (68,16)->(68,21))
                     ^ Token(Comma, ",", (68,21)->(68,22))
                       ^ Token(Identifier, "c", (68,23)->(68,24))
                        ^ Token(RightParen, ")", (68,24)->(68,25))
                          Token(EndOfLine, "\n", (68,25)->(68,25))
    endif
    ^^^^^ Token(Identifier, "endif", (69,4)->(69,9))
          Token(EndOfLine, "\n", (69,9)->(69,9))
    if i < 0
    ^^ Token(Identifier, "if", (70,4)->(70,6))
       ^ Token(Identifier, "i", (70,7)->(70,8))
         ^ Token(LessThan, "<", (70,9)->(70,10))
           ^ Token(Integer, "0", (70,11)->(70,12))
             Token(EndOfLine, "\n", (70,12)->(70,12))
      # not found, nothing to do
      ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# not found, nothing to do", (71,6)->(71,32))
      return
      ^^^^^^ Token(Identifier, "return", (72,6)->(72,12))
             Token(EndOfLine, "\n", (72,12)->(72,12))
    endif
    ^^^^^ Token(Identifier, "endif", (73,4)->(73,9))
          Token(EndOfLine, "\n", (73,9)->(73,9))
  endif
  ^^^^^ Token(Identifier, "endif", (74,2)->(74,7))
        Token(EndOfLine, "\n", (74,7)->(74,7))

 Token(EndOfLine, "\n", (75,0)->(75,0))
  var s_flags: string
  ^^^ Token(Identifier, "var", (76,2)->(76,5))
      ^^^^^^^ Token(Identifier, "s_flags", (76,6)->(76,13))
             ^ Token(Colon, ":", (76,13)->(76,14))
               ^^^^^^ Token(Identifier, "string", (76,15)->(76,21))
                      Token(EndOfLine, "\n", (76,21)->(76,21))
  var c2: string
  ^^^ Token(Identifier, "var", (77,2)->(77,5))
      ^^ Token(Identifier, "c2", (77,6)->(77,8))
        ^ Token(Colon, ":", (77,8)->(77,9))
          ^^^^^^ Token(Identifier, "string", (77,10)->(77,16))
                 Token(EndOfLine, "\n", (77,16)->(77,16))
  # Figure out the arguments for searchpairpos().
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Figure out the arguments for searchpairpos().", (78,2)->(78,49))
  if i % 2 == 0
  ^^ Token(Identifier, "if", (79,2)->(79,4))
     ^ Token(Identifier, "i", (79,5)->(79,6))
        Token(Illegal, "%", (79,7)->(79,7))
         ^ Token(Integer, "2", (79,9)->(79,10))
           ^^ Token(EqualTo, "==", (79,11)->(79,13))
              ^ Token(Integer, "0", (79,14)->(79,15))
                Token(EndOfLine, "\n", (79,15)->(79,15))
    s_flags = 'nW'
    ^^^^^^^ Token(Identifier, "s_flags", (80,4)->(80,11))
            ^ Token(Equal, "=", (80,12)->(80,13))
               ^ Token(SingleQuoteString, "nW", (80,15)->(80,16))
                   Token(EndOfLine, "\n", (80,18)->(80,18))
    c2 = plist[i + 1]
    ^^ Token(Identifier, "c2", (81,4)->(81,6))
       ^ Token(Equal, "=", (81,7)->(81,8))
         ^^^^^ Token(Identifier, "plist", (81,9)->(81,14))
              ^ Token(LeftBracket, "[", (81,14)->(81,15))
               ^ Token(Identifier, "i", (81,15)->(81,16))
                 ^ Token(Plus, "+", (81,17)->(81,18))
                   ^ Token(Integer, "1", (81,19)->(81,20))
                    ^ Token(RightBracket, "]", (81,20)->(81,21))
                      Token(EndOfLine, "\n", (81,21)->(81,21))
  else
  ^^^^ Token(Identifier, "else", (82,2)->(82,6))
       Token(EndOfLine, "\n", (82,6)->(82,6))
    s_flags = 'nbW'
    ^^^^^^^ Token(Identifier, "s_flags", (83,4)->(83,11))
            ^ Token(Equal, "=", (83,12)->(83,13))
               ^^ Token(SingleQuoteString, "nbW", (83,15)->(83,17))
                    Token(EndOfLine, "\n", (83,19)->(83,19))
    c2 = c
    ^^ Token(Identifier, "c2", (84,4)->(84,6))
       ^ Token(Equal, "=", (84,7)->(84,8))
         ^ Token(Identifier, "c", (84,9)->(84,10))
           Token(EndOfLine, "\n", (84,10)->(84,10))
    c = plist[i - 1]
    ^ Token(Identifier, "c", (85,4)->(85,5))
      ^ Token(Equal, "=", (85,6)->(85,7))
        ^^^^^ Token(Identifier, "plist", (85,8)->(85,13))
             ^ Token(LeftBracket, "[", (85,13)->(85,14))
              ^ Token(Identifier, "i", (85,14)->(85,15))
                ^ Token(Minus, "-", (85,16)->(85,17))
                  ^ Token(Integer, "1", (85,18)->(85,19))
                   ^ Token(RightBracket, "]", (85,19)->(85,20))
                     Token(EndOfLine, "\n", (85,20)->(85,20))
  endif
  ^^^^^ Token(Identifier, "endif", (86,2)->(86,7))
        Token(EndOfLine, "\n", (86,7)->(86,7))
  if c == '['
  ^^ Token(Identifier, "if", (87,2)->(87,4))
     ^ Token(Identifier, "c", (87,5)->(87,6))
       ^^ Token(EqualTo, "==", (87,7)->(87,9))
            Token(SingleQuoteString, "[", (87,11)->(87,11))
              Token(EndOfLine, "\n", (87,13)->(87,13))
    c = '\['
    ^ Token(Identifier, "c", (88,4)->(88,5))
      ^ Token(Equal, "=", (88,6)->(88,7))
         ^ Token(SingleQuoteString, "\\[", (88,9)->(88,10))
             Token(EndOfLine, "\n", (88,12)->(88,12))
    c2 = '\]'
    ^^ Token(Identifier, "c2", (89,4)->(89,6))
       ^ Token(Equal, "=", (89,7)->(89,8))
          ^ Token(SingleQuoteString, "\\]", (89,10)->(89,11))
              Token(EndOfLine, "\n", (89,13)->(89,13))
  endif
  ^^^^^ Token(Identifier, "endif", (90,2)->(90,7))
        Token(EndOfLine, "\n", (90,7)->(90,7))

 Token(EndOfLine, "\n", (91,0)->(91,0))
  # Find the match.  When it was just before the cursor move it there for a
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Find the match.  When it was just before the cursor move it there for a", (92,2)->(92,75))
  # moment.
  ^^^^^^^^^ Token(Comment, "# moment.", (93,2)->(93,11))
  var save_cursor: list<number>
  ^^^ Token(Identifier, "var", (94,2)->(94,5))
      ^^^^^^^^^^^ Token(Identifier, "save_cursor", (94,6)->(94,17))
                 ^ Token(Colon, ":", (94,17)->(94,18))
                   ^^^^ Token(Identifier, "list", (94,19)->(94,23))
                       ^ Token(LessThan, "<", (94,23)->(94,24))
                        ^^^^^^ Token(Identifier, "number", (94,24)->(94,30))
                              ^ Token(GreaterThan, ">", (94,30)->(94,31))
                                Token(EndOfLine, "\n", (94,31)->(94,31))
  if before > 0
  ^^ Token(Identifier, "if", (95,2)->(95,4))
     ^^^^^^ Token(Identifier, "before", (95,5)->(95,11))
            ^ Token(GreaterThan, ">", (95,12)->(95,13))
              ^ Token(Integer, "0", (95,14)->(95,15))
                Token(EndOfLine, "\n", (95,15)->(95,15))
    save_cursor = getcurpos()
    ^^^^^^^^^^^ Token(Identifier, "save_cursor", (96,4)->(96,15))
                ^ Token(Equal, "=", (96,16)->(96,17))
                  ^^^^^^^^^ Token(Identifier, "getcurpos", (96,18)->(96,27))
                           ^ Token(LeftParen, "(", (96,27)->(96,28))
                            ^ Token(RightParen, ")", (96,28)->(96,29))
                              Token(EndOfLine, "\n", (96,29)->(96,29))
    cursor(c_lnum, c_col - before)
    ^^^^^^ Token(Identifier, "cursor", (97,4)->(97,10))
          ^ Token(LeftParen, "(", (97,10)->(97,11))
           ^^^^^^ Token(Identifier, "c_lnum", (97,11)->(97,17))
                 ^ Token(Comma, ",", (97,17)->(97,18))
                   ^^^^^ Token(Identifier, "c_col", (97,19)->(97,24))
                         ^ Token(Minus, "-", (97,25)->(97,26))
                           ^^^^^^ Token(Identifier, "before", (97,27)->(97,33))
                                 ^ Token(RightParen, ")", (97,33)->(97,34))
                                   Token(EndOfLine, "\n", (97,34)->(97,34))
  endif
  ^^^^^ Token(Identifier, "endif", (98,2)->(98,7))
        Token(EndOfLine, "\n", (98,7)->(98,7))

 Token(EndOfLine, "\n", (99,0)->(99,0))
  var s_skip: string
  ^^^ Token(Identifier, "var", (100,2)->(100,5))
      ^^^^^^ Token(Identifier, "s_skip", (100,6)->(100,12))
            ^ Token(Colon, ":", (100,12)->(100,13))
              ^^^^^^ Token(Identifier, "string", (100,14)->(100,20))
                     Token(EndOfLine, "\n", (100,20)->(100,20))
  if !has('syntax') || !exists('g:syntax_on')
  ^^ Token(Identifier, "if", (101,2)->(101,4))
     ^ Token(Bang, "!", (101,5)->(101,6))
      ^^^ Token(Identifier, "has", (101,6)->(101,9))
         ^ Token(LeftParen, "(", (101,9)->(101,10))
           ^^^^^ Token(SingleQuoteString, "syntax", (101,11)->(101,16))
                  ^ Token(RightParen, ")", (101,18)->(101,19))
                    ^^ Token(Or, "||", (101,20)->(101,22))
                       ^ Token(Bang, "!", (101,23)->(101,24))
                        ^^^^^^ Token(Identifier, "exists", (101,24)->(101,30))
                              ^ Token(LeftParen, "(", (101,30)->(101,31))
                                ^^^^^^^^^^ Token(SingleQuoteString, "g:syntax_on", (101,32)->(101,42))
                                            ^ Token(RightParen, ")", (101,44)->(101,45))
                                              Token(EndOfLine, "\n", (101,45)->(101,45))
    s_skip = '0'
    ^^^^^^ Token(Identifier, "s_skip", (102,4)->(102,10))
           ^ Token(Equal, "=", (102,11)->(102,12))
               Token(SingleQuoteString, "0", (102,14)->(102,14))
                 Token(EndOfLine, "\n", (102,16)->(102,16))
  else
  ^^^^ Token(Identifier, "else", (103,2)->(103,6))
       Token(EndOfLine, "\n", (103,6)->(103,6))
    # Build an expression that detects whether the current cursor position is
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Build an expression that detects whether the current cursor position is", (104,4)->(104,77))
    # in certain syntax types (string, comment, etc.), for use as
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# in certain syntax types (string, comment, etc.), for use as", (105,4)->(105,65))
    # searchpairpos()'s skip argument.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# searchpairpos()'s skip argument.", (106,4)->(106,38))
    # We match "escape" for special items, such as lispEscapeSpecial, and
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# We match \"escape\" for special items, such as lispEscapeSpecial, and", (107,4)->(107,73))
    # match "symbol" for lispBarSymbol.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# match \"symbol\" for lispBarSymbol.", (108,4)->(108,39))
    s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' ..
    ^^^^^^ Token(Identifier, "s_skip", (109,4)->(109,10))
           ^ Token(Equal, "=", (109,11)->(109,12))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "!empty(filter(map(synstack(line(\".\"), col(\".\")), ", (109,14)->(109,62))
                                                                 ^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "synIDattr(v:val, \"name\")", (109,65)->(109,88))
                                                                                           ^^ Token(SingleQuoteString, "), ", (109,91)->(109,93))
                                                                                                 Token(Illegal, ".", (109,96)->(109,96))
                                                                                                  Token(Illegal, ".", (109,97)->(109,97))
                                                                                                   Token(EndOfLine, "\n", (109,98)->(109,98))
      '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
        Token(SingleQuoteString, "", (110,7)->(110,7))
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "v:val =~? \"string\\\\|character\\\\|singlequote\\\\|escape\\\\|symbol\\\\|comment\"", (110,9)->(110,80))
                                                                                   ^ Token(SingleQuoteString, "))", (110,83)->(110,84))
                                                                                       Token(EndOfLine, "\n", (110,86)->(110,86))
    # If executing the expression determines that the cursor is currently in
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# If executing the expression determines that the cursor is currently in", (111,4)->(111,76))
    # one of the syntax types, then we want searchpairpos() to find the pair
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# one of the syntax types, then we want searchpairpos() to find the pair", (112,4)->(112,76))
    # within those syntax types (i.e., not skip).  Otherwise, the cursor is
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# within those syntax types (i.e., not skip).  Otherwise, the cursor is", (113,4)->(113,75))
    # outside of the syntax types and s_skip should keep its value so we skip
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# outside of the syntax types and s_skip should keep its value so we skip", (114,4)->(114,77))
    # any matching pair inside the syntax types.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# any matching pair inside the syntax types.", (115,4)->(115,48))
    # Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Catch if this throws E363: pattern uses more memory than 'maxmempattern'.", (116,4)->(116,79))
    try
    ^^^ Token(Identifier, "try", (117,4)->(117,7))
        Token(EndOfLine, "\n", (117,7)->(117,7))
      if eval(s_skip)
      ^^ Token(Identifier, "if", (118,6)->(118,8))
         ^^^^ Token(Identifier, "eval", (118,9)->(118,13))
             ^ Token(LeftParen, "(", (118,13)->(118,14))
              ^^^^^^ Token(Identifier, "s_skip", (118,14)->(118,20))
                    ^ Token(RightParen, ")", (118,20)->(118,21))
                      Token(EndOfLine, "\n", (118,21)->(118,21))
        s_skip = "0"
        ^^^^^^ Token(Identifier, "s_skip", (119,8)->(119,14))
               ^ Token(Equal, "=", (119,15)->(119,16))
                   Token(DoubleQuoteString, "0", (119,18)->(119,18))
                     Token(EndOfLine, "\n", (119,20)->(119,20))
      endif
      ^^^^^ Token(Identifier, "endif", (120,6)->(120,11))
            Token(EndOfLine, "\n", (120,11)->(120,11))
    catch /^Vim\%((\a\+)\)\=:E363/
    ^^^^^ Token(Identifier, "catch", (121,4)->(121,9))
          ^ Token(Div, "/", (121,10)->(121,11))
            Token(Illegal, "^", (121,11)->(121,11))
            ^^^ Token(Identifier, "Vim", (121,12)->(121,15))
                Token(Illegal, "\\", (121,15)->(121,15))
                 Token(Illegal, "%", (121,16)->(121,16))
                 ^ Token(LeftParen, "(", (121,17)->(121,18))
                  ^ Token(LeftParen, "(", (121,18)->(121,19))
                    Token(Illegal, "\\", (121,19)->(121,19))
                    ^ Token(Identifier, "a", (121,20)->(121,21))
                      Token(Illegal, "\\", (121,21)->(121,21))
                      ^ Token(Plus, "+", (121,22)->(121,23))
                       ^ Token(RightParen, ")", (121,23)->(121,24))
                         Token(Illegal, "\\", (121,24)->(121,24))
                         ^ Token(RightParen, ")", (121,25)->(121,26))
                           Token(Illegal, "\\", (121,26)->(121,26))
                           ^ Token(Equal, "=", (121,27)->(121,28))
                            ^ Token(Colon, ":", (121,28)->(121,29))
                             ^^^^ Token(Identifier, "E363", (121,29)->(121,33))
                                 ^ Token(Div, "/", (121,33)->(121,34))
                                   Token(EndOfLine, "\n", (121,34)->(121,34))
      # We won't find anything, so skip searching, should keep Vim responsive.
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# We won't find anything, so skip searching, should keep Vim responsive.", (122,6)->(122,78))
      return
      ^^^^^^ Token(Identifier, "return", (123,6)->(123,12))
             Token(EndOfLine, "\n", (123,12)->(123,12))
    endtry
    ^^^^^^ Token(Identifier, "endtry", (124,4)->(124,10))
           Token(EndOfLine, "\n", (124,10)->(124,10))
  endif
  ^^^^^ Token(Identifier, "endif", (125,2)->(125,7))
        Token(EndOfLine, "\n", (125,7)->(125,7))

 Token(EndOfLine, "\n", (126,0)->(126,0))
  # Limit the search to lines visible in the window.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Limit the search to lines visible in the window.", (127,2)->(127,52))
  var stoplinebottom = line('w$')
  ^^^ Token(Identifier, "var", (128,2)->(128,5))
      ^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (128,6)->(128,20))
                     ^ Token(Equal, "=", (128,21)->(128,22))
                       ^^^^ Token(Identifier, "line", (128,23)->(128,27))
                           ^ Token(LeftParen, "(", (128,27)->(128,28))
                             ^ Token(SingleQuoteString, "w$", (128,29)->(128,30))
                                ^ Token(RightParen, ")", (128,32)->(128,33))
                                  Token(EndOfLine, "\n", (128,33)->(128,33))
  var stoplinetop = line('w0')
  ^^^ Token(Identifier, "var", (129,2)->(129,5))
      ^^^^^^^^^^^ Token(Identifier, "stoplinetop", (129,6)->(129,17))
                  ^ Token(Equal, "=", (129,18)->(129,19))
                    ^^^^ Token(Identifier, "line", (129,20)->(129,24))
                        ^ Token(LeftParen, "(", (129,24)->(129,25))
                          ^ Token(SingleQuoteString, "w0", (129,26)->(129,27))
                             ^ Token(RightParen, ")", (129,29)->(129,30))
                               Token(EndOfLine, "\n", (129,30)->(129,30))
  var stopline: number
  ^^^ Token(Identifier, "var", (130,2)->(130,5))
      ^^^^^^^^ Token(Identifier, "stopline", (130,6)->(130,14))
              ^ Token(Colon, ":", (130,14)->(130,15))
                ^^^^^^ Token(Identifier, "number", (130,16)->(130,22))
                       Token(EndOfLine, "\n", (130,22)->(130,22))
  if i % 2 == 0
  ^^ Token(Identifier, "if", (131,2)->(131,4))
     ^ Token(Identifier, "i", (131,5)->(131,6))
        Token(Illegal, "%", (131,7)->(131,7))
         ^ Token(Integer, "2", (131,9)->(131,10))
           ^^ Token(EqualTo, "==", (131,11)->(131,13))
              ^ Token(Integer, "0", (131,14)->(131,15))
                Token(EndOfLine, "\n", (131,15)->(131,15))
    stopline = stoplinebottom
    ^^^^^^^^ Token(Identifier, "stopline", (132,4)->(132,12))
             ^ Token(Equal, "=", (132,13)->(132,14))
               ^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (132,15)->(132,29))
                              Token(EndOfLine, "\n", (132,29)->(132,29))
  else
  ^^^^ Token(Identifier, "else", (133,2)->(133,6))
       Token(EndOfLine, "\n", (133,6)->(133,6))
    stopline = stoplinetop
    ^^^^^^^^ Token(Identifier, "stopline", (134,4)->(134,12))
             ^ Token(Equal, "=", (134,13)->(134,14))
               ^^^^^^^^^^^ Token(Identifier, "stoplinetop", (134,15)->(134,26))
                           Token(EndOfLine, "\n", (134,26)->(134,26))
  endif
  ^^^^^ Token(Identifier, "endif", (135,2)->(135,7))
        Token(EndOfLine, "\n", (135,7)->(135,7))

 Token(EndOfLine, "\n", (136,0)->(136,0))
  var timeout: number
  ^^^ Token(Identifier, "var", (137,2)->(137,5))
      ^^^^^^^ Token(Identifier, "timeout", (137,6)->(137,13))
             ^ Token(Colon, ":", (137,13)->(137,14))
               ^^^^^^ Token(Identifier, "number", (137,15)->(137,21))
                      Token(EndOfLine, "\n", (137,21)->(137,21))
  var m_lnum: number
  ^^^ Token(Identifier, "var", (138,2)->(138,5))
      ^^^^^^ Token(Identifier, "m_lnum", (138,6)->(138,12))
            ^ Token(Colon, ":", (138,12)->(138,13))
              ^^^^^^ Token(Identifier, "number", (138,14)->(138,20))
                     Token(EndOfLine, "\n", (138,20)->(138,20))
  var m_col: number
  ^^^ Token(Identifier, "var", (139,2)->(139,5))
      ^^^^^ Token(Identifier, "m_col", (139,6)->(139,11))
           ^ Token(Colon, ":", (139,11)->(139,12))
             ^^^^^^ Token(Identifier, "number", (139,13)->(139,19))
                    Token(EndOfLine, "\n", (139,19)->(139,19))
  var adjustedScrolloff: number
  ^^^ Token(Identifier, "var", (140,2)->(140,5))
      ^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (140,6)->(140,23))
                       ^ Token(Colon, ":", (140,23)->(140,24))
                         ^^^^^^ Token(Identifier, "number", (140,25)->(140,31))
                                Token(EndOfLine, "\n", (140,31)->(140,31))
  var bottom_viewable: number
  ^^^ Token(Identifier, "var", (141,2)->(141,5))
      ^^^^^^^^^^^^^^^ Token(Identifier, "bottom_viewable", (141,6)->(141,21))
                     ^ Token(Colon, ":", (141,21)->(141,22))
                       ^^^^^^ Token(Identifier, "number", (141,23)->(141,29))
                              Token(EndOfLine, "\n", (141,29)->(141,29))
  var top_viewable: number
  ^^^ Token(Identifier, "var", (142,2)->(142,5))
      ^^^^^^^^^^^^ Token(Identifier, "top_viewable", (142,6)->(142,18))
                  ^ Token(Colon, ":", (142,18)->(142,19))
                    ^^^^^^ Token(Identifier, "number", (142,20)->(142,26))
                           Token(EndOfLine, "\n", (142,26)->(142,26))
  # Limit the search time to 300 msec to avoid a hang on very long lines.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Limit the search time to 300 msec to avoid a hang on very long lines.", (143,2)->(143,73))
  # This fails when a timeout is not supported.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# This fails when a timeout is not supported.", (144,2)->(144,47))
  if mode() == 'i' || mode() == 'R'
  ^^ Token(Identifier, "if", (145,2)->(145,4))
     ^^^^ Token(Identifier, "mode", (145,5)->(145,9))
         ^ Token(LeftParen, "(", (145,9)->(145,10))
          ^ Token(RightParen, ")", (145,10)->(145,11))
            ^^ Token(EqualTo, "==", (145,12)->(145,14))
                 Token(SingleQuoteString, "i", (145,16)->(145,16))
                   ^^ Token(Or, "||", (145,19)->(145,21))
                      ^^^^ Token(Identifier, "mode", (145,22)->(145,26))
                          ^ Token(LeftParen, "(", (145,26)->(145,27))
                           ^ Token(RightParen, ")", (145,27)->(145,28))
                             ^^ Token(EqualTo, "==", (145,29)->(145,31))
                                  Token(SingleQuoteString, "R", (145,33)->(145,33))
                                    Token(EndOfLine, "\n", (145,35)->(145,35))
    timeout = exists('b:matchparen_insert_timeout') ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    ^^^^^^^ Token(Identifier, "timeout", (146,4)->(146,11))
            ^ Token(Equal, "=", (146,12)->(146,13))
              ^^^^^^ Token(Identifier, "exists", (146,14)->(146,20))
                    ^ Token(LeftParen, "(", (146,20)->(146,21))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "b:matchparen_insert_timeout", (146,22)->(146,48))
                                                  ^ Token(RightParen, ")", (146,50)->(146,51))
                                                     Token(Illegal, "?", (146,52)->(146,52))
                                                      ^ Token(Identifier, "b", (146,54)->(146,55))
                                                       ^ Token(Colon, ":", (146,55)->(146,56))
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (146,56)->(146,81))
                                                                                  ^ Token(Colon, ":", (146,82)->(146,83))
                                                                                    ^ Token(Identifier, "g", (146,84)->(146,85))
                                                                                     ^ Token(Colon, ":", (146,85)->(146,86))
                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (146,86)->(146,111))
                                                                                                                Token(EndOfLine, "\n", (146,111)->(146,111))
  else
  ^^^^ Token(Identifier, "else", (147,2)->(147,6))
       Token(EndOfLine, "\n", (147,6)->(147,6))
    timeout = exists('b:matchparen_timeout') ? b:matchparen_timeout : g:matchparen_timeout
    ^^^^^^^ Token(Identifier, "timeout", (148,4)->(148,11))
            ^ Token(Equal, "=", (148,12)->(148,13))
              ^^^^^^ Token(Identifier, "exists", (148,14)->(148,20))
                    ^ Token(LeftParen, "(", (148,20)->(148,21))
                      ^^^^^^^^^^^^^^^^^^^ Token(SingleQuoteString, "b:matchparen_timeout", (148,22)->(148,41))
                                           ^ Token(RightParen, ")", (148,43)->(148,44))
                                              Token(Illegal, "?", (148,45)->(148,45))
                                               ^ Token(Identifier, "b", (148,47)->(148,48))
                                                ^ Token(Colon, ":", (148,48)->(148,49))
                                                 ^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (148,49)->(148,67))
                                                                    ^ Token(Colon, ":", (148,68)->(148,69))
                                                                      ^ Token(Identifier, "g", (148,70)->(148,71))
                                                                       ^ Token(Colon, ":", (148,71)->(148,72))
                                                                        ^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (148,72)->(148,90))
                                                                                           Token(EndOfLine, "\n", (148,90)->(148,90))
  endif
  ^^^^^ Token(Identifier, "endif", (149,2)->(149,7))
        Token(EndOfLine, "\n", (149,7)->(149,7))
  try
  ^^^ Token(Identifier, "try", (150,2)->(150,5))
      Token(EndOfLine, "\n", (150,5)->(150,5))
    [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
    ^ Token(LeftBracket, "[", (151,4)->(151,5))
     ^^^^^^ Token(Identifier, "m_lnum", (151,5)->(151,11))
           ^ Token(Comma, ",", (151,11)->(151,12))
             ^^^^^ Token(Identifier, "m_col", (151,13)->(151,18))
                  ^ Token(RightBracket, "]", (151,18)->(151,19))
                    ^ Token(Equal, "=", (151,20)->(151,21))
                      ^^^^^^^^^^^^^ Token(Identifier, "searchpairpos", (151,22)->(151,35))
                                   ^ Token(LeftParen, "(", (151,35)->(151,36))
                                    ^ Token(Identifier, "c", (151,36)->(151,37))
                                     ^ Token(Comma, ",", (151,37)->(151,38))
                                         Token(SingleQuoteString, "", (151,40)->(151,40))
                                         ^ Token(Comma, ",", (151,41)->(151,42))
                                           ^^ Token(Identifier, "c2", (151,43)->(151,45))
                                             ^ Token(Comma, ",", (151,45)->(151,46))
                                               ^^^^^^^ Token(Identifier, "s_flags", (151,47)->(151,54))
                                                      ^ Token(Comma, ",", (151,54)->(151,55))
                                                        ^^^^^^ Token(Identifier, "s_skip", (151,56)->(151,62))
                                                              ^ Token(Comma, ",", (151,62)->(151,63))
                                                                ^^^^^^^^ Token(Identifier, "stopline", (151,64)->(151,72))
                                                                        ^ Token(Comma, ",", (151,72)->(151,73))
                                                                          ^^^^^^^ Token(Identifier, "timeout", (151,74)->(151,81))
                                                                                 ^ Token(RightParen, ")", (151,81)->(151,82))
                                                                                   Token(EndOfLine, "\n", (151,82)->(151,82))
  catch /E118/
  ^^^^^ Token(Identifier, "catch", (152,2)->(152,7))
        ^ Token(Div, "/", (152,8)->(152,9))
         ^^^^ Token(Identifier, "E118", (152,9)->(152,13))
             ^ Token(Div, "/", (152,13)->(152,14))
               Token(EndOfLine, "\n", (152,14)->(152,14))
    # Can't use the timeout, restrict the stopline a bit more to avoid taking
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Can't use the timeout, restrict the stopline a bit more to avoid taking", (153,4)->(153,77))
    # a long time on closed folds and long lines.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# a long time on closed folds and long lines.", (154,4)->(154,49))
    # The "viewable" variables give a range in which we can scroll while
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# The \"viewable\" variables give a range in which we can scroll while", (155,4)->(155,72))
    # keeping the cursor at the same position.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# keeping the cursor at the same position.", (156,4)->(156,46))
    # adjustedScrolloff accounts for very large numbers of scrolloff.
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# adjustedScrolloff accounts for very large numbers of scrolloff.", (157,4)->(157,69))
    adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
    ^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (158,4)->(158,21))
                      ^ Token(Equal, "=", (158,22)->(158,23))
                        ^^^ Token(Identifier, "min", (158,24)->(158,27))
                           ^ Token(LeftParen, "(", (158,27)->(158,28))
                            ^ Token(LeftBracket, "[", (158,28)->(158,29))
                             ^ Token(Ampersand, "&", (158,29)->(158,30))
                              ^^^^^^^^^ Token(Identifier, "scrolloff", (158,30)->(158,39))
                                       ^ Token(Comma, ",", (158,39)->(158,40))
                                         ^ Token(LeftParen, "(", (158,41)->(158,42))
                                          ^^^^ Token(Identifier, "line", (158,42)->(158,46))
                                              ^ Token(LeftParen, "(", (158,46)->(158,47))
                                                ^ Token(SingleQuoteString, "w$", (158,48)->(158,49))
                                                   ^ Token(RightParen, ")", (158,51)->(158,52))
                                                     ^ Token(Minus, "-", (158,53)->(158,54))
                                                       ^^^^ Token(Identifier, "line", (158,55)->(158,59))
                                                           ^ Token(LeftParen, "(", (158,59)->(158,60))
                                                             ^ Token(SingleQuoteString, "w0", (158,61)->(158,62))
                                                                ^ Token(RightParen, ")", (158,64)->(158,65))
                                                                 ^ Token(RightParen, ")", (158,65)->(158,66))
                                                                   ^ Token(Div, "/", (158,67)->(158,68))
                                                                     ^ Token(Integer, "2", (158,69)->(158,70))
                                                                      ^ Token(RightBracket, "]", (158,70)->(158,71))
                                                                       ^ Token(RightParen, ")", (158,71)->(158,72))
                                                                         Token(EndOfLine, "\n", (158,72)->(158,72))
    bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
    ^^^^^^^^^^^^^^^ Token(Identifier, "bottom_viewable", (159,4)->(159,19))
                    ^ Token(Equal, "=", (159,20)->(159,21))
                      ^^^ Token(Identifier, "min", (159,22)->(159,25))
                         ^ Token(LeftParen, "(", (159,25)->(159,26))
                          ^ Token(LeftBracket, "[", (159,26)->(159,27))
                           ^^^^ Token(Identifier, "line", (159,27)->(159,31))
                               ^ Token(LeftParen, "(", (159,31)->(159,32))
                                  Token(SingleQuoteString, "$", (159,33)->(159,33))
                                   ^ Token(RightParen, ")", (159,35)->(159,36))
                                    ^ Token(Comma, ",", (159,36)->(159,37))
                                      ^^^^^^ Token(Identifier, "c_lnum", (159,38)->(159,44))
                                             ^ Token(Plus, "+", (159,45)->(159,46))
                                               ^ Token(Ampersand, "&", (159,47)->(159,48))
                                                ^^^^^ Token(Identifier, "lines", (159,48)->(159,53))
                                                      ^ Token(Minus, "-", (159,54)->(159,55))
                                                        ^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (159,56)->(159,73))
                                                                          ^ Token(Minus, "-", (159,74)->(159,75))
                                                                            ^ Token(Integer, "2", (159,76)->(159,77))
                                                                             ^ Token(RightBracket, "]", (159,77)->(159,78))
                                                                              ^ Token(RightParen, ")", (159,78)->(159,79))
                                                                                Token(EndOfLine, "\n", (159,79)->(159,79))
    top_viewable = max([1, c_lnum - &lines + adjustedScrolloff + 2])
    ^^^^^^^^^^^^ Token(Identifier, "top_viewable", (160,4)->(160,16))
                 ^ Token(Equal, "=", (160,17)->(160,18))
                   ^^^ Token(Identifier, "max", (160,19)->(160,22))
                      ^ Token(LeftParen, "(", (160,22)->(160,23))
                       ^ Token(LeftBracket, "[", (160,23)->(160,24))
                        ^ Token(Integer, "1", (160,24)->(160,25))
                         ^ Token(Comma, ",", (160,25)->(160,26))
                           ^^^^^^ Token(Identifier, "c_lnum", (160,27)->(160,33))
                                  ^ Token(Minus, "-", (160,34)->(160,35))
                                    ^ Token(Ampersand, "&", (160,36)->(160,37))
                                     ^^^^^ Token(Identifier, "lines", (160,37)->(160,42))
                                           ^ Token(Plus, "+", (160,43)->(160,44))
                                             ^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (160,45)->(160,62))
                                                               ^ Token(Plus, "+", (160,63)->(160,64))
                                                                 ^ Token(Integer, "2", (160,65)->(160,66))
                                                                  ^ Token(RightBracket, "]", (160,66)->(160,67))
                                                                   ^ Token(RightParen, ")", (160,67)->(160,68))
                                                                     Token(EndOfLine, "\n", (160,68)->(160,68))
    # one of these stoplines will be adjusted below, but the current values are
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# one of these stoplines will be adjusted below, but the current values are", (161,4)->(161,79))
    # minimal boundaries within the current window
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# minimal boundaries within the current window", (162,4)->(162,50))
    if i % 2 == 0
    ^^ Token(Identifier, "if", (163,4)->(163,6))
       ^ Token(Identifier, "i", (163,7)->(163,8))
          Token(Illegal, "%", (163,9)->(163,9))
           ^ Token(Integer, "2", (163,11)->(163,12))
             ^^ Token(EqualTo, "==", (163,13)->(163,15))
                ^ Token(Integer, "0", (163,16)->(163,17))
                  Token(EndOfLine, "\n", (163,17)->(163,17))
      var stopbyte = min([line2byte('$'), line2byte('.') + col('.') + &smc * 2])
      ^^^ Token(Identifier, "var", (164,6)->(164,9))
          ^^^^^^^^ Token(Identifier, "stopbyte", (164,10)->(164,18))
                   ^ Token(Equal, "=", (164,19)->(164,20))
                     ^^^ Token(Identifier, "min", (164,21)->(164,24))
                        ^ Token(LeftParen, "(", (164,24)->(164,25))
                         ^ Token(LeftBracket, "[", (164,25)->(164,26))
                          ^^^^^^^^^ Token(Identifier, "line2byte", (164,26)->(164,35))
                                   ^ Token(LeftParen, "(", (164,35)->(164,36))
                                      Token(SingleQuoteString, "$", (164,37)->(164,37))
                                       ^ Token(RightParen, ")", (164,39)->(164,40))
                                        ^ Token(Comma, ",", (164,40)->(164,41))
                                          ^^^^^^^^^ Token(Identifier, "line2byte", (164,42)->(164,51))
                                                   ^ Token(LeftParen, "(", (164,51)->(164,52))
                                                      Token(SingleQuoteString, ".", (164,53)->(164,53))
                                                       ^ Token(RightParen, ")", (164,55)->(164,56))
                                                         ^ Token(Plus, "+", (164,57)->(164,58))
                                                           ^^^ Token(Identifier, "col", (164,59)->(164,62))
                                                              ^ Token(LeftParen, "(", (164,62)->(164,63))
                                                                 Token(SingleQuoteString, ".", (164,64)->(164,64))
                                                                  ^ Token(RightParen, ")", (164,66)->(164,67))
                                                                    ^ Token(Plus, "+", (164,68)->(164,69))
                                                                      ^ Token(Ampersand, "&", (164,70)->(164,71))
                                                                       ^^^ Token(Identifier, "smc", (164,71)->(164,74))
                                                                           ^ Token(Mul, "*", (164,75)->(164,76))
                                                                             ^ Token(Integer, "2", (164,77)->(164,78))
                                                                              ^ Token(RightBracket, "]", (164,78)->(164,79))
                                                                               ^ Token(RightParen, ")", (164,79)->(164,80))
                                                                                 Token(EndOfLine, "\n", (164,80)->(164,80))
      stopline = min([bottom_viewable, byte2line(stopbyte)])
      ^^^^^^^^ Token(Identifier, "stopline", (165,6)->(165,14))
               ^ Token(Equal, "=", (165,15)->(165,16))
                 ^^^ Token(Identifier, "min", (165,17)->(165,20))
                    ^ Token(LeftParen, "(", (165,20)->(165,21))
                     ^ Token(LeftBracket, "[", (165,21)->(165,22))
                      ^^^^^^^^^^^^^^^ Token(Identifier, "bottom_viewable", (165,22)->(165,37))
                                     ^ Token(Comma, ",", (165,37)->(165,38))
                                       ^^^^^^^^^ Token(Identifier, "byte2line", (165,39)->(165,48))
                                                ^ Token(LeftParen, "(", (165,48)->(165,49))
                                                 ^^^^^^^^ Token(Identifier, "stopbyte", (165,49)->(165,57))
                                                         ^ Token(RightParen, ")", (165,57)->(165,58))
                                                          ^ Token(RightBracket, "]", (165,58)->(165,59))
                                                           ^ Token(RightParen, ")", (165,59)->(165,60))
                                                             Token(EndOfLine, "\n", (165,60)->(165,60))
      stoplinebottom = stopline
      ^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (166,6)->(166,20))
                     ^ Token(Equal, "=", (166,21)->(166,22))
                       ^^^^^^^^ Token(Identifier, "stopline", (166,23)->(166,31))
                                Token(EndOfLine, "\n", (166,31)->(166,31))
    else
    ^^^^ Token(Identifier, "else", (167,4)->(167,8))
         Token(EndOfLine, "\n", (167,8)->(167,8))
      var stopbyte = max([1, line2byte('.') + col('.') - &smc * 2])
      ^^^ Token(Identifier, "var", (168,6)->(168,9))
          ^^^^^^^^ Token(Identifier, "stopbyte", (168,10)->(168,18))
                   ^ Token(Equal, "=", (168,19)->(168,20))
                     ^^^ Token(Identifier, "max", (168,21)->(168,24))
                        ^ Token(LeftParen, "(", (168,24)->(168,25))
                         ^ Token(LeftBracket, "[", (168,25)->(168,26))
                          ^ Token(Integer, "1", (168,26)->(168,27))
                           ^ Token(Comma, ",", (168,27)->(168,28))
                             ^^^^^^^^^ Token(Identifier, "line2byte", (168,29)->(168,38))
                                      ^ Token(LeftParen, "(", (168,38)->(168,39))
                                         Token(SingleQuoteString, ".", (168,40)->(168,40))
                                          ^ Token(RightParen, ")", (168,42)->(168,43))
                                            ^ Token(Plus, "+", (168,44)->(168,45))
                                              ^^^ Token(Identifier, "col", (168,46)->(168,49))
                                                 ^ Token(LeftParen, "(", (168,49)->(168,50))
                                                    Token(SingleQuoteString, ".", (168,51)->(168,51))
                                                     ^ Token(RightParen, ")", (168,53)->(168,54))
                                                       ^ Token(Minus, "-", (168,55)->(168,56))
                                                         ^ Token(Ampersand, "&", (168,57)->(168,58))
                                                          ^^^ Token(Identifier, "smc", (168,58)->(168,61))
                                                              ^ Token(Mul, "*", (168,62)->(168,63))
                                                                ^ Token(Integer, "2", (168,64)->(168,65))
                                                                 ^ Token(RightBracket, "]", (168,65)->(168,66))
                                                                  ^ Token(RightParen, ")", (168,66)->(168,67))
                                                                    Token(EndOfLine, "\n", (168,67)->(168,67))
      stopline = max([top_viewable, byte2line(stopbyte)])
      ^^^^^^^^ Token(Identifier, "stopline", (169,6)->(169,14))
               ^ Token(Equal, "=", (169,15)->(169,16))
                 ^^^ Token(Identifier, "max", (169,17)->(169,20))
                    ^ Token(LeftParen, "(", (169,20)->(169,21))
                     ^ Token(LeftBracket, "[", (169,21)->(169,22))
                      ^^^^^^^^^^^^ Token(Identifier, "top_viewable", (169,22)->(169,34))
                                  ^ Token(Comma, ",", (169,34)->(169,35))
                                    ^^^^^^^^^ Token(Identifier, "byte2line", (169,36)->(169,45))
                                             ^ Token(LeftParen, "(", (169,45)->(169,46))
                                              ^^^^^^^^ Token(Identifier, "stopbyte", (169,46)->(169,54))
                                                      ^ Token(RightParen, ")", (169,54)->(169,55))
                                                       ^ Token(RightBracket, "]", (169,55)->(169,56))
                                                        ^ Token(RightParen, ")", (169,56)->(169,57))
                                                          Token(EndOfLine, "\n", (169,57)->(169,57))
      stoplinetop = stopline
      ^^^^^^^^^^^ Token(Identifier, "stoplinetop", (170,6)->(170,17))
                  ^ Token(Equal, "=", (170,18)->(170,19))
                    ^^^^^^^^ Token(Identifier, "stopline", (170,20)->(170,28))
                             Token(EndOfLine, "\n", (170,28)->(170,28))
    endif
    ^^^^^ Token(Identifier, "endif", (171,4)->(171,9))
          Token(EndOfLine, "\n", (171,9)->(171,9))
    [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    ^ Token(LeftBracket, "[", (172,4)->(172,5))
     ^^^^^^ Token(Identifier, "m_lnum", (172,5)->(172,11))
           ^ Token(Comma, ",", (172,11)->(172,12))
             ^^^^^ Token(Identifier, "m_col", (172,13)->(172,18))
                  ^ Token(RightBracket, "]", (172,18)->(172,19))
                    ^ Token(Equal, "=", (172,20)->(172,21))
                      ^^^^^^^^^^^^^ Token(Identifier, "searchpairpos", (172,22)->(172,35))
                                   ^ Token(LeftParen, "(", (172,35)->(172,36))
                                    ^ Token(Identifier, "c", (172,36)->(172,37))
                                     ^ Token(Comma, ",", (172,37)->(172,38))
                                         Token(SingleQuoteString, "", (172,40)->(172,40))
                                         ^ Token(Comma, ",", (172,41)->(172,42))
                                           ^^ Token(Identifier, "c2", (172,43)->(172,45))
                                             ^ Token(Comma, ",", (172,45)->(172,46))
                                               ^^^^^^^ Token(Identifier, "s_flags", (172,47)->(172,54))
                                                      ^ Token(Comma, ",", (172,54)->(172,55))
                                                        ^^^^^^ Token(Identifier, "s_skip", (172,56)->(172,62))
                                                              ^ Token(Comma, ",", (172,62)->(172,63))
                                                                ^^^^^^^^ Token(Identifier, "stopline", (172,64)->(172,72))
                                                                        ^ Token(RightParen, ")", (172,72)->(172,73))
                                                                          Token(EndOfLine, "\n", (172,73)->(172,73))
  endtry
  ^^^^^^ Token(Identifier, "endtry", (173,2)->(173,8))
         Token(EndOfLine, "\n", (173,8)->(173,8))

 Token(EndOfLine, "\n", (174,0)->(174,0))
  if before > 0
  ^^ Token(Identifier, "if", (175,2)->(175,4))
     ^^^^^^ Token(Identifier, "before", (175,5)->(175,11))
            ^ Token(GreaterThan, ">", (175,12)->(175,13))
              ^ Token(Integer, "0", (175,14)->(175,15))
                Token(EndOfLine, "\n", (175,15)->(175,15))
    setpos('.', save_cursor)
    ^^^^^^ Token(Identifier, "setpos", (176,4)->(176,10))
          ^ Token(LeftParen, "(", (176,10)->(176,11))
             Token(SingleQuoteString, ".", (176,12)->(176,12))
              ^ Token(Comma, ",", (176,14)->(176,15))
                ^^^^^^^^^^^ Token(Identifier, "save_cursor", (176,16)->(176,27))
                           ^ Token(RightParen, ")", (176,27)->(176,28))
                             Token(EndOfLine, "\n", (176,28)->(176,28))
  endif
  ^^^^^ Token(Identifier, "endif", (177,2)->(177,7))
        Token(EndOfLine, "\n", (177,7)->(177,7))

 Token(EndOfLine, "\n", (178,0)->(178,0))
  # If a match is found setup match highlighting.
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# If a match is found setup match highlighting.", (179,2)->(179,49))
  if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
  ^^ Token(Identifier, "if", (180,2)->(180,4))
     ^^^^^^ Token(Identifier, "m_lnum", (180,5)->(180,11))
            ^ Token(GreaterThan, ">", (180,12)->(180,13))
              ^ Token(Integer, "0", (180,14)->(180,15))
                ^^ Token(And, "&&", (180,16)->(180,18))
                   ^^^^^^ Token(Identifier, "m_lnum", (180,19)->(180,25))
                          ^^ Token(GreaterThanOrEqual, ">=", (180,26)->(180,28))
                             ^^^^^^^^^^^ Token(Identifier, "stoplinetop", (180,29)->(180,40))
                                         ^^ Token(And, "&&", (180,41)->(180,43))
                                            ^^^^^^ Token(Identifier, "m_lnum", (180,44)->(180,50))
                                                   ^^ Token(LessThanOrEqual, "<=", (180,51)->(180,53))
                                                      ^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (180,54)->(180,68))
                                                                      Token(EndOfLine, "\n", (180,69)->(180,69))
    matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
    ^^^^^^^^^^^ Token(Identifier, "matchaddpos", (181,4)->(181,15))
               ^ Token(LeftParen, "(", (181,15)->(181,16))
                 ^^^^^^^^^ Token(SingleQuoteString, "MatchParen", (181,17)->(181,26))
                            ^ Token(Comma, ",", (181,28)->(181,29))
                              ^ Token(LeftBracket, "[", (181,30)->(181,31))
                               ^ Token(LeftBracket, "[", (181,31)->(181,32))
                                ^^^^^^ Token(Identifier, "c_lnum", (181,32)->(181,38))
                                      ^ Token(Comma, ",", (181,38)->(181,39))
                                        ^^^^^ Token(Identifier, "c_col", (181,40)->(181,45))
                                              ^ Token(Minus, "-", (181,46)->(181,47))
                                                ^^^^^^ Token(Identifier, "before", (181,48)->(181,54))
                                                      ^ Token(RightBracket, "]", (181,54)->(181,55))
                                                       ^ Token(Comma, ",", (181,55)->(181,56))
                                                         ^ Token(LeftBracket, "[", (181,57)->(181,58))
                                                          ^^^^^^ Token(Identifier, "m_lnum", (181,58)->(181,64))
                                                                ^ Token(Comma, ",", (181,64)->(181,65))
                                                                  ^^^^^ Token(Identifier, "m_col", (181,66)->(181,71))
                                                                       ^ Token(RightBracket, "]", (181,71)->(181,72))
                                                                        ^ Token(RightBracket, "]", (181,72)->(181,73))
                                                                         ^ Token(Comma, ",", (181,73)->(181,74))
                                                                           ^^ Token(Integer, "10", (181,75)->(181,77))
                                                                             ^ Token(Comma, ",", (181,77)->(181,78))
                                                                               ^ Token(Integer, "3", (181,79)->(181,80))
                                                                                ^ Token(RightParen, ")", (181,80)->(181,81))
                                                                                  Token(EndOfLine, "\n", (181,81)->(181,81))
    w:paren_hl_on = 1
    ^ Token(Identifier, "w", (182,4)->(182,5))
     ^ Token(Colon, ":", (182,5)->(182,6))
      ^^^^^^^^^^^ Token(Identifier, "paren_hl_on", (182,6)->(182,17))
                  ^ Token(Equal, "=", (182,18)->(182,19))
                    ^ Token(Integer, "1", (182,20)->(182,21))
                      Token(EndOfLine, "\n", (182,21)->(182,21))
  endif
  ^^^^^ Token(Identifier, "endif", (183,2)->(183,7))
        Token(EndOfLine, "\n", (183,7)->(183,7))
enddef
^^^^^^ Token(Identifier, "enddef", (184,0)->(184,6))
       Token(EndOfLine, "\n", (184,6)->(184,6))

 Token(EndOfLine, "\n", (185,0)->(185,0))
def Remove_Matches()
^^^ Token(Identifier, "def", (186,0)->(186,3))
    ^^^^^^^^^^^^^^ Token(Identifier, "Remove_Matches", (186,4)->(186,18))
                  ^ Token(LeftParen, "(", (186,18)->(186,19))
                   ^ Token(RightParen, ")", (186,19)->(186,20))
                     Token(EndOfLine, "\n", (186,20)->(186,20))
  if exists('w:paren_hl_on') && w:paren_hl_on
  ^^ Token(Identifier, "if", (187,2)->(187,4))
     ^^^^^^ Token(Identifier, "exists", (187,5)->(187,11))
           ^ Token(LeftParen, "(", (187,11)->(187,12))
             ^^^^^^^^^^^^ Token(SingleQuoteString, "w:paren_hl_on", (187,13)->(187,25))
                           ^ Token(RightParen, ")", (187,27)->(187,28))
                             ^^ Token(And, "&&", (187,29)->(187,31))
                                ^ Token(Identifier, "w", (187,32)->(187,33))
                                 ^ Token(Colon, ":", (187,33)->(187,34))
                                  ^^^^^^^^^^^ Token(Identifier, "paren_hl_on", (187,34)->(187,45))
                                              Token(EndOfLine, "\n", (187,45)->(187,45))
    silent! matchdelete(3)
    ^^^^^^ Token(Identifier, "silent", (188,4)->(188,10))
          ^ Token(Bang, "!", (188,10)->(188,11))
            ^^^^^^^^^^^ Token(Identifier, "matchdelete", (188,12)->(188,23))
                       ^ Token(LeftParen, "(", (188,23)->(188,24))
                        ^ Token(Integer, "3", (188,24)->(188,25))
                         ^ Token(RightParen, ")", (188,25)->(188,26))
                           Token(EndOfLine, "\n", (188,26)->(188,26))
    w:paren_hl_on = 0
    ^ Token(Identifier, "w", (189,4)->(189,5))
     ^ Token(Colon, ":", (189,5)->(189,6))
      ^^^^^^^^^^^ Token(Identifier, "paren_hl_on", (189,6)->(189,17))
                  ^ Token(Equal, "=", (189,18)->(189,19))
                    ^ Token(Integer, "0", (189,20)->(189,21))
                      Token(EndOfLine, "\n", (189,21)->(189,21))
  endif
  ^^^^^ Token(Identifier, "endif", (190,2)->(190,7))
        Token(EndOfLine, "\n", (190,7)->(190,7))
enddef
^^^^^^ Token(Identifier, "enddef", (191,0)->(191,6))
       Token(EndOfLine, "\n", (191,6)->(191,6))

 Token(EndOfLine, "\n", (192,0)->(192,0))

 Token(EndOfLine, "\n", (193,0)->(193,0))
# Define commands that will disable and enable the plugin.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Define commands that will disable and enable the plugin.", (194,0)->(194,58))
command DoMatchParen {
^^^^^^^ Token(Identifier, "command", (195,0)->(195,7))
        ^^^^^^^^^^^^ Token(Identifier, "DoMatchParen", (195,8)->(195,20))
                     ^ Token(LeftBrace, "{", (195,21)->(195,22))
                       Token(EndOfLine, "\n", (195,22)->(195,22))
    DoMatchParen()
    ^^^^^^^^^^^^ Token(Identifier, "DoMatchParen", (196,4)->(196,16))
                ^ Token(LeftParen, "(", (196,16)->(196,17))
                 ^ Token(RightParen, ")", (196,17)->(196,18))
                   Token(EndOfLine, "\n", (196,18)->(196,18))
  }
  ^ Token(RightBrace, "}", (197,2)->(197,3))
    Token(EndOfLine, "\n", (197,3)->(197,3))
command NoMatchParen {
^^^^^^^ Token(Identifier, "command", (198,0)->(198,7))
        ^^^^^^^^^^^^ Token(Identifier, "NoMatchParen", (198,8)->(198,20))
                     ^ Token(LeftBrace, "{", (198,21)->(198,22))
                       Token(EndOfLine, "\n", (198,22)->(198,22))
    NoMatchParen()
    ^^^^^^^^^^^^ Token(Identifier, "NoMatchParen", (199,4)->(199,16))
                ^ Token(LeftParen, "(", (199,16)->(199,17))
                 ^ Token(RightParen, ")", (199,17)->(199,18))
                   Token(EndOfLine, "\n", (199,18)->(199,18))
  }
  ^ Token(RightBrace, "}", (200,2)->(200,3))
    Token(EndOfLine, "\n", (200,3)->(200,3))

 Token(EndOfLine, "\n", (201,0)->(201,0))
def NoMatchParen()
^^^ Token(Identifier, "def", (202,0)->(202,3))
    ^^^^^^^^^^^^ Token(Identifier, "NoMatchParen", (202,4)->(202,16))
                ^ Token(LeftParen, "(", (202,16)->(202,17))
                 ^ Token(RightParen, ")", (202,17)->(202,18))
                   Token(EndOfLine, "\n", (202,18)->(202,18))
  var w = winnr()
  ^^^ Token(Identifier, "var", (203,2)->(203,5))
      ^ Token(Identifier, "w", (203,6)->(203,7))
        ^ Token(Equal, "=", (203,8)->(203,9))
          ^^^^^ Token(Identifier, "winnr", (203,10)->(203,15))
               ^ Token(LeftParen, "(", (203,15)->(203,16))
                ^ Token(RightParen, ")", (203,16)->(203,17))
                  Token(EndOfLine, "\n", (203,17)->(203,17))
  noau windo silent! call matchdelete(3)
  ^^^^ Token(Identifier, "noau", (204,2)->(204,6))
       ^^^^^ Token(Identifier, "windo", (204,7)->(204,12))
             ^^^^^^ Token(Identifier, "silent", (204,13)->(204,19))
                   ^ Token(Bang, "!", (204,19)->(204,20))
                     ^^^^ Token(Identifier, "call", (204,21)->(204,25))
                          ^^^^^^^^^^^ Token(Identifier, "matchdelete", (204,26)->(204,37))
                                     ^ Token(LeftParen, "(", (204,37)->(204,38))
                                      ^ Token(Integer, "3", (204,38)->(204,39))
                                       ^ Token(RightParen, ")", (204,39)->(204,40))
                                         Token(EndOfLine, "\n", (204,40)->(204,40))
  unlet! g:loaded_matchparen
  ^^^^^ Token(Identifier, "unlet", (205,2)->(205,7))
       ^ Token(Bang, "!", (205,7)->(205,8))
         ^ Token(Identifier, "g", (205,9)->(205,10))
          ^ Token(Colon, ":", (205,10)->(205,11))
           ^^^^^^^^^^^^^^^^^ Token(Identifier, "loaded_matchparen", (205,11)->(205,28))
                             Token(EndOfLine, "\n", (205,28)->(205,28))
  exe 'noau :' .. w .. 'wincmd w'
  ^^^ Token(Identifier, "exe", (206,2)->(206,5))
       ^^^^^ Token(SingleQuoteString, "noau :", (206,7)->(206,12))
                Token(Illegal, ".", (206,15)->(206,15))
                 Token(Illegal, ".", (206,16)->(206,16))
                  ^ Token(Identifier, "w", (206,18)->(206,19))
                     Token(Illegal, ".", (206,20)->(206,20))
                      Token(Illegal, ".", (206,21)->(206,21))
                        ^^^^^^^ Token(SingleQuoteString, "wincmd w", (206,24)->(206,31))
                                  Token(EndOfLine, "\n", (206,33)->(206,33))
  au! matchparen
  ^^ Token(Identifier, "au", (207,2)->(207,4))
    ^ Token(Bang, "!", (207,4)->(207,5))
      ^^^^^^^^^^ Token(Identifier, "matchparen", (207,6)->(207,16))
                 Token(EndOfLine, "\n", (207,16)->(207,16))
enddef
^^^^^^ Token(Identifier, "enddef", (208,0)->(208,6))
       Token(EndOfLine, "\n", (208,6)->(208,6))

 Token(EndOfLine, "\n", (209,0)->(209,0))
def DoMatchParen()
^^^ Token(Identifier, "def", (210,0)->(210,3))
    ^^^^^^^^^^^^ Token(Identifier, "DoMatchParen", (210,4)->(210,16))
                ^ Token(LeftParen, "(", (210,16)->(210,17))
                 ^ Token(RightParen, ")", (210,17)->(210,18))
                   Token(EndOfLine, "\n", (210,18)->(210,18))
  runtime plugin/matchparen.vim
  ^^^^^^^ Token(Identifier, "runtime", (211,2)->(211,9))
          ^^^^^^ Token(Identifier, "plugin", (211,10)->(211,16))
                ^ Token(Div, "/", (211,16)->(211,17))
                 ^^^^^^^^^^ Token(Identifier, "matchparen", (211,17)->(211,27))
                            Token(Illegal, ".", (211,27)->(211,27))
                            ^^^ Token(Identifier, "vim", (211,28)->(211,31))
                                Token(EndOfLine, "\n", (211,31)->(211,31))
  var w = winnr()
  ^^^ Token(Identifier, "var", (212,2)->(212,5))
      ^ Token(Identifier, "w", (212,6)->(212,7))
        ^ Token(Equal, "=", (212,8)->(212,9))
          ^^^^^ Token(Identifier, "winnr", (212,10)->(212,15))
               ^ Token(LeftParen, "(", (212,15)->(212,16))
                ^ Token(RightParen, ")", (212,16)->(212,17))
                  Token(EndOfLine, "\n", (212,17)->(212,17))
  silent windo doau CursorMoved
  ^^^^^^ Token(Identifier, "silent", (213,2)->(213,8))
         ^^^^^ Token(Identifier, "windo", (213,9)->(213,14))
               ^^^^ Token(Identifier, "doau", (213,15)->(213,19))
                    ^^^^^^^^^^^ Token(Identifier, "CursorMoved", (213,20)->(213,31))
                                Token(EndOfLine, "\n", (213,31)->(213,31))
  exe 'noau :' .. w .. 'wincmd w'
  ^^^ Token(Identifier, "exe", (214,2)->(214,5))
       ^^^^^ Token(SingleQuoteString, "noau :", (214,7)->(214,12))
                Token(Illegal, ".", (214,15)->(214,15))
                 Token(Illegal, ".", (214,16)->(214,16))
                  ^ Token(Identifier, "w", (214,18)->(214,19))
                     Token(Illegal, ".", (214,20)->(214,20))
                      Token(Illegal, ".", (214,21)->(214,21))
                        ^^^^^^^ Token(SingleQuoteString, "wincmd w", (214,24)->(214,31))
                                  Token(EndOfLine, "\n", (214,33)->(214,33))
enddef
^^^^^^ Token(Identifier, "enddef", (215,0)->(215,6))
       Token(EndOfLine, "\n", (215,6)->(215,6))

 Token(EndOfLine, "\n", (216,0)->(216,0))
# vim:ts=2:et:
^^^^^^^^^^^^^^ Token(Comment, "# vim:ts=2:et:", (217,0)->(217,14))

