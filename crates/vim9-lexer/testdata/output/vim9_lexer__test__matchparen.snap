---
source: src/lib.rs
assertion_line: 383
expression: snapshot_lexing(contents)
---
vim9script noclear
^^^^^^^^^^^ Token(Identifier, "vim9script", (0,0)->(0,10))
           ^^^^^^^^ Token(Identifier, "noclear", (0,11)->(0,18))
                  ^ Token(EndOfLine, "\n", (0,18)->(0,18))
# Vim plugin for showing matching parens
^ Token(Illegal, "#", (1,0)->(1,0))
  ^^^^ Token(Identifier, "Vim", (1,2)->(1,5))
      ^^^^^^^ Token(Identifier, "plugin", (1,6)->(1,12))
             ^^^^ Token(Identifier, "for", (1,13)->(1,16))
                 ^^^^^^^^ Token(Identifier, "showing", (1,17)->(1,24))
                         ^^^^^^^^^ Token(Identifier, "matching", (1,25)->(1,33))
                                  ^^^^^^^ Token(Identifier, "parens", (1,34)->(1,40))
                                        ^ Token(EndOfLine, "\n", (1,40)->(1,40))
# Maintainer:  Bram Moolenaar <Bram@vim.org>
^ Token(Illegal, "#", (2,0)->(2,0))
  ^^^^^^^^^^^ Token(Identifier, "Maintainer", (2,2)->(2,12))
            ^ Token(Colon, ":", (2,12)->(2,12))
               ^^^^^ Token(Identifier, "Bram", (2,15)->(2,19))
                    ^^^^^^^^^^ Token(Identifier, "Moolenaar", (2,20)->(2,29))
                              ^ Token(LessThan, "<", (2,30)->(2,30))
                               ^^^^^ Token(Identifier, "Bram", (2,31)->(2,35))
                                   ^ Token(Illegal, "@", (2,35)->(2,35))
                                    ^^^^ Token(Identifier, "vim", (2,36)->(2,39))
                                       ^ Token(Illegal, ".", (2,39)->(2,39))
                                        ^^^^ Token(Identifier, "org", (2,40)->(2,43))
                                           ^ Token(GreaterThan, ">", (2,43)->(2,43))
                                            ^ Token(EndOfLine, "\n", (2,44)->(2,44))
# Last Change: 2022 Aug 22
^ Token(Illegal, "#", (3,0)->(3,0))
  ^^^^^ Token(Identifier, "Last", (3,2)->(3,6))
       ^^^^^^^ Token(Identifier, "Change", (3,7)->(3,13))
             ^ Token(Colon, ":", (3,13)->(3,13))
               ^^^^^ Token(Integer, "2022", (3,15)->(3,19))
                    ^^^^ Token(Identifier, "Aug", (3,20)->(3,23))
                        ^^^ Token(Integer, "22", (3,24)->(3,26))
                          ^ Token(EndOfLine, "\n", (3,26)->(3,26))

^ Token(EndOfLine, "\n", (4,0)->(4,0))
# Exit quickly when:
^ Token(Illegal, "#", (5,0)->(5,0))
  ^^^^^ Token(Identifier, "Exit", (5,2)->(5,6))
       ^^^^^^^^ Token(Identifier, "quickly", (5,7)->(5,14))
               ^^^^^ Token(Identifier, "when", (5,15)->(5,19))
                   ^ Token(Colon, ":", (5,19)->(5,19))
                    ^ Token(EndOfLine, "\n", (5,20)->(5,20))
# - this plugin was already loaded (or disabled)
^ Token(Illegal, "#", (6,0)->(6,0))
  ^ Token(Minus, "-", (6,2)->(6,2))
    ^^^^^ Token(Identifier, "this", (6,4)->(6,8))
         ^^^^^^^ Token(Identifier, "plugin", (6,9)->(6,15))
                ^^^^ Token(Identifier, "was", (6,16)->(6,19))
                    ^^^^^^^^ Token(Identifier, "already", (6,20)->(6,27))
                            ^^^^^^^ Token(Identifier, "loaded", (6,28)->(6,34))
                                   ^ Token(LeftParen, "(", (6,35)->(6,35))
                                    ^^^ Token(Identifier, "or", (6,36)->(6,38))
                                       ^^^^^^^^^ Token(Identifier, "disabled", (6,39)->(6,47))
                                               ^ Token(RightParen, ")", (6,47)->(6,47))
                                                ^ Token(EndOfLine, "\n", (6,48)->(6,48))
# - 'compatible' is set
^ Token(Illegal, "#", (7,0)->(7,0))
  ^ Token(Minus, "-", (7,2)->(7,2))
    ^ Token(Illegal, "'", (7,4)->(7,4))
     ^^^^^^^^^^^ Token(Identifier, "compatible", (7,5)->(7,15))
               ^ Token(Illegal, "'", (7,15)->(7,15))
                 ^^^ Token(Identifier, "is", (7,17)->(7,19))
                    ^^^^ Token(Identifier, "set", (7,20)->(7,23))
                       ^ Token(EndOfLine, "\n", (7,23)->(7,23))
if exists('g:loaded_matchparen') || &cp
^^^ Token(Identifier, "if", (8,0)->(8,2))
   ^^^^^^^ Token(Identifier, "exists", (8,3)->(8,9))
         ^ Token(LeftParen, "(", (8,9)->(8,9))
          ^ Token(Illegal, "'", (8,10)->(8,10))
           ^^ Token(Identifier, "g", (8,11)->(8,12))
            ^ Token(Colon, ":", (8,12)->(8,12))
             ^^^^^^^^^^^^^^^^^^ Token(Identifier, "loaded_matchparen", (8,13)->(8,30))
                              ^ Token(Illegal, "'", (8,30)->(8,30))
                               ^ Token(RightParen, ")", (8,31)->(8,31))
                                 ^^ Token(Or, "||", (8,33)->(8,34))
                                    ^ Token(Illegal, "&", (8,36)->(8,36))
                                     ^^^ Token(Identifier, "cp", (8,37)->(8,39))
                                       ^ Token(EndOfLine, "\n", (8,39)->(8,39))
  finish
  ^^^^^^^ Token(Identifier, "finish", (9,2)->(9,8))
        ^ Token(EndOfLine, "\n", (9,8)->(9,8))
endif
^^^^^^ Token(Identifier, "endif", (10,0)->(10,5))
     ^ Token(EndOfLine, "\n", (10,5)->(10,5))
g:loaded_matchparen = 1
^^ Token(Identifier, "g", (11,0)->(11,1))
 ^ Token(Colon, ":", (11,1)->(11,1))
  ^^^^^^^^^^^^^^^^^^ Token(Identifier, "loaded_matchparen", (11,2)->(11,19))
                    ^ Token(Equal, "=", (11,20)->(11,20))
                      ^^ Token(Integer, "1", (11,22)->(11,23))
                       ^ Token(EndOfLine, "\n", (11,23)->(11,23))

^ Token(EndOfLine, "\n", (12,0)->(12,0))
if !exists('g:matchparen_timeout')
^^^ Token(Identifier, "if", (13,0)->(13,2))
   ^ Token(Illegal, "!", (13,3)->(13,3))
    ^^^^^^^ Token(Identifier, "exists", (13,4)->(13,10))
          ^ Token(LeftParen, "(", (13,10)->(13,10))
           ^ Token(Illegal, "'", (13,11)->(13,11))
            ^^ Token(Identifier, "g", (13,12)->(13,13))
             ^ Token(Colon, ":", (13,13)->(13,13))
              ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (13,14)->(13,32))
                                ^ Token(Illegal, "'", (13,32)->(13,32))
                                 ^ Token(RightParen, ")", (13,33)->(13,33))
                                  ^ Token(EndOfLine, "\n", (13,34)->(13,34))
  g:matchparen_timeout = 300
  ^^ Token(Identifier, "g", (14,2)->(14,3))
   ^ Token(Colon, ":", (14,3)->(14,3))
    ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (14,4)->(14,22))
                       ^ Token(Equal, "=", (14,23)->(14,23))
                         ^^^^ Token(Integer, "300", (14,25)->(14,28))
                            ^ Token(EndOfLine, "\n", (14,28)->(14,28))
endif
^^^^^^ Token(Identifier, "endif", (15,0)->(15,5))
     ^ Token(EndOfLine, "\n", (15,5)->(15,5))
if !exists('g:matchparen_insert_timeout')
^^^ Token(Identifier, "if", (16,0)->(16,2))
   ^ Token(Illegal, "!", (16,3)->(16,3))
    ^^^^^^^ Token(Identifier, "exists", (16,4)->(16,10))
          ^ Token(LeftParen, "(", (16,10)->(16,10))
           ^ Token(Illegal, "'", (16,11)->(16,11))
            ^^ Token(Identifier, "g", (16,12)->(16,13))
             ^ Token(Colon, ":", (16,13)->(16,13))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (16,14)->(16,39))
                                       ^ Token(Illegal, "'", (16,39)->(16,39))
                                        ^ Token(RightParen, ")", (16,40)->(16,40))
                                         ^ Token(EndOfLine, "\n", (16,41)->(16,41))
  g:matchparen_insert_timeout = 60
  ^^ Token(Identifier, "g", (17,2)->(17,3))
   ^ Token(Colon, ":", (17,3)->(17,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (17,4)->(17,29))
                              ^ Token(Equal, "=", (17,30)->(17,30))
                                ^^^ Token(Integer, "60", (17,32)->(17,34))
                                  ^ Token(EndOfLine, "\n", (17,34)->(17,34))
endif
^^^^^^ Token(Identifier, "endif", (18,0)->(18,5))
     ^ Token(EndOfLine, "\n", (18,5)->(18,5))

^ Token(EndOfLine, "\n", (19,0)->(19,0))
augroup matchparen
^^^^^^^^ Token(Identifier, "augroup", (20,0)->(20,7))
        ^^^^^^^^^^^ Token(Identifier, "matchparen", (20,8)->(20,18))
                  ^ Token(EndOfLine, "\n", (20,18)->(20,18))
  # Replace all matchparen autocommands
  ^ Token(Illegal, "#", (21,2)->(21,2))
    ^^^^^^^^ Token(Identifier, "Replace", (21,4)->(21,11))
            ^^^^ Token(Identifier, "all", (21,12)->(21,15))
                ^^^^^^^^^^^ Token(Identifier, "matchparen", (21,16)->(21,26))
                           ^^^^^^^^^^^^^ Token(Identifier, "autocommands", (21,27)->(21,39))
                                       ^ Token(EndOfLine, "\n", (21,39)->(21,39))
  autocmd! CursorMoved,CursorMovedI,WinEnter * {
  ^^^^^^^^ Token(Identifier, "autocmd", (22,2)->(22,9))
         ^ Token(Illegal, "!", (22,9)->(22,9))
           ^^^^^^^^^^^^ Token(Identifier, "CursorMoved", (22,11)->(22,22))
                      ^ Token(Illegal, ",", (22,22)->(22,22))
                       ^^^^^^^^^^^^^ Token(Identifier, "CursorMovedI", (22,23)->(22,35))
                                   ^ Token(Illegal, ",", (22,35)->(22,35))
                                    ^^^^^^^^^ Token(Identifier, "WinEnter", (22,36)->(22,44))
                                             ^ Token(Mul, "*", (22,45)->(22,45))
                                               ^ Token(LeftBrace, "{", (22,47)->(22,47))
                                                ^ Token(EndOfLine, "\n", (22,48)->(22,48))
      Highlight_Matching_Pair()
      ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "Highlight_Matching_Pair", (23,6)->(23,29))
                             ^ Token(LeftParen, "(", (23,29)->(23,29))
                              ^ Token(RightParen, ")", (23,30)->(23,30))
                               ^ Token(EndOfLine, "\n", (23,31)->(23,31))
    }
    ^ Token(RightBrace, "}", (24,4)->(24,4))
     ^ Token(EndOfLine, "\n", (24,5)->(24,5))
  autocmd! WinLeave * {
  ^^^^^^^^ Token(Identifier, "autocmd", (25,2)->(25,9))
         ^ Token(Illegal, "!", (25,9)->(25,9))
           ^^^^^^^^^ Token(Identifier, "WinLeave", (25,11)->(25,19))
                    ^ Token(Mul, "*", (25,20)->(25,20))
                      ^ Token(LeftBrace, "{", (25,22)->(25,22))
                       ^ Token(EndOfLine, "\n", (25,23)->(25,23))
      Remove_Matches()
      ^^^^^^^^^^^^^^^ Token(Identifier, "Remove_Matches", (26,6)->(26,20))
                    ^ Token(LeftParen, "(", (26,20)->(26,20))
                     ^ Token(RightParen, ")", (26,21)->(26,21))
                      ^ Token(EndOfLine, "\n", (26,22)->(26,22))
    }
    ^ Token(RightBrace, "}", (27,4)->(27,4))
     ^ Token(EndOfLine, "\n", (27,5)->(27,5))
  autocmd! TextChanged,TextChangedI * {
  ^^^^^^^^ Token(Identifier, "autocmd", (28,2)->(28,9))
         ^ Token(Illegal, "!", (28,9)->(28,9))
           ^^^^^^^^^^^^ Token(Identifier, "TextChanged", (28,11)->(28,22))
                      ^ Token(Illegal, ",", (28,22)->(28,22))
                       ^^^^^^^^^^^^^ Token(Identifier, "TextChangedI", (28,23)->(28,35))
                                    ^ Token(Mul, "*", (28,36)->(28,36))
                                      ^ Token(LeftBrace, "{", (28,38)->(28,38))
                                       ^ Token(EndOfLine, "\n", (28,39)->(28,39))
      Highlight_Matching_Pair()
      ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "Highlight_Matching_Pair", (29,6)->(29,29))
                             ^ Token(LeftParen, "(", (29,29)->(29,29))
                              ^ Token(RightParen, ")", (29,30)->(29,30))
                               ^ Token(EndOfLine, "\n", (29,31)->(29,31))
    }
    ^ Token(RightBrace, "}", (30,4)->(30,4))
     ^ Token(EndOfLine, "\n", (30,5)->(30,5))
augroup END
^^^^^^^^ Token(Identifier, "augroup", (31,0)->(31,7))
        ^^^^ Token(Identifier, "END", (31,8)->(31,11))
           ^ Token(EndOfLine, "\n", (31,11)->(31,11))

^ Token(EndOfLine, "\n", (32,0)->(32,0))
# Skip the rest if it was already done.
^ Token(Illegal, "#", (33,0)->(33,0))
  ^^^^^ Token(Identifier, "Skip", (33,2)->(33,6))
       ^^^^ Token(Identifier, "the", (33,7)->(33,10))
           ^^^^^ Token(Identifier, "rest", (33,11)->(33,15))
                ^^^ Token(Identifier, "if", (33,16)->(33,18))
                   ^^^ Token(Identifier, "it", (33,19)->(33,21))
                      ^^^^ Token(Identifier, "was", (33,22)->(33,25))
                          ^^^^^^^^ Token(Identifier, "already", (33,26)->(33,33))
                                  ^^^^^ Token(Identifier, "done", (33,34)->(33,38))
                                      ^ Token(Illegal, ".", (33,38)->(33,38))
                                       ^ Token(EndOfLine, "\n", (33,39)->(33,39))
if exists('*Highlight_Matching_Pair')
^^^ Token(Identifier, "if", (34,0)->(34,2))
   ^^^^^^^ Token(Identifier, "exists", (34,3)->(34,9))
         ^ Token(LeftParen, "(", (34,9)->(34,9))
          ^ Token(Illegal, "'", (34,10)->(34,10))
           ^ Token(Mul, "*", (34,11)->(34,11))
            ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "Highlight_Matching_Pair", (34,12)->(34,35))
                                   ^ Token(Illegal, "'", (34,35)->(34,35))
                                    ^ Token(RightParen, ")", (34,36)->(34,36))
                                     ^ Token(EndOfLine, "\n", (34,37)->(34,37))
  finish
  ^^^^^^^ Token(Identifier, "finish", (35,2)->(35,8))
        ^ Token(EndOfLine, "\n", (35,8)->(35,8))
endif
^^^^^^ Token(Identifier, "endif", (36,0)->(36,5))
     ^ Token(EndOfLine, "\n", (36,5)->(36,5))

^ Token(EndOfLine, "\n", (37,0)->(37,0))
# The function that is invoked (very often) to define a ":match" highlighting
^ Token(Illegal, "#", (38,0)->(38,0))
  ^^^^ Token(Identifier, "The", (38,2)->(38,5))
      ^^^^^^^^^ Token(Identifier, "function", (38,6)->(38,14))
               ^^^^^ Token(Identifier, "that", (38,15)->(38,19))
                    ^^^ Token(Identifier, "is", (38,20)->(38,22))
                       ^^^^^^^^ Token(Identifier, "invoked", (38,23)->(38,30))
                               ^ Token(LeftParen, "(", (38,31)->(38,31))
                                ^^^^^ Token(Identifier, "very", (38,32)->(38,36))
                                     ^^^^^^ Token(Identifier, "often", (38,37)->(38,42))
                                          ^ Token(RightParen, ")", (38,42)->(38,42))
                                            ^^^ Token(Identifier, "to", (38,44)->(38,46))
                                               ^^^^^^^ Token(Identifier, "define", (38,47)->(38,53))
                                                      ^^ Token(Identifier, "a", (38,54)->(38,55))
                                                        ^ Token(Illegal, "\"", (38,56)->(38,56))
                                                         ^ Token(Colon, ":", (38,57)->(38,57))
                                                          ^^^^^^ Token(Identifier, "match", (38,58)->(38,63))
                                                               ^ Token(Illegal, "\"", (38,63)->(38,63))
                                                                 ^^^^^^^^^^^^^ Token(Identifier, "highlighting", (38,65)->(38,77))
                                                                             ^ Token(EndOfLine, "\n", (38,77)->(38,77))
# for any matching paren.
^ Token(Illegal, "#", (39,0)->(39,0))
  ^^^^ Token(Identifier, "for", (39,2)->(39,5))
      ^^^^ Token(Identifier, "any", (39,6)->(39,9))
          ^^^^^^^^^ Token(Identifier, "matching", (39,10)->(39,18))
                   ^^^^^^ Token(Identifier, "paren", (39,19)->(39,24))
                        ^ Token(Illegal, ".", (39,24)->(39,24))
                         ^ Token(EndOfLine, "\n", (39,25)->(39,25))
def Highlight_Matching_Pair(): void
^^^^ Token(Identifier, "def", (40,0)->(40,3))
    ^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "Highlight_Matching_Pair", (40,4)->(40,27))
                           ^ Token(LeftParen, "(", (40,27)->(40,27))
                            ^ Token(RightParen, ")", (40,28)->(40,28))
                             ^ Token(Colon, ":", (40,29)->(40,29))
                               ^^^^^ Token(Identifier, "void", (40,31)->(40,35))
                                   ^ Token(EndOfLine, "\n", (40,35)->(40,35))
  # Remove any previous match.
  ^ Token(Illegal, "#", (41,2)->(41,2))
    ^^^^^^^ Token(Identifier, "Remove", (41,4)->(41,10))
           ^^^^ Token(Identifier, "any", (41,11)->(41,14))
               ^^^^^^^^^ Token(Identifier, "previous", (41,15)->(41,23))
                        ^^^^^^ Token(Identifier, "match", (41,24)->(41,29))
                             ^ Token(Illegal, ".", (41,29)->(41,29))
                              ^ Token(EndOfLine, "\n", (41,30)->(41,30))
  Remove_Matches()
  ^^^^^^^^^^^^^^^ Token(Identifier, "Remove_Matches", (42,2)->(42,16))
                ^ Token(LeftParen, "(", (42,16)->(42,16))
                 ^ Token(RightParen, ")", (42,17)->(42,17))
                  ^ Token(EndOfLine, "\n", (42,18)->(42,18))

^ Token(EndOfLine, "\n", (43,0)->(43,0))
  # Avoid that we remove the popup menu.
  ^ Token(Illegal, "#", (44,2)->(44,2))
    ^^^^^^ Token(Identifier, "Avoid", (44,4)->(44,9))
          ^^^^^ Token(Identifier, "that", (44,10)->(44,14))
               ^^^ Token(Identifier, "we", (44,15)->(44,17))
                  ^^^^^^^ Token(Identifier, "remove", (44,18)->(44,24))
                         ^^^^ Token(Identifier, "the", (44,25)->(44,28))
                             ^^^^^^ Token(Identifier, "popup", (44,29)->(44,34))
                                   ^^^^^ Token(Identifier, "menu", (44,35)->(44,39))
                                       ^ Token(Illegal, ".", (44,39)->(44,39))
                                        ^ Token(EndOfLine, "\n", (44,40)->(44,40))
  # Return when there are no colors (looks like the cursor jumps).
  ^ Token(Illegal, "#", (45,2)->(45,2))
    ^^^^^^^ Token(Identifier, "Return", (45,4)->(45,10))
           ^^^^^ Token(Identifier, "when", (45,11)->(45,15))
                ^^^^^^ Token(Identifier, "there", (45,16)->(45,21))
                      ^^^^ Token(Identifier, "are", (45,22)->(45,25))
                          ^^^ Token(Identifier, "no", (45,26)->(45,28))
                             ^^^^^^^ Token(Identifier, "colors", (45,29)->(45,35))
                                    ^ Token(LeftParen, "(", (45,36)->(45,36))
                                     ^^^^^^ Token(Identifier, "looks", (45,37)->(45,42))
                                           ^^^^^ Token(Identifier, "like", (45,43)->(45,47))
                                                ^^^^ Token(Identifier, "the", (45,48)->(45,51))
                                                    ^^^^^^^ Token(Identifier, "cursor", (45,52)->(45,58))
                                                           ^^^^^^ Token(Identifier, "jumps", (45,59)->(45,64))
                                                                ^ Token(RightParen, ")", (45,64)->(45,64))
                                                                 ^ Token(Illegal, ".", (45,65)->(45,65))
                                                                  ^ Token(EndOfLine, "\n", (45,66)->(45,66))
  if pumvisible() || (str2nr(&t_Co) < 8 && !has('gui_running'))
  ^^^ Token(Identifier, "if", (46,2)->(46,4))
     ^^^^^^^^^^^ Token(Identifier, "pumvisible", (46,5)->(46,15))
               ^ Token(LeftParen, "(", (46,15)->(46,15))
                ^ Token(RightParen, ")", (46,16)->(46,16))
                  ^^ Token(Or, "||", (46,18)->(46,19))
                     ^ Token(LeftParen, "(", (46,21)->(46,21))
                      ^^^^^^^ Token(Identifier, "str2nr", (46,22)->(46,28))
                            ^ Token(LeftParen, "(", (46,28)->(46,28))
                             ^ Token(Illegal, "&", (46,29)->(46,29))
                              ^^^^^ Token(Identifier, "t_Co", (46,30)->(46,34))
                                  ^ Token(RightParen, ")", (46,34)->(46,34))
                                    ^ Token(LessThan, "<", (46,36)->(46,36))
                                      ^^ Token(Integer, "8", (46,38)->(46,39))
                                        ^^ Token(And, "&&", (46,40)->(46,41))
                                           ^ Token(Illegal, "!", (46,43)->(46,43))
                                            ^^^^ Token(Identifier, "has", (46,44)->(46,47))
                                               ^ Token(LeftParen, "(", (46,47)->(46,47))
                                                ^ Token(Illegal, "'", (46,48)->(46,48))
                                                 ^^^^^^^^^^^^ Token(Identifier, "gui_running", (46,49)->(46,60))
                                                            ^ Token(Illegal, "'", (46,60)->(46,60))
                                                             ^ Token(RightParen, ")", (46,61)->(46,61))
                                                              ^ Token(RightParen, ")", (46,62)->(46,62))
                                                               ^ Token(EndOfLine, "\n", (46,63)->(46,63))
    return
    ^^^^^^^ Token(Identifier, "return", (47,4)->(47,10))
          ^ Token(EndOfLine, "\n", (47,10)->(47,10))
  endif
  ^^^^^^ Token(Identifier, "endif", (48,2)->(48,7))
       ^ Token(EndOfLine, "\n", (48,7)->(48,7))

^ Token(EndOfLine, "\n", (49,0)->(49,0))
  # Get the character under the cursor and check if it's in 'matchpairs'.
  ^ Token(Illegal, "#", (50,2)->(50,2))
    ^^^^ Token(Identifier, "Get", (50,4)->(50,7))
        ^^^^ Token(Identifier, "the", (50,8)->(50,11))
            ^^^^^^^^^^ Token(Identifier, "character", (50,12)->(50,21))
                      ^^^^^^ Token(Identifier, "under", (50,22)->(50,27))
                            ^^^^ Token(Identifier, "the", (50,28)->(50,31))
                                ^^^^^^^ Token(Identifier, "cursor", (50,32)->(50,38))
                                       ^^^^ Token(Identifier, "and", (50,39)->(50,42))
                                           ^^^^^^ Token(Identifier, "check", (50,43)->(50,48))
                                                 ^^^ Token(Identifier, "if", (50,49)->(50,51))
                                                    ^^^ Token(Identifier, "it", (50,52)->(50,54))
                                                      ^ Token(Illegal, "'", (50,54)->(50,54))
                                                       ^^ Token(Identifier, "s", (50,55)->(50,56))
                                                         ^^^ Token(Identifier, "in", (50,57)->(50,59))
                                                            ^ Token(Illegal, "'", (50,60)->(50,60))
                                                             ^^^^^^^^^^^ Token(Identifier, "matchpairs", (50,61)->(50,71))
                                                                       ^ Token(Illegal, "'", (50,71)->(50,71))
                                                                        ^ Token(Illegal, ".", (50,72)->(50,72))
                                                                         ^ Token(EndOfLine, "\n", (50,73)->(50,73))
  var c_lnum = line('.')
  ^^^^ Token(Identifier, "var", (51,2)->(51,5))
      ^^^^^^^ Token(Identifier, "c_lnum", (51,6)->(51,12))
             ^ Token(Equal, "=", (51,13)->(51,13))
               ^^^^^ Token(Identifier, "line", (51,15)->(51,19))
                   ^ Token(LeftParen, "(", (51,19)->(51,19))
                    ^ Token(Illegal, "'", (51,20)->(51,20))
                     ^ Token(Illegal, ".", (51,21)->(51,21))
                      ^ Token(Illegal, "'", (51,22)->(51,22))
                       ^ Token(RightParen, ")", (51,23)->(51,23))
                        ^ Token(EndOfLine, "\n", (51,24)->(51,24))
  var c_col = col('.')
  ^^^^ Token(Identifier, "var", (52,2)->(52,5))
      ^^^^^^ Token(Identifier, "c_col", (52,6)->(52,11))
            ^ Token(Equal, "=", (52,12)->(52,12))
              ^^^^ Token(Identifier, "col", (52,14)->(52,17))
                 ^ Token(LeftParen, "(", (52,17)->(52,17))
                  ^ Token(Illegal, "'", (52,18)->(52,18))
                   ^ Token(Illegal, ".", (52,19)->(52,19))
                    ^ Token(Illegal, "'", (52,20)->(52,20))
                     ^ Token(RightParen, ")", (52,21)->(52,21))
                      ^ Token(EndOfLine, "\n", (52,22)->(52,22))
  var before = 0
  ^^^^ Token(Identifier, "var", (53,2)->(53,5))
      ^^^^^^^ Token(Identifier, "before", (53,6)->(53,12))
             ^ Token(Equal, "=", (53,13)->(53,13))
               ^^ Token(Integer, "0", (53,15)->(53,16))
                ^ Token(EndOfLine, "\n", (53,16)->(53,16))

^ Token(EndOfLine, "\n", (54,0)->(54,0))
  var text = getline(c_lnum)
  ^^^^ Token(Identifier, "var", (55,2)->(55,5))
      ^^^^^ Token(Identifier, "text", (55,6)->(55,10))
           ^ Token(Equal, "=", (55,11)->(55,11))
             ^^^^^^^^ Token(Identifier, "getline", (55,13)->(55,20))
                    ^ Token(LeftParen, "(", (55,20)->(55,20))
                     ^^^^^^^ Token(Identifier, "c_lnum", (55,21)->(55,27))
                           ^ Token(RightParen, ")", (55,27)->(55,27))
                            ^ Token(EndOfLine, "\n", (55,28)->(55,28))
  var matches = matchlist(text, '\(.\)\=\%' .. c_col .. 'c\(.\=\)')
  ^^^^ Token(Identifier, "var", (56,2)->(56,5))
      ^^^^^^^^ Token(Identifier, "matches", (56,6)->(56,13))
              ^ Token(Equal, "=", (56,14)->(56,14))
                ^^^^^^^^^^ Token(Identifier, "matchlist", (56,16)->(56,25))
                         ^ Token(LeftParen, "(", (56,25)->(56,25))
                          ^^^^^ Token(Identifier, "text", (56,26)->(56,30))
                              ^ Token(Illegal, ",", (56,30)->(56,30))
                                ^ Token(Illegal, "'", (56,32)->(56,32))
                                 ^ Token(Illegal, "\\", (56,33)->(56,33))
                                  ^ Token(LeftParen, "(", (56,34)->(56,34))
                                   ^ Token(Illegal, ".", (56,35)->(56,35))
                                    ^ Token(Illegal, "\\", (56,36)->(56,36))
                                     ^ Token(RightParen, ")", (56,37)->(56,37))
                                      ^ Token(Illegal, "\\", (56,38)->(56,38))
                                       ^ Token(Equal, "=", (56,39)->(56,39))
                                        ^ Token(Illegal, "\\", (56,40)->(56,40))
                                         ^ Token(Illegal, "%", (56,41)->(56,41))
                                          ^ Token(Illegal, "'", (56,42)->(56,42))
                                            ^ Token(Illegal, ".", (56,44)->(56,44))
                                             ^ Token(Illegal, ".", (56,45)->(56,45))
                                               ^^^^^^ Token(Identifier, "c_col", (56,47)->(56,52))
                                                     ^ Token(Illegal, ".", (56,53)->(56,53))
                                                      ^ Token(Illegal, ".", (56,54)->(56,54))
                                                        ^ Token(Illegal, "'", (56,56)->(56,56))
                                                         ^^ Token(Identifier, "c", (56,57)->(56,58))
                                                          ^ Token(Illegal, "\\", (56,58)->(56,58))
                                                           ^ Token(LeftParen, "(", (56,59)->(56,59))
                                                            ^ Token(Illegal, ".", (56,60)->(56,60))
                                                             ^ Token(Illegal, "\\", (56,61)->(56,61))
                                                              ^ Token(Equal, "=", (56,62)->(56,62))
                                                               ^ Token(Illegal, "\\", (56,63)->(56,63))
                                                                ^ Token(RightParen, ")", (56,64)->(56,64))
                                                                 ^ Token(Illegal, "'", (56,65)->(56,65))
                                                                  ^ Token(RightParen, ")", (56,66)->(56,66))
                                                                   ^ Token(EndOfLine, "\n", (56,67)->(56,67))
  var [c_before, c] = ['', '']
  ^^^^ Token(Identifier, "var", (57,2)->(57,5))
      ^ Token(LeftBracket, "[", (57,6)->(57,6))
       ^^^^^^^^^ Token(Identifier, "c_before", (57,7)->(57,15))
               ^ Token(Illegal, ",", (57,15)->(57,15))
                 ^^ Token(Identifier, "c", (57,17)->(57,18))
                  ^ Token(RightBracket, "]", (57,18)->(57,18))
                    ^ Token(Equal, "=", (57,20)->(57,20))
                      ^ Token(LeftBracket, "[", (57,22)->(57,22))
                       ^ Token(Illegal, "'", (57,23)->(57,23))
                        ^ Token(Illegal, "'", (57,24)->(57,24))
                         ^ Token(Illegal, ",", (57,25)->(57,25))
                           ^ Token(Illegal, "'", (57,27)->(57,27))
                            ^ Token(Illegal, "'", (57,28)->(57,28))
                             ^ Token(RightBracket, "]", (57,29)->(57,29))
                              ^ Token(EndOfLine, "\n", (57,30)->(57,30))
  if !empty(matches)
  ^^^ Token(Identifier, "if", (58,2)->(58,4))
     ^ Token(Illegal, "!", (58,5)->(58,5))
      ^^^^^^ Token(Identifier, "empty", (58,6)->(58,11))
           ^ Token(LeftParen, "(", (58,11)->(58,11))
            ^^^^^^^^ Token(Identifier, "matches", (58,12)->(58,19))
                   ^ Token(RightParen, ")", (58,19)->(58,19))
                    ^ Token(EndOfLine, "\n", (58,20)->(58,20))
    [c_before, c] = matches[1 : 2]
    ^ Token(LeftBracket, "[", (59,4)->(59,4))
     ^^^^^^^^^ Token(Identifier, "c_before", (59,5)->(59,13))
             ^ Token(Illegal, ",", (59,13)->(59,13))
               ^^ Token(Identifier, "c", (59,15)->(59,16))
                ^ Token(RightBracket, "]", (59,16)->(59,16))
                  ^ Token(Equal, "=", (59,18)->(59,18))
                    ^^^^^^^^ Token(Identifier, "matches", (59,20)->(59,27))
                           ^ Token(LeftBracket, "[", (59,27)->(59,27))
                            ^^ Token(Integer, "1", (59,28)->(59,29))
                              ^ Token(Colon, ":", (59,30)->(59,30))
                                ^^ Token(Integer, "2", (59,32)->(59,33))
                                 ^ Token(RightBracket, "]", (59,33)->(59,33))
                                  ^ Token(EndOfLine, "\n", (59,34)->(59,34))
  endif
  ^^^^^^ Token(Identifier, "endif", (60,2)->(60,7))
       ^ Token(EndOfLine, "\n", (60,7)->(60,7))
  var plist = split(&matchpairs, '.\zs[:,]')
  ^^^^ Token(Identifier, "var", (61,2)->(61,5))
      ^^^^^^ Token(Identifier, "plist", (61,6)->(61,11))
            ^ Token(Equal, "=", (61,12)->(61,12))
              ^^^^^^ Token(Identifier, "split", (61,14)->(61,19))
                   ^ Token(LeftParen, "(", (61,19)->(61,19))
                    ^ Token(Illegal, "&", (61,20)->(61,20))
                     ^^^^^^^^^^^ Token(Identifier, "matchpairs", (61,21)->(61,31))
                               ^ Token(Illegal, ",", (61,31)->(61,31))
                                 ^ Token(Illegal, "'", (61,33)->(61,33))
                                  ^ Token(Illegal, ".", (61,34)->(61,34))
                                   ^ Token(Illegal, "\\", (61,35)->(61,35))
                                    ^^^ Token(Identifier, "zs", (61,36)->(61,38))
                                      ^ Token(LeftBracket, "[", (61,38)->(61,38))
                                       ^ Token(Colon, ":", (61,39)->(61,39))
                                        ^ Token(Illegal, ",", (61,40)->(61,40))
                                         ^ Token(RightBracket, "]", (61,41)->(61,41))
                                          ^ Token(Illegal, "'", (61,42)->(61,42))
                                           ^ Token(RightParen, ")", (61,43)->(61,43))
                                            ^ Token(EndOfLine, "\n", (61,44)->(61,44))
  var i = index(plist, c)
  ^^^^ Token(Identifier, "var", (62,2)->(62,5))
      ^^ Token(Identifier, "i", (62,6)->(62,7))
        ^ Token(Equal, "=", (62,8)->(62,8))
          ^^^^^^ Token(Identifier, "index", (62,10)->(62,15))
               ^ Token(LeftParen, "(", (62,15)->(62,15))
                ^^^^^^ Token(Identifier, "plist", (62,16)->(62,21))
                     ^ Token(Illegal, ",", (62,21)->(62,21))
                       ^^ Token(Identifier, "c", (62,23)->(62,24))
                        ^ Token(RightParen, ")", (62,24)->(62,24))
                         ^ Token(EndOfLine, "\n", (62,25)->(62,25))
  if i < 0
  ^^^ Token(Identifier, "if", (63,2)->(63,4))
     ^^ Token(Identifier, "i", (63,5)->(63,6))
       ^ Token(LessThan, "<", (63,7)->(63,7))
         ^^ Token(Integer, "0", (63,9)->(63,10))
          ^ Token(EndOfLine, "\n", (63,10)->(63,10))
    # not found, in Insert mode try character before the cursor
    ^ Token(Illegal, "#", (64,4)->(64,4))
      ^^^^ Token(Identifier, "not", (64,6)->(64,9))
          ^^^^^^ Token(Identifier, "found", (64,10)->(64,15))
               ^ Token(Illegal, ",", (64,15)->(64,15))
                 ^^^ Token(Identifier, "in", (64,17)->(64,19))
                    ^^^^^^^ Token(Identifier, "Insert", (64,20)->(64,26))
                           ^^^^^ Token(Identifier, "mode", (64,27)->(64,31))
                                ^^^^ Token(Identifier, "try", (64,32)->(64,35))
                                    ^^^^^^^^^^ Token(Identifier, "character", (64,36)->(64,45))
                                              ^^^^^^^ Token(Identifier, "before", (64,46)->(64,52))
                                                     ^^^^ Token(Identifier, "the", (64,53)->(64,56))
                                                         ^^^^^^^ Token(Identifier, "cursor", (64,57)->(64,63))
                                                               ^ Token(EndOfLine, "\n", (64,63)->(64,63))
    if c_col > 1 && (mode() == 'i' || mode() == 'R')
    ^^^ Token(Identifier, "if", (65,4)->(65,6))
       ^^^^^^ Token(Identifier, "c_col", (65,7)->(65,12))
             ^ Token(GreaterThan, ">", (65,13)->(65,13))
               ^^ Token(Integer, "1", (65,15)->(65,16))
                 ^^ Token(And, "&&", (65,17)->(65,18))
                    ^ Token(LeftParen, "(", (65,20)->(65,20))
                     ^^^^^ Token(Identifier, "mode", (65,21)->(65,25))
                         ^ Token(LeftParen, "(", (65,25)->(65,25))
                          ^ Token(RightParen, ")", (65,26)->(65,26))
                            ^^ Token(EqualTo, "==", (65,28)->(65,29))
                               ^ Token(Illegal, "'", (65,31)->(65,31))
                                ^^ Token(Identifier, "i", (65,32)->(65,33))
                                 ^ Token(Illegal, "'", (65,33)->(65,33))
                                   ^^ Token(Or, "||", (65,35)->(65,36))
                                      ^^^^^ Token(Identifier, "mode", (65,38)->(65,42))
                                          ^ Token(LeftParen, "(", (65,42)->(65,42))
                                           ^ Token(RightParen, ")", (65,43)->(65,43))
                                             ^^ Token(EqualTo, "==", (65,45)->(65,46))
                                                ^ Token(Illegal, "'", (65,48)->(65,48))
                                                 ^^ Token(Identifier, "R", (65,49)->(65,50))
                                                  ^ Token(Illegal, "'", (65,50)->(65,50))
                                                   ^ Token(RightParen, ")", (65,51)->(65,51))
                                                    ^ Token(EndOfLine, "\n", (65,52)->(65,52))
      before = strlen(c_before)
      ^^^^^^^ Token(Identifier, "before", (66,6)->(66,12))
             ^ Token(Equal, "=", (66,13)->(66,13))
               ^^^^^^^ Token(Identifier, "strlen", (66,15)->(66,21))
                     ^ Token(LeftParen, "(", (66,21)->(66,21))
                      ^^^^^^^^^ Token(Identifier, "c_before", (66,22)->(66,30))
                              ^ Token(RightParen, ")", (66,30)->(66,30))
                               ^ Token(EndOfLine, "\n", (66,31)->(66,31))
      c = c_before
      ^^ Token(Identifier, "c", (67,6)->(67,7))
        ^ Token(Equal, "=", (67,8)->(67,8))
          ^^^^^^^^^ Token(Identifier, "c_before", (67,10)->(67,18))
                  ^ Token(EndOfLine, "\n", (67,18)->(67,18))
      i = index(plist, c)
      ^^ Token(Identifier, "i", (68,6)->(68,7))
        ^ Token(Equal, "=", (68,8)->(68,8))
          ^^^^^^ Token(Identifier, "index", (68,10)->(68,15))
               ^ Token(LeftParen, "(", (68,15)->(68,15))
                ^^^^^^ Token(Identifier, "plist", (68,16)->(68,21))
                     ^ Token(Illegal, ",", (68,21)->(68,21))
                       ^^ Token(Identifier, "c", (68,23)->(68,24))
                        ^ Token(RightParen, ")", (68,24)->(68,24))
                         ^ Token(EndOfLine, "\n", (68,25)->(68,25))
    endif
    ^^^^^^ Token(Identifier, "endif", (69,4)->(69,9))
         ^ Token(EndOfLine, "\n", (69,9)->(69,9))
    if i < 0
    ^^^ Token(Identifier, "if", (70,4)->(70,6))
       ^^ Token(Identifier, "i", (70,7)->(70,8))
         ^ Token(LessThan, "<", (70,9)->(70,9))
           ^^ Token(Integer, "0", (70,11)->(70,12))
            ^ Token(EndOfLine, "\n", (70,12)->(70,12))
      # not found, nothing to do
      ^ Token(Illegal, "#", (71,6)->(71,6))
        ^^^^ Token(Identifier, "not", (71,8)->(71,11))
            ^^^^^^ Token(Identifier, "found", (71,12)->(71,17))
                 ^ Token(Illegal, ",", (71,17)->(71,17))
                   ^^^^^^^^ Token(Identifier, "nothing", (71,19)->(71,26))
                           ^^^ Token(Identifier, "to", (71,27)->(71,29))
                              ^^^ Token(Identifier, "do", (71,30)->(71,32))
                                ^ Token(EndOfLine, "\n", (71,32)->(71,32))
      return
      ^^^^^^^ Token(Identifier, "return", (72,6)->(72,12))
            ^ Token(EndOfLine, "\n", (72,12)->(72,12))
    endif
    ^^^^^^ Token(Identifier, "endif", (73,4)->(73,9))
         ^ Token(EndOfLine, "\n", (73,9)->(73,9))
  endif
  ^^^^^^ Token(Identifier, "endif", (74,2)->(74,7))
       ^ Token(EndOfLine, "\n", (74,7)->(74,7))

^ Token(EndOfLine, "\n", (75,0)->(75,0))
  var s_flags: string
  ^^^^ Token(Identifier, "var", (76,2)->(76,5))
      ^^^^^^^^ Token(Identifier, "s_flags", (76,6)->(76,13))
             ^ Token(Colon, ":", (76,13)->(76,13))
               ^^^^^^^ Token(Identifier, "string", (76,15)->(76,21))
                     ^ Token(EndOfLine, "\n", (76,21)->(76,21))
  var c2: string
  ^^^^ Token(Identifier, "var", (77,2)->(77,5))
      ^^^ Token(Identifier, "c2", (77,6)->(77,8))
        ^ Token(Colon, ":", (77,8)->(77,8))
          ^^^^^^^ Token(Identifier, "string", (77,10)->(77,16))
                ^ Token(EndOfLine, "\n", (77,16)->(77,16))
  # Figure out the arguments for searchpairpos().
  ^ Token(Illegal, "#", (78,2)->(78,2))
    ^^^^^^^ Token(Identifier, "Figure", (78,4)->(78,10))
           ^^^^ Token(Identifier, "out", (78,11)->(78,14))
               ^^^^ Token(Identifier, "the", (78,15)->(78,18))
                   ^^^^^^^^^^ Token(Identifier, "arguments", (78,19)->(78,28))
                             ^^^^ Token(Identifier, "for", (78,29)->(78,32))
                                 ^^^^^^^^^^^^^^ Token(Identifier, "searchpairpos", (78,33)->(78,46))
                                              ^ Token(LeftParen, "(", (78,46)->(78,46))
                                               ^ Token(RightParen, ")", (78,47)->(78,47))
                                                ^ Token(Illegal, ".", (78,48)->(78,48))
                                                 ^ Token(EndOfLine, "\n", (78,49)->(78,49))
  if i % 2 == 0
  ^^^ Token(Identifier, "if", (79,2)->(79,4))
     ^^ Token(Identifier, "i", (79,5)->(79,6))
       ^ Token(Illegal, "%", (79,7)->(79,7))
         ^^ Token(Integer, "2", (79,9)->(79,10))
           ^^ Token(EqualTo, "==", (79,11)->(79,12))
              ^^ Token(Integer, "0", (79,14)->(79,15))
               ^ Token(EndOfLine, "\n", (79,15)->(79,15))
    s_flags = 'nW'
    ^^^^^^^^ Token(Identifier, "s_flags", (80,4)->(80,11))
            ^ Token(Equal, "=", (80,12)->(80,12))
              ^ Token(Illegal, "'", (80,14)->(80,14))
               ^^^ Token(Identifier, "nW", (80,15)->(80,17))
                 ^ Token(Illegal, "'", (80,17)->(80,17))
                  ^ Token(EndOfLine, "\n", (80,18)->(80,18))
    c2 = plist[i + 1]
    ^^^ Token(Identifier, "c2", (81,4)->(81,6))
       ^ Token(Equal, "=", (81,7)->(81,7))
         ^^^^^^ Token(Identifier, "plist", (81,9)->(81,14))
              ^ Token(LeftBracket, "[", (81,14)->(81,14))
               ^^ Token(Identifier, "i", (81,15)->(81,16))
                 ^ Token(Plus, "+", (81,17)->(81,17))
                   ^^ Token(Integer, "1", (81,19)->(81,20))
                    ^ Token(RightBracket, "]", (81,20)->(81,20))
                     ^ Token(EndOfLine, "\n", (81,21)->(81,21))
  else
  ^^^^^ Token(Identifier, "else", (82,2)->(82,6))
      ^ Token(EndOfLine, "\n", (82,6)->(82,6))
    s_flags = 'nbW'
    ^^^^^^^^ Token(Identifier, "s_flags", (83,4)->(83,11))
            ^ Token(Equal, "=", (83,12)->(83,12))
              ^ Token(Illegal, "'", (83,14)->(83,14))
               ^^^^ Token(Identifier, "nbW", (83,15)->(83,18))
                  ^ Token(Illegal, "'", (83,18)->(83,18))
                   ^ Token(EndOfLine, "\n", (83,19)->(83,19))
    c2 = c
    ^^^ Token(Identifier, "c2", (84,4)->(84,6))
       ^ Token(Equal, "=", (84,7)->(84,7))
         ^^ Token(Identifier, "c", (84,9)->(84,10))
          ^ Token(EndOfLine, "\n", (84,10)->(84,10))
    c = plist[i - 1]
    ^^ Token(Identifier, "c", (85,4)->(85,5))
      ^ Token(Equal, "=", (85,6)->(85,6))
        ^^^^^^ Token(Identifier, "plist", (85,8)->(85,13))
             ^ Token(LeftBracket, "[", (85,13)->(85,13))
              ^^ Token(Identifier, "i", (85,14)->(85,15))
                ^ Token(Minus, "-", (85,16)->(85,16))
                  ^^ Token(Integer, "1", (85,18)->(85,19))
                   ^ Token(RightBracket, "]", (85,19)->(85,19))
                    ^ Token(EndOfLine, "\n", (85,20)->(85,20))
  endif
  ^^^^^^ Token(Identifier, "endif", (86,2)->(86,7))
       ^ Token(EndOfLine, "\n", (86,7)->(86,7))
  if c == '['
  ^^^ Token(Identifier, "if", (87,2)->(87,4))
     ^^ Token(Identifier, "c", (87,5)->(87,6))
       ^^ Token(EqualTo, "==", (87,7)->(87,8))
          ^ Token(Illegal, "'", (87,10)->(87,10))
           ^ Token(LeftBracket, "[", (87,11)->(87,11))
            ^ Token(Illegal, "'", (87,12)->(87,12))
             ^ Token(EndOfLine, "\n", (87,13)->(87,13))
    c = '\['
    ^^ Token(Identifier, "c", (88,4)->(88,5))
      ^ Token(Equal, "=", (88,6)->(88,6))
        ^ Token(Illegal, "'", (88,8)->(88,8))
         ^ Token(Illegal, "\\", (88,9)->(88,9))
          ^ Token(LeftBracket, "[", (88,10)->(88,10))
           ^ Token(Illegal, "'", (88,11)->(88,11))
            ^ Token(EndOfLine, "\n", (88,12)->(88,12))
    c2 = '\]'
    ^^^ Token(Identifier, "c2", (89,4)->(89,6))
       ^ Token(Equal, "=", (89,7)->(89,7))
         ^ Token(Illegal, "'", (89,9)->(89,9))
          ^ Token(Illegal, "\\", (89,10)->(89,10))
           ^ Token(RightBracket, "]", (89,11)->(89,11))
            ^ Token(Illegal, "'", (89,12)->(89,12))
             ^ Token(EndOfLine, "\n", (89,13)->(89,13))
  endif
  ^^^^^^ Token(Identifier, "endif", (90,2)->(90,7))
       ^ Token(EndOfLine, "\n", (90,7)->(90,7))

^ Token(EndOfLine, "\n", (91,0)->(91,0))
  # Find the match.  When it was just before the cursor move it there for a
  ^ Token(Illegal, "#", (92,2)->(92,2))
    ^^^^^ Token(Identifier, "Find", (92,4)->(92,8))
         ^^^^ Token(Identifier, "the", (92,9)->(92,12))
             ^^^^^^ Token(Identifier, "match", (92,13)->(92,18))
                  ^ Token(Illegal, ".", (92,18)->(92,18))
                     ^^^^^ Token(Identifier, "When", (92,21)->(92,25))
                          ^^^ Token(Identifier, "it", (92,26)->(92,28))
                             ^^^^ Token(Identifier, "was", (92,29)->(92,32))
                                 ^^^^^ Token(Identifier, "just", (92,33)->(92,37))
                                      ^^^^^^^ Token(Identifier, "before", (92,38)->(92,44))
                                             ^^^^ Token(Identifier, "the", (92,45)->(92,48))
                                                 ^^^^^^^ Token(Identifier, "cursor", (92,49)->(92,55))
                                                        ^^^^^ Token(Identifier, "move", (92,56)->(92,60))
                                                             ^^^ Token(Identifier, "it", (92,61)->(92,63))
                                                                ^^^^^^ Token(Identifier, "there", (92,64)->(92,69))
                                                                      ^^^^ Token(Identifier, "for", (92,70)->(92,73))
                                                                          ^^ Token(Identifier, "a", (92,74)->(92,75))
                                                                           ^ Token(EndOfLine, "\n", (92,75)->(92,75))
  # moment.
  ^ Token(Illegal, "#", (93,2)->(93,2))
    ^^^^^^^ Token(Identifier, "moment", (93,4)->(93,10))
          ^ Token(Illegal, ".", (93,10)->(93,10))
           ^ Token(EndOfLine, "\n", (93,11)->(93,11))
  var save_cursor: list<number>
  ^^^^ Token(Identifier, "var", (94,2)->(94,5))
      ^^^^^^^^^^^^ Token(Identifier, "save_cursor", (94,6)->(94,17))
                 ^ Token(Colon, ":", (94,17)->(94,17))
                   ^^^^^ Token(Identifier, "list", (94,19)->(94,23))
                       ^ Token(LessThan, "<", (94,23)->(94,23))
                        ^^^^^^^ Token(Identifier, "number", (94,24)->(94,30))
                              ^ Token(GreaterThan, ">", (94,30)->(94,30))
                               ^ Token(EndOfLine, "\n", (94,31)->(94,31))
  if before > 0
  ^^^ Token(Identifier, "if", (95,2)->(95,4))
     ^^^^^^^ Token(Identifier, "before", (95,5)->(95,11))
            ^ Token(GreaterThan, ">", (95,12)->(95,12))
              ^^ Token(Integer, "0", (95,14)->(95,15))
               ^ Token(EndOfLine, "\n", (95,15)->(95,15))
    save_cursor = getcurpos()
    ^^^^^^^^^^^^ Token(Identifier, "save_cursor", (96,4)->(96,15))
                ^ Token(Equal, "=", (96,16)->(96,16))
                  ^^^^^^^^^^ Token(Identifier, "getcurpos", (96,18)->(96,27))
                           ^ Token(LeftParen, "(", (96,27)->(96,27))
                            ^ Token(RightParen, ")", (96,28)->(96,28))
                             ^ Token(EndOfLine, "\n", (96,29)->(96,29))
    cursor(c_lnum, c_col - before)
    ^^^^^^^ Token(Identifier, "cursor", (97,4)->(97,10))
          ^ Token(LeftParen, "(", (97,10)->(97,10))
           ^^^^^^^ Token(Identifier, "c_lnum", (97,11)->(97,17))
                 ^ Token(Illegal, ",", (97,17)->(97,17))
                   ^^^^^^ Token(Identifier, "c_col", (97,19)->(97,24))
                         ^ Token(Minus, "-", (97,25)->(97,25))
                           ^^^^^^^ Token(Identifier, "before", (97,27)->(97,33))
                                 ^ Token(RightParen, ")", (97,33)->(97,33))
                                  ^ Token(EndOfLine, "\n", (97,34)->(97,34))
  endif
  ^^^^^^ Token(Identifier, "endif", (98,2)->(98,7))
       ^ Token(EndOfLine, "\n", (98,7)->(98,7))

^ Token(EndOfLine, "\n", (99,0)->(99,0))
  var s_skip: string
  ^^^^ Token(Identifier, "var", (100,2)->(100,5))
      ^^^^^^^ Token(Identifier, "s_skip", (100,6)->(100,12))
            ^ Token(Colon, ":", (100,12)->(100,12))
              ^^^^^^^ Token(Identifier, "string", (100,14)->(100,20))
                    ^ Token(EndOfLine, "\n", (100,20)->(100,20))
  if !has('syntax') || !exists('g:syntax_on')
  ^^^ Token(Identifier, "if", (101,2)->(101,4))
     ^ Token(Illegal, "!", (101,5)->(101,5))
      ^^^^ Token(Identifier, "has", (101,6)->(101,9))
         ^ Token(LeftParen, "(", (101,9)->(101,9))
          ^ Token(Illegal, "'", (101,10)->(101,10))
           ^^^^^^^ Token(Identifier, "syntax", (101,11)->(101,17))
                 ^ Token(Illegal, "'", (101,17)->(101,17))
                  ^ Token(RightParen, ")", (101,18)->(101,18))
                    ^^ Token(Or, "||", (101,20)->(101,21))
                       ^ Token(Illegal, "!", (101,23)->(101,23))
                        ^^^^^^^ Token(Identifier, "exists", (101,24)->(101,30))
                              ^ Token(LeftParen, "(", (101,30)->(101,30))
                               ^ Token(Illegal, "'", (101,31)->(101,31))
                                ^^ Token(Identifier, "g", (101,32)->(101,33))
                                 ^ Token(Colon, ":", (101,33)->(101,33))
                                  ^^^^^^^^^^ Token(Identifier, "syntax_on", (101,34)->(101,43))
                                           ^ Token(Illegal, "'", (101,43)->(101,43))
                                            ^ Token(RightParen, ")", (101,44)->(101,44))
                                             ^ Token(EndOfLine, "\n", (101,45)->(101,45))
    s_skip = '0'
    ^^^^^^^ Token(Identifier, "s_skip", (102,4)->(102,10))
           ^ Token(Equal, "=", (102,11)->(102,11))
             ^ Token(Illegal, "'", (102,13)->(102,13))
              ^^ Token(Integer, "0", (102,14)->(102,15))
               ^ Token(Illegal, "'", (102,15)->(102,15))
                ^ Token(EndOfLine, "\n", (102,16)->(102,16))
  else
  ^^^^^ Token(Identifier, "else", (103,2)->(103,6))
      ^ Token(EndOfLine, "\n", (103,6)->(103,6))
    # Build an expression that detects whether the current cursor position is
    ^ Token(Illegal, "#", (104,4)->(104,4))
      ^^^^^^ Token(Identifier, "Build", (104,6)->(104,11))
            ^^^ Token(Identifier, "an", (104,12)->(104,14))
               ^^^^^^^^^^^ Token(Identifier, "expression", (104,15)->(104,25))
                          ^^^^^ Token(Identifier, "that", (104,26)->(104,30))
                               ^^^^^^^^ Token(Identifier, "detects", (104,31)->(104,38))
                                       ^^^^^^^^ Token(Identifier, "whether", (104,39)->(104,46))
                                               ^^^^ Token(Identifier, "the", (104,47)->(104,50))
                                                   ^^^^^^^^ Token(Identifier, "current", (104,51)->(104,58))
                                                           ^^^^^^^ Token(Identifier, "cursor", (104,59)->(104,65))
                                                                  ^^^^^^^^^ Token(Identifier, "position", (104,66)->(104,74))
                                                                           ^^^ Token(Identifier, "is", (104,75)->(104,77))
                                                                             ^ Token(EndOfLine, "\n", (104,77)->(104,77))
    # in certain syntax types (string, comment, etc.), for use as
    ^ Token(Illegal, "#", (105,4)->(105,4))
      ^^^ Token(Identifier, "in", (105,6)->(105,8))
         ^^^^^^^^ Token(Identifier, "certain", (105,9)->(105,16))
                 ^^^^^^^ Token(Identifier, "syntax", (105,17)->(105,23))
                        ^^^^^^ Token(Identifier, "types", (105,24)->(105,29))
                              ^ Token(LeftParen, "(", (105,30)->(105,30))
                               ^^^^^^^ Token(Identifier, "string", (105,31)->(105,37))
                                     ^ Token(Illegal, ",", (105,37)->(105,37))
                                       ^^^^^^^^ Token(Identifier, "comment", (105,39)->(105,46))
                                              ^ Token(Illegal, ",", (105,46)->(105,46))
                                                ^^^^ Token(Identifier, "etc", (105,48)->(105,51))
                                                   ^ Token(Illegal, ".", (105,51)->(105,51))
                                                    ^ Token(RightParen, ")", (105,52)->(105,52))
                                                     ^ Token(Illegal, ",", (105,53)->(105,53))
                                                       ^^^^ Token(Identifier, "for", (105,55)->(105,58))
                                                           ^^^^ Token(Identifier, "use", (105,59)->(105,62))
                                                               ^^^ Token(Identifier, "as", (105,63)->(105,65))
                                                                 ^ Token(EndOfLine, "\n", (105,65)->(105,65))
    # searchpairpos()'s skip argument.
    ^ Token(Illegal, "#", (106,4)->(106,4))
      ^^^^^^^^^^^^^^ Token(Identifier, "searchpairpos", (106,6)->(106,19))
                   ^ Token(LeftParen, "(", (106,19)->(106,19))
                    ^ Token(RightParen, ")", (106,20)->(106,20))
                     ^ Token(Illegal, "'", (106,21)->(106,21))
                      ^^ Token(Identifier, "s", (106,22)->(106,23))
                        ^^^^^ Token(Identifier, "skip", (106,24)->(106,28))
                             ^^^^^^^^^ Token(Identifier, "argument", (106,29)->(106,37))
                                     ^ Token(Illegal, ".", (106,37)->(106,37))
                                      ^ Token(EndOfLine, "\n", (106,38)->(106,38))
    # We match "escape" for special items, such as lispEscapeSpecial, and
    ^ Token(Illegal, "#", (107,4)->(107,4))
      ^^^ Token(Identifier, "We", (107,6)->(107,8))
         ^^^^^^ Token(Identifier, "match", (107,9)->(107,14))
               ^ Token(Illegal, "\"", (107,15)->(107,15))
                ^^^^^^^ Token(Identifier, "escape", (107,16)->(107,22))
                      ^ Token(Illegal, "\"", (107,22)->(107,22))
                        ^^^^ Token(Identifier, "for", (107,24)->(107,27))
                            ^^^^^^^^ Token(Identifier, "special", (107,28)->(107,35))
                                    ^^^^^^ Token(Identifier, "items", (107,36)->(107,41))
                                         ^ Token(Illegal, ",", (107,41)->(107,41))
                                           ^^^^^ Token(Identifier, "such", (107,43)->(107,47))
                                                ^^^ Token(Identifier, "as", (107,48)->(107,50))
                                                   ^^^^^^^^^^^^^^^^^^ Token(Identifier, "lispEscapeSpecial", (107,51)->(107,68))
                                                                    ^ Token(Illegal, ",", (107,68)->(107,68))
                                                                      ^^^^ Token(Identifier, "and", (107,70)->(107,73))
                                                                         ^ Token(EndOfLine, "\n", (107,73)->(107,73))
    # match "symbol" for lispBarSymbol.
    ^ Token(Illegal, "#", (108,4)->(108,4))
      ^^^^^^ Token(Identifier, "match", (108,6)->(108,11))
            ^ Token(Illegal, "\"", (108,12)->(108,12))
             ^^^^^^^ Token(Identifier, "symbol", (108,13)->(108,19))
                   ^ Token(Illegal, "\"", (108,19)->(108,19))
                     ^^^^ Token(Identifier, "for", (108,21)->(108,24))
                         ^^^^^^^^^^^^^^ Token(Identifier, "lispBarSymbol", (108,25)->(108,38))
                                      ^ Token(Illegal, ".", (108,38)->(108,38))
                                       ^ Token(EndOfLine, "\n", (108,39)->(108,39))
    s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' ..
    ^^^^^^^ Token(Identifier, "s_skip", (109,4)->(109,10))
           ^ Token(Equal, "=", (109,11)->(109,11))
             ^ Token(Illegal, "'", (109,13)->(109,13))
              ^ Token(Illegal, "!", (109,14)->(109,14))
               ^^^^^^ Token(Identifier, "empty", (109,15)->(109,20))
                    ^ Token(LeftParen, "(", (109,20)->(109,20))
                     ^^^^^^^ Token(Identifier, "filter", (109,21)->(109,27))
                           ^ Token(LeftParen, "(", (109,27)->(109,27))
                            ^^^^ Token(Identifier, "map", (109,28)->(109,31))
                               ^ Token(LeftParen, "(", (109,31)->(109,31))
                                ^^^^^^^^^ Token(Identifier, "synstack", (109,32)->(109,40))
                                        ^ Token(LeftParen, "(", (109,40)->(109,40))
                                         ^^^^^ Token(Identifier, "line", (109,41)->(109,45))
                                             ^ Token(LeftParen, "(", (109,45)->(109,45))
                                              ^ Token(Illegal, "\"", (109,46)->(109,46))
                                               ^ Token(Illegal, ".", (109,47)->(109,47))
                                                ^ Token(Illegal, "\"", (109,48)->(109,48))
                                                 ^ Token(RightParen, ")", (109,49)->(109,49))
                                                  ^ Token(Illegal, ",", (109,50)->(109,50))
                                                    ^^^^ Token(Identifier, "col", (109,52)->(109,55))
                                                       ^ Token(LeftParen, "(", (109,55)->(109,55))
                                                        ^ Token(Illegal, "\"", (109,56)->(109,56))
                                                         ^ Token(Illegal, ".", (109,57)->(109,57))
                                                          ^ Token(Illegal, "\"", (109,58)->(109,58))
                                                           ^ Token(RightParen, ")", (109,59)->(109,59))
                                                            ^ Token(RightParen, ")", (109,60)->(109,60))
                                                             ^ Token(Illegal, ",", (109,61)->(109,61))
                                                               ^ Token(Illegal, "'", (109,63)->(109,63))
                                                                ^ Token(Illegal, "'", (109,64)->(109,64))
                                                                 ^^^^^^^^^^ Token(Identifier, "synIDattr", (109,65)->(109,74))
                                                                          ^ Token(LeftParen, "(", (109,74)->(109,74))
                                                                           ^^ Token(Identifier, "v", (109,75)->(109,76))
                                                                            ^ Token(Colon, ":", (109,76)->(109,76))
                                                                             ^^^^ Token(Identifier, "val", (109,77)->(109,80))
                                                                                ^ Token(Illegal, ",", (109,80)->(109,80))
                                                                                  ^ Token(Illegal, "\"", (109,82)->(109,82))
                                                                                   ^^^^^ Token(Identifier, "name", (109,83)->(109,87))
                                                                                       ^ Token(Illegal, "\"", (109,87)->(109,87))
                                                                                        ^ Token(RightParen, ")", (109,88)->(109,88))
                                                                                         ^ Token(Illegal, "'", (109,89)->(109,89))
                                                                                          ^ Token(Illegal, "'", (109,90)->(109,90))
                                                                                           ^ Token(RightParen, ")", (109,91)->(109,91))
                                                                                            ^ Token(Illegal, ",", (109,92)->(109,92))
                                                                                              ^ Token(Illegal, "'", (109,94)->(109,94))
                                                                                                ^ Token(Illegal, ".", (109,96)->(109,96))
                                                                                                 ^ Token(Illegal, ".", (109,97)->(109,97))
                                                                                                  ^ Token(EndOfLine, "\n", (109,98)->(109,98))
      '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
      ^ Token(Illegal, "'", (110,6)->(110,6))
       ^ Token(Illegal, "'", (110,7)->(110,7))
        ^ Token(Illegal, "'", (110,8)->(110,8))
         ^^ Token(Identifier, "v", (110,9)->(110,10))
          ^ Token(Colon, ":", (110,10)->(110,10))
           ^^^^ Token(Identifier, "val", (110,11)->(110,14))
               ^ Token(Equal, "=", (110,15)->(110,15))
                ^ Token(Illegal, "~", (110,16)->(110,16))
                 ^ Token(Illegal, "?", (110,17)->(110,17))
                   ^ Token(Illegal, "\"", (110,19)->(110,19))
                    ^^^^^^^ Token(Identifier, "string", (110,20)->(110,26))
                          ^ Token(Illegal, "\\", (110,26)->(110,26))
                           ^ Token(Illegal, "\\", (110,27)->(110,27))
                            ^ Token(Illegal, "|", (110,28)->(110,28))
                             ^^^^^^^^^^ Token(Identifier, "character", (110,29)->(110,38))
                                      ^ Token(Illegal, "\\", (110,38)->(110,38))
                                       ^ Token(Illegal, "\\", (110,39)->(110,39))
                                        ^ Token(Illegal, "|", (110,40)->(110,40))
                                         ^^^^^^^^^^^^ Token(Identifier, "singlequote", (110,41)->(110,52))
                                                    ^ Token(Illegal, "\\", (110,52)->(110,52))
                                                     ^ Token(Illegal, "\\", (110,53)->(110,53))
                                                      ^ Token(Illegal, "|", (110,54)->(110,54))
                                                       ^^^^^^^ Token(Identifier, "escape", (110,55)->(110,61))
                                                             ^ Token(Illegal, "\\", (110,61)->(110,61))
                                                              ^ Token(Illegal, "\\", (110,62)->(110,62))
                                                               ^ Token(Illegal, "|", (110,63)->(110,63))
                                                                ^^^^^^^ Token(Identifier, "symbol", (110,64)->(110,70))
                                                                      ^ Token(Illegal, "\\", (110,70)->(110,70))
                                                                       ^ Token(Illegal, "\\", (110,71)->(110,71))
                                                                        ^ Token(Illegal, "|", (110,72)->(110,72))
                                                                         ^^^^^^^^ Token(Identifier, "comment", (110,73)->(110,80))
                                                                                ^ Token(Illegal, "\"", (110,80)->(110,80))
                                                                                 ^ Token(Illegal, "'", (110,81)->(110,81))
                                                                                  ^ Token(Illegal, "'", (110,82)->(110,82))
                                                                                   ^ Token(RightParen, ")", (110,83)->(110,83))
                                                                                    ^ Token(RightParen, ")", (110,84)->(110,84))
                                                                                     ^ Token(Illegal, "'", (110,85)->(110,85))
                                                                                      ^ Token(EndOfLine, "\n", (110,86)->(110,86))
    # If executing the expression determines that the cursor is currently in
    ^ Token(Illegal, "#", (111,4)->(111,4))
      ^^^ Token(Identifier, "If", (111,6)->(111,8))
         ^^^^^^^^^^ Token(Identifier, "executing", (111,9)->(111,18))
                   ^^^^ Token(Identifier, "the", (111,19)->(111,22))
                       ^^^^^^^^^^^ Token(Identifier, "expression", (111,23)->(111,33))
                                  ^^^^^^^^^^^ Token(Identifier, "determines", (111,34)->(111,44))
                                             ^^^^^ Token(Identifier, "that", (111,45)->(111,49))
                                                  ^^^^ Token(Identifier, "the", (111,50)->(111,53))
                                                      ^^^^^^^ Token(Identifier, "cursor", (111,54)->(111,60))
                                                             ^^^ Token(Identifier, "is", (111,61)->(111,63))
                                                                ^^^^^^^^^^ Token(Identifier, "currently", (111,64)->(111,73))
                                                                          ^^^ Token(Identifier, "in", (111,74)->(111,76))
                                                                            ^ Token(EndOfLine, "\n", (111,76)->(111,76))
    # one of the syntax types, then we want searchpairpos() to find the pair
    ^ Token(Illegal, "#", (112,4)->(112,4))
      ^^^^ Token(Identifier, "one", (112,6)->(112,9))
          ^^^ Token(Identifier, "of", (112,10)->(112,12))
             ^^^^ Token(Identifier, "the", (112,13)->(112,16))
                 ^^^^^^^ Token(Identifier, "syntax", (112,17)->(112,23))
                        ^^^^^^ Token(Identifier, "types", (112,24)->(112,29))
                             ^ Token(Illegal, ",", (112,29)->(112,29))
                               ^^^^^ Token(Identifier, "then", (112,31)->(112,35))
                                    ^^^ Token(Identifier, "we", (112,36)->(112,38))
                                       ^^^^^ Token(Identifier, "want", (112,39)->(112,43))
                                            ^^^^^^^^^^^^^^ Token(Identifier, "searchpairpos", (112,44)->(112,57))
                                                         ^ Token(LeftParen, "(", (112,57)->(112,57))
                                                          ^ Token(RightParen, ")", (112,58)->(112,58))
                                                            ^^^ Token(Identifier, "to", (112,60)->(112,62))
                                                               ^^^^^ Token(Identifier, "find", (112,63)->(112,67))
                                                                    ^^^^ Token(Identifier, "the", (112,68)->(112,71))
                                                                        ^^^^^ Token(Identifier, "pair", (112,72)->(112,76))
                                                                            ^ Token(EndOfLine, "\n", (112,76)->(112,76))
    # within those syntax types (i.e., not skip).  Otherwise, the cursor is
    ^ Token(Illegal, "#", (113,4)->(113,4))
      ^^^^^^^ Token(Identifier, "within", (113,6)->(113,12))
             ^^^^^^ Token(Identifier, "those", (113,13)->(113,18))
                   ^^^^^^^ Token(Identifier, "syntax", (113,19)->(113,25))
                          ^^^^^^ Token(Identifier, "types", (113,26)->(113,31))
                                ^ Token(LeftParen, "(", (113,32)->(113,32))
                                 ^^ Token(Identifier, "i", (113,33)->(113,34))
                                  ^ Token(Illegal, ".", (113,34)->(113,34))
                                   ^^ Token(Identifier, "e", (113,35)->(113,36))
                                    ^ Token(Illegal, ".", (113,36)->(113,36))
                                     ^ Token(Illegal, ",", (113,37)->(113,37))
                                       ^^^^ Token(Identifier, "not", (113,39)->(113,42))
                                           ^^^^^ Token(Identifier, "skip", (113,43)->(113,47))
                                               ^ Token(RightParen, ")", (113,47)->(113,47))
                                                ^ Token(Illegal, ".", (113,48)->(113,48))
                                                   ^^^^^^^^^^ Token(Identifier, "Otherwise", (113,51)->(113,60))
                                                            ^ Token(Illegal, ",", (113,60)->(113,60))
                                                              ^^^^ Token(Identifier, "the", (113,62)->(113,65))
                                                                  ^^^^^^^ Token(Identifier, "cursor", (113,66)->(113,72))
                                                                         ^^^ Token(Identifier, "is", (113,73)->(113,75))
                                                                           ^ Token(EndOfLine, "\n", (113,75)->(113,75))
    # outside of the syntax types and s_skip should keep its value so we skip
    ^ Token(Illegal, "#", (114,4)->(114,4))
      ^^^^^^^^ Token(Identifier, "outside", (114,6)->(114,13))
              ^^^ Token(Identifier, "of", (114,14)->(114,16))
                 ^^^^ Token(Identifier, "the", (114,17)->(114,20))
                     ^^^^^^^ Token(Identifier, "syntax", (114,21)->(114,27))
                            ^^^^^^ Token(Identifier, "types", (114,28)->(114,33))
                                  ^^^^ Token(Identifier, "and", (114,34)->(114,37))
                                      ^^^^^^^ Token(Identifier, "s_skip", (114,38)->(114,44))
                                             ^^^^^^^ Token(Identifier, "should", (114,45)->(114,51))
                                                    ^^^^^ Token(Identifier, "keep", (114,52)->(114,56))
                                                         ^^^^ Token(Identifier, "its", (114,57)->(114,60))
                                                             ^^^^^^ Token(Identifier, "value", (114,61)->(114,66))
                                                                   ^^^ Token(Identifier, "so", (114,67)->(114,69))
                                                                      ^^^ Token(Identifier, "we", (114,70)->(114,72))
                                                                         ^^^^^ Token(Identifier, "skip", (114,73)->(114,77))
                                                                             ^ Token(EndOfLine, "\n", (114,77)->(114,77))
    # any matching pair inside the syntax types.
    ^ Token(Illegal, "#", (115,4)->(115,4))
      ^^^^ Token(Identifier, "any", (115,6)->(115,9))
          ^^^^^^^^^ Token(Identifier, "matching", (115,10)->(115,18))
                   ^^^^^ Token(Identifier, "pair", (115,19)->(115,23))
                        ^^^^^^^ Token(Identifier, "inside", (115,24)->(115,30))
                               ^^^^ Token(Identifier, "the", (115,31)->(115,34))
                                   ^^^^^^^ Token(Identifier, "syntax", (115,35)->(115,41))
                                          ^^^^^^ Token(Identifier, "types", (115,42)->(115,47))
                                               ^ Token(Illegal, ".", (115,47)->(115,47))
                                                ^ Token(EndOfLine, "\n", (115,48)->(115,48))
    # Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    ^ Token(Illegal, "#", (116,4)->(116,4))
      ^^^^^^ Token(Identifier, "Catch", (116,6)->(116,11))
            ^^^ Token(Identifier, "if", (116,12)->(116,14))
               ^^^^^ Token(Identifier, "this", (116,15)->(116,19))
                    ^^^^^^^ Token(Identifier, "throws", (116,20)->(116,26))
                           ^^^^^ Token(Identifier, "E363", (116,27)->(116,31))
                               ^ Token(Colon, ":", (116,31)->(116,31))
                                 ^^^^^^^^ Token(Identifier, "pattern", (116,33)->(116,40))
                                         ^^^^^ Token(Identifier, "uses", (116,41)->(116,45))
                                              ^^^^^ Token(Identifier, "more", (116,46)->(116,50))
                                                   ^^^^^^^ Token(Identifier, "memory", (116,51)->(116,57))
                                                          ^^^^^ Token(Identifier, "than", (116,58)->(116,62))
                                                               ^ Token(Illegal, "'", (116,63)->(116,63))
                                                                ^^^^^^^^^^^^^^ Token(Identifier, "maxmempattern", (116,64)->(116,77))
                                                                             ^ Token(Illegal, "'", (116,77)->(116,77))
                                                                              ^ Token(Illegal, ".", (116,78)->(116,78))
                                                                               ^ Token(EndOfLine, "\n", (116,79)->(116,79))
    try
    ^^^^ Token(Identifier, "try", (117,4)->(117,7))
       ^ Token(EndOfLine, "\n", (117,7)->(117,7))
      if eval(s_skip)
      ^^^ Token(Identifier, "if", (118,6)->(118,8))
         ^^^^^ Token(Identifier, "eval", (118,9)->(118,13))
             ^ Token(LeftParen, "(", (118,13)->(118,13))
              ^^^^^^^ Token(Identifier, "s_skip", (118,14)->(118,20))
                    ^ Token(RightParen, ")", (118,20)->(118,20))
                     ^ Token(EndOfLine, "\n", (118,21)->(118,21))
        s_skip = "0"
        ^^^^^^^ Token(Identifier, "s_skip", (119,8)->(119,14))
               ^ Token(Equal, "=", (119,15)->(119,15))
                 ^ Token(Illegal, "\"", (119,17)->(119,17))
                  ^^ Token(Integer, "0", (119,18)->(119,19))
                   ^ Token(Illegal, "\"", (119,19)->(119,19))
                    ^ Token(EndOfLine, "\n", (119,20)->(119,20))
      endif
      ^^^^^^ Token(Identifier, "endif", (120,6)->(120,11))
           ^ Token(EndOfLine, "\n", (120,11)->(120,11))
    catch /^Vim\%((\a\+)\)\=:E363/
    ^^^^^^ Token(Identifier, "catch", (121,4)->(121,9))
          ^ Token(Div, "/", (121,10)->(121,10))
           ^ Token(Illegal, "^", (121,11)->(121,11))
            ^^^^ Token(Identifier, "Vim", (121,12)->(121,15))
               ^ Token(Illegal, "\\", (121,15)->(121,15))
                ^ Token(Illegal, "%", (121,16)->(121,16))
                 ^ Token(LeftParen, "(", (121,17)->(121,17))
                  ^ Token(LeftParen, "(", (121,18)->(121,18))
                   ^ Token(Illegal, "\\", (121,19)->(121,19))
                    ^^ Token(Identifier, "a", (121,20)->(121,21))
                     ^ Token(Illegal, "\\", (121,21)->(121,21))
                      ^ Token(Plus, "+", (121,22)->(121,22))
                       ^ Token(RightParen, ")", (121,23)->(121,23))
                        ^ Token(Illegal, "\\", (121,24)->(121,24))
                         ^ Token(RightParen, ")", (121,25)->(121,25))
                          ^ Token(Illegal, "\\", (121,26)->(121,26))
                           ^ Token(Equal, "=", (121,27)->(121,27))
                            ^ Token(Colon, ":", (121,28)->(121,28))
                             ^^^^^ Token(Identifier, "E363", (121,29)->(121,33))
                                 ^ Token(Div, "/", (121,33)->(121,33))
                                  ^ Token(EndOfLine, "\n", (121,34)->(121,34))
      # We won't find anything, so skip searching, should keep Vim responsive.
      ^ Token(Illegal, "#", (122,6)->(122,6))
        ^^^ Token(Identifier, "We", (122,8)->(122,10))
           ^^^^ Token(Identifier, "won", (122,11)->(122,14))
              ^ Token(Illegal, "'", (122,14)->(122,14))
               ^^ Token(Identifier, "t", (122,15)->(122,16))
                 ^^^^^ Token(Identifier, "find", (122,17)->(122,21))
                      ^^^^^^^^^ Token(Identifier, "anything", (122,22)->(122,30))
                              ^ Token(Illegal, ",", (122,30)->(122,30))
                                ^^^ Token(Identifier, "so", (122,32)->(122,34))
                                   ^^^^^ Token(Identifier, "skip", (122,35)->(122,39))
                                        ^^^^^^^^^^ Token(Identifier, "searching", (122,40)->(122,49))
                                                 ^ Token(Illegal, ",", (122,49)->(122,49))
                                                   ^^^^^^^ Token(Identifier, "should", (122,51)->(122,57))
                                                          ^^^^^ Token(Identifier, "keep", (122,58)->(122,62))
                                                               ^^^^ Token(Identifier, "Vim", (122,63)->(122,66))
                                                                   ^^^^^^^^^^^ Token(Identifier, "responsive", (122,67)->(122,77))
                                                                             ^ Token(Illegal, ".", (122,77)->(122,77))
                                                                              ^ Token(EndOfLine, "\n", (122,78)->(122,78))
      return
      ^^^^^^^ Token(Identifier, "return", (123,6)->(123,12))
            ^ Token(EndOfLine, "\n", (123,12)->(123,12))
    endtry
    ^^^^^^^ Token(Identifier, "endtry", (124,4)->(124,10))
          ^ Token(EndOfLine, "\n", (124,10)->(124,10))
  endif
  ^^^^^^ Token(Identifier, "endif", (125,2)->(125,7))
       ^ Token(EndOfLine, "\n", (125,7)->(125,7))

^ Token(EndOfLine, "\n", (126,0)->(126,0))
  # Limit the search to lines visible in the window.
  ^ Token(Illegal, "#", (127,2)->(127,2))
    ^^^^^^ Token(Identifier, "Limit", (127,4)->(127,9))
          ^^^^ Token(Identifier, "the", (127,10)->(127,13))
              ^^^^^^^ Token(Identifier, "search", (127,14)->(127,20))
                     ^^^ Token(Identifier, "to", (127,21)->(127,23))
                        ^^^^^^ Token(Identifier, "lines", (127,24)->(127,29))
                              ^^^^^^^^ Token(Identifier, "visible", (127,30)->(127,37))
                                      ^^^ Token(Identifier, "in", (127,38)->(127,40))
                                         ^^^^ Token(Identifier, "the", (127,41)->(127,44))
                                             ^^^^^^^ Token(Identifier, "window", (127,45)->(127,51))
                                                   ^ Token(Illegal, ".", (127,51)->(127,51))
                                                    ^ Token(EndOfLine, "\n", (127,52)->(127,52))
  var stoplinebottom = line('w$')
  ^^^^ Token(Identifier, "var", (128,2)->(128,5))
      ^^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (128,6)->(128,20))
                     ^ Token(Equal, "=", (128,21)->(128,21))
                       ^^^^^ Token(Identifier, "line", (128,23)->(128,27))
                           ^ Token(LeftParen, "(", (128,27)->(128,27))
                            ^ Token(Illegal, "'", (128,28)->(128,28))
                             ^^ Token(Identifier, "w", (128,29)->(128,30))
                              ^ Token(Illegal, "$", (128,30)->(128,30))
                               ^ Token(Illegal, "'", (128,31)->(128,31))
                                ^ Token(RightParen, ")", (128,32)->(128,32))
                                 ^ Token(EndOfLine, "\n", (128,33)->(128,33))
  var stoplinetop = line('w0')
  ^^^^ Token(Identifier, "var", (129,2)->(129,5))
      ^^^^^^^^^^^^ Token(Identifier, "stoplinetop", (129,6)->(129,17))
                  ^ Token(Equal, "=", (129,18)->(129,18))
                    ^^^^^ Token(Identifier, "line", (129,20)->(129,24))
                        ^ Token(LeftParen, "(", (129,24)->(129,24))
                         ^ Token(Illegal, "'", (129,25)->(129,25))
                          ^^^ Token(Identifier, "w0", (129,26)->(129,28))
                            ^ Token(Illegal, "'", (129,28)->(129,28))
                             ^ Token(RightParen, ")", (129,29)->(129,29))
                              ^ Token(EndOfLine, "\n", (129,30)->(129,30))
  var stopline: number
  ^^^^ Token(Identifier, "var", (130,2)->(130,5))
      ^^^^^^^^^ Token(Identifier, "stopline", (130,6)->(130,14))
              ^ Token(Colon, ":", (130,14)->(130,14))
                ^^^^^^^ Token(Identifier, "number", (130,16)->(130,22))
                      ^ Token(EndOfLine, "\n", (130,22)->(130,22))
  if i % 2 == 0
  ^^^ Token(Identifier, "if", (131,2)->(131,4))
     ^^ Token(Identifier, "i", (131,5)->(131,6))
       ^ Token(Illegal, "%", (131,7)->(131,7))
         ^^ Token(Integer, "2", (131,9)->(131,10))
           ^^ Token(EqualTo, "==", (131,11)->(131,12))
              ^^ Token(Integer, "0", (131,14)->(131,15))
               ^ Token(EndOfLine, "\n", (131,15)->(131,15))
    stopline = stoplinebottom
    ^^^^^^^^^ Token(Identifier, "stopline", (132,4)->(132,12))
             ^ Token(Equal, "=", (132,13)->(132,13))
               ^^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (132,15)->(132,29))
                             ^ Token(EndOfLine, "\n", (132,29)->(132,29))
  else
  ^^^^^ Token(Identifier, "else", (133,2)->(133,6))
      ^ Token(EndOfLine, "\n", (133,6)->(133,6))
    stopline = stoplinetop
    ^^^^^^^^^ Token(Identifier, "stopline", (134,4)->(134,12))
             ^ Token(Equal, "=", (134,13)->(134,13))
               ^^^^^^^^^^^^ Token(Identifier, "stoplinetop", (134,15)->(134,26))
                          ^ Token(EndOfLine, "\n", (134,26)->(134,26))
  endif
  ^^^^^^ Token(Identifier, "endif", (135,2)->(135,7))
       ^ Token(EndOfLine, "\n", (135,7)->(135,7))

^ Token(EndOfLine, "\n", (136,0)->(136,0))
  var timeout: number
  ^^^^ Token(Identifier, "var", (137,2)->(137,5))
      ^^^^^^^^ Token(Identifier, "timeout", (137,6)->(137,13))
             ^ Token(Colon, ":", (137,13)->(137,13))
               ^^^^^^^ Token(Identifier, "number", (137,15)->(137,21))
                     ^ Token(EndOfLine, "\n", (137,21)->(137,21))
  var m_lnum: number
  ^^^^ Token(Identifier, "var", (138,2)->(138,5))
      ^^^^^^^ Token(Identifier, "m_lnum", (138,6)->(138,12))
            ^ Token(Colon, ":", (138,12)->(138,12))
              ^^^^^^^ Token(Identifier, "number", (138,14)->(138,20))
                    ^ Token(EndOfLine, "\n", (138,20)->(138,20))
  var m_col: number
  ^^^^ Token(Identifier, "var", (139,2)->(139,5))
      ^^^^^^ Token(Identifier, "m_col", (139,6)->(139,11))
           ^ Token(Colon, ":", (139,11)->(139,11))
             ^^^^^^^ Token(Identifier, "number", (139,13)->(139,19))
                   ^ Token(EndOfLine, "\n", (139,19)->(139,19))
  var adjustedScrolloff: number
  ^^^^ Token(Identifier, "var", (140,2)->(140,5))
      ^^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (140,6)->(140,23))
                       ^ Token(Colon, ":", (140,23)->(140,23))
                         ^^^^^^^ Token(Identifier, "number", (140,25)->(140,31))
                               ^ Token(EndOfLine, "\n", (140,31)->(140,31))
  var bottom_viewable: number
  ^^^^ Token(Identifier, "var", (141,2)->(141,5))
      ^^^^^^^^^^^^^^^^ Token(Identifier, "bottom_viewable", (141,6)->(141,21))
                     ^ Token(Colon, ":", (141,21)->(141,21))
                       ^^^^^^^ Token(Identifier, "number", (141,23)->(141,29))
                             ^ Token(EndOfLine, "\n", (141,29)->(141,29))
  var top_viewable: number
  ^^^^ Token(Identifier, "var", (142,2)->(142,5))
      ^^^^^^^^^^^^^ Token(Identifier, "top_viewable", (142,6)->(142,18))
                  ^ Token(Colon, ":", (142,18)->(142,18))
                    ^^^^^^^ Token(Identifier, "number", (142,20)->(142,26))
                          ^ Token(EndOfLine, "\n", (142,26)->(142,26))
  # Limit the search time to 300 msec to avoid a hang on very long lines.
  ^ Token(Illegal, "#", (143,2)->(143,2))
    ^^^^^^ Token(Identifier, "Limit", (143,4)->(143,9))
          ^^^^ Token(Identifier, "the", (143,10)->(143,13))
              ^^^^^^^ Token(Identifier, "search", (143,14)->(143,20))
                     ^^^^^ Token(Identifier, "time", (143,21)->(143,25))
                          ^^^ Token(Identifier, "to", (143,26)->(143,28))
                             ^^^^ Token(Integer, "300", (143,29)->(143,32))
                                 ^^^^^ Token(Identifier, "msec", (143,33)->(143,37))
                                      ^^^ Token(Identifier, "to", (143,38)->(143,40))
                                         ^^^^^^ Token(Identifier, "avoid", (143,41)->(143,46))
                                               ^^ Token(Identifier, "a", (143,47)->(143,48))
                                                 ^^^^^ Token(Identifier, "hang", (143,49)->(143,53))
                                                      ^^^ Token(Identifier, "on", (143,54)->(143,56))
                                                         ^^^^^ Token(Identifier, "very", (143,57)->(143,61))
                                                              ^^^^^ Token(Identifier, "long", (143,62)->(143,66))
                                                                   ^^^^^^ Token(Identifier, "lines", (143,67)->(143,72))
                                                                        ^ Token(Illegal, ".", (143,72)->(143,72))
                                                                         ^ Token(EndOfLine, "\n", (143,73)->(143,73))
  # This fails when a timeout is not supported.
  ^ Token(Illegal, "#", (144,2)->(144,2))
    ^^^^^ Token(Identifier, "This", (144,4)->(144,8))
         ^^^^^^ Token(Identifier, "fails", (144,9)->(144,14))
               ^^^^^ Token(Identifier, "when", (144,15)->(144,19))
                    ^^ Token(Identifier, "a", (144,20)->(144,21))
                      ^^^^^^^^ Token(Identifier, "timeout", (144,22)->(144,29))
                              ^^^ Token(Identifier, "is", (144,30)->(144,32))
                                 ^^^^ Token(Identifier, "not", (144,33)->(144,36))
                                     ^^^^^^^^^^ Token(Identifier, "supported", (144,37)->(144,46))
                                              ^ Token(Illegal, ".", (144,46)->(144,46))
                                               ^ Token(EndOfLine, "\n", (144,47)->(144,47))
  if mode() == 'i' || mode() == 'R'
  ^^^ Token(Identifier, "if", (145,2)->(145,4))
     ^^^^^ Token(Identifier, "mode", (145,5)->(145,9))
         ^ Token(LeftParen, "(", (145,9)->(145,9))
          ^ Token(RightParen, ")", (145,10)->(145,10))
            ^^ Token(EqualTo, "==", (145,12)->(145,13))
               ^ Token(Illegal, "'", (145,15)->(145,15))
                ^^ Token(Identifier, "i", (145,16)->(145,17))
                 ^ Token(Illegal, "'", (145,17)->(145,17))
                   ^^ Token(Or, "||", (145,19)->(145,20))
                      ^^^^^ Token(Identifier, "mode", (145,22)->(145,26))
                          ^ Token(LeftParen, "(", (145,26)->(145,26))
                           ^ Token(RightParen, ")", (145,27)->(145,27))
                             ^^ Token(EqualTo, "==", (145,29)->(145,30))
                                ^ Token(Illegal, "'", (145,32)->(145,32))
                                 ^^ Token(Identifier, "R", (145,33)->(145,34))
                                  ^ Token(Illegal, "'", (145,34)->(145,34))
                                   ^ Token(EndOfLine, "\n", (145,35)->(145,35))
    timeout = exists('b:matchparen_insert_timeout') ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    ^^^^^^^^ Token(Identifier, "timeout", (146,4)->(146,11))
            ^ Token(Equal, "=", (146,12)->(146,12))
              ^^^^^^^ Token(Identifier, "exists", (146,14)->(146,20))
                    ^ Token(LeftParen, "(", (146,20)->(146,20))
                     ^ Token(Illegal, "'", (146,21)->(146,21))
                      ^^ Token(Identifier, "b", (146,22)->(146,23))
                       ^ Token(Colon, ":", (146,23)->(146,23))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (146,24)->(146,49))
                                                 ^ Token(Illegal, "'", (146,49)->(146,49))
                                                  ^ Token(RightParen, ")", (146,50)->(146,50))
                                                    ^ Token(Illegal, "?", (146,52)->(146,52))
                                                      ^^ Token(Identifier, "b", (146,54)->(146,55))
                                                       ^ Token(Colon, ":", (146,55)->(146,55))
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (146,56)->(146,81))
                                                                                  ^ Token(Colon, ":", (146,82)->(146,82))
                                                                                    ^^ Token(Identifier, "g", (146,84)->(146,85))
                                                                                     ^ Token(Colon, ":", (146,85)->(146,85))
                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_insert_timeout", (146,86)->(146,111))
                                                                                                               ^ Token(EndOfLine, "\n", (146,111)->(146,111))
  else
  ^^^^^ Token(Identifier, "else", (147,2)->(147,6))
      ^ Token(EndOfLine, "\n", (147,6)->(147,6))
    timeout = exists('b:matchparen_timeout') ? b:matchparen_timeout : g:matchparen_timeout
    ^^^^^^^^ Token(Identifier, "timeout", (148,4)->(148,11))
            ^ Token(Equal, "=", (148,12)->(148,12))
              ^^^^^^^ Token(Identifier, "exists", (148,14)->(148,20))
                    ^ Token(LeftParen, "(", (148,20)->(148,20))
                     ^ Token(Illegal, "'", (148,21)->(148,21))
                      ^^ Token(Identifier, "b", (148,22)->(148,23))
                       ^ Token(Colon, ":", (148,23)->(148,23))
                        ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (148,24)->(148,42))
                                          ^ Token(Illegal, "'", (148,42)->(148,42))
                                           ^ Token(RightParen, ")", (148,43)->(148,43))
                                             ^ Token(Illegal, "?", (148,45)->(148,45))
                                               ^^ Token(Identifier, "b", (148,47)->(148,48))
                                                ^ Token(Colon, ":", (148,48)->(148,48))
                                                 ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (148,49)->(148,67))
                                                                    ^ Token(Colon, ":", (148,68)->(148,68))
                                                                      ^^ Token(Identifier, "g", (148,70)->(148,71))
                                                                       ^ Token(Colon, ":", (148,71)->(148,71))
                                                                        ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "matchparen_timeout", (148,72)->(148,90))
                                                                                          ^ Token(EndOfLine, "\n", (148,90)->(148,90))
  endif
  ^^^^^^ Token(Identifier, "endif", (149,2)->(149,7))
       ^ Token(EndOfLine, "\n", (149,7)->(149,7))
  try
  ^^^^ Token(Identifier, "try", (150,2)->(150,5))
     ^ Token(EndOfLine, "\n", (150,5)->(150,5))
    [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
    ^ Token(LeftBracket, "[", (151,4)->(151,4))
     ^^^^^^^ Token(Identifier, "m_lnum", (151,5)->(151,11))
           ^ Token(Illegal, ",", (151,11)->(151,11))
             ^^^^^^ Token(Identifier, "m_col", (151,13)->(151,18))
                  ^ Token(RightBracket, "]", (151,18)->(151,18))
                    ^ Token(Equal, "=", (151,20)->(151,20))
                      ^^^^^^^^^^^^^^ Token(Identifier, "searchpairpos", (151,22)->(151,35))
                                   ^ Token(LeftParen, "(", (151,35)->(151,35))
                                    ^^ Token(Identifier, "c", (151,36)->(151,37))
                                     ^ Token(Illegal, ",", (151,37)->(151,37))
                                       ^ Token(Illegal, "'", (151,39)->(151,39))
                                        ^ Token(Illegal, "'", (151,40)->(151,40))
                                         ^ Token(Illegal, ",", (151,41)->(151,41))
                                           ^^^ Token(Identifier, "c2", (151,43)->(151,45))
                                             ^ Token(Illegal, ",", (151,45)->(151,45))
                                               ^^^^^^^^ Token(Identifier, "s_flags", (151,47)->(151,54))
                                                      ^ Token(Illegal, ",", (151,54)->(151,54))
                                                        ^^^^^^^ Token(Identifier, "s_skip", (151,56)->(151,62))
                                                              ^ Token(Illegal, ",", (151,62)->(151,62))
                                                                ^^^^^^^^^ Token(Identifier, "stopline", (151,64)->(151,72))
                                                                        ^ Token(Illegal, ",", (151,72)->(151,72))
                                                                          ^^^^^^^^ Token(Identifier, "timeout", (151,74)->(151,81))
                                                                                 ^ Token(RightParen, ")", (151,81)->(151,81))
                                                                                  ^ Token(EndOfLine, "\n", (151,82)->(151,82))
  catch /E118/
  ^^^^^^ Token(Identifier, "catch", (152,2)->(152,7))
        ^ Token(Div, "/", (152,8)->(152,8))
         ^^^^^ Token(Identifier, "E118", (152,9)->(152,13))
             ^ Token(Div, "/", (152,13)->(152,13))
              ^ Token(EndOfLine, "\n", (152,14)->(152,14))
    # Can't use the timeout, restrict the stopline a bit more to avoid taking
    ^ Token(Illegal, "#", (153,4)->(153,4))
      ^^^^ Token(Identifier, "Can", (153,6)->(153,9))
         ^ Token(Illegal, "'", (153,9)->(153,9))
          ^^ Token(Identifier, "t", (153,10)->(153,11))
            ^^^^ Token(Identifier, "use", (153,12)->(153,15))
                ^^^^ Token(Identifier, "the", (153,16)->(153,19))
                    ^^^^^^^^ Token(Identifier, "timeout", (153,20)->(153,27))
                           ^ Token(Illegal, ",", (153,27)->(153,27))
                             ^^^^^^^^^ Token(Identifier, "restrict", (153,29)->(153,37))
                                      ^^^^ Token(Identifier, "the", (153,38)->(153,41))
                                          ^^^^^^^^^ Token(Identifier, "stopline", (153,42)->(153,50))
                                                   ^^ Token(Identifier, "a", (153,51)->(153,52))
                                                     ^^^^ Token(Identifier, "bit", (153,53)->(153,56))
                                                         ^^^^^ Token(Identifier, "more", (153,57)->(153,61))
                                                              ^^^ Token(Identifier, "to", (153,62)->(153,64))
                                                                 ^^^^^^ Token(Identifier, "avoid", (153,65)->(153,70))
                                                                       ^^^^^^^ Token(Identifier, "taking", (153,71)->(153,77))
                                                                             ^ Token(EndOfLine, "\n", (153,77)->(153,77))
    # a long time on closed folds and long lines.
    ^ Token(Illegal, "#", (154,4)->(154,4))
      ^^ Token(Identifier, "a", (154,6)->(154,7))
        ^^^^^ Token(Identifier, "long", (154,8)->(154,12))
             ^^^^^ Token(Identifier, "time", (154,13)->(154,17))
                  ^^^ Token(Identifier, "on", (154,18)->(154,20))
                     ^^^^^^^ Token(Identifier, "closed", (154,21)->(154,27))
                            ^^^^^^ Token(Identifier, "folds", (154,28)->(154,33))
                                  ^^^^ Token(Identifier, "and", (154,34)->(154,37))
                                      ^^^^^ Token(Identifier, "long", (154,38)->(154,42))
                                           ^^^^^^ Token(Identifier, "lines", (154,43)->(154,48))
                                                ^ Token(Illegal, ".", (154,48)->(154,48))
                                                 ^ Token(EndOfLine, "\n", (154,49)->(154,49))
    # The "viewable" variables give a range in which we can scroll while
    ^ Token(Illegal, "#", (155,4)->(155,4))
      ^^^^ Token(Identifier, "The", (155,6)->(155,9))
          ^ Token(Illegal, "\"", (155,10)->(155,10))
           ^^^^^^^^^ Token(Identifier, "viewable", (155,11)->(155,19))
                   ^ Token(Illegal, "\"", (155,19)->(155,19))
                     ^^^^^^^^^^ Token(Identifier, "variables", (155,21)->(155,30))
                               ^^^^^ Token(Identifier, "give", (155,31)->(155,35))
                                    ^^ Token(Identifier, "a", (155,36)->(155,37))
                                      ^^^^^^ Token(Identifier, "range", (155,38)->(155,43))
                                            ^^^ Token(Identifier, "in", (155,44)->(155,46))
                                               ^^^^^^ Token(Identifier, "which", (155,47)->(155,52))
                                                     ^^^ Token(Identifier, "we", (155,53)->(155,55))
                                                        ^^^^ Token(Identifier, "can", (155,56)->(155,59))
                                                            ^^^^^^^ Token(Identifier, "scroll", (155,60)->(155,66))
                                                                   ^^^^^^ Token(Identifier, "while", (155,67)->(155,72))
                                                                        ^ Token(EndOfLine, "\n", (155,72)->(155,72))
    # keeping the cursor at the same position.
    ^ Token(Illegal, "#", (156,4)->(156,4))
      ^^^^^^^^ Token(Identifier, "keeping", (156,6)->(156,13))
              ^^^^ Token(Identifier, "the", (156,14)->(156,17))
                  ^^^^^^^ Token(Identifier, "cursor", (156,18)->(156,24))
                         ^^^ Token(Identifier, "at", (156,25)->(156,27))
                            ^^^^ Token(Identifier, "the", (156,28)->(156,31))
                                ^^^^^ Token(Identifier, "same", (156,32)->(156,36))
                                     ^^^^^^^^^ Token(Identifier, "position", (156,37)->(156,45))
                                             ^ Token(Illegal, ".", (156,45)->(156,45))
                                              ^ Token(EndOfLine, "\n", (156,46)->(156,46))
    # adjustedScrolloff accounts for very large numbers of scrolloff.
    ^ Token(Illegal, "#", (157,4)->(157,4))
      ^^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (157,6)->(157,23))
                        ^^^^^^^^^ Token(Identifier, "accounts", (157,24)->(157,32))
                                 ^^^^ Token(Identifier, "for", (157,33)->(157,36))
                                     ^^^^^ Token(Identifier, "very", (157,37)->(157,41))
                                          ^^^^^^ Token(Identifier, "large", (157,42)->(157,47))
                                                ^^^^^^^^ Token(Identifier, "numbers", (157,48)->(157,55))
                                                        ^^^ Token(Identifier, "of", (157,56)->(157,58))
                                                           ^^^^^^^^^^ Token(Identifier, "scrolloff", (157,59)->(157,68))
                                                                    ^ Token(Illegal, ".", (157,68)->(157,68))
                                                                     ^ Token(EndOfLine, "\n", (157,69)->(157,69))
    adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
    ^^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (158,4)->(158,21))
                      ^ Token(Equal, "=", (158,22)->(158,22))
                        ^^^^ Token(Identifier, "min", (158,24)->(158,27))
                           ^ Token(LeftParen, "(", (158,27)->(158,27))
                            ^ Token(LeftBracket, "[", (158,28)->(158,28))
                             ^ Token(Illegal, "&", (158,29)->(158,29))
                              ^^^^^^^^^^ Token(Identifier, "scrolloff", (158,30)->(158,39))
                                       ^ Token(Illegal, ",", (158,39)->(158,39))
                                         ^ Token(LeftParen, "(", (158,41)->(158,41))
                                          ^^^^^ Token(Identifier, "line", (158,42)->(158,46))
                                              ^ Token(LeftParen, "(", (158,46)->(158,46))
                                               ^ Token(Illegal, "'", (158,47)->(158,47))
                                                ^^ Token(Identifier, "w", (158,48)->(158,49))
                                                 ^ Token(Illegal, "$", (158,49)->(158,49))
                                                  ^ Token(Illegal, "'", (158,50)->(158,50))
                                                   ^ Token(RightParen, ")", (158,51)->(158,51))
                                                     ^ Token(Minus, "-", (158,53)->(158,53))
                                                       ^^^^^ Token(Identifier, "line", (158,55)->(158,59))
                                                           ^ Token(LeftParen, "(", (158,59)->(158,59))
                                                            ^ Token(Illegal, "'", (158,60)->(158,60))
                                                             ^^^ Token(Identifier, "w0", (158,61)->(158,63))
                                                               ^ Token(Illegal, "'", (158,63)->(158,63))
                                                                ^ Token(RightParen, ")", (158,64)->(158,64))
                                                                 ^ Token(RightParen, ")", (158,65)->(158,65))
                                                                   ^ Token(Div, "/", (158,67)->(158,67))
                                                                     ^^ Token(Integer, "2", (158,69)->(158,70))
                                                                      ^ Token(RightBracket, "]", (158,70)->(158,70))
                                                                       ^ Token(RightParen, ")", (158,71)->(158,71))
                                                                        ^ Token(EndOfLine, "\n", (158,72)->(158,72))
    bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
    ^^^^^^^^^^^^^^^^ Token(Identifier, "bottom_viewable", (159,4)->(159,19))
                    ^ Token(Equal, "=", (159,20)->(159,20))
                      ^^^^ Token(Identifier, "min", (159,22)->(159,25))
                         ^ Token(LeftParen, "(", (159,25)->(159,25))
                          ^ Token(LeftBracket, "[", (159,26)->(159,26))
                           ^^^^^ Token(Identifier, "line", (159,27)->(159,31))
                               ^ Token(LeftParen, "(", (159,31)->(159,31))
                                ^ Token(Illegal, "'", (159,32)->(159,32))
                                 ^ Token(Illegal, "$", (159,33)->(159,33))
                                  ^ Token(Illegal, "'", (159,34)->(159,34))
                                   ^ Token(RightParen, ")", (159,35)->(159,35))
                                    ^ Token(Illegal, ",", (159,36)->(159,36))
                                      ^^^^^^^ Token(Identifier, "c_lnum", (159,38)->(159,44))
                                             ^ Token(Plus, "+", (159,45)->(159,45))
                                               ^ Token(Illegal, "&", (159,47)->(159,47))
                                                ^^^^^^ Token(Identifier, "lines", (159,48)->(159,53))
                                                      ^ Token(Minus, "-", (159,54)->(159,54))
                                                        ^^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (159,56)->(159,73))
                                                                          ^ Token(Minus, "-", (159,74)->(159,74))
                                                                            ^^ Token(Integer, "2", (159,76)->(159,77))
                                                                             ^ Token(RightBracket, "]", (159,77)->(159,77))
                                                                              ^ Token(RightParen, ")", (159,78)->(159,78))
                                                                               ^ Token(EndOfLine, "\n", (159,79)->(159,79))
    top_viewable = max([1, c_lnum - &lines + adjustedScrolloff + 2])
    ^^^^^^^^^^^^^ Token(Identifier, "top_viewable", (160,4)->(160,16))
                 ^ Token(Equal, "=", (160,17)->(160,17))
                   ^^^^ Token(Identifier, "max", (160,19)->(160,22))
                      ^ Token(LeftParen, "(", (160,22)->(160,22))
                       ^ Token(LeftBracket, "[", (160,23)->(160,23))
                        ^^ Token(Integer, "1", (160,24)->(160,25))
                         ^ Token(Illegal, ",", (160,25)->(160,25))
                           ^^^^^^^ Token(Identifier, "c_lnum", (160,27)->(160,33))
                                  ^ Token(Minus, "-", (160,34)->(160,34))
                                    ^ Token(Illegal, "&", (160,36)->(160,36))
                                     ^^^^^^ Token(Identifier, "lines", (160,37)->(160,42))
                                           ^ Token(Plus, "+", (160,43)->(160,43))
                                             ^^^^^^^^^^^^^^^^^^ Token(Identifier, "adjustedScrolloff", (160,45)->(160,62))
                                                               ^ Token(Plus, "+", (160,63)->(160,63))
                                                                 ^^ Token(Integer, "2", (160,65)->(160,66))
                                                                  ^ Token(RightBracket, "]", (160,66)->(160,66))
                                                                   ^ Token(RightParen, ")", (160,67)->(160,67))
                                                                    ^ Token(EndOfLine, "\n", (160,68)->(160,68))
    # one of these stoplines will be adjusted below, but the current values are
    ^ Token(Illegal, "#", (161,4)->(161,4))
      ^^^^ Token(Identifier, "one", (161,6)->(161,9))
          ^^^ Token(Identifier, "of", (161,10)->(161,12))
             ^^^^^^ Token(Identifier, "these", (161,13)->(161,18))
                   ^^^^^^^^^^ Token(Identifier, "stoplines", (161,19)->(161,28))
                             ^^^^^ Token(Identifier, "will", (161,29)->(161,33))
                                  ^^^ Token(Identifier, "be", (161,34)->(161,36))
                                     ^^^^^^^^^ Token(Identifier, "adjusted", (161,37)->(161,45))
                                              ^^^^^^ Token(Identifier, "below", (161,46)->(161,51))
                                                   ^ Token(Illegal, ",", (161,51)->(161,51))
                                                     ^^^^ Token(Identifier, "but", (161,53)->(161,56))
                                                         ^^^^ Token(Identifier, "the", (161,57)->(161,60))
                                                             ^^^^^^^^ Token(Identifier, "current", (161,61)->(161,68))
                                                                     ^^^^^^^ Token(Identifier, "values", (161,69)->(161,75))
                                                                            ^^^^ Token(Identifier, "are", (161,76)->(161,79))
                                                                               ^ Token(EndOfLine, "\n", (161,79)->(161,79))
    # minimal boundaries within the current window
    ^ Token(Illegal, "#", (162,4)->(162,4))
      ^^^^^^^^ Token(Identifier, "minimal", (162,6)->(162,13))
              ^^^^^^^^^^^ Token(Identifier, "boundaries", (162,14)->(162,24))
                         ^^^^^^^ Token(Identifier, "within", (162,25)->(162,31))
                                ^^^^ Token(Identifier, "the", (162,32)->(162,35))
                                    ^^^^^^^^ Token(Identifier, "current", (162,36)->(162,43))
                                            ^^^^^^^ Token(Identifier, "window", (162,44)->(162,50))
                                                  ^ Token(EndOfLine, "\n", (162,50)->(162,50))
    if i % 2 == 0
    ^^^ Token(Identifier, "if", (163,4)->(163,6))
       ^^ Token(Identifier, "i", (163,7)->(163,8))
         ^ Token(Illegal, "%", (163,9)->(163,9))
           ^^ Token(Integer, "2", (163,11)->(163,12))
             ^^ Token(EqualTo, "==", (163,13)->(163,14))
                ^^ Token(Integer, "0", (163,16)->(163,17))
                 ^ Token(EndOfLine, "\n", (163,17)->(163,17))
      var stopbyte = min([line2byte('$'), line2byte('.') + col('.') + &smc * 2])
      ^^^^ Token(Identifier, "var", (164,6)->(164,9))
          ^^^^^^^^^ Token(Identifier, "stopbyte", (164,10)->(164,18))
                   ^ Token(Equal, "=", (164,19)->(164,19))
                     ^^^^ Token(Identifier, "min", (164,21)->(164,24))
                        ^ Token(LeftParen, "(", (164,24)->(164,24))
                         ^ Token(LeftBracket, "[", (164,25)->(164,25))
                          ^^^^^^^^^^ Token(Identifier, "line2byte", (164,26)->(164,35))
                                   ^ Token(LeftParen, "(", (164,35)->(164,35))
                                    ^ Token(Illegal, "'", (164,36)->(164,36))
                                     ^ Token(Illegal, "$", (164,37)->(164,37))
                                      ^ Token(Illegal, "'", (164,38)->(164,38))
                                       ^ Token(RightParen, ")", (164,39)->(164,39))
                                        ^ Token(Illegal, ",", (164,40)->(164,40))
                                          ^^^^^^^^^^ Token(Identifier, "line2byte", (164,42)->(164,51))
                                                   ^ Token(LeftParen, "(", (164,51)->(164,51))
                                                    ^ Token(Illegal, "'", (164,52)->(164,52))
                                                     ^ Token(Illegal, ".", (164,53)->(164,53))
                                                      ^ Token(Illegal, "'", (164,54)->(164,54))
                                                       ^ Token(RightParen, ")", (164,55)->(164,55))
                                                         ^ Token(Plus, "+", (164,57)->(164,57))
                                                           ^^^^ Token(Identifier, "col", (164,59)->(164,62))
                                                              ^ Token(LeftParen, "(", (164,62)->(164,62))
                                                               ^ Token(Illegal, "'", (164,63)->(164,63))
                                                                ^ Token(Illegal, ".", (164,64)->(164,64))
                                                                 ^ Token(Illegal, "'", (164,65)->(164,65))
                                                                  ^ Token(RightParen, ")", (164,66)->(164,66))
                                                                    ^ Token(Plus, "+", (164,68)->(164,68))
                                                                      ^ Token(Illegal, "&", (164,70)->(164,70))
                                                                       ^^^^ Token(Identifier, "smc", (164,71)->(164,74))
                                                                           ^ Token(Mul, "*", (164,75)->(164,75))
                                                                             ^^ Token(Integer, "2", (164,77)->(164,78))
                                                                              ^ Token(RightBracket, "]", (164,78)->(164,78))
                                                                               ^ Token(RightParen, ")", (164,79)->(164,79))
                                                                                ^ Token(EndOfLine, "\n", (164,80)->(164,80))
      stopline = min([bottom_viewable, byte2line(stopbyte)])
      ^^^^^^^^^ Token(Identifier, "stopline", (165,6)->(165,14))
               ^ Token(Equal, "=", (165,15)->(165,15))
                 ^^^^ Token(Identifier, "min", (165,17)->(165,20))
                    ^ Token(LeftParen, "(", (165,20)->(165,20))
                     ^ Token(LeftBracket, "[", (165,21)->(165,21))
                      ^^^^^^^^^^^^^^^^ Token(Identifier, "bottom_viewable", (165,22)->(165,37))
                                     ^ Token(Illegal, ",", (165,37)->(165,37))
                                       ^^^^^^^^^^ Token(Identifier, "byte2line", (165,39)->(165,48))
                                                ^ Token(LeftParen, "(", (165,48)->(165,48))
                                                 ^^^^^^^^^ Token(Identifier, "stopbyte", (165,49)->(165,57))
                                                         ^ Token(RightParen, ")", (165,57)->(165,57))
                                                          ^ Token(RightBracket, "]", (165,58)->(165,58))
                                                           ^ Token(RightParen, ")", (165,59)->(165,59))
                                                            ^ Token(EndOfLine, "\n", (165,60)->(165,60))
      stoplinebottom = stopline
      ^^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (166,6)->(166,20))
                     ^ Token(Equal, "=", (166,21)->(166,21))
                       ^^^^^^^^^ Token(Identifier, "stopline", (166,23)->(166,31))
                               ^ Token(EndOfLine, "\n", (166,31)->(166,31))
    else
    ^^^^^ Token(Identifier, "else", (167,4)->(167,8))
        ^ Token(EndOfLine, "\n", (167,8)->(167,8))
      var stopbyte = max([1, line2byte('.') + col('.') - &smc * 2])
      ^^^^ Token(Identifier, "var", (168,6)->(168,9))
          ^^^^^^^^^ Token(Identifier, "stopbyte", (168,10)->(168,18))
                   ^ Token(Equal, "=", (168,19)->(168,19))
                     ^^^^ Token(Identifier, "max", (168,21)->(168,24))
                        ^ Token(LeftParen, "(", (168,24)->(168,24))
                         ^ Token(LeftBracket, "[", (168,25)->(168,25))
                          ^^ Token(Integer, "1", (168,26)->(168,27))
                           ^ Token(Illegal, ",", (168,27)->(168,27))
                             ^^^^^^^^^^ Token(Identifier, "line2byte", (168,29)->(168,38))
                                      ^ Token(LeftParen, "(", (168,38)->(168,38))
                                       ^ Token(Illegal, "'", (168,39)->(168,39))
                                        ^ Token(Illegal, ".", (168,40)->(168,40))
                                         ^ Token(Illegal, "'", (168,41)->(168,41))
                                          ^ Token(RightParen, ")", (168,42)->(168,42))
                                            ^ Token(Plus, "+", (168,44)->(168,44))
                                              ^^^^ Token(Identifier, "col", (168,46)->(168,49))
                                                 ^ Token(LeftParen, "(", (168,49)->(168,49))
                                                  ^ Token(Illegal, "'", (168,50)->(168,50))
                                                   ^ Token(Illegal, ".", (168,51)->(168,51))
                                                    ^ Token(Illegal, "'", (168,52)->(168,52))
                                                     ^ Token(RightParen, ")", (168,53)->(168,53))
                                                       ^ Token(Minus, "-", (168,55)->(168,55))
                                                         ^ Token(Illegal, "&", (168,57)->(168,57))
                                                          ^^^^ Token(Identifier, "smc", (168,58)->(168,61))
                                                              ^ Token(Mul, "*", (168,62)->(168,62))
                                                                ^^ Token(Integer, "2", (168,64)->(168,65))
                                                                 ^ Token(RightBracket, "]", (168,65)->(168,65))
                                                                  ^ Token(RightParen, ")", (168,66)->(168,66))
                                                                   ^ Token(EndOfLine, "\n", (168,67)->(168,67))
      stopline = max([top_viewable, byte2line(stopbyte)])
      ^^^^^^^^^ Token(Identifier, "stopline", (169,6)->(169,14))
               ^ Token(Equal, "=", (169,15)->(169,15))
                 ^^^^ Token(Identifier, "max", (169,17)->(169,20))
                    ^ Token(LeftParen, "(", (169,20)->(169,20))
                     ^ Token(LeftBracket, "[", (169,21)->(169,21))
                      ^^^^^^^^^^^^^ Token(Identifier, "top_viewable", (169,22)->(169,34))
                                  ^ Token(Illegal, ",", (169,34)->(169,34))
                                    ^^^^^^^^^^ Token(Identifier, "byte2line", (169,36)->(169,45))
                                             ^ Token(LeftParen, "(", (169,45)->(169,45))
                                              ^^^^^^^^^ Token(Identifier, "stopbyte", (169,46)->(169,54))
                                                      ^ Token(RightParen, ")", (169,54)->(169,54))
                                                       ^ Token(RightBracket, "]", (169,55)->(169,55))
                                                        ^ Token(RightParen, ")", (169,56)->(169,56))
                                                         ^ Token(EndOfLine, "\n", (169,57)->(169,57))
      stoplinetop = stopline
      ^^^^^^^^^^^^ Token(Identifier, "stoplinetop", (170,6)->(170,17))
                  ^ Token(Equal, "=", (170,18)->(170,18))
                    ^^^^^^^^^ Token(Identifier, "stopline", (170,20)->(170,28))
                            ^ Token(EndOfLine, "\n", (170,28)->(170,28))
    endif
    ^^^^^^ Token(Identifier, "endif", (171,4)->(171,9))
         ^ Token(EndOfLine, "\n", (171,9)->(171,9))
    [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    ^ Token(LeftBracket, "[", (172,4)->(172,4))
     ^^^^^^^ Token(Identifier, "m_lnum", (172,5)->(172,11))
           ^ Token(Illegal, ",", (172,11)->(172,11))
             ^^^^^^ Token(Identifier, "m_col", (172,13)->(172,18))
                  ^ Token(RightBracket, "]", (172,18)->(172,18))
                    ^ Token(Equal, "=", (172,20)->(172,20))
                      ^^^^^^^^^^^^^^ Token(Identifier, "searchpairpos", (172,22)->(172,35))
                                   ^ Token(LeftParen, "(", (172,35)->(172,35))
                                    ^^ Token(Identifier, "c", (172,36)->(172,37))
                                     ^ Token(Illegal, ",", (172,37)->(172,37))
                                       ^ Token(Illegal, "'", (172,39)->(172,39))
                                        ^ Token(Illegal, "'", (172,40)->(172,40))
                                         ^ Token(Illegal, ",", (172,41)->(172,41))
                                           ^^^ Token(Identifier, "c2", (172,43)->(172,45))
                                             ^ Token(Illegal, ",", (172,45)->(172,45))
                                               ^^^^^^^^ Token(Identifier, "s_flags", (172,47)->(172,54))
                                                      ^ Token(Illegal, ",", (172,54)->(172,54))
                                                        ^^^^^^^ Token(Identifier, "s_skip", (172,56)->(172,62))
                                                              ^ Token(Illegal, ",", (172,62)->(172,62))
                                                                ^^^^^^^^^ Token(Identifier, "stopline", (172,64)->(172,72))
                                                                        ^ Token(RightParen, ")", (172,72)->(172,72))
                                                                         ^ Token(EndOfLine, "\n", (172,73)->(172,73))
  endtry
  ^^^^^^^ Token(Identifier, "endtry", (173,2)->(173,8))
        ^ Token(EndOfLine, "\n", (173,8)->(173,8))

^ Token(EndOfLine, "\n", (174,0)->(174,0))
  if before > 0
  ^^^ Token(Identifier, "if", (175,2)->(175,4))
     ^^^^^^^ Token(Identifier, "before", (175,5)->(175,11))
            ^ Token(GreaterThan, ">", (175,12)->(175,12))
              ^^ Token(Integer, "0", (175,14)->(175,15))
               ^ Token(EndOfLine, "\n", (175,15)->(175,15))
    setpos('.', save_cursor)
    ^^^^^^^ Token(Identifier, "setpos", (176,4)->(176,10))
          ^ Token(LeftParen, "(", (176,10)->(176,10))
           ^ Token(Illegal, "'", (176,11)->(176,11))
            ^ Token(Illegal, ".", (176,12)->(176,12))
             ^ Token(Illegal, "'", (176,13)->(176,13))
              ^ Token(Illegal, ",", (176,14)->(176,14))
                ^^^^^^^^^^^^ Token(Identifier, "save_cursor", (176,16)->(176,27))
                           ^ Token(RightParen, ")", (176,27)->(176,27))
                            ^ Token(EndOfLine, "\n", (176,28)->(176,28))
  endif
  ^^^^^^ Token(Identifier, "endif", (177,2)->(177,7))
       ^ Token(EndOfLine, "\n", (177,7)->(177,7))

^ Token(EndOfLine, "\n", (178,0)->(178,0))
  # If a match is found setup match highlighting.
  ^ Token(Illegal, "#", (179,2)->(179,2))
    ^^^ Token(Identifier, "If", (179,4)->(179,6))
       ^^ Token(Identifier, "a", (179,7)->(179,8))
         ^^^^^^ Token(Identifier, "match", (179,9)->(179,14))
               ^^^ Token(Identifier, "is", (179,15)->(179,17))
                  ^^^^^^ Token(Identifier, "found", (179,18)->(179,23))
                        ^^^^^^ Token(Identifier, "setup", (179,24)->(179,29))
                              ^^^^^^ Token(Identifier, "match", (179,30)->(179,35))
                                    ^^^^^^^^^^^^^ Token(Identifier, "highlighting", (179,36)->(179,48))
                                                ^ Token(Illegal, ".", (179,48)->(179,48))
                                                 ^ Token(EndOfLine, "\n", (179,49)->(179,49))
  if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
  ^^^ Token(Identifier, "if", (180,2)->(180,4))
     ^^^^^^^ Token(Identifier, "m_lnum", (180,5)->(180,11))
            ^ Token(GreaterThan, ">", (180,12)->(180,12))
              ^^ Token(Integer, "0", (180,14)->(180,15))
                ^^ Token(And, "&&", (180,16)->(180,17))
                   ^^^^^^^ Token(Identifier, "m_lnum", (180,19)->(180,25))
                          ^^ Token(GreaterThanOrEqual, ">=", (180,26)->(180,27))
                             ^^^^^^^^^^^^ Token(Identifier, "stoplinetop", (180,29)->(180,40))
                                         ^^ Token(And, "&&", (180,41)->(180,42))
                                            ^^^^^^^ Token(Identifier, "m_lnum", (180,44)->(180,50))
                                                   ^^ Token(LessThanOrEqual, "<=", (180,51)->(180,52))
                                                      ^^^^^^^^^^^^^^^ Token(Identifier, "stoplinebottom", (180,54)->(180,68))
                                                                     ^ Token(EndOfLine, "\n", (180,69)->(180,69))
    matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
    ^^^^^^^^^^^^ Token(Identifier, "matchaddpos", (181,4)->(181,15))
               ^ Token(LeftParen, "(", (181,15)->(181,15))
                ^ Token(Illegal, "'", (181,16)->(181,16))
                 ^^^^^^^^^^^ Token(Identifier, "MatchParen", (181,17)->(181,27))
                           ^ Token(Illegal, "'", (181,27)->(181,27))
                            ^ Token(Illegal, ",", (181,28)->(181,28))
                              ^ Token(LeftBracket, "[", (181,30)->(181,30))
                               ^ Token(LeftBracket, "[", (181,31)->(181,31))
                                ^^^^^^^ Token(Identifier, "c_lnum", (181,32)->(181,38))
                                      ^ Token(Illegal, ",", (181,38)->(181,38))
                                        ^^^^^^ Token(Identifier, "c_col", (181,40)->(181,45))
                                              ^ Token(Minus, "-", (181,46)->(181,46))
                                                ^^^^^^^ Token(Identifier, "before", (181,48)->(181,54))
                                                      ^ Token(RightBracket, "]", (181,54)->(181,54))
                                                       ^ Token(Illegal, ",", (181,55)->(181,55))
                                                         ^ Token(LeftBracket, "[", (181,57)->(181,57))
                                                          ^^^^^^^ Token(Identifier, "m_lnum", (181,58)->(181,64))
                                                                ^ Token(Illegal, ",", (181,64)->(181,64))
                                                                  ^^^^^^ Token(Identifier, "m_col", (181,66)->(181,71))
                                                                       ^ Token(RightBracket, "]", (181,71)->(181,71))
                                                                        ^ Token(RightBracket, "]", (181,72)->(181,72))
                                                                         ^ Token(Illegal, ",", (181,73)->(181,73))
                                                                           ^^^ Token(Integer, "10", (181,75)->(181,77))
                                                                             ^ Token(Illegal, ",", (181,77)->(181,77))
                                                                               ^^ Token(Integer, "3", (181,79)->(181,80))
                                                                                ^ Token(RightParen, ")", (181,80)->(181,80))
                                                                                 ^ Token(EndOfLine, "\n", (181,81)->(181,81))
    w:paren_hl_on = 1
    ^^ Token(Identifier, "w", (182,4)->(182,5))
     ^ Token(Colon, ":", (182,5)->(182,5))
      ^^^^^^^^^^^^ Token(Identifier, "paren_hl_on", (182,6)->(182,17))
                  ^ Token(Equal, "=", (182,18)->(182,18))
                    ^^ Token(Integer, "1", (182,20)->(182,21))
                     ^ Token(EndOfLine, "\n", (182,21)->(182,21))
  endif
  ^^^^^^ Token(Identifier, "endif", (183,2)->(183,7))
       ^ Token(EndOfLine, "\n", (183,7)->(183,7))
enddef
^^^^^^^ Token(Identifier, "enddef", (184,0)->(184,6))
      ^ Token(EndOfLine, "\n", (184,6)->(184,6))

^ Token(EndOfLine, "\n", (185,0)->(185,0))
def Remove_Matches()
^^^^ Token(Identifier, "def", (186,0)->(186,3))
    ^^^^^^^^^^^^^^^ Token(Identifier, "Remove_Matches", (186,4)->(186,18))
                  ^ Token(LeftParen, "(", (186,18)->(186,18))
                   ^ Token(RightParen, ")", (186,19)->(186,19))
                    ^ Token(EndOfLine, "\n", (186,20)->(186,20))
  if exists('w:paren_hl_on') && w:paren_hl_on
  ^^^ Token(Identifier, "if", (187,2)->(187,4))
     ^^^^^^^ Token(Identifier, "exists", (187,5)->(187,11))
           ^ Token(LeftParen, "(", (187,11)->(187,11))
            ^ Token(Illegal, "'", (187,12)->(187,12))
             ^^ Token(Identifier, "w", (187,13)->(187,14))
              ^ Token(Colon, ":", (187,14)->(187,14))
               ^^^^^^^^^^^^ Token(Identifier, "paren_hl_on", (187,15)->(187,26))
                          ^ Token(Illegal, "'", (187,26)->(187,26))
                           ^ Token(RightParen, ")", (187,27)->(187,27))
                             ^^ Token(And, "&&", (187,29)->(187,30))
                                ^^ Token(Identifier, "w", (187,32)->(187,33))
                                 ^ Token(Colon, ":", (187,33)->(187,33))
                                  ^^^^^^^^^^^^ Token(Identifier, "paren_hl_on", (187,34)->(187,45))
                                             ^ Token(EndOfLine, "\n", (187,45)->(187,45))
    silent! matchdelete(3)
    ^^^^^^^ Token(Identifier, "silent", (188,4)->(188,10))
          ^ Token(Illegal, "!", (188,10)->(188,10))
            ^^^^^^^^^^^^ Token(Identifier, "matchdelete", (188,12)->(188,23))
                       ^ Token(LeftParen, "(", (188,23)->(188,23))
                        ^^ Token(Integer, "3", (188,24)->(188,25))
                         ^ Token(RightParen, ")", (188,25)->(188,25))
                          ^ Token(EndOfLine, "\n", (188,26)->(188,26))
    w:paren_hl_on = 0
    ^^ Token(Identifier, "w", (189,4)->(189,5))
     ^ Token(Colon, ":", (189,5)->(189,5))
      ^^^^^^^^^^^^ Token(Identifier, "paren_hl_on", (189,6)->(189,17))
                  ^ Token(Equal, "=", (189,18)->(189,18))
                    ^^ Token(Integer, "0", (189,20)->(189,21))
                     ^ Token(EndOfLine, "\n", (189,21)->(189,21))
  endif
  ^^^^^^ Token(Identifier, "endif", (190,2)->(190,7))
       ^ Token(EndOfLine, "\n", (190,7)->(190,7))
enddef
^^^^^^^ Token(Identifier, "enddef", (191,0)->(191,6))
      ^ Token(EndOfLine, "\n", (191,6)->(191,6))

^ Token(EndOfLine, "\n", (192,0)->(192,0))

^ Token(EndOfLine, "\n", (193,0)->(193,0))
# Define commands that will disable and enable the plugin.
^ Token(Illegal, "#", (194,0)->(194,0))
  ^^^^^^^ Token(Identifier, "Define", (194,2)->(194,8))
         ^^^^^^^^^ Token(Identifier, "commands", (194,9)->(194,17))
                  ^^^^^ Token(Identifier, "that", (194,18)->(194,22))
                       ^^^^^ Token(Identifier, "will", (194,23)->(194,27))
                            ^^^^^^^^ Token(Identifier, "disable", (194,28)->(194,35))
                                    ^^^^ Token(Identifier, "and", (194,36)->(194,39))
                                        ^^^^^^^ Token(Identifier, "enable", (194,40)->(194,46))
                                               ^^^^ Token(Identifier, "the", (194,47)->(194,50))
                                                   ^^^^^^^ Token(Identifier, "plugin", (194,51)->(194,57))
                                                         ^ Token(Illegal, ".", (194,57)->(194,57))
                                                          ^ Token(EndOfLine, "\n", (194,58)->(194,58))
command DoMatchParen {
^^^^^^^^ Token(Identifier, "command", (195,0)->(195,7))
        ^^^^^^^^^^^^^ Token(Identifier, "DoMatchParen", (195,8)->(195,20))
                     ^ Token(LeftBrace, "{", (195,21)->(195,21))
                      ^ Token(EndOfLine, "\n", (195,22)->(195,22))
    DoMatchParen()
    ^^^^^^^^^^^^^ Token(Identifier, "DoMatchParen", (196,4)->(196,16))
                ^ Token(LeftParen, "(", (196,16)->(196,16))
                 ^ Token(RightParen, ")", (196,17)->(196,17))
                  ^ Token(EndOfLine, "\n", (196,18)->(196,18))
  }
  ^ Token(RightBrace, "}", (197,2)->(197,2))
   ^ Token(EndOfLine, "\n", (197,3)->(197,3))
command NoMatchParen {
^^^^^^^^ Token(Identifier, "command", (198,0)->(198,7))
        ^^^^^^^^^^^^^ Token(Identifier, "NoMatchParen", (198,8)->(198,20))
                     ^ Token(LeftBrace, "{", (198,21)->(198,21))
                      ^ Token(EndOfLine, "\n", (198,22)->(198,22))
    NoMatchParen()
    ^^^^^^^^^^^^^ Token(Identifier, "NoMatchParen", (199,4)->(199,16))
                ^ Token(LeftParen, "(", (199,16)->(199,16))
                 ^ Token(RightParen, ")", (199,17)->(199,17))
                  ^ Token(EndOfLine, "\n", (199,18)->(199,18))
  }
  ^ Token(RightBrace, "}", (200,2)->(200,2))
   ^ Token(EndOfLine, "\n", (200,3)->(200,3))

^ Token(EndOfLine, "\n", (201,0)->(201,0))
def NoMatchParen()
^^^^ Token(Identifier, "def", (202,0)->(202,3))
    ^^^^^^^^^^^^^ Token(Identifier, "NoMatchParen", (202,4)->(202,16))
                ^ Token(LeftParen, "(", (202,16)->(202,16))
                 ^ Token(RightParen, ")", (202,17)->(202,17))
                  ^ Token(EndOfLine, "\n", (202,18)->(202,18))
  var w = winnr()
  ^^^^ Token(Identifier, "var", (203,2)->(203,5))
      ^^ Token(Identifier, "w", (203,6)->(203,7))
        ^ Token(Equal, "=", (203,8)->(203,8))
          ^^^^^^ Token(Identifier, "winnr", (203,10)->(203,15))
               ^ Token(LeftParen, "(", (203,15)->(203,15))
                ^ Token(RightParen, ")", (203,16)->(203,16))
                 ^ Token(EndOfLine, "\n", (203,17)->(203,17))
  noau windo silent! call matchdelete(3)
  ^^^^^ Token(Identifier, "noau", (204,2)->(204,6))
       ^^^^^^ Token(Identifier, "windo", (204,7)->(204,12))
             ^^^^^^^ Token(Identifier, "silent", (204,13)->(204,19))
                   ^ Token(Illegal, "!", (204,19)->(204,19))
                     ^^^^^ Token(Identifier, "call", (204,21)->(204,25))
                          ^^^^^^^^^^^^ Token(Identifier, "matchdelete", (204,26)->(204,37))
                                     ^ Token(LeftParen, "(", (204,37)->(204,37))
                                      ^^ Token(Integer, "3", (204,38)->(204,39))
                                       ^ Token(RightParen, ")", (204,39)->(204,39))
                                        ^ Token(EndOfLine, "\n", (204,40)->(204,40))
  unlet! g:loaded_matchparen
  ^^^^^^ Token(Identifier, "unlet", (205,2)->(205,7))
       ^ Token(Illegal, "!", (205,7)->(205,7))
         ^^ Token(Identifier, "g", (205,9)->(205,10))
          ^ Token(Colon, ":", (205,10)->(205,10))
           ^^^^^^^^^^^^^^^^^^ Token(Identifier, "loaded_matchparen", (205,11)->(205,28))
                            ^ Token(EndOfLine, "\n", (205,28)->(205,28))
  exe 'noau :' .. w .. 'wincmd w'
  ^^^^ Token(Identifier, "exe", (206,2)->(206,5))
      ^ Token(Illegal, "'", (206,6)->(206,6))
       ^^^^^ Token(Identifier, "noau", (206,7)->(206,11))
            ^ Token(Colon, ":", (206,12)->(206,12))
             ^ Token(Illegal, "'", (206,13)->(206,13))
               ^ Token(Illegal, ".", (206,15)->(206,15))
                ^ Token(Illegal, ".", (206,16)->(206,16))
                  ^^ Token(Identifier, "w", (206,18)->(206,19))
                    ^ Token(Illegal, ".", (206,20)->(206,20))
                     ^ Token(Illegal, ".", (206,21)->(206,21))
                       ^ Token(Illegal, "'", (206,23)->(206,23))
                        ^^^^^^^ Token(Identifier, "wincmd", (206,24)->(206,30))
                               ^^ Token(Identifier, "w", (206,31)->(206,32))
                                ^ Token(Illegal, "'", (206,32)->(206,32))
                                 ^ Token(EndOfLine, "\n", (206,33)->(206,33))
  au! matchparen
  ^^^ Token(Identifier, "au", (207,2)->(207,4))
    ^ Token(Illegal, "!", (207,4)->(207,4))
      ^^^^^^^^^^^ Token(Identifier, "matchparen", (207,6)->(207,16))
                ^ Token(EndOfLine, "\n", (207,16)->(207,16))
enddef
^^^^^^^ Token(Identifier, "enddef", (208,0)->(208,6))
      ^ Token(EndOfLine, "\n", (208,6)->(208,6))

^ Token(EndOfLine, "\n", (209,0)->(209,0))
def DoMatchParen()
^^^^ Token(Identifier, "def", (210,0)->(210,3))
    ^^^^^^^^^^^^^ Token(Identifier, "DoMatchParen", (210,4)->(210,16))
                ^ Token(LeftParen, "(", (210,16)->(210,16))
                 ^ Token(RightParen, ")", (210,17)->(210,17))
                  ^ Token(EndOfLine, "\n", (210,18)->(210,18))
  runtime plugin/matchparen.vim
  ^^^^^^^^ Token(Identifier, "runtime", (211,2)->(211,9))
          ^^^^^^^ Token(Identifier, "plugin", (211,10)->(211,16))
                ^ Token(Div, "/", (211,16)->(211,16))
                 ^^^^^^^^^^^ Token(Identifier, "matchparen", (211,17)->(211,27))
                           ^ Token(Illegal, ".", (211,27)->(211,27))
                            ^^^^ Token(Identifier, "vim", (211,28)->(211,31))
                               ^ Token(EndOfLine, "\n", (211,31)->(211,31))
  var w = winnr()
  ^^^^ Token(Identifier, "var", (212,2)->(212,5))
      ^^ Token(Identifier, "w", (212,6)->(212,7))
        ^ Token(Equal, "=", (212,8)->(212,8))
          ^^^^^^ Token(Identifier, "winnr", (212,10)->(212,15))
               ^ Token(LeftParen, "(", (212,15)->(212,15))
                ^ Token(RightParen, ")", (212,16)->(212,16))
                 ^ Token(EndOfLine, "\n", (212,17)->(212,17))
  silent windo doau CursorMoved
  ^^^^^^^ Token(Identifier, "silent", (213,2)->(213,8))
         ^^^^^^ Token(Identifier, "windo", (213,9)->(213,14))
               ^^^^^ Token(Identifier, "doau", (213,15)->(213,19))
                    ^^^^^^^^^^^^ Token(Identifier, "CursorMoved", (213,20)->(213,31))
                               ^ Token(EndOfLine, "\n", (213,31)->(213,31))
  exe 'noau :' .. w .. 'wincmd w'
  ^^^^ Token(Identifier, "exe", (214,2)->(214,5))
      ^ Token(Illegal, "'", (214,6)->(214,6))
       ^^^^^ Token(Identifier, "noau", (214,7)->(214,11))
            ^ Token(Colon, ":", (214,12)->(214,12))
             ^ Token(Illegal, "'", (214,13)->(214,13))
               ^ Token(Illegal, ".", (214,15)->(214,15))
                ^ Token(Illegal, ".", (214,16)->(214,16))
                  ^^ Token(Identifier, "w", (214,18)->(214,19))
                    ^ Token(Illegal, ".", (214,20)->(214,20))
                     ^ Token(Illegal, ".", (214,21)->(214,21))
                       ^ Token(Illegal, "'", (214,23)->(214,23))
                        ^^^^^^^ Token(Identifier, "wincmd", (214,24)->(214,30))
                               ^^ Token(Identifier, "w", (214,31)->(214,32))
                                ^ Token(Illegal, "'", (214,32)->(214,32))
                                 ^ Token(EndOfLine, "\n", (214,33)->(214,33))
enddef
^^^^^^^ Token(Identifier, "enddef", (215,0)->(215,6))
      ^ Token(EndOfLine, "\n", (215,6)->(215,6))

^ Token(EndOfLine, "\n", (216,0)->(216,0))
# vim:ts=2:et:
^ Token(Illegal, "#", (217,0)->(217,0))
  ^^^^ Token(Identifier, "vim", (217,2)->(217,5))
     ^ Token(Colon, ":", (217,5)->(217,5))
      ^^^ Token(Identifier, "ts", (217,6)->(217,8))
        ^ Token(Equal, "=", (217,8)->(217,8))
         ^^ Token(Integer, "2", (217,9)->(217,10))
          ^ Token(Colon, ":", (217,10)->(217,10))
           ^^^ Token(Identifier, "et", (217,11)->(217,13))
             ^ Token(Colon, ":", (217,13)->(217,13))
              ^ Token(EndOfLine, "\n", (217,14)->(217,14))

