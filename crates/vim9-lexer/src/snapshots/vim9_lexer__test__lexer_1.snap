---
source: src/lib.rs
assertion_line: 369
expression: snapshot_lexing(contents)
---
vim9script
^^^^^^^^^^^Token(Identifier, "vim9script", (0,0)->(0,10))
          ^Token(NewLine, "\n", (0,10)->(0,10))

^Token(NewLine, "\n", (1,0)->(1,0))
var five = 5
^^^^Token(Identifier, "var", (2,0)->(2,3))
    ^^^^^Token(Identifier, "five", (2,4)->(2,8))
         ^Token(Equal, "=", (2,9)->(2,9))
           ^^Token(Integer, "5", (2,11)->(2,12))
            ^Token(NewLine, "\n", (2,12)->(2,12))
var ten = 10
^^^^Token(Identifier, "var", (3,0)->(3,3))
    ^^^^Token(Identifier, "ten", (3,4)->(3,7))
        ^Token(Equal, "=", (3,8)->(3,8))
          ^^^Token(Integer, "10", (3,10)->(3,12))
            ^Token(NewLine, "\n", (3,12)->(3,12))

^Token(NewLine, "\n", (4,0)->(4,0))
def Add(x: number, y: number): number
^^^^Token(Identifier, "def", (5,0)->(5,3))
    ^^^^Token(Identifier, "Add", (5,4)->(5,7))
       ^Token(Illegal, "(", (5,7)->(5,7))
        ^^Token(Identifier, "x", (5,8)->(5,9))
         ^Token(Colon, ":", (5,9)->(5,9))
           ^^^^^^^Token(Identifier, "number", (5,11)->(5,17))
                 ^Token(Illegal, ",", (5,17)->(5,17))
                   ^^Token(Identifier, "y", (5,19)->(5,20))
                    ^Token(Colon, ":", (5,20)->(5,20))
                      ^^^^^^^Token(Identifier, "number", (5,22)->(5,28))
                            ^Token(Illegal, ")", (5,28)->(5,28))
                             ^Token(Colon, ":", (5,29)->(5,29))
                               ^^^^^^^Token(Identifier, "number", (5,31)->(5,37))
                                     ^Token(NewLine, "\n", (5,37)->(5,37))
	return x + y
 ^^^^^^^Token(Identifier, "return", (6,1)->(6,7))
        ^^Token(Identifier, "x", (6,8)->(6,9))
          ^Token(Plus, "+", (6,10)->(6,10))
            ^^Token(Identifier, "y", (6,12)->(6,13))
             ^Token(NewLine, "\n", (6,13)->(6,13))
enddef
^^^^^^^Token(Identifier, "enddef", (7,0)->(7,6))
      ^Token(NewLine, "\n", (7,6)->(7,6))

^Token(NewLine, "\n", (8,0)->(8,0))
var result = Add(five, ten)
^^^^Token(Identifier, "var", (9,0)->(9,3))
    ^^^^^^^Token(Identifier, "result", (9,4)->(9,10))
           ^Token(Equal, "=", (9,11)->(9,11))
             ^^^^Token(Identifier, "Add", (9,13)->(9,16))
                ^Token(Illegal, "(", (9,16)->(9,16))
                 ^^^^^Token(Identifier, "five", (9,17)->(9,21))
                     ^Token(Illegal, ",", (9,21)->(9,21))
                       ^^^^Token(Identifier, "ten", (9,23)->(9,26))
                          ^Token(Illegal, ")", (9,26)->(9,26))
                           ^Token(NewLine, "\n", (9,27)->(9,27))
echo result
^^^^^Token(Identifier, "echo", (10,0)->(10,4))
     ^^^^^^^Token(Identifier, "result", (10,5)->(10,11))
           ^Token(NewLine, "\n", (10,11)->(10,11))

^Token(NewLine, "\n", (11,0)->(11,0))

