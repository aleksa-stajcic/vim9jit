---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2719
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (2,0)->(2,3)),
            ty: None,
            name: Raw(s),
            equal: Token(Equal, (2,6)->(2,7)),
            expr: String(
                DoubleQuote(
                    "hello",
                ),
            ),
            eol: Token(EndOfLine, (2,15)->(2,15)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (3,0)->(3,3)),
            ty: None,
            name: Raw(l),
            equal: Token(Equal, (3,6)->(3,7)),
            expr: MethodCall(
                MethodCall {
                    left: Identifier(
                        Raw(s),
                    ),
                    tok: Token(MethodArrow, (3,9)->(3,11)),
                    right: f: Identifier(Raw(len)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (3,16)->(3,16)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (4,0)->(4,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (5,0)->(5,3)),
            ty: None,
            name: Raw(l2),
            equal: Token(Equal, (5,7)->(5,8)),
            expr: MethodCall(
                MethodCall {
                    left: String(
                        DoubleQuote(
                            "hello",
                        ),
                    ),
                    tok: Token(MethodArrow, (5,16)->(5,18)),
                    right: f: Identifier(Raw(len)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (5,23)->(5,23)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (6,0)->(6,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (7,0)->(7,3)),
            ty: None,
            name: Raw(x),
            equal: Token(Equal, (7,6)->(7,7)),
            expr: MethodCall(
                MethodCall {
                    left: MethodCall(
                        MethodCall {
                            left: MethodCall(
                                MethodCall {
                                    left: MethodCall(
                                        MethodCall {
                                            left: Array(
                                                ArrayLiteral {
                                                    open: Token(LeftBracket, (7,8)->(7,9)),
                                                    elements: [
                                                        Number(
                                                            Number(5),
                                                        ),
                                                        Number(
                                                            Number(4),
                                                        ),
                                                        Number(
                                                            Number(2),
                                                        ),
                                                        Number(
                                                            Number(1),
                                                        ),
                                                        Number(
                                                            Number(7),
                                                        ),
                                                        Number(
                                                            Number(12),
                                                        ),
                                                        Number(
                                                            Number(8),
                                                        ),
                                                    ],
                                                    close: Token(RightBracket, (7,29)->(7,30)),
                                                },
                                            ),
                                            tok: Token(MethodArrow, (7,30)->(7,32)),
                                            right: f: Identifier(Raw(sort)) arg: [],
                                        },
                                    ),
                                    tok: Token(MethodArrow, (8,5)->(8,7)),
                                    right: f: Identifier(Raw(filter)) arg: [
                                        Lambda(
                                            Lambda {
                                                args: Signature {
                                                    open: Token(LeftParen, (8,14)->(8,15)),
                                                    params: [
                                                        Parameter {
                                                            name: Raw(_),
                                                            ty: None,
                                                            equal: None,
                                                            default_val: None,
                                                        },
                                                        Parameter {
                                                            name: Raw(x),
                                                            ty: None,
                                                            equal: None,
                                                            default_val: None,
                                                        },
                                                    ],
                                                    close: Token(RightParen, (8,19)->(8,20)),
                                                },
                                                ret: None,
                                                arrow: Token(Arrow, (8,21)->(8,23)),
                                                body: Body {
                                                    commands: [
                                                        Return(
                                                            ReturnCommand {
                                                                ret: Token(Virtual, (0,0)->(0,0)),
                                                                expr: Some(
                                                                    Infix(
                                                                        InfixExpression {
                                                                            token: Token(EqualTo, "==", (8,30)->(8,32)),
                                                                            operator: EqualTo,
                                                                            left: Infix(
                                                                                InfixExpression {
                                                                                    token: Token(Percent, "%", (8,26)->(8,27)),
                                                                                    operator: Modulo,
                                                                                    left: Identifier(
                                                                                        Raw(x),
                                                                                    ),
                                                                                    right: Number(
                                                                                        Number(2),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            right: Number(
                                                                                Number(0),
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                eol: Token(Virtual, (0,0)->(0,0)),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                            tok: Token(MethodArrow, (9,5)->(9,7)),
                            right: f: Identifier(Raw(map)) arg: [
                                Lambda(
                                    Lambda {
                                        args: Signature {
                                            open: Token(LeftParen, (9,11)->(9,12)),
                                            params: [
                                                Parameter {
                                                    name: Raw(_),
                                                    ty: None,
                                                    equal: None,
                                                    default_val: None,
                                                },
                                                Parameter {
                                                    name: Raw(y),
                                                    ty: None,
                                                    equal: None,
                                                    default_val: None,
                                                },
                                            ],
                                            close: Token(RightParen, (9,16)->(9,17)),
                                        },
                                        ret: None,
                                        arrow: Token(Arrow, (9,18)->(9,20)),
                                        body: Body {
                                            commands: [
                                                Return(
                                                    ReturnCommand {
                                                        ret: Token(Virtual, (0,0)->(0,0)),
                                                        expr: Some(
                                                            Infix(
                                                                InfixExpression {
                                                                    token: Token(Plus, "+", (9,23)->(9,24)),
                                                                    operator: Plus,
                                                                    left: Identifier(
                                                                        Raw(y),
                                                                    ),
                                                                    right: Number(
                                                                        Number(1),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        eol: Token(Virtual, (0,0)->(0,0)),
                                                    },
                                                ),
                                            ],
                                        },
                                    },
                                ),
                            ],
                        },
                    ),
                    tok: Token(MethodArrow, (10,5)->(10,7)),
                    right: f: Identifier(Raw(sort)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (10,13)->(10,13)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (11,0)->(11,0)),
    ),
    Comment(
        Token(Comment, "# should be (-1.234)->string()", (12,0)->(12,30)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (13,0)->(13,3)),
            ty: None,
            name: Raw(expr_prec),
            equal: Token(Equal, (13,14)->(13,15)),
            expr: Prefix(
                PrefixExpression {
                    token: Token(Minus, (13,16)->(13,17)),
                    operator: Minus,
                    right: MethodCall(
                        MethodCall {
                            left: Number(
                                Number(1.234),
                            ),
                            tok: Token(MethodArrow, (13,22)->(13,24)),
                            right: f: Identifier(Raw(string)) arg: [],
                        },
                    ),
                },
            ),
            eol: Token(EndOfLine, (13,32)->(13,32)),
        },
    ),
    Comment(
        Token(Comment, "# should be !(1.234->string())", (14,0)->(14,30)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (15,0)->(15,3)),
            ty: None,
            name: Raw(expr_prec),
            equal: Token(Equal, (15,14)->(15,15)),
            expr: MethodCall(
                MethodCall {
                    left: Prefix(
                        PrefixExpression {
                            token: Token(Bang, (15,16)->(15,17)),
                            operator: Bang,
                            right: Number(
                                Number(1.234),
                            ),
                        },
                    ),
                    tok: Token(MethodArrow, (15,22)->(15,24)),
                    right: f: Identifier(Raw(string)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (15,32)->(15,32)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (16,0)->(16,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (17,0)->(17,3)),
            ty: None,
            name: Raw(foo),
            equal: Token(Equal, (17,8)->(17,9)),
            expr: MethodCall(
                MethodCall {
                    left: Identifier(
                        Raw(base),
                    ),
                    tok: Token(MethodArrow, (17,14)->(17,16)),
                    right: f: Identifier(Raw(name)) arg: [
                        Identifier(
                            Raw(args),
                        ),
                    ],
                },
            ),
            eol: Token(EndOfLine, (17,26)->(17,26)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (18,0)->(18,3)),
            ty: None,
            name: Raw(foo),
            equal: Token(Equal, (18,8)->(18,9)),
            expr: MethodCall(
                MethodCall {
                    left: Identifier(
                        Raw(base),
                    ),
                    tok: Token(MethodArrow, (18,14)->(18,16)),
                    right: f: DictAccess(DictAccess { container: Identifier(Raw(some)), dot: Token(Dot, (18,20)->(18,21)), index: RawIdentifier { name: "name" } }) arg: [
                        Identifier(
                            Raw(args),
                        ),
                    ],
                },
            ),
            eol: Token(EndOfLine, (18,31)->(18,31)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (19,0)->(19,3)),
            ty: None,
            name: Raw(foo),
            equal: Token(Equal, (19,8)->(19,9)),
            expr: MethodCall(
                MethodCall {
                    left: Identifier(
                        Raw(base),
                    ),
                    tok: Token(MethodArrow, (19,14)->(19,16)),
                    right: f: Index(IndexExpression { container: Identifier(Raw(alist)), open: Token(LeftBracket, (19,21)->(19,22)), index: Item(Identifier(Raw(idx))), close: Token(RightBracket, (19,25)->(19,26)) }) arg: [
                        Identifier(
                            Raw(args),
                        ),
                    ],
                },
            ),
            eol: Token(EndOfLine, (19,32)->(19,32)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (20,0)->(20,3)),
            ty: None,
            name: Raw(foo),
            equal: Token(Equal, (20,8)->(20,9)),
            expr: MethodCall(
                MethodCall {
                    left: Identifier(
                        Raw(base),
                    ),
                    tok: Token(MethodArrow, (20,14)->(20,16)),
                    right: f: Grouped(GroupedExpression { open: Token(LeftParen, (20,16)->(20,17)), expr: Call(f: Identifier(Raw(getFuncRef)) arg: []), close: Token(RightParen, (20,29)->(20,30)) }) arg: [
                        Identifier(
                            Raw(args),
                        ),
                    ],
                },
            ),
            eol: Token(EndOfLine, (20,36)->(20,36)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (21,0)->(21,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (22,0)->(22,3)),
            ty: None,
            name: Raw(x),
            equal: Token(Equal, (22,6)->(22,7)),
            expr: Array(
                ArrayLiteral {
                    open: Token(LeftBracket, (22,8)->(22,9)),
                    elements: [
                        Number(
                            Number(1),
                        ),
                        Number(
                            Number(4),
                        ),
                        Number(
                            Number(2),
                        ),
                        Number(
                            Number(5),
                        ),
                    ],
                    close: Token(RightBracket, (22,19)->(22,20)),
                },
            ),
            eol: Token(EndOfLine, (22,20)->(22,20)),
        },
    ),
    Eval(
        EvalCommand {
            eval: None,
            expr: MethodCall(
                MethodCall {
                    left: Identifier(
                        Raw(x),
                    ),
                    tok: Token(MethodArrow, (23,1)->(23,3)),
                    right: f: Identifier(Raw(sort)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (23,9)->(23,9)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (24,0)->(24,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (25,0)->(25,3)),
            ty: None,
            name: Raw(foo),
            equal: Token(Equal, (25,8)->(25,9)),
            expr: MethodCall(
                MethodCall {
                    left: Array(
                        ArrayLiteral {
                            open: Token(LeftBracket, (25,10)->(25,11)),
                            elements: [
                                Identifier(
                                    Raw(slnum),
                                ),
                                Identifier(
                                    Raw(scol),
                                ),
                            ],
                            close: Token(RightBracket, (25,22)->(25,23)),
                        },
                    ),
                    tok: Token(MethodArrow, (25,23)->(25,25)),
                    right: f: Identifier(Raw(cursor)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (25,33)->(25,33)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (26,0)->(26,0)),
    ),
    Comment(
        Token(Comment, "# Testing", (27,0)->(27,9)),
    ),
    Eval(
        EvalCommand {
            eval: None,
            expr: MethodCall(
                MethodCall {
                    left: Array(
                        ArrayLiteral {
                            open: Token(LeftBracket, (28,0)->(28,1)),
                            elements: [
                                Identifier(
                                    Raw(slnum),
                                ),
                                Identifier(
                                    Raw(scol),
                                ),
                            ],
                            close: Token(RightBracket, (28,12)->(28,13)),
                        },
                    ),
                    tok: Token(MethodArrow, (28,13)->(28,15)),
                    right: f: Identifier(Raw(cursor)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (28,23)->(28,23)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (29,0)->(29,0)),
    ),
    Comment(
        Token(Comment, "# You can just call stuff on numbers...", (30,0)->(30,39)),
    ),
    Eval(
        EvalCommand {
            eval: None,
            expr: MethodCall(
                MethodCall {
                    left: Number(
                        Number(3),
                    ),
                    tok: Token(MethodArrow, (31,1)->(31,3)),
                    right: f: Identifier(Raw(setwinvar)) arg: [
                        Identifier(
                            Raw(id),
                        ),
                        String(
                            SingleQuote(
                                "&conceallevel",
                            ),
                        ),
                    ],
                },
            ),
            eol: Token(EndOfLine, (31,33)->(31,33)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (32,0)->(32,0)),
    ),
]
