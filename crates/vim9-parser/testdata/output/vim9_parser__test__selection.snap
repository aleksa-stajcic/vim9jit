---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2889
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Comment(
        Token(Comment, "# Thanks to: https://github.com/yegappan/lsp for some test cases", (2,0)->(2,64)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (3,0)->(3,0)),
    ),
    Comment(
        Token(Comment, "# Functions related to handling LSP range selection.", (4,0)->(4,52)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (5,0)->(5,0)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, (6,0)->(6,6)),
            autoload: false,
            file: "./util.vim",
            name: None,
            eol: Token(EndOfLine, (6,19)->(6,19)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (7,0)->(7,0)),
    ),
    Comment(
        Token(Comment, "# Visually (character-wise) select the text in a range", (8,0)->(8,54)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (9,0)->(9,3)),
            name: Raw(SelectText),
            args: Signature {
                open: Token(LeftParen, (9,14)->(9,15)),
                params: [
                    Parameter {
                        name: Raw(bnr),
                        ty: Some(
                            Number,
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(range),
                        ty: Some(
                            Dict {
                                open: Token(AngleLeft, (9,39)->(9,40)),
                                inner: Dict {
                                    open: Token(AngleLeft, (9,44)->(9,45)),
                                    inner: Number,
                                    close: Token(AngleRight, (9,51)->(9,52)),
                                },
                                close: Token(AngleRight, (9,52)->(9,53)),
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, (9,53)->(9,54)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (9,54)->(9,54)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, (10,2)->(10,5)),
                            ty: Some(
                                Number,
                            ),
                            name: Raw(start_col),
                            equal: Token(Equal, (10,24)->(10,25)),
                            expr: Infix(
                                InfixExpression {
                                    token: Token(Plus, "+", (10,68)->(10,69)),
                                    operator: Plus,
                                    left: Call(
                                        f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, (10,30)->(10,31)), index: RawIdentifier { name: "GetLineByteFromPos" } }) arg: [
                                            Identifier(
                                                Raw(bnr),
                                            ),
                                            DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(range),
                                                    ),
                                                    dot: Token(Dot, (10,60)->(10,61)),
                                                    index: RawIdentifier {
                                                        name: "start",
                                                    },
                                                },
                                            ),
                                        ],
                                    ),
                                    right: Number(
                                        Number(1),
                                    ),
                                },
                            ),
                            eol: Token(EndOfLine, (10,71)->(10,71)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, (11,2)->(11,5)),
                            ty: Some(
                                Number,
                            ),
                            name: Raw(end_col),
                            equal: Token(Equal, (11,22)->(11,23)),
                            expr: Call(
                                f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, (11,28)->(11,29)), index: RawIdentifier { name: "GetLineByteFromPos" } }) arg: [
                                    Identifier(
                                        Raw(bnr),
                                    ),
                                    DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(range),
                                            ),
                                            dot: Token(Dot, (11,58)->(11,59)),
                                            index: RawIdentifier {
                                                name: "end",
                                            },
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (11,63)->(11,63)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (12,0)->(12,0)),
                    ),
                    SharedCommand(
                        SharedCommand {
                            contents: "   normal! v\"_y",
                            eol: Token(EndOfLine, (13,15)->(13,15)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (14,0)->(14,6)),
            end_eol: Token(EndOfLine, (14,6)->(14,6)),
        },
    ),
]
