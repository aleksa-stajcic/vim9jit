---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2583
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Execute(
        ExecuteCommand {
            execute: Token(Identifier, (2,0)->(2,7)),
            expr: String(
                DoubleQuote(
                    "normal ixxx\\<Esc>",
                ),
            ),
            eol: Token(EndOfLine, (2,27)->(2,27)),
        },
    ),
    Execute(
        ExecuteCommand {
            execute: Token(Identifier, (3,0)->(3,7)),
            expr: Infix(
                InfixExpression {
                    token: Token(StringConcat, "..", (3,15)->(3,17)),
                    operator: StringConcat,
                    left: String(
                        DoubleQuote(
                            "!ls ",
                        ),
                    ),
                    right: Call(
                        f: Identifier(Raw(shellescape)) arg: [
                            String(
                                SingleQuote(
                                    "./rustfmt.toml",
                                ),
                            ),
                            Number(
                                Number(1),
                            ),
                        ],
                    ),
                },
            ),
            eol: Token(EndOfLine, (3,50)->(3,50)),
        },
    ),
    Execute(
        ExecuteCommand {
            execute: Token(Identifier, (4,0)->(4,7)),
            expr: Infix(
                InfixExpression {
                    token: Token(StringConcat, "..", (4,51)->(4,53)),
                    operator: StringConcat,
                    left: Infix(
                        InfixExpression {
                            token: Token(StringConcat, "..", (4,15)->(4,17)),
                            operator: StringConcat,
                            left: String(
                                DoubleQuote(
                                    "!ls ",
                                ),
                            ),
                            right: Call(
                                f: Identifier(Raw(shellescape)) arg: [
                                    String(
                                        SingleQuote(
                                            "./rustfmt.toml",
                                        ),
                                    ),
                                    Number(
                                        Number(1),
                                    ),
                                ],
                            ),
                        },
                    ),
                    right: Call(
                        f: Identifier(Raw(shellescape)) arg: [
                            String(
                                SingleQuote(
                                    "./Cargo.toml",
                                ),
                            ),
                            Number(
                                Number(1),
                            ),
                        ],
                    ),
                },
            ),
            eol: Token(EndOfLine, (4,84)->(4,84)),
        },
    ),
    Execute(
        ExecuteCommand {
            execute: Token(Identifier, (5,0)->(5,7)),
            expr: Infix(
                InfixExpression {
                    token: Token(StringConcat, "..", (5,14)->(5,16)),
                    operator: StringConcat,
                    left: String(
                        DoubleQuote(
                            "!ls",
                        ),
                    ),
                    right: String(
                        DoubleQuote(
                            " -la",
                        ),
                    ),
                },
            ),
            eol: Token(EndOfLine, (5,23)->(5,23)),
        },
    ),
]
