---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2120
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, "\n", (0,10)->(0,10)),
        },
    ),
    Comment(
        Token(Comment, "# cfilter.vim: Plugin to filter entries from a quickfix/location list", (2,0)->(2,69)),
    ),
    Comment(
        Token(Comment, "# Last Change: Jun 30, 2022", (3,0)->(3,27)),
    ),
    Comment(
        Token(Comment, "# Maintainer: Yegappan Lakshmanan (yegappan AT yahoo DOT com)", (4,0)->(4,61)),
    ),
    Comment(
        Token(Comment, "# Version: 2.0", (5,0)->(5,14)),
    ),
    Comment(
        Token(Comment, "#", (6,0)->(6,1)),
    ),
    Comment(
        Token(Comment, "# Commands to filter the quickfix list:", (7,0)->(7,39)),
    ),
    Comment(
        Token(Comment, "#   :Cfilter[!] /{pat}/", (8,0)->(8,23)),
    ),
    Comment(
        Token(Comment, "#       Create a new quickfix list from entries matching {pat} in the current", (9,0)->(9,77)),
    ),
    Comment(
        Token(Comment, "#       quickfix list. Both the file name and the text of the entries are", (10,0)->(10,73)),
    ),
    Comment(
        Token(Comment, "#       matched against {pat}. If ! is supplied, then entries not matching", (11,0)->(11,74)),
    ),
    Comment(
        Token(Comment, "#       {pat} are used. The pattern can be optionally enclosed using one of", (12,0)->(12,75)),
    ),
    Comment(
        Token(Comment, "#       the following characters: ', \", /. If the pattern is empty, then the", (13,0)->(13,76)),
    ),
    Comment(
        Token(Comment, "#       last used search pattern is used.", (14,0)->(14,41)),
    ),
    Comment(
        Token(Comment, "#   :Lfilter[!] /{pat}/", (15,0)->(15,23)),
    ),
    Comment(
        Token(Comment, "#       Same as :Cfilter but operates on the current location list.", (16,0)->(16,67)),
    ),
    Comment(
        Token(Comment, "#", (17,0)->(17,1)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (18,0)->(18,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (19,0)->(19,3)),
            name: Raw(Qf_filter),
            args: Signature {
                open: Token(LeftParen, "(", (19,13)->(19,14)),
                params: [
                    Parameter {
                        name: Raw(qf),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (19,16)->(19,18)),
                                inner: Bool,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(searchpat),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (19,33)->(19,35)),
                                inner: String,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(bang),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (19,47)->(19,49)),
                                inner: String,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (19,55)->(19,56)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (19,56)->(19,56)),
            body: Body {
                commands: [
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (20,2)->(20,5)),
                            name: Raw(Xgetlist),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (20,14)->(20,16)),
                                    inner: Func(
                                        Naked,
                                    ),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (20,20)->(20,20)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (21,2)->(21,5)),
                            name: Raw(Xsetlist),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (21,14)->(21,16)),
                                    inner: Func(
                                        Naked,
                                    ),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (21,20)->(21,20)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (22,2)->(22,5)),
                            name: Raw(cmd),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (22,9)->(22,11)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (22,17)->(22,17)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (23,2)->(23,5)),
                            name: Raw(firstchar),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (23,15)->(23,17)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (23,23)->(23,23)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (24,2)->(24,5)),
                            name: Raw(lastchar),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (24,14)->(24,16)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (24,22)->(24,22)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (25,2)->(25,5)),
                            name: Raw(pat),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (25,9)->(25,11)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (25,17)->(25,17)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (26,2)->(26,5)),
                            name: Raw(title),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (26,11)->(26,13)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (26,19)->(26,19)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (27,2)->(27,5)),
                            name: Raw(Cond),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (27,10)->(27,12)),
                                    inner: Func(
                                        Naked,
                                    ),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (27,16)->(27,16)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (28,2)->(28,5)),
                            name: Raw(items),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (28,11)->(28,13)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (28,17)->(28,18)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (28,21)->(28,22)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (28,22)->(28,22)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (29,0)->(29,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (30,2)->(30,4)),
                            condition: Identifier(
                                Raw(qf),
                            ),
                            if_eol: Token(EndOfLine, "\n", (30,7)->(30,7)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(Xgetlist),
                                                equals: Token(Equal, "=", (31,13)->(31,14)),
                                                right: Call(
                                                    f: Identifier(Raw(function)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "getqflist",
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (31,36)->(31,36)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(Xsetlist),
                                                equals: Token(Equal, "=", (32,13)->(32,14)),
                                                right: Call(
                                                    f: Identifier(Raw(function)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "setqflist",
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (32,36)->(32,36)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(cmd),
                                                equals: Token(Equal, "=", (33,8)->(33,9)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(StringConcat, "..", (33,21)->(33,23)),
                                                        operator: StringConcat,
                                                        left: String(
                                                            SingleQuote(
                                                                ":Cfilter",
                                                            ),
                                                        ),
                                                        right: Identifier(
                                                            Raw(bang),
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (33,28)->(33,28)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(Identifier, "else", (34,2)->(34,6)),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (34,6)->(34,6)),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(Xgetlist),
                                                equals: Token(Equal, "=", (35,13)->(35,14)),
                                                right: Call(
                                                    f: Identifier(Raw(function)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "getloclist",
                                                            ),
                                                        ),
                                                        Array(
                                                            ArrayLiteral {
                                                                open: Token(LeftBracket, "[", (35,38)->(35,39)),
                                                                elements: [
                                                                    Number(
                                                                        VimNumber {
                                                                            value: "0",
                                                                        },
                                                                    ),
                                                                ],
                                                                close: Token(RightBracket, "]", (35,40)->(35,41)),
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (35,42)->(35,42)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(Xsetlist),
                                                equals: Token(Equal, "=", (36,13)->(36,14)),
                                                right: Call(
                                                    f: Identifier(Raw(function)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "setloclist",
                                                            ),
                                                        ),
                                                        Array(
                                                            ArrayLiteral {
                                                                open: Token(LeftBracket, "[", (36,38)->(36,39)),
                                                                elements: [
                                                                    Number(
                                                                        VimNumber {
                                                                            value: "0",
                                                                        },
                                                                    ),
                                                                ],
                                                                close: Token(RightBracket, "]", (36,40)->(36,41)),
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (36,42)->(36,42)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(cmd),
                                                equals: Token(Equal, "=", (37,8)->(37,9)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(StringConcat, "..", (37,21)->(37,23)),
                                                        operator: StringConcat,
                                                        left: String(
                                                            SingleQuote(
                                                                ":Lfilter",
                                                            ),
                                                        ),
                                                        right: Identifier(
                                                            Raw(bang),
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (37,28)->(37,28)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            endif_tok: Token(Identifier, "endif", (38,2)->(38,7)),
                            endif_eol: Token(EndOfLine, "\n", (38,7)->(38,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (39,0)->(39,0)),
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: Raw(firstchar),
                                equals: Token(Equal, "=", (40,12)->(40,13)),
                                right: Index(
                                    IndexExpression {
                                        container: Identifier(
                                            Raw(searchpat),
                                        ),
                                        open: Token(LeftBracket, "[", (40,23)->(40,24)),
                                        index: Item(
                                            Number(
                                                VimNumber {
                                                    value: "0",
                                                },
                                            ),
                                        ),
                                        close: Token(RightBracket, "]", (40,25)->(40,26)),
                                    },
                                ),
                                eol: Token(EndOfLine, "\n", (40,26)->(40,26)),
                            },
                        ),
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: Raw(lastchar),
                                equals: Token(Equal, "=", (41,11)->(41,12)),
                                right: Index(
                                    IndexExpression {
                                        container: Identifier(
                                            Raw(searchpat),
                                        ),
                                        open: Token(LeftBracket, "[", (41,22)->(41,23)),
                                        index: Slice(
                                            VimSlice {
                                                start: Some(
                                                    Prefix(
                                                        PrefixExpression {
                                                            token: Token(Minus, "-", (41,23)->(41,24)),
                                                            operator: Minus,
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "1",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                colon: Token(Colon, ":", (41,26)->(41,27)),
                                                finish: None,
                                            },
                                        ),
                                        close: Token(RightBracket, "]", (41,27)->(41,28)),
                                    },
                                ),
                                eol: Token(EndOfLine, "\n", (41,28)->(41,28)),
                            },
                        ),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (42,2)->(42,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (42,27)->(42,29)),
                                    operator: And,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(EqualTo, "==", (42,15)->(42,17)),
                                            operator: EqualTo,
                                            left: Identifier(
                                                Raw(firstchar),
                                            ),
                                            right: Identifier(
                                                Raw(lastchar),
                                            ),
                                        },
                                    ),
                                    right: Grouped(
                                        GroupedExpression {
                                            open: Token(LeftParen, "(", (43,14)->(43,15)),
                                            expr: Infix(
                                                InfixExpression {
                                                    token: Token(Or, "||", (43,52)->(43,54)),
                                                    operator: Or,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(Or, "||", (43,32)->(43,34)),
                                                            operator: Or,
                                                            left: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==", (43,25)->(43,27)),
                                                                    operator: EqualTo,
                                                                    left: Identifier(
                                                                        Raw(firstchar),
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "/",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            right: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==", (43,45)->(43,47)),
                                                                    operator: EqualTo,
                                                                    left: Identifier(
                                                                        Raw(firstchar),
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "\"",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==", (43,65)->(43,67)),
                                                            operator: EqualTo,
                                                            left: Identifier(
                                                                Raw(firstchar),
                                                            ),
                                                            right: String(
                                                                DoubleQuote(
                                                                    "'",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            close: Token(RightParen, ")", (43,71)->(43,72)),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (43,72)->(43,72)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(pat),
                                                equals: Token(Equal, "=", (44,8)->(44,9)),
                                                right: Index(
                                                    IndexExpression {
                                                        container: Identifier(
                                                            Raw(searchpat),
                                                        ),
                                                        open: Token(LeftBracket, "[", (44,19)->(44,20)),
                                                        index: Slice(
                                                            VimSlice {
                                                                start: Some(
                                                                    Number(
                                                                        VimNumber {
                                                                            value: "1",
                                                                        },
                                                                    ),
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (44,22)->(44,24)),
                                                                finish: Some(
                                                                    Prefix(
                                                                        PrefixExpression {
                                                                            token: Token(Minus, "-", (44,24)->(44,25)),
                                                                            operator: Minus,
                                                                            right: Number(
                                                                                VimNumber {
                                                                                    value: "2",
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                        close: Token(RightBracket, "]", (44,26)->(44,27)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (44,27)->(44,27)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (45,4)->(45,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (45,11)->(45,13)),
                                                    operator: EqualTo,
                                                    left: Identifier(
                                                        Raw(pat),
                                                    ),
                                                    right: String(
                                                        SingleQuote(
                                                            "",
                                                        ),
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (45,16)->(45,16)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# Use the last search pattern", (46,6)->(46,35)),
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Raw(pat),
                                                                equals: Token(Equal, "=", (47,10)->(47,11)),
                                                                right: Register(
                                                                    Register {
                                                                        register: "/",
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (47,14)->(47,14)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            endif_tok: Token(Identifier, "endif", (48,4)->(48,9)),
                                            endif_eol: Token(EndOfLine, "\n", (48,9)->(48,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(Identifier, "else", (49,2)->(49,6)),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (49,6)->(49,6)),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(pat),
                                                equals: Token(Equal, "=", (50,8)->(50,9)),
                                                right: Identifier(
                                                    Raw(searchpat),
                                                ),
                                                eol: Token(EndOfLine, "\n", (50,19)->(50,19)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            endif_tok: Token(Identifier, "endif", (51,2)->(51,7)),
                            endif_eol: Token(EndOfLine, "\n", (51,7)->(51,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (52,0)->(52,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (53,2)->(53,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (53,9)->(53,11)),
                                    operator: EqualTo,
                                    left: Identifier(
                                        Raw(pat),
                                    ),
                                    right: String(
                                        SingleQuote(
                                            "",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (53,14)->(53,14)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (54,4)->(54,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (54,10)->(54,10)),
                                        },
                                    ),
                                ],
                            },
                            endif_tok: Token(Identifier, "endif", (55,2)->(55,7)),
                            endif_eol: Token(EndOfLine, "\n", (55,7)->(55,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (56,0)->(56,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (57,2)->(57,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (57,10)->(57,12)),
                                    operator: EqualTo,
                                    left: Identifier(
                                        Raw(bang),
                                    ),
                                    right: String(
                                        SingleQuote(
                                            "!",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (57,16)->(57,16)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(Cond),
                                                equals: Token(Equal, "=", (58,9)->(58,10)),
                                                right: Lambda(
                                                    Lambda {
                                                        args: Signature {
                                                            open: Token(LeftParen, "(", (58,11)->(58,12)),
                                                            params: [
                                                                Parameter {
                                                                    name: Raw(_),
                                                                    ty: None,
                                                                    equal: None,
                                                                    default_val: None,
                                                                },
                                                                Parameter {
                                                                    name: Raw(val),
                                                                    ty: None,
                                                                    equal: None,
                                                                    default_val: None,
                                                                },
                                                            ],
                                                            close: Token(RightParen, ")", (58,18)->(58,19)),
                                                        },
                                                        ret: None,
                                                        arrow: Token(Arrow, "=>", (58,20)->(58,22)),
                                                        body: Body {
                                                            commands: [
                                                                Return(
                                                                    ReturnCommand {
                                                                        ret: Token(Virtual, "", (0,0)->(0,0)),
                                                                        expr: Some(
                                                                            DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(val),
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (58,26)->(58,27)),
                                                                                    index: Infix(
                                                                                        InfixExpression {
                                                                                            token: Token(And, "&&", (58,40)->(58,42)),
                                                                                            operator: And,
                                                                                            left: Infix(
                                                                                                InfixExpression {
                                                                                                    token: Token(NotRegexpMatches, "!~#", (58,32)->(58,35)),
                                                                                                    operator: NotRegexpMatches,
                                                                                                    left: Identifier(
                                                                                                        Raw(text),
                                                                                                    ),
                                                                                                    right: Identifier(
                                                                                                        Raw(pat),
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            right: Infix(
                                                                                                InfixExpression {
                                                                                                    token: Token(NotRegexpMatches, "!~#", (58,62)->(58,65)),
                                                                                                    operator: NotRegexpMatches,
                                                                                                    left: Call(
                                                                                                        f: Identifier(Raw(bufname)) arg: [
                                                                                                            DictAccess(
                                                                                                                DictAccess {
                                                                                                                    container: Identifier(
                                                                                                                        Raw(val),
                                                                                                                    ),
                                                                                                                    dot: Token(Dot, ".", (58,54)->(58,55)),
                                                                                                                    index: Identifier(
                                                                                                                        Raw(bufnr),
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    ),
                                                                                                    right: Identifier(
                                                                                                        Raw(pat),
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ),
                                                                        eol: Token(Virtual, "", (0,0)->(0,0)),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (58,69)->(58,69)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(Identifier, "else", (59,2)->(59,6)),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (59,6)->(59,6)),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Raw(Cond),
                                                equals: Token(Equal, "=", (60,9)->(60,10)),
                                                right: Lambda(
                                                    Lambda {
                                                        args: Signature {
                                                            open: Token(LeftParen, "(", (60,11)->(60,12)),
                                                            params: [
                                                                Parameter {
                                                                    name: Raw(_),
                                                                    ty: None,
                                                                    equal: None,
                                                                    default_val: None,
                                                                },
                                                                Parameter {
                                                                    name: Raw(val),
                                                                    ty: None,
                                                                    equal: None,
                                                                    default_val: None,
                                                                },
                                                            ],
                                                            close: Token(RightParen, ")", (60,18)->(60,19)),
                                                        },
                                                        ret: None,
                                                        arrow: Token(Arrow, "=>", (60,20)->(60,22)),
                                                        body: Body {
                                                            commands: [
                                                                Return(
                                                                    ReturnCommand {
                                                                        ret: Token(Virtual, "", (0,0)->(0,0)),
                                                                        expr: Some(
                                                                            DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(val),
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (60,26)->(60,27)),
                                                                                    index: Infix(
                                                                                        InfixExpression {
                                                                                            token: Token(Or, "||", (60,40)->(60,42)),
                                                                                            operator: Or,
                                                                                            left: Infix(
                                                                                                InfixExpression {
                                                                                                    token: Token(RegexpMatches, "=~#", (60,32)->(60,35)),
                                                                                                    operator: RegexpMatches,
                                                                                                    left: Identifier(
                                                                                                        Raw(text),
                                                                                                    ),
                                                                                                    right: Identifier(
                                                                                                        Raw(pat),
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            right: Infix(
                                                                                                InfixExpression {
                                                                                                    token: Token(RegexpMatches, "=~#", (60,62)->(60,65)),
                                                                                                    operator: RegexpMatches,
                                                                                                    left: Call(
                                                                                                        f: Identifier(Raw(bufname)) arg: [
                                                                                                            DictAccess(
                                                                                                                DictAccess {
                                                                                                                    container: Identifier(
                                                                                                                        Raw(val),
                                                                                                                    ),
                                                                                                                    dot: Token(Dot, ".", (60,54)->(60,55)),
                                                                                                                    index: Identifier(
                                                                                                                        Raw(bufnr),
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    ),
                                                                                                    right: Identifier(
                                                                                                        Raw(pat),
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ),
                                                                        eol: Token(Virtual, "", (0,0)->(0,0)),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (60,69)->(60,69)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            endif_tok: Token(Identifier, "endif", (61,2)->(61,7)),
                            endif_eol: Token(EndOfLine, "\n", (61,7)->(61,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (62,0)->(62,0)),
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: Raw(items),
                                equals: Token(Equal, "=", (63,8)->(63,9)),
                                right: Call(
                                    f: Identifier(Raw(filter)) arg: [
                                        Call(
                                            f: Identifier(Raw(Xgetlist)) arg: [],
                                        ),
                                        Identifier(
                                            Raw(Cond),
                                        ),
                                    ],
                                ),
                                eol: Token(EndOfLine, "\n", (63,34)->(63,34)),
                            },
                        ),
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: Raw(title),
                                equals: Token(Equal, "=", (64,8)->(64,9)),
                                right: Infix(
                                    InfixExpression {
                                        token: Token(StringConcat, "..", (64,29)->(64,31)),
                                        operator: StringConcat,
                                        left: Infix(
                                            InfixExpression {
                                                token: Token(StringConcat, "..", (64,22)->(64,24)),
                                                operator: StringConcat,
                                                left: Infix(
                                                    InfixExpression {
                                                        token: Token(StringConcat, "..", (64,14)->(64,16)),
                                                        operator: StringConcat,
                                                        left: Identifier(
                                                            Raw(cmd),
                                                        ),
                                                        right: String(
                                                            SingleQuote(
                                                                " /",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                                right: Identifier(
                                                    Raw(pat),
                                                ),
                                            },
                                        ),
                                        right: String(
                                            SingleQuote(
                                                "/",
                                            ),
                                        ),
                                    },
                                ),
                                eol: Token(EndOfLine, "\n", (64,35)->(64,35)),
                            },
                        ),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            name: Raw(Xsetlist),
                            open: Token(LeftParen, "(", (65,10)->(65,11)),
                            args: [
                                Array(
                                    ArrayLiteral {
                                        open: Token(LeftBracket, "[", (65,11)->(65,12)),
                                        elements: [],
                                        close: Token(RightBracket, "]", (65,12)->(65,13)),
                                    },
                                ),
                                String(
                                    SingleQuote(
                                        " ",
                                    ),
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (65,20)->(65,21)),
                                        elements: [
                                            KeyValue {
                                                key: Literal(
                                                    Literal {
                                                        token: Token(Identifier, "title", (65,21)->(65,26)),
                                                    },
                                                ),
                                                colon: Token(SpacedColon, ": ", (65,26)->(65,28)),
                                                value: Identifier(
                                                    Raw(title),
                                                ),
                                            },
                                            KeyValue {
                                                key: Literal(
                                                    Literal {
                                                        token: Token(Identifier, "items", (65,35)->(65,40)),
                                                    },
                                                ),
                                                colon: Token(SpacedColon, ": ", (65,40)->(65,42)),
                                                value: Identifier(
                                                    Raw(items),
                                                ),
                                            },
                                        ],
                                        close: Token(RightBrace, "}", (65,47)->(65,48)),
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (65,48)->(65,49)),
                            eol: Token(EndOfLine, "\n", (65,49)->(65,49)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (66,0)->(66,6)),
            end_eol: Token(EndOfLine, "\n", (66,6)->(66,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (67,0)->(67,0)),
    ),
    UserCommand(
        UserCommand {
            tok: Token(Identifier, "command", (68,0)->(68,7)),
            bang: true,
            command_nargs: Some(
                "+",
            ),
            command_bang: true,
            name: "Cfilter",
            command: Call(
                CallCommand {
                    call: None,
                    name: Raw(Qf_filter),
                    open: Token(LeftParen, "(", (68,41)->(68,42)),
                    args: [
                        Boolean(
                            VimBoolean {
                                token: Token(True, "true", (68,42)->(68,46)),
                                value: true,
                            },
                        ),
                        Expandable(
                            Expandable {
                                left: Token(AngleLeft, "<", (68,48)->(68,49)),
                                ident: Raw(q-args),
                                right: Token(AngleRight, ">", (68,55)->(68,56)),
                            },
                        ),
                        Expandable(
                            Expandable {
                                left: Token(AngleLeft, "<", (68,58)->(68,59)),
                                ident: Raw(q-bang),
                                right: Token(AngleRight, ">", (68,65)->(68,66)),
                            },
                        ),
                    ],
                    close: Token(RightParen, ")", (68,66)->(68,67)),
                    eol: Token(EndOfLine, "\n", (68,67)->(68,67)),
                },
            ),
        },
    ),
    UserCommand(
        UserCommand {
            tok: Token(Identifier, "command", (69,0)->(69,7)),
            bang: true,
            command_nargs: Some(
                "+",
            ),
            command_bang: true,
            name: "Lfilter",
            command: Call(
                CallCommand {
                    call: None,
                    name: Raw(Qf_filter),
                    open: Token(LeftParen, "(", (69,41)->(69,42)),
                    args: [
                        Boolean(
                            VimBoolean {
                                token: Token(False, "false", (69,42)->(69,47)),
                                value: false,
                            },
                        ),
                        Expandable(
                            Expandable {
                                left: Token(AngleLeft, "<", (69,49)->(69,50)),
                                ident: Raw(q-args),
                                right: Token(AngleRight, ">", (69,56)->(69,57)),
                            },
                        ),
                        Expandable(
                            Expandable {
                                left: Token(AngleLeft, "<", (69,59)->(69,60)),
                                ident: Raw(q-bang),
                                right: Token(AngleRight, ">", (69,66)->(69,67)),
                            },
                        ),
                    ],
                    close: Token(RightParen, ")", (69,67)->(69,68)),
                    eol: Token(EndOfLine, "\n", (69,68)->(69,68)),
                },
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (70,0)->(70,0)),
    ),
    Comment(
        Token(Comment, "# vim: shiftwidth=2 sts=2 expandtab", (71,0)->(71,35)),
    ),
]
