---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2876
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (2,0)->(2,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (3,0)->(3,3)),
            ty: Some(
                Bool,
            ),
            name: Raw(x),
            equal: Token(Equal, (3,12)->(3,13)),
            expr: Infix(
                InfixExpression {
                    token: Token(And, "&&", (3,19)->(3,21)),
                    operator: And,
                    left: Boolean(
                        VimBoolean {
                            value: true,
                        },
                    ),
                    right: Boolean(
                        VimBoolean {
                            value: false,
                        },
                    ),
                },
            ),
            eol: Token(EndOfLine, (4,7)->(4,7)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (5,0)->(5,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (6,0)->(6,3)),
            ty: Some(
                Bool,
            ),
            name: Raw(y),
            equal: Token(Equal, (6,12)->(6,13)),
            expr: Infix(
                InfixExpression {
                    token: Token(And, "&&", (7,2)->(7,4)),
                    operator: And,
                    left: Boolean(
                        VimBoolean {
                            value: true,
                        },
                    ),
                    right: Boolean(
                        VimBoolean {
                            value: false,
                        },
                    ),
                },
            ),
            eol: Token(EndOfLine, (7,10)->(7,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (8,0)->(8,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (9,0)->(9,3)),
            ty: None,
            name: Raw(z),
            equal: Token(Equal, (9,6)->(9,7)),
            expr: Infix(
                InfixExpression {
                    token: Token(Or, "||", (11,2)->(11,4)),
                    operator: Or,
                    left: Boolean(
                        VimBoolean {
                            value: true,
                        },
                    ),
                    right: Boolean(
                        VimBoolean {
                            value: false,
                        },
                    ),
                },
            ),
            eol: Token(EndOfLine, (11,10)->(11,10)),
        },
    ),
]
