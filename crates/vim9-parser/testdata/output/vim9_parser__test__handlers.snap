---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2043
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, "\n", (0,10)->(0,10)),
        },
    ),
    Comment(
        Token(Comment, "# Thanks to: https://github.com/yegappan/lsp for some test cases", (2,0)->(2,64)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (3,0)->(3,0)),
    ),
    Comment(
        Token(Comment, "# Handlers for messages from the LSP server", (4,0)->(4,43)),
    ),
    Comment(
        Token(Comment, "# Refer to https://microsoft.github.io/language-server-protocol/specification", (5,0)->(5,77)),
    ),
    Comment(
        Token(Comment, "# for the Language Server Protocol (LSP) specificaiton.", (6,0)->(6,55)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (7,0)->(7,0)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (8,0)->(8,6)),
            autoload: false,
            file: "./lspoptions.vim",
            name: Some(
                Identifier(
                    Raw(opt),
                ),
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (8,32)->(8,32)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (9,0)->(9,6)),
            autoload: false,
            file: "./util.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (9,19)->(9,19)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (10,0)->(10,6)),
            autoload: false,
            file: "./diag.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (10,19)->(10,19)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (11,0)->(11,6)),
            autoload: false,
            file: "./outline.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (11,22)->(11,22)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (12,0)->(12,6)),
            autoload: false,
            file: "./textedit.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (12,23)->(12,23)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (13,0)->(13,6)),
            autoload: false,
            file: "./symbol.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (13,21)->(13,21)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (14,0)->(14,6)),
            autoload: false,
            file: "./codeaction.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (14,25)->(14,25)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (15,0)->(15,6)),
            autoload: false,
            file: "./callhierarchy.vim",
            name: Some(
                Identifier(
                    Raw(callhier),
                ),
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (15,40)->(15,40)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (16,0)->(16,6)),
            autoload: false,
            file: "./signature.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (16,24)->(16,24)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (17,0)->(17,0)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (18,0)->(18,0)),
    ),
    Comment(
        Token(Comment, "# process the 'initialize' method reply from the LSP server", (19,0)->(19,59)),
    ),
    Comment(
        Token(Comment, "# Result: InitializeResult", (20,0)->(20,26)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (21,0)->(21,3)),
            name: Raw(ProcessInitializeReply),
            args: Signature {
                open: Token(LeftParen, "(", (21,26)->(21,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (21,36)->(21,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (21,42)->(21,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (21,46)->(21,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (21,52)->(21,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (21,58)->(21,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (21,62)->(21,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (21,70)->(21,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (21,76)->(21,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (21,80)->(21,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (21,81)->(21,82)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (21,82)->(21,84)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (21,88)->(21,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (22,2)->(22,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (22,10)->(22,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (22,17)->(22,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (22,26)->(22,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (23,4)->(23,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (23,10)->(23,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (24,2)->(24,7)),
                            endif_eol: Token(EndOfLine, "\n", (24,7)->(24,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (25,0)->(25,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (26,2)->(26,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (26,10)->(26,12)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (26,16)->(26,17)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (26,20)->(26,21)),
                                    },
                                },
                            ),
                            name: Raw(caps),
                            equal: Token(Equal, "=", (26,22)->(26,23)),
                            expr: DictAccess(
                                DictAccess {
                                    container: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (26,29)->(26,30)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    dot: Token(Dot, ".", (26,36)->(26,37)),
                                    index: RawIdentifier {
                                        name: "capabilities",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (26,49)->(26,49)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(lspserver),
                                        ),
                                        dot: Token(Dot, ".", (27,11)->(27,12)),
                                        index: RawIdentifier {
                                            name: "caps",
                                        },
                                    },
                                ),
                                equals: Token(Equal, "=", (27,17)->(27,18)),
                                right: Identifier(
                                    Raw(caps),
                                ),
                                eol: Token(EndOfLine, "\n", (27,23)->(27,23)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (28,0)->(28,0)),
                    ),
                    Comment(
                        Token(Comment, "# TODO: Check all the buffers with filetype corresponding to this LSP server", (29,2)->(29,78)),
                    ),
                    Comment(
                        Token(Comment, "# and then setup the below mapping for those buffers.", (30,2)->(30,55)),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (31,0)->(31,0)),
                    ),
                    Comment(
                        Token(Comment, "# initialize signature help", (32,2)->(32,29)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(signature),
                                    ),
                                    dot: Token(Dot, ".", (33,11)->(33,12)),
                                    index: RawIdentifier {
                                        name: "SignatureInit",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (33,25)->(33,26)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                            ],
                            close: Token(RightParen, ")", (33,35)->(33,36)),
                            eol: Token(EndOfLine, "\n", (33,36)->(33,36)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (34,0)->(34,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (35,2)->(35,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (35,33)->(35,35)),
                                    operator: And,
                                    left: DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(opt),
                                                    ),
                                                    dot: Token(Dot, ".", (35,8)->(35,9)),
                                                    index: RawIdentifier {
                                                        name: "lspOptions",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (35,19)->(35,20)),
                                            index: RawIdentifier {
                                                name: "autoComplete",
                                            },
                                        },
                                    ),
                                    right: MethodCall(
                                        MethodCall {
                                            left: Identifier(
                                                Raw(caps),
                                            ),
                                            tok: Token(MethodArrow, "->", (35,40)->(35,42)),
                                            right: f: Identifier(Raw(has_key)) arg: [
                                                String(
                                                    SingleQuote(
                                                        "completionProvider",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (35,71)->(35,71)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (36,4)->(36,7)),
                                            ty: None,
                                            name: Raw(triggers),
                                            equal: Token(Equal, "=", (36,17)->(36,18)),
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(caps),
                                                            ),
                                                            dot: Token(Dot, ".", (36,23)->(36,24)),
                                                            index: RawIdentifier {
                                                                name: "completionProvider",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (36,42)->(36,43)),
                                                    index: RawIdentifier {
                                                        name: "triggerCharacters",
                                                    },
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (36,60)->(36,60)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        dot: Token(Dot, ".", (37,13)->(37,14)),
                                                        index: RawIdentifier {
                                                            name: "completionTriggerChars",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (37,37)->(37,38)),
                                                right: Identifier(
                                                    Raw(triggers),
                                                ),
                                                eol: Token(EndOfLine, "\n", (37,47)->(37,47)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (38,2)->(38,7)),
                            endif_eol: Token(EndOfLine, "\n", (38,7)->(38,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (39,0)->(39,0)),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (40,0)->(40,0)),
                    ),
                    Comment(
                        Token(Comment, "# send a \"initialized\" notification to server", (41,2)->(41,47)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(lspserver),
                                    ),
                                    dot: Token(Dot, ".", (42,11)->(42,12)),
                                    index: RawIdentifier {
                                        name: "sendInitializedNotif",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (42,32)->(42,33)),
                            args: [],
                            close: Token(RightParen, ")", (42,33)->(42,34)),
                            eol: Token(EndOfLine, "\n", (42,34)->(42,34)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(lspserver),
                                        ),
                                        dot: Token(Dot, ".", (43,11)->(43,12)),
                                        index: RawIdentifier {
                                            name: "ready",
                                        },
                                    },
                                ),
                                equals: Token(Equal, "=", (43,18)->(43,19)),
                                right: Boolean(
                                    VimBoolean {
                                        token: Token(True, "true", (43,20)->(43,24)),
                                        value: true,
                                    },
                                ),
                                eol: Token(EndOfLine, "\n", (43,24)->(43,24)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (44,0)->(44,0)),
                    ),
                    Comment(
                        Token(Comment, "# if the outline window is opened, then request the symbols for the current", (45,2)->(45,77)),
                    ),
                    Comment(
                        Token(Comment, "# buffer", (46,2)->(46,10)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (47,2)->(47,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(NotEqualTo, "!=", (47,29)->(47,31)),
                                    operator: NotEqualTo,
                                    left: Call(
                                        f: Identifier(Raw(bufwinid)) arg: [
                                            String(
                                                SingleQuote(
                                                    "LSP-Outline",
                                                ),
                                            ),
                                        ],
                                    ),
                                    right: Prefix(
                                        PrefixExpression {
                                            token: Token(Minus, "-", (47,32)->(47,33)),
                                            operator: Minus,
                                            right: Number(
                                                VimNumber {
                                                    value: "1",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (47,34)->(47,34)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(lspserver),
                                                    ),
                                                    dot: Token(Dot, ".", (48,13)->(48,14)),
                                                    index: RawIdentifier {
                                                        name: "getDocSymbols",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (48,27)->(48,28)),
                                            args: [
                                                Register(
                                                    Register {
                                                        register: "%",
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (48,30)->(48,31)),
                                            eol: Token(EndOfLine, "\n", (48,31)->(48,31)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (49,2)->(49,7)),
                            endif_eol: Token(EndOfLine, "\n", (49,7)->(49,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (50,0)->(50,6)),
            end_eol: Token(EndOfLine, "\n", (50,6)->(50,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (51,0)->(51,0)),
    ),
    Comment(
        Token(Comment, "# Process a 'shutdown' reply from the LSP server.", (52,0)->(52,49)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (53,0)->(53,3)),
            name: Raw(ProcessShutdownReply),
            args: Signature {
                open: Token(LeftParen, "(", (53,24)->(53,25)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (53,34)->(53,36)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (53,40)->(53,41)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (53,44)->(53,45)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (53,50)->(53,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (53,56)->(53,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (53,60)->(53,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (53,68)->(53,70)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (53,74)->(53,75)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (53,78)->(53,79)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (53,79)->(53,80)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (53,80)->(53,82)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (53,86)->(53,86)),
            body: Body {
                commands: [
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (54,2)->(54,8)),
                            expr: None,
                            eol: Token(EndOfLine, "\n", (54,8)->(54,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (55,0)->(55,6)),
            end_eol: Token(EndOfLine, "\n", (55,6)->(55,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (56,0)->(56,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/signatureHelp' reply from the LSP server", (57,0)->(57,68)),
    ),
    Comment(
        Token(Comment, "# Result: SignatureHelp | null", (58,0)->(58,30)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (59,0)->(59,3)),
            name: Raw(ProcessSignaturehelpReply),
            args: Signature {
                open: Token(LeftParen, "(", (59,29)->(59,30)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (59,39)->(59,41)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (59,45)->(59,46)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (59,49)->(59,50)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (59,55)->(59,57)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (59,61)->(59,62)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (59,65)->(59,66)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (59,73)->(59,75)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (59,79)->(59,80)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (59,83)->(59,84)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (59,84)->(59,85)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (59,85)->(59,87)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (59,91)->(59,91)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (60,2)->(60,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (60,10)->(60,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (60,17)->(60,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (60,26)->(60,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (61,4)->(61,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (61,10)->(61,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (62,2)->(62,7)),
                            endif_eol: Token(EndOfLine, "\n", (62,7)->(62,7)),
                        },
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(signature),
                                    ),
                                    dot: Token(Dot, ".", (63,11)->(63,12)),
                                    index: RawIdentifier {
                                        name: "SignatureDisplay",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (63,28)->(63,29)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (63,45)->(63,46)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (63,52)->(63,53)),
                            eol: Token(EndOfLine, "\n", (63,53)->(63,53)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (64,0)->(64,6)),
            end_eol: Token(EndOfLine, "\n", (64,6)->(64,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (65,0)->(65,0)),
    ),
    Comment(
        Token(Comment, "# Map LSP complete item kind to a character", (66,0)->(66,43)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (67,0)->(67,3)),
            name: Raw(LspCompleteItemKindChar),
            args: Signature {
                open: Token(LeftParen, "(", (67,27)->(67,28)),
                params: [
                    Parameter {
                        name: Raw(kind),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (67,32)->(67,34)),
                                inner: Number,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (67,40)->(67,41)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (67,41)->(67,43)),
                    inner: String,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (67,49)->(67,49)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (68,2)->(68,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (68,13)->(68,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (68,19)->(68,20)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (68,26)->(68,27)),
                                    },
                                },
                            ),
                            name: Raw(kindMap),
                            equal: Token(Equal, "=", (68,28)->(68,29)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (68,30)->(68,31)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "t",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "m",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "f",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "C",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "F",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "v",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "c",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "i",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "M",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "p",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "u",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "V",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "e",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "k",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "S",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "C",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "f",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "r",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "F",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "E",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "d",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "s",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "E",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "o",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "T",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (94,1)->(94,2)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (94,2)->(94,2)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (95,2)->(95,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(GreaterThan, ">", (95,10)->(95,11)),
                                    operator: GreaterThan,
                                    left: Identifier(
                                        Raw(kind),
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "25",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (95,14)->(95,14)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (96,4)->(96,10)),
                                            expr: Some(
                                                String(
                                                    SingleQuote(
                                                        "",
                                                    ),
                                                ),
                                            ),
                                            eol: Token(EndOfLine, "\n", (96,13)->(96,13)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (97,2)->(97,7)),
                            endif_eol: Token(EndOfLine, "\n", (97,7)->(97,7)),
                        },
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (98,2)->(98,8)),
                            expr: Some(
                                Index(
                                    IndexExpression {
                                        container: Identifier(
                                            Raw(kindMap),
                                        ),
                                        open: Token(LeftBracket, "[", (98,16)->(98,17)),
                                        index: Item(
                                            Identifier(
                                                Raw(kind),
                                            ),
                                        ),
                                        close: Token(RightBracket, "]", (98,21)->(98,22)),
                                    },
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (98,22)->(98,22)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (99,0)->(99,6)),
            end_eol: Token(EndOfLine, "\n", (99,6)->(99,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (100,0)->(100,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/completion' reply from the LSP server", (101,0)->(101,65)),
    ),
    Comment(
        Token(Comment, "# Result: CompletionItem[] | CompletionList | null", (102,0)->(102,50)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (103,0)->(103,3)),
            name: Raw(ProcessCompletionReply),
            args: Signature {
                open: Token(LeftParen, "(", (103,26)->(103,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (103,36)->(103,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (103,42)->(103,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (103,46)->(103,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (103,52)->(103,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (103,58)->(103,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (103,62)->(103,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (103,70)->(103,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (103,76)->(103,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (103,80)->(103,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (103,81)->(103,82)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (103,82)->(103,84)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (103,88)->(103,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (104,2)->(104,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (104,10)->(104,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (104,17)->(104,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (104,26)->(104,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (105,4)->(105,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (105,10)->(105,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (106,2)->(106,7)),
                            endif_eol: Token(EndOfLine, "\n", (106,7)->(106,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (107,0)->(107,0)),
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (108,2)->(108,5)),
                            name: Raw(items),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (108,11)->(108,13)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (108,17)->(108,18)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (108,22)->(108,23)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (108,26)->(108,27)),
                                        },
                                        close: Token(GreaterThan, ">", (108,27)->(108,28)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (108,28)->(108,28)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (109,2)->(109,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (109,26)->(109,28)),
                                    operator: EqualTo,
                                    left: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (109,10)->(109,11)),
                                                    index: RawIdentifier {
                                                        name: "result",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, "->", (109,17)->(109,19)),
                                            right: f: Identifier(Raw(type)) arg: [],
                                        },
                                    ),
                                    right: Identifier(
                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (109,30)->(109,31)), accessor: Raw(t_list) }),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (109,37)->(109,37)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(items),
                                                ),
                                                equals: Token(Equal, "=", (110,10)->(110,11)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(reply),
                                                        ),
                                                        dot: Token(Dot, ".", (110,17)->(110,18)),
                                                        index: RawIdentifier {
                                                            name: "result",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (110,24)->(110,24)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (111,2)->(111,6)),
                                    else_eol: Token(EndOfLine, "\n", (111,6)->(111,6)),
                                    body: Body {
                                        commands: [
                                            Statement(
                                                Assign(
                                                    AssignStatement {
                                                        left: Identifier(
                                                            Raw(items),
                                                        ),
                                                        equals: Token(Equal, "=", (112,10)->(112,11)),
                                                        right: DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(reply),
                                                                        ),
                                                                        dot: Token(Dot, ".", (112,17)->(112,18)),
                                                                        index: RawIdentifier {
                                                                            name: "result",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (112,24)->(112,25)),
                                                                index: RawIdentifier {
                                                                    name: "items",
                                                                },
                                                            },
                                                        ),
                                                        eol: Token(EndOfLine, "\n", (112,30)->(112,30)),
                                                    },
                                                ),
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (113,2)->(113,7)),
                            endif_eol: Token(EndOfLine, "\n", (113,7)->(113,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (114,0)->(114,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (115,2)->(115,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (115,19)->(115,21)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (115,25)->(115,26)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (115,30)->(115,31)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (115,34)->(115,35)),
                                        },
                                        close: Token(GreaterThan, ">", (115,35)->(115,36)),
                                    },
                                },
                            ),
                            name: Raw(completeItems),
                            equal: Token(Equal, "=", (115,37)->(115,38)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (115,39)->(115,40)),
                                    elements: [],
                                    close: Token(RightBracket, "]", (115,40)->(115,41)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (115,41)->(115,41)),
                        },
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (116,2)->(116,5)),
                            for_identifier: Raw(item),
                            in_: Token(Identifier, "in", (116,11)->(116,13)),
                            for_expr: Identifier(
                                Raw(items),
                            ),
                            eol: Token(EndOfLine, "\n", (116,19)->(116,19)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (117,4)->(117,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (117,9)->(117,11)),
                                                    inner: Dict {
                                                        open: Token(AngleLeft, "<", (117,15)->(117,16)),
                                                        inner: Any,
                                                        close: Token(GreaterThan, ">", (117,19)->(117,20)),
                                                    },
                                                },
                                            ),
                                            name: Raw(d),
                                            equal: Token(Equal, "=", (117,21)->(117,22)),
                                            expr: Dict(
                                                DictLiteral {
                                                    open: Token(LeftBrace, "{", (117,23)->(117,24)),
                                                    elements: [],
                                                    close: Token(RightBrace, "}", (117,24)->(117,25)),
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (117,25)->(117,25)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (118,4)->(118,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (118,33)->(118,35)),
                                                    operator: And,
                                                    left: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(item),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (118,11)->(118,13)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "textEdit",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    right: MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(item),
                                                                    ),
                                                                    dot: Token(Dot, ".", (118,40)->(118,41)),
                                                                    index: RawIdentifier {
                                                                        name: "textEdit",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (118,49)->(118,51)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "newText",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (118,69)->(118,69)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(d),
                                                                        ),
                                                                        dot: Token(Dot, ".", (119,7)->(119,8)),
                                                                        index: RawIdentifier {
                                                                            name: "word",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (119,13)->(119,14)),
                                                                right: DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (119,19)->(119,20)),
                                                                                index: RawIdentifier {
                                                                                    name: "textEdit",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (119,28)->(119,29)),
                                                                        index: RawIdentifier {
                                                                            name: "newText",
                                                                        },
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (119,36)->(119,36)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [
                                                ElseIfCommand {
                                                    elseif_tok: Token(Identifier, "elseif", (120,4)->(120,10)),
                                                    condition: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(item),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (120,15)->(120,17)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "insertText",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    elseif_eol: Token(EndOfLine, "\n", (120,38)->(120,38)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(d),
                                                                                ),
                                                                                dot: Token(Dot, ".", (121,7)->(121,8)),
                                                                                index: RawIdentifier {
                                                                                    name: "word",
                                                                                },
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, "=", (121,13)->(121,14)),
                                                                        right: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (121,19)->(121,20)),
                                                                                index: RawIdentifier {
                                                                                    name: "insertText",
                                                                                },
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (121,30)->(121,30)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (122,4)->(122,8)),
                                                    else_eol: Token(EndOfLine, "\n", (122,8)->(122,8)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(d),
                                                                                ),
                                                                                dot: Token(Dot, ".", (123,7)->(123,8)),
                                                                                index: RawIdentifier {
                                                                                    name: "word",
                                                                                },
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, "=", (123,13)->(123,14)),
                                                                        right: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (123,19)->(123,20)),
                                                                                index: RawIdentifier {
                                                                                    name: "label",
                                                                                },
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (123,25)->(123,25)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (124,4)->(124,9)),
                                            endif_eol: Token(EndOfLine, "\n", (124,9)->(124,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(d),
                                                        ),
                                                        dot: Token(Dot, ".", (125,5)->(125,6)),
                                                        index: RawIdentifier {
                                                            name: "abbr",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (125,11)->(125,12)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(item),
                                                        ),
                                                        dot: Token(Dot, ".", (125,17)->(125,18)),
                                                        index: RawIdentifier {
                                                            name: "label",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (125,23)->(125,23)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (126,4)->(126,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(item),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (126,11)->(126,13)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "kind",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (126,28)->(126,28)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# namespace CompletionItemKind", (127,6)->(127,36)),
                                                    ),
                                                    Comment(
                                                        Token(Comment, "# map LSP kind to complete-item-kind", (128,6)->(128,42)),
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(d),
                                                                        ),
                                                                        dot: Token(Dot, ".", (129,7)->(129,8)),
                                                                        index: RawIdentifier {
                                                                            name: "kind",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (129,13)->(129,14)),
                                                                right: Call(
                                                                    f: Identifier(Raw(LspCompleteItemKindChar)) arg: [
                                                                        DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (129,43)->(129,44)),
                                                                                index: RawIdentifier {
                                                                                    name: "kind",
                                                                                },
                                                                            },
                                                                        ),
                                                                    ],
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (129,49)->(129,49)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (130,4)->(130,9)),
                                            endif_eol: Token(EndOfLine, "\n", (130,9)->(130,9)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (131,4)->(131,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(item),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (131,11)->(131,13)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "detail",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (131,30)->(131,30)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(d),
                                                                        ),
                                                                        dot: Token(Dot, ".", (132,7)->(132,8)),
                                                                        index: RawIdentifier {
                                                                            name: "menu",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (132,13)->(132,14)),
                                                                right: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(item),
                                                                        ),
                                                                        dot: Token(Dot, ".", (132,19)->(132,20)),
                                                                        index: RawIdentifier {
                                                                            name: "detail",
                                                                        },
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (132,26)->(132,26)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (133,4)->(133,9)),
                                            endif_eol: Token(EndOfLine, "\n", (133,9)->(133,9)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (134,4)->(134,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(item),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (134,11)->(134,13)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "documentation",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (134,37)->(134,37)),
                                            body: Body {
                                                commands: [
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (135,6)->(135,8)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(And, "&&", (135,50)->(135,52)),
                                                                    operator: And,
                                                                    left: Infix(
                                                                        InfixExpression {
                                                                            token: Token(EqualTo, "==", (135,36)->(135,38)),
                                                                            operator: EqualTo,
                                                                            left: MethodCall(
                                                                                MethodCall {
                                                                                    left: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(item),
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (135,13)->(135,14)),
                                                                                            index: RawIdentifier {
                                                                                                name: "documentation",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    tok: Token(MethodArrow, "->", (135,27)->(135,29)),
                                                                                    right: f: Identifier(Raw(type)) arg: [],
                                                                                },
                                                                            ),
                                                                            right: Identifier(
                                                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (135,40)->(135,41)), accessor: Raw(t_string) }),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Infix(
                                                                        InfixExpression {
                                                                            token: Token(NotEqualTo, "!=", (135,72)->(135,74)),
                                                                            operator: NotEqualTo,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(item),
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (135,57)->(135,58)),
                                                                                    index: RawIdentifier {
                                                                                        name: "documentation",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (135,77)->(135,77)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(d),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (136,2)->(136,3)),
                                                                                        index: RawIdentifier {
                                                                                            name: "info",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                equals: Token(Equal, "=", (136,8)->(136,9)),
                                                                                right: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(item),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (136,14)->(136,15)),
                                                                                        index: RawIdentifier {
                                                                                            name: "documentation",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (136,28)->(136,28)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [
                                                                ElseIfCommand {
                                                                    elseif_tok: Token(Identifier, "elseif", (137,6)->(137,12)),
                                                                    condition: Infix(
                                                                        InfixExpression {
                                                                            token: Token(And, "&&", (138,3)->(138,5)),
                                                                            operator: And,
                                                                            left: Infix(
                                                                                InfixExpression {
                                                                                    token: Token(EqualTo, "==", (137,40)->(137,42)),
                                                                                    operator: EqualTo,
                                                                                    left: MethodCall(
                                                                                        MethodCall {
                                                                                            left: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(item),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (137,17)->(137,18)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "documentation",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            tok: Token(MethodArrow, "->", (137,31)->(137,33)),
                                                                                            right: f: Identifier(Raw(type)) arg: [],
                                                                                        },
                                                                                    ),
                                                                                    right: Identifier(
                                                                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (137,44)->(137,45)), accessor: Raw(t_dict) }),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            right: Infix(
                                                                                InfixExpression {
                                                                                    token: Token(EqualTo, "==", (138,39)->(138,41)),
                                                                                    operator: EqualTo,
                                                                                    left: MethodCall(
                                                                                        MethodCall {
                                                                                            left: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: DictAccess(
                                                                                                        DictAccess {
                                                                                                            container: Identifier(
                                                                                                                Raw(item),
                                                                                                            ),
                                                                                                            dot: Token(Dot, ".", (138,10)->(138,11)),
                                                                                                            index: RawIdentifier {
                                                                                                                name: "documentation",
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (138,24)->(138,25)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "value",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            tok: Token(MethodArrow, "->", (138,30)->(138,32)),
                                                                                            right: f: Identifier(Raw(type)) arg: [],
                                                                                        },
                                                                                    ),
                                                                                    right: Identifier(
                                                                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (138,43)->(138,44)), accessor: Raw(t_string) }),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    elseif_eol: Token(EndOfLine, "\n", (138,52)->(138,52)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Statement(
                                                                                Assign(
                                                                                    AssignStatement {
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(d),
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (139,2)->(139,3)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "info",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        equals: Token(Equal, "=", (139,8)->(139,9)),
                                                                                        right: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(item),
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (139,14)->(139,15)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "documentation",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (139,28)->(139,29)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "value",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        eol: Token(EndOfLine, "\n", (139,34)->(139,34)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, "endif", (140,6)->(140,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (140,11)->(140,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (141,4)->(141,9)),
                                            endif_eol: Token(EndOfLine, "\n", (141,9)->(141,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(d),
                                                        ),
                                                        dot: Token(Dot, ".", (142,5)->(142,6)),
                                                        index: RawIdentifier {
                                                            name: "user_data",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (142,16)->(142,17)),
                                                right: Identifier(
                                                    Raw(item),
                                                ),
                                                eol: Token(EndOfLine, "\n", (142,22)->(142,22)),
                                            },
                                        ),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(completeItems),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (143,17)->(143,19)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(d),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (143,25)->(143,25)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (144,2)->(144,8)),
                            endfor_eol: Token(EndOfLine, "\n", (144,8)->(144,8)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (145,0)->(145,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (146,2)->(146,4)),
                            condition: DictAccess(
                                DictAccess {
                                    container: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(opt),
                                            ),
                                            dot: Token(Dot, ".", (146,8)->(146,9)),
                                            index: RawIdentifier {
                                                name: "lspOptions",
                                            },
                                        },
                                    ),
                                    dot: Token(Dot, ".", (146,19)->(146,20)),
                                    index: RawIdentifier {
                                        name: "autoComplete",
                                    },
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (146,32)->(146,32)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (147,4)->(147,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(completeItems),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (147,20)->(147,22)),
                                                    right: f: Identifier(Raw(empty)) arg: [],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (147,29)->(147,29)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# no matches", (148,6)->(148,18)),
                                                    ),
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (149,6)->(149,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (149,12)->(149,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (150,4)->(150,9)),
                                            endif_eol: Token(EndOfLine, "\n", (150,9)->(150,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (151,0)->(151,0)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (152,4)->(152,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (152,38)->(152,40)),
                                                    operator: And,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(And, "&&", (152,21)->(152,23)),
                                                            operator: And,
                                                            left: Infix(
                                                                InfixExpression {
                                                                    token: Token(NotEqualTo, "!=", (152,14)->(152,16)),
                                                                    operator: NotEqualTo,
                                                                    left: Call(
                                                                        f: Identifier(Raw(mode)) arg: [],
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "i",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            right: Infix(
                                                                InfixExpression {
                                                                    token: Token(NotEqualTo, "!=", (152,31)->(152,33)),
                                                                    operator: NotEqualTo,
                                                                    left: Call(
                                                                        f: Identifier(Raw(mode)) arg: [],
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "R",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(NotEqualTo, "!=", (152,48)->(152,50)),
                                                            operator: NotEqualTo,
                                                            left: Call(
                                                                f: Identifier(Raw(mode)) arg: [],
                                                            ),
                                                            right: String(
                                                                SingleQuote(
                                                                    "Rv",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (152,55)->(152,55)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# If not in insert or replace mode, then don't start the completion", (153,6)->(153,73)),
                                                    ),
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (154,6)->(154,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (154,12)->(154,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (155,4)->(155,9)),
                                            endif_eol: Token(EndOfLine, "\n", (155,9)->(155,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (156,0)->(156,0)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (157,4)->(157,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (158,1)->(158,3)),
                                                    operator: And,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==", (157,28)->(157,30)),
                                                            operator: EqualTo,
                                                            left: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(completeItems),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (157,20)->(157,22)),
                                                                    right: f: Identifier(Raw(len)) arg: [],
                                                                },
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "1",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(NotEqualTo, "!=", (158,58)->(158,60)),
                                                            operator: NotEqualTo,
                                                            left: Call(
                                                                f: Identifier(Raw(matchstr)) arg: [
                                                                    Call(
                                                                        f: Identifier(Raw(getline)) arg: [
                                                                            String(
                                                                                SingleQuote(
                                                                                    ".",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    Infix(
                                                                        InfixExpression {
                                                                            token: Token(StringConcat, "..", (158,49)->(158,51)),
                                                                            operator: StringConcat,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: Index(
                                                                                        IndexExpression {
                                                                                            container: Identifier(
                                                                                                Raw(completeItems),
                                                                                            ),
                                                                                            open: Token(LeftBracket, "[", (158,40)->(158,41)),
                                                                                            index: Item(
                                                                                                Number(
                                                                                                    VimNumber {
                                                                                                        value: "0",
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                            close: Token(RightBracket, "]", (158,42)->(158,43)),
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (158,43)->(158,44)),
                                                                                    index: RawIdentifier {
                                                                                        name: "word",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "\\>",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            ),
                                                            right: String(
                                                                SingleQuote(
                                                                    "",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (158,63)->(158,63)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# only one complete match. No need to show the completion popup", (159,6)->(159,69)),
                                                    ),
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (160,6)->(160,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (160,12)->(160,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (161,4)->(161,9)),
                                            endif_eol: Token(EndOfLine, "\n", (161,9)->(161,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (162,0)->(162,0)),
                                    ),
                                    Comment(
                                        Token(Comment, "# Find the start column for the completion.  If any of the entries", (163,4)->(163,70)),
                                    ),
                                    Comment(
                                        Token(Comment, "# returned by the LSP server has a starting position, then use that.", (164,4)->(164,72)),
                                    ),
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (165,4)->(165,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (165,17)->(165,19)),
                                                    inner: Number,
                                                },
                                            ),
                                            name: Raw(start_col),
                                            equal: Token(Equal, "=", (165,26)->(165,27)),
                                            expr: Number(
                                                VimNumber {
                                                    value: "0",
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (165,29)->(165,29)),
                                        },
                                    ),
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, "for", (166,4)->(166,7)),
                                            for_identifier: Raw(item),
                                            in_: Token(Identifier, "in", (166,13)->(166,15)),
                                            for_expr: Identifier(
                                                Raw(items),
                                            ),
                                            eol: Token(EndOfLine, "\n", (166,21)->(166,21)),
                                            body: Body {
                                                commands: [
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (167,6)->(167,8)),
                                                            condition: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(item),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (167,13)->(167,15)),
                                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                                        String(
                                                                            SingleQuote(
                                                                                "textEdit",
                                                                            ),
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (167,34)->(167,34)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Identifier(
                                                                                    Raw(start_col),
                                                                                ),
                                                                                equals: Token(Equal, "=", (168,11)->(168,12)),
                                                                                right: Infix(
                                                                                    InfixExpression {
                                                                                        token: Token(Plus, "+", (168,49)->(168,50)),
                                                                                        operator: Plus,
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(item),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, ".", (168,17)->(168,18)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "textEdit",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                dot: Token(Dot, ".", (168,26)->(168,27)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "range",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (168,32)->(168,33)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "start",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (168,38)->(168,39)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "character",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        right: Number(
                                                                                            VimNumber {
                                                                                                value: "1",
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (168,52)->(168,52)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    Break(
                                                                        BreakCommand {
                                                                            br: Token(Identifier, "break", (169,1)->(169,6)),
                                                                            eol: Token(EndOfLine, "\n", (169,6)->(169,6)),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, "endif", (170,6)->(170,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (170,11)->(170,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, "endfor", (171,4)->(171,10)),
                                            endfor_eol: Token(EndOfLine, "\n", (171,10)->(171,10)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (172,0)->(172,0)),
                                    ),
                                    Comment(
                                        Token(Comment, "# LSP server didn't return a starting position for completion, search", (173,4)->(173,73)),
                                    ),
                                    Comment(
                                        Token(Comment, "# backwards from the current cursor position for a non-keyword character.", (174,4)->(174,77)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (175,4)->(175,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (175,17)->(175,19)),
                                                    operator: EqualTo,
                                                    left: Identifier(
                                                        Raw(start_col),
                                                    ),
                                                    right: Number(
                                                        VimNumber {
                                                            value: "0",
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (175,21)->(175,21)),
                                            body: Body {
                                                commands: [
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, "var", (176,6)->(176,9)),
                                                            ty: Some(
                                                                Type {
                                                                    colon: Token(SpacedColon, ": ", (176,14)->(176,16)),
                                                                    inner: String,
                                                                },
                                                            ),
                                                            name: Raw(line),
                                                            equal: Token(Equal, "=", (176,23)->(176,24)),
                                                            expr: Call(
                                                                f: Identifier(Raw(getline)) arg: [
                                                                    String(
                                                                        SingleQuote(
                                                                            ".",
                                                                        ),
                                                                    ),
                                                                ],
                                                            ),
                                                            eol: Token(EndOfLine, "\n", (176,37)->(176,37)),
                                                        },
                                                    ),
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, "var", (177,6)->(177,9)),
                                                            ty: None,
                                                            name: Raw(start),
                                                            equal: Token(Equal, "=", (177,16)->(177,17)),
                                                            expr: Infix(
                                                                InfixExpression {
                                                                    token: Token(Minus, "-", (177,27)->(177,28)),
                                                                    operator: Minus,
                                                                    left: Call(
                                                                        f: Identifier(Raw(col)) arg: [
                                                                            String(
                                                                                SingleQuote(
                                                                                    ".",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    right: Number(
                                                                        VimNumber {
                                                                            value: "1",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, "\n", (177,30)->(177,30)),
                                                        },
                                                    ),
                                                    While(
                                                        WhileCommand {
                                                            while_: Token(Identifier, "while", (178,6)->(178,11)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(And, "&&", (178,22)->(178,24)),
                                                                    operator: And,
                                                                    left: Infix(
                                                                        InfixExpression {
                                                                            token: Token(GreaterThan, ">", (178,18)->(178,19)),
                                                                            operator: GreaterThan,
                                                                            left: Identifier(
                                                                                Raw(start),
                                                                            ),
                                                                            right: Number(
                                                                                VimNumber {
                                                                                    value: "0",
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Infix(
                                                                        InfixExpression {
                                                                            token: Token(RegexpMatches, "=~", (178,41)->(178,43)),
                                                                            operator: RegexpMatches,
                                                                            left: Index(
                                                                                IndexExpression {
                                                                                    container: Identifier(
                                                                                        Raw(line),
                                                                                    ),
                                                                                    open: Token(LeftBracket, "[", (178,29)->(178,30)),
                                                                                    index: Item(
                                                                                        Infix(
                                                                                            InfixExpression {
                                                                                                token: Token(Minus, "-", (178,36)->(178,37)),
                                                                                                operator: Minus,
                                                                                                left: Identifier(
                                                                                                    Raw(start),
                                                                                                ),
                                                                                                right: Number(
                                                                                                    VimNumber {
                                                                                                        value: "1",
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    close: Token(RightBracket, "]", (178,39)->(178,40)),
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "\\k",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            while_eol: Token(EndOfLine, "\n", (178,48)->(178,48)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Mutate(
                                                                            MutationStatement {
                                                                                left: Identifier(
                                                                                    Raw(start),
                                                                                ),
                                                                                modifier: Token(MinusEquals, "-=", (179,7)->(179,9)),
                                                                                right: Number(
                                                                                    VimNumber {
                                                                                        value: "1",
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (179,11)->(179,11)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            endwhile_: Token(Identifier, "endwhile", (180,6)->(180,14)),
                                                            endwhile_eol: Token(EndOfLine, "\n", (180,14)->(180,14)),
                                                        },
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(start_col),
                                                                ),
                                                                equals: Token(Equal, "=", (181,16)->(181,17)),
                                                                right: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (181,24)->(181,25)),
                                                                        operator: Plus,
                                                                        left: Identifier(
                                                                            Raw(start),
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "1",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (181,27)->(181,27)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (182,4)->(182,9)),
                                            endif_eol: Token(EndOfLine, "\n", (182,9)->(182,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (183,0)->(183,0)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(complete),
                                            ),
                                            open: Token(LeftParen, "(", (184,12)->(184,13)),
                                            args: [
                                                Identifier(
                                                    Raw(start_col),
                                                ),
                                                Identifier(
                                                    Raw(completeItems),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (184,37)->(184,38)),
                                            eol: Token(EndOfLine, "\n", (184,38)->(184,38)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (185,2)->(185,6)),
                                    else_eol: Token(EndOfLine, "\n", (185,6)->(185,6)),
                                    body: Body {
                                        commands: [
                                            Statement(
                                                Assign(
                                                    AssignStatement {
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(lspserver),
                                                                ),
                                                                dot: Token(Dot, ".", (186,13)->(186,14)),
                                                                index: RawIdentifier {
                                                                    name: "completeItems",
                                                                },
                                                            },
                                                        ),
                                                        equals: Token(Equal, "=", (186,28)->(186,29)),
                                                        right: Identifier(
                                                            Raw(completeItems),
                                                        ),
                                                        eol: Token(EndOfLine, "\n", (186,43)->(186,43)),
                                                    },
                                                ),
                                            ),
                                            Statement(
                                                Assign(
                                                    AssignStatement {
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(lspserver),
                                                                ),
                                                                dot: Token(Dot, ".", (187,13)->(187,14)),
                                                                index: RawIdentifier {
                                                                    name: "completePending",
                                                                },
                                                            },
                                                        ),
                                                        equals: Token(Equal, "=", (187,30)->(187,31)),
                                                        right: Boolean(
                                                            VimBoolean {
                                                                token: Token(False, "false", (187,32)->(187,37)),
                                                                value: false,
                                                            },
                                                        ),
                                                        eol: Token(EndOfLine, "\n", (187,37)->(187,37)),
                                                    },
                                                ),
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (188,2)->(188,7)),
                            endif_eol: Token(EndOfLine, "\n", (188,7)->(188,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (189,0)->(189,6)),
            end_eol: Token(EndOfLine, "\n", (189,6)->(189,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (190,0)->(190,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/hover' reply from the LSP server", (191,0)->(191,60)),
    ),
    Comment(
        Token(Comment, "# Result: Hover | null", (192,0)->(192,22)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (193,0)->(193,3)),
            name: Raw(ProcessHoverReply),
            args: Signature {
                open: Token(LeftParen, "(", (193,21)->(193,22)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (193,31)->(193,33)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (193,37)->(193,38)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (193,41)->(193,42)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (193,47)->(193,49)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (193,53)->(193,54)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (193,57)->(193,58)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (193,65)->(193,67)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (193,71)->(193,72)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (193,75)->(193,76)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (193,76)->(193,77)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (193,77)->(193,79)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (193,83)->(193,83)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (194,2)->(194,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (194,10)->(194,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (194,17)->(194,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (194,26)->(194,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (195,4)->(195,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (195,10)->(195,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (196,2)->(196,7)),
                            endif_eol: Token(EndOfLine, "\n", (196,7)->(196,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (197,0)->(197,0)),
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (198,2)->(198,5)),
                            name: Raw(hoverText),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (198,15)->(198,17)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (198,21)->(198,22)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (198,28)->(198,29)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (198,29)->(198,29)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (199,2)->(199,5)),
                            name: Raw(hoverKind),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (199,15)->(199,17)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (199,23)->(199,23)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (200,0)->(200,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (201,2)->(201,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (201,35)->(201,37)),
                                    operator: EqualTo,
                                    left: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (201,10)->(201,11)),
                                                            index: RawIdentifier {
                                                                name: "result",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (201,17)->(201,18)),
                                                    index: RawIdentifier {
                                                        name: "contents",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, "->", (201,26)->(201,28)),
                                            right: f: Identifier(Raw(type)) arg: [],
                                        },
                                    ),
                                    right: Identifier(
                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (201,39)->(201,40)), accessor: Raw(t_dict) }),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (201,46)->(201,46)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (202,4)->(202,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (202,12)->(202,13)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (202,19)->(202,20)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (202,28)->(202,30)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "kind",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (202,45)->(202,45)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# MarkupContent", (203,6)->(203,21)),
                                                    ),
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (204,6)->(204,8)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==", (204,36)->(204,38)),
                                                                    operator: EqualTo,
                                                                    left: DictAccess(
                                                                        DictAccess {
                                                                            container: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(reply),
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (204,14)->(204,15)),
                                                                                            index: RawIdentifier {
                                                                                                name: "result",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (204,21)->(204,22)),
                                                                                    index: RawIdentifier {
                                                                                        name: "contents",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            dot: Token(Dot, ".", (204,30)->(204,31)),
                                                                            index: RawIdentifier {
                                                                                name: "kind",
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "plaintext",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (204,50)->(204,50)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Identifier(
                                                                                    Raw(hoverText),
                                                                                ),
                                                                                equals: Token(Equal, "=", (205,18)->(205,19)),
                                                                                right: MethodCall(
                                                                                    MethodCall {
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: Identifier(
                                                                                                                    Raw(reply),
                                                                                                                ),
                                                                                                                dot: Token(Dot, ".", (205,25)->(205,26)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "result",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (205,32)->(205,33)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "contents",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (205,41)->(205,42)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "value",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        tok: Token(MethodArrow, "->", (205,47)->(205,49)),
                                                                                        right: f: Identifier(Raw(split)) arg: [
                                                                                            String(
                                                                                                DoubleQuote(
                                                                                                    "\\n",
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (205,60)->(205,60)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Identifier(
                                                                                    Raw(hoverKind),
                                                                                ),
                                                                                equals: Token(Equal, "=", (206,18)->(206,19)),
                                                                                right: String(
                                                                                    SingleQuote(
                                                                                        "text",
                                                                                    ),
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (206,26)->(206,26)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [
                                                                ElseIfCommand {
                                                                    elseif_tok: Token(Identifier, "elseif", (207,6)->(207,12)),
                                                                    condition: Infix(
                                                                        InfixExpression {
                                                                            token: Token(EqualTo, "==", (207,40)->(207,42)),
                                                                            operator: EqualTo,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(reply),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (207,18)->(207,19)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "result",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (207,25)->(207,26)),
                                                                                            index: RawIdentifier {
                                                                                                name: "contents",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (207,34)->(207,35)),
                                                                                    index: RawIdentifier {
                                                                                        name: "kind",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "markdown",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    elseif_eol: Token(EndOfLine, "\n", (207,53)->(207,53)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Statement(
                                                                                Assign(
                                                                                    AssignStatement {
                                                                                        left: Identifier(
                                                                                            Raw(hoverText),
                                                                                        ),
                                                                                        equals: Token(Equal, "=", (208,18)->(208,19)),
                                                                                        right: MethodCall(
                                                                                            MethodCall {
                                                                                                left: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(reply),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, ".", (208,25)->(208,26)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "result",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                dot: Token(Dot, ".", (208,32)->(208,33)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "contents",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (208,41)->(208,42)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "value",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                tok: Token(MethodArrow, "->", (208,47)->(208,49)),
                                                                                                right: f: Identifier(Raw(split)) arg: [
                                                                                                    String(
                                                                                                        DoubleQuote(
                                                                                                            "\\n",
                                                                                                        ),
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        eol: Token(EndOfLine, "\n", (208,60)->(208,60)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            Statement(
                                                                                Assign(
                                                                                    AssignStatement {
                                                                                        left: Identifier(
                                                                                            Raw(hoverKind),
                                                                                        ),
                                                                                        equals: Token(Equal, "=", (209,18)->(209,19)),
                                                                                        right: String(
                                                                                            SingleQuote(
                                                                                                "markdown",
                                                                                            ),
                                                                                        ),
                                                                                        eol: Token(EndOfLine, "\n", (209,30)->(209,30)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                            else_command: Some(
                                                                ElseCommand {
                                                                    else_tok: Token(Identifier, "else", (210,6)->(210,10)),
                                                                    else_eol: Token(EndOfLine, "\n", (210,10)->(210,10)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Call(
                                                                                CallCommand {
                                                                                    call: None,
                                                                                    expr: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(util),
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (211,12)->(211,13)),
                                                                                            index: RawIdentifier {
                                                                                                name: "ErrMsg",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    open: Token(LeftParen, "(", (211,19)->(211,20)),
                                                                                    args: [
                                                                                        String(
                                                                                            Interpolated(
                                                                                                "Error: Unsupported hover contents type ({reply.result.contents.kind})",
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                    close: Token(RightParen, ")", (211,92)->(211,93)),
                                                                                    eol: Token(EndOfLine, "\n", (211,93)->(211,93)),
                                                                                },
                                                                            ),
                                                                            Return(
                                                                                ReturnCommand {
                                                                                    ret: Token(Identifier, "return", (212,8)->(212,14)),
                                                                                    expr: None,
                                                                                    eol: Token(EndOfLine, "\n", (212,14)->(212,14)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                            endif_tok: Token(Identifier, "endif", (213,6)->(213,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (213,11)->(213,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [
                                                ElseIfCommand {
                                                    elseif_tok: Token(Identifier, "elseif", (214,4)->(214,10)),
                                                    condition: MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (214,16)->(214,17)),
                                                                            index: RawIdentifier {
                                                                                name: "result",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (214,23)->(214,24)),
                                                                    index: RawIdentifier {
                                                                        name: "contents",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (214,32)->(214,34)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "value",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    elseif_eol: Token(EndOfLine, "\n", (214,50)->(214,50)),
                                                    body: Body {
                                                        commands: [
                                                            Comment(
                                                                Token(Comment, "# MarkedString", (215,6)->(215,20)),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(hoverText),
                                                                        ),
                                                                        equals: Token(Equal, "=", (216,16)->(216,17)),
                                                                        right: MethodCall(
                                                                            MethodCall {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(reply),
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (216,23)->(216,24)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "result",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (216,30)->(216,31)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "contents",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (216,39)->(216,40)),
                                                                                        index: RawIdentifier {
                                                                                            name: "value",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                tok: Token(MethodArrow, "->", (216,45)->(216,47)),
                                                                                right: f: Identifier(Raw(split)) arg: [
                                                                                    String(
                                                                                        DoubleQuote(
                                                                                            "\\n",
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (216,58)->(216,58)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (217,4)->(217,8)),
                                                    else_eol: Token(EndOfLine, "\n", (217,8)->(217,8)),
                                                    body: Body {
                                                        commands: [
                                                            Call(
                                                                CallCommand {
                                                                    call: None,
                                                                    expr: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(util),
                                                                            ),
                                                                            dot: Token(Dot, ".", (218,10)->(218,11)),
                                                                            index: RawIdentifier {
                                                                                name: "ErrMsg",
                                                                            },
                                                                        },
                                                                    ),
                                                                    open: Token(LeftParen, "(", (218,17)->(218,18)),
                                                                    args: [
                                                                        String(
                                                                            Interpolated(
                                                                                "Error: Unsupported hover contents ({reply.result.contents})",
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    close: Token(RightParen, ")", (218,80)->(218,81)),
                                                                    eol: Token(EndOfLine, "\n", (218,81)->(218,81)),
                                                                },
                                                            ),
                                                            Return(
                                                                ReturnCommand {
                                                                    ret: Token(Identifier, "return", (219,6)->(219,12)),
                                                                    expr: None,
                                                                    eol: Token(EndOfLine, "\n", (219,12)->(219,12)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (220,4)->(220,9)),
                                            endif_eol: Token(EndOfLine, "\n", (220,9)->(220,9)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [
                                ElseIfCommand {
                                    elseif_tok: Token(Identifier, "elseif", (221,2)->(221,8)),
                                    condition: Infix(
                                        InfixExpression {
                                            token: Token(EqualTo, "==", (221,39)->(221,41)),
                                            operator: EqualTo,
                                            left: MethodCall(
                                                MethodCall {
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (221,14)->(221,15)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (221,21)->(221,22)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (221,30)->(221,32)),
                                                    right: f: Identifier(Raw(type)) arg: [],
                                                },
                                            ),
                                            right: Identifier(
                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (221,43)->(221,44)), accessor: Raw(t_list) }),
                                            ),
                                        },
                                    ),
                                    elseif_eol: Token(EndOfLine, "\n", (221,50)->(221,50)),
                                    body: Body {
                                        commands: [
                                            Comment(
                                                Token(Comment, "# interface MarkedString[]", (222,4)->(222,30)),
                                            ),
                                            For(
                                                ForCommand {
                                                    for_: Token(Identifier, "for", (223,4)->(223,7)),
                                                    for_identifier: Raw(e),
                                                    in_: Token(Identifier, "in", (223,10)->(223,12)),
                                                    for_expr: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (223,18)->(223,19)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (223,25)->(223,26)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, "\n", (223,34)->(223,34)),
                                                    body: Body {
                                                        commands: [
                                                            If(
                                                                IfCommand {
                                                                    if_tok: Token(Identifier, "if", (224,6)->(224,8)),
                                                                    condition: Infix(
                                                                        InfixExpression {
                                                                            token: Token(EqualTo, "==", (224,19)->(224,21)),
                                                                            operator: EqualTo,
                                                                            left: MethodCall(
                                                                                MethodCall {
                                                                                    left: Identifier(
                                                                                        Raw(e),
                                                                                    ),
                                                                                    tok: Token(MethodArrow, "->", (224,10)->(224,12)),
                                                                                    right: f: Identifier(Raw(type)) arg: [],
                                                                                },
                                                                            ),
                                                                            right: Identifier(
                                                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (224,23)->(224,24)), accessor: Raw(t_string) }),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    if_eol: Token(EndOfLine, "\n", (224,32)->(224,32)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Eval(
                                                                                EvalCommand {
                                                                                    eval: None,
                                                                                    expr: MethodCall(
                                                                                        MethodCall {
                                                                                            left: Identifier(
                                                                                                Raw(hoverText),
                                                                                            ),
                                                                                            tok: Token(MethodArrow, "->", (225,17)->(225,19)),
                                                                                            right: f: Identifier(Raw(extend)) arg: [
                                                                                                MethodCall(
                                                                                                    MethodCall {
                                                                                                        left: Identifier(
                                                                                                            Raw(e),
                                                                                                        ),
                                                                                                        tok: Token(MethodArrow, "->", (225,27)->(225,29)),
                                                                                                        right: f: Identifier(Raw(split)) arg: [
                                                                                                            String(
                                                                                                                DoubleQuote(
                                                                                                                    "\\n",
                                                                                                                ),
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    eol: Token(EndOfLine, "\n", (225,41)->(225,41)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    elseifs: [],
                                                                    else_command: Some(
                                                                        ElseCommand {
                                                                            else_tok: Token(Identifier, "else", (226,6)->(226,10)),
                                                                            else_eol: Token(EndOfLine, "\n", (226,10)->(226,10)),
                                                                            body: Body {
                                                                                commands: [
                                                                                    Eval(
                                                                                        EvalCommand {
                                                                                            eval: None,
                                                                                            expr: MethodCall(
                                                                                                MethodCall {
                                                                                                    left: Identifier(
                                                                                                        Raw(hoverText),
                                                                                                    ),
                                                                                                    tok: Token(MethodArrow, "->", (227,17)->(227,19)),
                                                                                                    right: f: Identifier(Raw(extend)) arg: [
                                                                                                        MethodCall(
                                                                                                            MethodCall {
                                                                                                                left: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(e),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, ".", (227,27)->(227,28)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "value",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                tok: Token(MethodArrow, "->", (227,33)->(227,35)),
                                                                                                                right: f: Identifier(Raw(split)) arg: [
                                                                                                                    String(
                                                                                                                        DoubleQuote(
                                                                                                                            "\\n",
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            eol: Token(EndOfLine, "\n", (227,47)->(227,47)),
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        },
                                                                    ),
                                                                    endif_tok: Token(Identifier, "endif", (228,6)->(228,11)),
                                                                    endif_eol: Token(EndOfLine, "\n", (228,11)->(228,11)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    endfor_: Token(Identifier, "endfor", (229,4)->(229,10)),
                                                    endfor_eol: Token(EndOfLine, "\n", (229,10)->(229,10)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                                ElseIfCommand {
                                    elseif_tok: Token(Identifier, "elseif", (230,2)->(230,8)),
                                    condition: Infix(
                                        InfixExpression {
                                            token: Token(EqualTo, "==", (230,39)->(230,41)),
                                            operator: EqualTo,
                                            left: MethodCall(
                                                MethodCall {
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (230,14)->(230,15)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (230,21)->(230,22)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (230,30)->(230,32)),
                                                    right: f: Identifier(Raw(type)) arg: [],
                                                },
                                            ),
                                            right: Identifier(
                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (230,43)->(230,44)), accessor: Raw(t_string) }),
                                            ),
                                        },
                                    ),
                                    elseif_eol: Token(EndOfLine, "\n", (230,52)->(230,52)),
                                    body: Body {
                                        commands: [
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, "if", (231,4)->(231,6)),
                                                    condition: MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (231,12)->(231,13)),
                                                                            index: RawIdentifier {
                                                                                name: "result",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (231,19)->(231,20)),
                                                                    index: RawIdentifier {
                                                                        name: "contents",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (231,28)->(231,30)),
                                                            right: f: Identifier(Raw(empty)) arg: [],
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, "\n", (231,37)->(231,37)),
                                                    body: Body {
                                                        commands: [
                                                            Return(
                                                                ReturnCommand {
                                                                    ret: Token(Identifier, "return", (232,6)->(232,12)),
                                                                    expr: None,
                                                                    eol: Token(EndOfLine, "\n", (232,12)->(232,12)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, "endif", (233,4)->(233,9)),
                                                    endif_eol: Token(EndOfLine, "\n", (233,9)->(233,9)),
                                                },
                                            ),
                                            Eval(
                                                EvalCommand {
                                                    eval: None,
                                                    expr: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(hoverText),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (234,13)->(234,15)),
                                                            right: f: Identifier(Raw(extend)) arg: [
                                                                MethodCall(
                                                                    MethodCall {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(reply),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (234,27)->(234,28)),
                                                                                        index: RawIdentifier {
                                                                                            name: "result",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                dot: Token(Dot, ".", (234,34)->(234,35)),
                                                                                index: RawIdentifier {
                                                                                    name: "contents",
                                                                                },
                                                                            },
                                                                        ),
                                                                        tok: Token(MethodArrow, "->", (234,43)->(234,45)),
                                                                        right: f: Identifier(Raw(split)) arg: [
                                                                            String(
                                                                                DoubleQuote(
                                                                                    "\\n",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, "\n", (234,57)->(234,57)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (235,2)->(235,6)),
                                    else_eol: Token(EndOfLine, "\n", (235,6)->(235,6)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(util),
                                                            ),
                                                            dot: Token(Dot, ".", (236,8)->(236,9)),
                                                            index: RawIdentifier {
                                                                name: "ErrMsg",
                                                            },
                                                        },
                                                    ),
                                                    open: Token(LeftParen, "(", (236,15)->(236,16)),
                                                    args: [
                                                        String(
                                                            Interpolated(
                                                                "Error: Unsupported hover contents ({reply.result.contents})",
                                                            ),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (236,78)->(236,79)),
                                                    eol: Token(EndOfLine, "\n", (236,79)->(236,79)),
                                                },
                                            ),
                                            Return(
                                                ReturnCommand {
                                                    ret: Token(Identifier, "return", (237,4)->(237,10)),
                                                    expr: None,
                                                    eol: Token(EndOfLine, "\n", (237,10)->(237,10)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (238,2)->(238,7)),
                            endif_eol: Token(EndOfLine, "\n", (238,7)->(238,7)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (239,2)->(239,4)),
                            condition: DictAccess(
                                DictAccess {
                                    container: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(opt),
                                            ),
                                            dot: Token(Dot, ".", (239,8)->(239,9)),
                                            index: RawIdentifier {
                                                name: "lspOptions",
                                            },
                                        },
                                    ),
                                    dot: Token(Dot, ".", (239,19)->(239,20)),
                                    index: RawIdentifier {
                                        name: "hoverInPreview",
                                    },
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (239,34)->(239,34)),
                            body: Body {
                                commands: [
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "            pedit HoverReply",
                                            eol: Token(EndOfLine, "\n", (240,28)->(240,28)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    wincmd P",
                                            eol: Token(EndOfLine, "\n", (241,12)->(241,12)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    setlocal buftype=nofile",
                                            eol: Token(EndOfLine, "\n", (242,27)->(242,27)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    setlocal bufhidden=delete",
                                            eol: Token(EndOfLine, "\n", (243,29)->(243,29)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    exe   setlocal ft={hoverKind}",
                                            eol: Token(EndOfLine, "\n", (244,34)->(244,34)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(deletebufline),
                                            ),
                                            open: Token(LeftParen, "(", (245,17)->(245,18)),
                                            args: [
                                                Call(
                                                    f: Identifier(Raw(bufnr)) arg: [],
                                                ),
                                                Number(
                                                    VimNumber {
                                                        value: "1",
                                                    },
                                                ),
                                                String(
                                                    SingleQuote(
                                                        "$",
                                                    ),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (245,33)->(245,34)),
                                            eol: Token(EndOfLine, "\n", (245,34)->(245,34)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(append),
                                            ),
                                            open: Token(LeftParen, "(", (246,10)->(246,11)),
                                            args: [
                                                Number(
                                                    VimNumber {
                                                        value: "0",
                                                    },
                                                ),
                                                Identifier(
                                                    Raw(hoverText),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (246,23)->(246,24)),
                                            eol: Token(EndOfLine, "\n", (246,24)->(246,24)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(cursor),
                                            ),
                                            open: Token(LeftParen, "(", (247,10)->(247,11)),
                                            args: [
                                                Number(
                                                    VimNumber {
                                                        value: "1",
                                                    },
                                                ),
                                                Number(
                                                    VimNumber {
                                                        value: "1",
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (247,15)->(247,16)),
                                            eol: Token(EndOfLine, "\n", (247,16)->(247,16)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    wincmd p",
                                            eol: Token(EndOfLine, "\n", (248,12)->(248,12)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (249,2)->(249,6)),
                                    else_eol: Token(EndOfLine, "\n", (249,6)->(249,6)),
                                    body: Body {
                                        commands: [
                                            Eval(
                                                EvalCommand {
                                                    eval: None,
                                                    expr: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(hoverText),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (250,13)->(250,15)),
                                                            right: f: Identifier(Raw(popup_atcursor)) arg: [
                                                                Dict(
                                                                    DictLiteral {
                                                                        open: Token(LeftBrace, "{", (250,30)->(250,31)),
                                                                        elements: [
                                                                            KeyValue {
                                                                                key: Literal(
                                                                                    Literal {
                                                                                        token: Token(Identifier, "moved", (250,31)->(250,36)),
                                                                                    },
                                                                                ),
                                                                                colon: Token(SpacedColon, ": ", (250,36)->(250,38)),
                                                                                value: String(
                                                                                    SingleQuote(
                                                                                        "word",
                                                                                    ),
                                                                                ),
                                                                                comma: None,
                                                                            },
                                                                        ],
                                                                        close: Token(RightBrace, "}", (250,44)->(250,45)),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, "\n", (250,46)->(250,46)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (251,2)->(251,7)),
                            endif_eol: Token(EndOfLine, "\n", (251,7)->(251,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (252,0)->(252,6)),
            end_eol: Token(EndOfLine, "\n", (252,6)->(252,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (253,0)->(253,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/references' reply from the LSP server", (254,0)->(254,65)),
    ),
    Comment(
        Token(Comment, "# Result: Location[] | null", (255,0)->(255,27)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (256,0)->(256,3)),
            name: Raw(ProcessReferencesReply),
            args: Signature {
                open: Token(LeftParen, "(", (256,26)->(256,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (256,36)->(256,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (256,42)->(256,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (256,46)->(256,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (256,52)->(256,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (256,58)->(256,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (256,62)->(256,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (256,70)->(256,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (256,76)->(256,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (256,80)->(256,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (256,81)->(256,82)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (256,82)->(256,84)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (256,88)->(256,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (257,2)->(257,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (257,10)->(257,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (257,17)->(257,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (257,26)->(257,26)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(util),
                                                    ),
                                                    dot: Token(Dot, ".", (258,8)->(258,9)),
                                                    index: RawIdentifier {
                                                        name: "WarnMsg",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (258,16)->(258,17)),
                                            args: [
                                                String(
                                                    SingleQuote(
                                                        "Error: No references found",
                                                    ),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (258,45)->(258,46)),
                                            eol: Token(EndOfLine, "\n", (258,46)->(258,46)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        dot: Token(Dot, ".", (259,13)->(259,14)),
                                                        index: RawIdentifier {
                                                            name: "peekSymbol",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (259,25)->(259,26)),
                                                right: Boolean(
                                                    VimBoolean {
                                                        token: Token(False, "false", (259,27)->(259,32)),
                                                        value: false,
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (259,32)->(259,32)),
                                            },
                                        ),
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (260,4)->(260,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (260,10)->(260,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (261,2)->(261,7)),
                            endif_eol: Token(EndOfLine, "\n", (261,7)->(261,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (262,0)->(262,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(symbol),
                                    ),
                                    dot: Token(Dot, ".", (263,8)->(263,9)),
                                    index: RawIdentifier {
                                        name: "ShowReferences",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (263,23)->(263,24)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (263,40)->(263,41)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (263,47)->(263,48)),
                            eol: Token(EndOfLine, "\n", (263,48)->(263,48)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (264,0)->(264,6)),
            end_eol: Token(EndOfLine, "\n", (264,6)->(264,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (265,0)->(265,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/documentHighlight' reply from the LSP server", (266,0)->(266,72)),
    ),
    Comment(
        Token(Comment, "# Result: DocumentHighlight[] | null", (267,0)->(267,36)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (268,0)->(268,3)),
            name: Raw(ProcessDocHighlightReply),
            args: Signature {
                open: Token(LeftParen, "(", (268,28)->(268,29)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (268,38)->(268,40)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (268,44)->(268,45)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (268,48)->(268,49)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (268,54)->(268,56)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (268,60)->(268,61)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (268,64)->(268,65)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (268,72)->(268,74)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (268,78)->(268,79)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (268,82)->(268,83)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (268,83)->(268,84)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (268,84)->(268,86)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (268,90)->(268,90)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (269,2)->(269,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (269,10)->(269,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (269,17)->(269,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (269,26)->(269,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (270,4)->(270,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (270,10)->(270,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (271,2)->(271,7)),
                            endif_eol: Token(EndOfLine, "\n", (271,7)->(271,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (272,0)->(272,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (273,2)->(273,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (273,11)->(273,13)),
                                    inner: String,
                                },
                            ),
                            name: Raw(fname),
                            equal: Token(Equal, "=", (273,20)->(273,21)),
                            expr: Call(
                                f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (273,26)->(273,27)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                    DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(req),
                                                            ),
                                                            dot: Token(Dot, ".", (273,43)->(273,44)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (273,50)->(273,51)),
                                                    index: RawIdentifier {
                                                        name: "textDocument",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (273,63)->(273,64)),
                                            index: RawIdentifier {
                                                name: "uri",
                                            },
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, "\n", (273,68)->(273,68)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (274,2)->(274,5)),
                            ty: None,
                            name: Raw(bnr),
                            equal: Token(Equal, "=", (274,10)->(274,11)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(fname),
                                    ),
                                    tok: Token(MethodArrow, "->", (274,17)->(274,19)),
                                    right: f: Identifier(Raw(bufnr)) arg: [],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (274,26)->(274,26)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (275,0)->(275,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (276,2)->(276,5)),
                            for_identifier: Raw(docHL),
                            in_: Token(Identifier, "in", (276,12)->(276,14)),
                            for_expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(reply),
                                    ),
                                    dot: Token(Dot, ".", (276,20)->(276,21)),
                                    index: RawIdentifier {
                                        name: "result",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (276,27)->(276,27)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (277,4)->(277,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (277,12)->(277,14)),
                                                    inner: Number,
                                                },
                                            ),
                                            name: Raw(kind),
                                            equal: Token(Equal, "=", (277,21)->(277,22)),
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(docHL),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (277,28)->(277,30)),
                                                    right: f: Identifier(Raw(get)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "kind",
                                                            ),
                                                        ),
                                                        Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (277,44)->(277,44)),
                                        },
                                    ),
                                    Decl(
                                        DeclCommand {
                                            var: Token(Identifier, "var", (278,4)->(278,7)),
                                            name: Raw(propName),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (278,16)->(278,18)),
                                                    inner: String,
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (278,24)->(278,24)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (279,4)->(279,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (279,12)->(279,14)),
                                                    operator: EqualTo,
                                                    left: Identifier(
                                                        Raw(kind),
                                                    ),
                                                    right: Number(
                                                        VimNumber {
                                                            value: "2",
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (279,16)->(279,16)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# Read-access", (280,6)->(280,19)),
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(propName),
                                                                ),
                                                                equals: Token(Equal, "=", (281,15)->(281,16)),
                                                                right: String(
                                                                    SingleQuote(
                                                                        "LspReadRef",
                                                                    ),
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (281,29)->(281,29)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [
                                                ElseIfCommand {
                                                    elseif_tok: Token(Identifier, "elseif", (282,4)->(282,10)),
                                                    condition: Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==", (282,16)->(282,18)),
                                                            operator: EqualTo,
                                                            left: Identifier(
                                                                Raw(kind),
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "3",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    elseif_eol: Token(EndOfLine, "\n", (282,20)->(282,20)),
                                                    body: Body {
                                                        commands: [
                                                            Comment(
                                                                Token(Comment, "# Write-access", (283,6)->(283,20)),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(propName),
                                                                        ),
                                                                        equals: Token(Equal, "=", (284,15)->(284,16)),
                                                                        right: String(
                                                                            SingleQuote(
                                                                                "LspWriteRef",
                                                                            ),
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (284,30)->(284,30)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (285,4)->(285,8)),
                                                    else_eol: Token(EndOfLine, "\n", (285,8)->(285,8)),
                                                    body: Body {
                                                        commands: [
                                                            Comment(
                                                                Token(Comment, "# textual reference", (286,6)->(286,25)),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(propName),
                                                                        ),
                                                                        equals: Token(Equal, "=", (287,15)->(287,16)),
                                                                        right: String(
                                                                            SingleQuote(
                                                                                "LspTextRef",
                                                                            ),
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (287,29)->(287,29)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (288,4)->(288,9)),
                                            endif_eol: Token(EndOfLine, "\n", (288,9)->(288,9)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(prop_add),
                                            ),
                                            open: Token(LeftParen, "(", (289,12)->(289,13)),
                                            args: [
                                                Infix(
                                                    InfixExpression {
                                                        token: Token(Plus, "+", (289,36)->(289,37)),
                                                        operator: Plus,
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(docHL),
                                                                                ),
                                                                                dot: Token(Dot, ".", (289,18)->(289,19)),
                                                                                index: RawIdentifier {
                                                                                    name: "range",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (289,24)->(289,25)),
                                                                        index: RawIdentifier {
                                                                            name: "start",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (289,30)->(289,31)),
                                                                index: RawIdentifier {
                                                                    name: "line",
                                                                },
                                                            },
                                                        ),
                                                        right: Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                Infix(
                                                    InfixExpression {
                                                        token: Token(Plus, "+", (290,50)->(290,51)),
                                                        operator: Plus,
                                                        left: Call(
                                                            f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (290,6)->(290,7)), index: RawIdentifier { name: "GetLineByteFromPos" } }) arg: [
                                                                Identifier(
                                                                    Raw(bnr),
                                                                ),
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(docHL),
                                                                                ),
                                                                                dot: Token(Dot, ".", (290,36)->(290,37)),
                                                                                index: RawIdentifier {
                                                                                    name: "range",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (290,42)->(290,43)),
                                                                        index: RawIdentifier {
                                                                            name: "start",
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        ),
                                                        right: Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (291,2)->(291,3)),
                                                        elements: [
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "end_lnum", (291,3)->(291,11)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (291,11)->(291,13)),
                                                                value: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (291,34)->(291,35)),
                                                                        operator: Plus,
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(docHL),
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (291,18)->(291,19)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "range",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (291,24)->(291,25)),
                                                                                        index: RawIdentifier {
                                                                                            name: "end",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                dot: Token(Dot, ".", (291,28)->(291,29)),
                                                                                index: RawIdentifier {
                                                                                    name: "line",
                                                                                },
                                                                            },
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "1",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (291,37)->(291,38)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "end_col", (292,4)->(292,11)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (292,11)->(292,13)),
                                                                value: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (292,59)->(292,60)),
                                                                        operator: Plus,
                                                                        left: Call(
                                                                            f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (292,17)->(292,18)), index: RawIdentifier { name: "GetLineByteFromPos" } }) arg: [
                                                                                Identifier(
                                                                                    Raw(bnr),
                                                                                ),
                                                                                DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(docHL),
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (292,47)->(292,48)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "range",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (292,53)->(292,54)),
                                                                                        index: RawIdentifier {
                                                                                            name: "end",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "1",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (292,62)->(292,63)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "bufnr", (293,4)->(293,9)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (293,9)->(293,11)),
                                                                value: Identifier(
                                                                    Raw(bnr),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (293,14)->(293,15)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "type", (294,4)->(294,8)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (294,8)->(294,10)),
                                                                value: Identifier(
                                                                    Raw(propName),
                                                                ),
                                                                comma: None,
                                                            },
                                                        ],
                                                        close: Token(RightBrace, "}", (294,18)->(294,19)),
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (294,19)->(294,20)),
                                            eol: Token(EndOfLine, "\n", (294,20)->(294,20)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (295,2)->(295,8)),
                            endfor_eol: Token(EndOfLine, "\n", (295,8)->(295,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (296,0)->(296,6)),
            end_eol: Token(EndOfLine, "\n", (296,6)->(296,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (297,0)->(297,0)),
    ),
    Comment(
        Token(Comment, "# map the LSP symbol kind number to string", (298,0)->(298,42)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (299,0)->(299,3)),
            name: Raw(LspSymbolKindToName),
            args: Signature {
                open: Token(LeftParen, "(", (299,23)->(299,24)),
                params: [
                    Parameter {
                        name: Raw(symkind),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (299,31)->(299,33)),
                                inner: Number,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (299,39)->(299,40)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (299,40)->(299,42)),
                    inner: String,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (299,48)->(299,48)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (300,2)->(300,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (300,15)->(300,17)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (300,21)->(300,22)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (300,28)->(300,29)),
                                    },
                                },
                            ),
                            name: Raw(symbolMap),
                            equal: Token(Equal, "=", (300,30)->(300,31)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (300,32)->(300,33)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "File",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Module",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Namespace",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Package",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Class",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Method",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Property",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Field",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Constructor",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Enum",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Interface",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Function",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Variable",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Constant",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "String",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Number",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Boolean",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Array",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Object",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Key",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Null",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "EnumMember",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Struct",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Event",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Operator",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "TypeParameter",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (304,37)->(304,38)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (304,38)->(304,38)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (305,2)->(305,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(GreaterThan, ">", (305,13)->(305,14)),
                                    operator: GreaterThan,
                                    left: Identifier(
                                        Raw(symkind),
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "26",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (305,17)->(305,17)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (306,4)->(306,10)),
                                            expr: Some(
                                                String(
                                                    SingleQuote(
                                                        "",
                                                    ),
                                                ),
                                            ),
                                            eol: Token(EndOfLine, "\n", (306,13)->(306,13)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (307,2)->(307,7)),
                            endif_eol: Token(EndOfLine, "\n", (307,7)->(307,7)),
                        },
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (308,2)->(308,8)),
                            expr: Some(
                                Index(
                                    IndexExpression {
                                        container: Identifier(
                                            Raw(symbolMap),
                                        ),
                                        open: Token(LeftBracket, "[", (308,18)->(308,19)),
                                        index: Item(
                                            Identifier(
                                                Raw(symkind),
                                            ),
                                        ),
                                        close: Token(RightBracket, "]", (308,26)->(308,27)),
                                    },
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (308,27)->(308,27)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (309,0)->(309,6)),
            end_eol: Token(EndOfLine, "\n", (309,6)->(309,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (310,0)->(310,0)),
    ),
    Comment(
        Token(Comment, "# process SymbolInformation[]", (311,0)->(311,29)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (312,0)->(312,3)),
            name: Raw(ProcessSymbolInfoTable),
            args: Signature {
                open: Token(LeftParen, "(", (312,26)->(312,27)),
                params: [
                    Parameter {
                        name: Raw(symbolInfoTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (312,42)->(312,44)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (312,48)->(312,49)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (312,53)->(312,54)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (312,57)->(312,58)),
                                    },
                                    close: Token(AngleRight, ">", (312,58)->(312,59)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolTypeTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (313,19)->(313,21)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (313,25)->(313,26)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (313,30)->(313,31)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (313,35)->(313,36)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (313,39)->(313,40)),
                                        },
                                        close: Token(AngleRight, ">", (313,40)->(313,41)),
                                    },
                                    close: Token(AngleRight, ">", (313,41)->(313,42)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolLineTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (314,19)->(314,21)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (314,25)->(314,26)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (314,30)->(314,31)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (314,34)->(314,35)),
                                    },
                                    close: Token(AngleRight, ">", (314,35)->(314,36)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (314,36)->(314,37)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (314,37)->(314,37)),
            body: Body {
                commands: [
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (315,2)->(315,5)),
                            name: Raw(fname),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (315,11)->(315,13)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (315,19)->(315,19)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (316,2)->(316,5)),
                            name: Raw(symbolType),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (316,16)->(316,18)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (316,24)->(316,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (317,2)->(317,5)),
                            name: Raw(name),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (317,10)->(317,12)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (317,18)->(317,18)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (318,2)->(318,5)),
                            name: Raw(r),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (318,7)->(318,9)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (318,13)->(318,14)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (318,18)->(318,19)),
                                            inner: Number,
                                            close: Token(AngleRight, ">", (318,25)->(318,26)),
                                        },
                                        close: Token(GreaterThan, ">", (318,26)->(318,27)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (318,27)->(318,27)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (319,2)->(319,5)),
                            name: Raw(symInfo),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (319,13)->(319,15)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (319,19)->(319,20)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (319,23)->(319,24)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (319,24)->(319,24)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (320,0)->(320,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (321,2)->(321,5)),
                            for_identifier: Raw(symbol),
                            in_: Token(Identifier, "in", (321,13)->(321,15)),
                            for_expr: Identifier(
                                Raw(symbolInfoTable),
                            ),
                            eol: Token(EndOfLine, "\n", (321,31)->(321,31)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(fname),
                                                ),
                                                equals: Token(Equal, "=", (322,10)->(322,11)),
                                                right: Call(
                                                    f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (322,16)->(322,17)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (322,36)->(322,37)),
                                                                        index: RawIdentifier {
                                                                            name: "location",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (322,45)->(322,46)),
                                                                index: RawIdentifier {
                                                                    name: "uri",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (322,50)->(322,50)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symbolType),
                                                ),
                                                equals: Token(Equal, "=", (323,15)->(323,16)),
                                                right: Call(
                                                    f: Identifier(Raw(LspSymbolKindToName)) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (323,43)->(323,44)),
                                                                index: RawIdentifier {
                                                                    name: "kind",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (323,49)->(323,49)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(name),
                                                ),
                                                equals: Token(Equal, "=", (324,9)->(324,10)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (324,17)->(324,18)),
                                                        index: RawIdentifier {
                                                            name: "name",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (324,22)->(324,22)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (325,4)->(325,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbol),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (325,13)->(325,15)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "containerName",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (325,39)->(325,39)),
                                            body: Body {
                                                commands: [
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (326,6)->(326,8)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(NotEqualTo, "!=", (326,30)->(326,32)),
                                                                    operator: NotEqualTo,
                                                                    left: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(symbol),
                                                                            ),
                                                                            dot: Token(Dot, ".", (326,15)->(326,16)),
                                                                            index: RawIdentifier {
                                                                                name: "containerName",
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (326,35)->(326,35)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Mutate(
                                                                            MutationStatement {
                                                                                left: Identifier(
                                                                                    Raw(name),
                                                                                ),
                                                                                modifier: Token(StringConcatEquals, "..=", (327,6)->(327,9)),
                                                                                right: String(
                                                                                    Interpolated(
                                                                                        " [{symbol.containerName}]",
                                                                                    ),
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (327,38)->(327,38)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, "endif", (328,6)->(328,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (328,11)->(328,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (329,4)->(329,9)),
                                            endif_eol: Token(EndOfLine, "\n", (329,9)->(329,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(r),
                                                ),
                                                equals: Token(Equal, "=", (330,6)->(330,7)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (330,14)->(330,15)),
                                                                index: RawIdentifier {
                                                                    name: "location",
                                                                },
                                                            },
                                                        ),
                                                        dot: Token(Dot, ".", (330,23)->(330,24)),
                                                        index: RawIdentifier {
                                                            name: "range",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (330,29)->(330,29)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (331,0)->(331,0)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (332,4)->(332,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Prefix(
                                                        PrefixExpression {
                                                            token: Token(Bang, "!", (332,7)->(332,8)),
                                                            operator: Bang,
                                                            right: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (332,23)->(332,25)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        Identifier(
                                                            Raw(symbolType),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (332,44)->(332,44)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Index(
                                                                    IndexExpression {
                                                                        container: Identifier(
                                                                            Raw(symbolTypeTable),
                                                                        ),
                                                                        open: Token(LeftBracket, "[", (333,21)->(333,22)),
                                                                        index: Item(
                                                                            Identifier(
                                                                                Raw(symbolType),
                                                                            ),
                                                                        ),
                                                                        close: Token(RightBracket, "]", (333,32)->(333,33)),
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (333,34)->(333,35)),
                                                                right: Array(
                                                                    ArrayLiteral {
                                                                        open: Token(LeftBracket, "[", (333,36)->(333,37)),
                                                                        elements: [],
                                                                        close: Token(RightBracket, "]", (333,37)->(333,38)),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (333,38)->(333,38)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (334,4)->(334,9)),
                                            endif_eol: Token(EndOfLine, "\n", (334,9)->(334,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symInfo),
                                                ),
                                                equals: Token(Equal, "=", (335,12)->(335,13)),
                                                right: Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (335,14)->(335,15)),
                                                        elements: [
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "name", (335,15)->(335,19)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (335,19)->(335,21)),
                                                                value: Identifier(
                                                                    Raw(name),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (335,25)->(335,26)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "range", (335,27)->(335,32)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (335,32)->(335,34)),
                                                                value: Identifier(
                                                                    Raw(r),
                                                                ),
                                                                comma: None,
                                                            },
                                                        ],
                                                        close: Token(RightBrace, "}", (335,35)->(335,36)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (335,36)->(335,36)),
                                            },
                                        ),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                            open: Token(LeftBracket, "[", (336,19)->(336,20)),
                                                            index: Item(
                                                                Identifier(
                                                                    Raw(symbolType),
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (336,30)->(336,31)),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (336,31)->(336,33)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (336,45)->(336,45)),
                                        },
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbolLineTable),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (337,19)->(337,21)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (337,33)->(337,33)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (338,2)->(338,8)),
                            endfor_eol: Token(EndOfLine, "\n", (338,8)->(338,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (339,0)->(339,6)),
            end_eol: Token(EndOfLine, "\n", (339,6)->(339,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (340,0)->(340,0)),
    ),
    Comment(
        Token(Comment, "# process DocumentSymbol[]", (341,0)->(341,26)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (342,0)->(342,3)),
            name: Raw(ProcessDocSymbolTable),
            args: Signature {
                open: Token(LeftParen, "(", (342,25)->(342,26)),
                params: [
                    Parameter {
                        name: Raw(docSymbolTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (342,40)->(342,42)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (342,46)->(342,47)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (342,51)->(342,52)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (342,55)->(342,56)),
                                    },
                                    close: Token(AngleRight, ">", (342,56)->(342,57)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolTypeTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (343,19)->(343,21)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (343,25)->(343,26)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (343,30)->(343,31)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (343,35)->(343,36)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (343,39)->(343,40)),
                                        },
                                        close: Token(AngleRight, ">", (343,40)->(343,41)),
                                    },
                                    close: Token(AngleRight, ">", (343,41)->(343,42)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolLineTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (344,19)->(344,21)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (344,25)->(344,26)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (344,30)->(344,31)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (344,34)->(344,35)),
                                    },
                                    close: Token(AngleRight, ">", (344,35)->(344,36)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (344,36)->(344,37)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (344,37)->(344,37)),
            body: Body {
                commands: [
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (345,2)->(345,5)),
                            name: Raw(symbolType),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (345,16)->(345,18)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (345,24)->(345,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (346,2)->(346,5)),
                            name: Raw(name),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (346,10)->(346,12)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (346,18)->(346,18)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (347,2)->(347,5)),
                            name: Raw(r),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (347,7)->(347,9)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (347,13)->(347,14)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (347,18)->(347,19)),
                                            inner: Number,
                                            close: Token(AngleRight, ">", (347,25)->(347,26)),
                                        },
                                        close: Token(GreaterThan, ">", (347,26)->(347,27)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (347,27)->(347,27)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (348,2)->(348,5)),
                            name: Raw(symInfo),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (348,13)->(348,15)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (348,19)->(348,20)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (348,23)->(348,24)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (348,24)->(348,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (349,2)->(349,5)),
                            name: Raw(symbolDetail),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (349,18)->(349,20)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (349,26)->(349,26)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (350,2)->(350,5)),
                            name: Raw(childSymbols),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (350,18)->(350,20)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (350,24)->(350,25)),
                                        inner: List {
                                            open: Token(AngleLeft, "<", (350,29)->(350,30)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (350,34)->(350,35)),
                                                inner: Any,
                                                close: Token(AngleRight, ">", (350,38)->(350,39)),
                                            },
                                            close: Token(AngleRight, ">", (350,39)->(350,40)),
                                        },
                                        close: Token(GreaterThan, ">", (350,40)->(350,41)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (350,41)->(350,41)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (351,0)->(351,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (352,2)->(352,5)),
                            for_identifier: Raw(symbol),
                            in_: Token(Identifier, "in", (352,13)->(352,15)),
                            for_expr: Identifier(
                                Raw(docSymbolTable),
                            ),
                            eol: Token(EndOfLine, "\n", (352,30)->(352,30)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(name),
                                                ),
                                                equals: Token(Equal, "=", (353,9)->(353,10)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (353,17)->(353,18)),
                                                        index: RawIdentifier {
                                                            name: "name",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (353,22)->(353,22)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symbolType),
                                                ),
                                                equals: Token(Equal, "=", (354,15)->(354,16)),
                                                right: Call(
                                                    f: Identifier(Raw(LspSymbolKindToName)) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (354,43)->(354,44)),
                                                                index: RawIdentifier {
                                                                    name: "kind",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (354,49)->(354,49)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(r),
                                                ),
                                                equals: Token(Equal, "=", (355,6)->(355,7)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (355,14)->(355,15)),
                                                        index: RawIdentifier {
                                                            name: "range",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (355,20)->(355,20)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (356,4)->(356,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbol),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (356,13)->(356,15)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "detail",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (356,32)->(356,32)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(symbolDetail),
                                                                ),
                                                                equals: Token(Equal, "=", (357,19)->(357,20)),
                                                                right: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (357,27)->(357,28)),
                                                                        index: RawIdentifier {
                                                                            name: "detail",
                                                                        },
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (357,34)->(357,34)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (358,4)->(358,9)),
                                            endif_eol: Token(EndOfLine, "\n", (358,9)->(358,9)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (359,4)->(359,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Prefix(
                                                        PrefixExpression {
                                                            token: Token(Bang, "!", (359,7)->(359,8)),
                                                            operator: Bang,
                                                            right: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (359,23)->(359,25)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        Identifier(
                                                            Raw(symbolType),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (359,44)->(359,44)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Index(
                                                                    IndexExpression {
                                                                        container: Identifier(
                                                                            Raw(symbolTypeTable),
                                                                        ),
                                                                        open: Token(LeftBracket, "[", (360,21)->(360,22)),
                                                                        index: Item(
                                                                            Identifier(
                                                                                Raw(symbolType),
                                                                            ),
                                                                        ),
                                                                        close: Token(RightBracket, "]", (360,32)->(360,33)),
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (360,34)->(360,35)),
                                                                right: Array(
                                                                    ArrayLiteral {
                                                                        open: Token(LeftBracket, "[", (360,36)->(360,37)),
                                                                        elements: [],
                                                                        close: Token(RightBracket, "]", (360,37)->(360,38)),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (360,38)->(360,38)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (361,4)->(361,9)),
                                            endif_eol: Token(EndOfLine, "\n", (361,9)->(361,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(childSymbols),
                                                ),
                                                equals: Token(Equal, "=", (362,17)->(362,18)),
                                                right: Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (362,19)->(362,20)),
                                                        elements: [],
                                                        close: Token(RightBrace, "}", (362,20)->(362,21)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (362,21)->(362,21)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (363,4)->(363,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbol),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (363,13)->(363,15)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "children",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (363,34)->(363,34)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: Identifier(
                                                                Raw(ProcessDocSymbolTable),
                                                            ),
                                                            open: Token(LeftParen, "(", (364,27)->(364,28)),
                                                            args: [
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (364,34)->(364,35)),
                                                                        index: RawIdentifier {
                                                                            name: "children",
                                                                        },
                                                                    },
                                                                ),
                                                                Identifier(
                                                                    Raw(childSymbols),
                                                                ),
                                                                Identifier(
                                                                    Raw(symbolLineTable),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (364,74)->(364,75)),
                                                            eol: Token(EndOfLine, "\n", (364,75)->(364,75)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (365,4)->(365,9)),
                                            endif_eol: Token(EndOfLine, "\n", (365,9)->(365,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symInfo),
                                                ),
                                                equals: Token(Equal, "=", (366,12)->(366,13)),
                                                right: Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (366,14)->(366,15)),
                                                        elements: [
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "name", (366,15)->(366,19)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (366,19)->(366,21)),
                                                                value: Identifier(
                                                                    Raw(name),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (366,25)->(366,26)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "range", (366,27)->(366,32)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (366,32)->(366,34)),
                                                                value: Identifier(
                                                                    Raw(r),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (366,35)->(366,36)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "detail", (366,37)->(366,43)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (366,43)->(366,45)),
                                                                value: Identifier(
                                                                    Raw(symbolDetail),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (366,57)->(366,58)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "children", (367,6)->(367,14)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (367,14)->(367,16)),
                                                                value: Identifier(
                                                                    Raw(childSymbols),
                                                                ),
                                                                comma: None,
                                                            },
                                                        ],
                                                        close: Token(RightBrace, "}", (367,28)->(367,29)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (367,29)->(367,29)),
                                            },
                                        ),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                            open: Token(LeftBracket, "[", (368,19)->(368,20)),
                                                            index: Item(
                                                                Identifier(
                                                                    Raw(symbolType),
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (368,30)->(368,31)),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (368,31)->(368,33)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (368,45)->(368,45)),
                                        },
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbolLineTable),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (369,19)->(369,21)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (369,33)->(369,33)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (370,2)->(370,8)),
                            endfor_eol: Token(EndOfLine, "\n", (370,8)->(370,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (371,0)->(371,6)),
            end_eol: Token(EndOfLine, "\n", (371,6)->(371,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (372,0)->(372,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/documentSymbol' reply from the LSP server", (373,0)->(373,69)),
    ),
    Comment(
        Token(Comment, "# Open a symbols window and display the symbols as a tree", (374,0)->(374,57)),
    ),
    Comment(
        Token(Comment, "# Result: DocumentSymbol[] | SymbolInformation[] | null", (375,0)->(375,55)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (376,0)->(376,3)),
            name: Raw(ProcessDocSymbolReply),
            args: Signature {
                open: Token(LeftParen, "(", (376,25)->(376,26)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (376,35)->(376,37)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (376,41)->(376,42)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (376,45)->(376,46)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (376,51)->(376,53)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (376,57)->(376,58)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (376,61)->(376,62)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (376,69)->(376,71)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (376,75)->(376,76)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (376,79)->(376,80)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (376,80)->(376,81)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (376,81)->(376,83)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (376,87)->(376,87)),
            body: Body {
                commands: [
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (377,2)->(377,5)),
                            name: Raw(fname),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (377,11)->(377,13)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (377,19)->(377,19)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (378,2)->(378,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (378,21)->(378,23)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (378,27)->(378,28)),
                                        inner: List {
                                            open: Token(AngleLeft, "<", (378,32)->(378,33)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (378,37)->(378,38)),
                                                inner: Any,
                                                close: Token(AngleRight, ">", (378,41)->(378,42)),
                                            },
                                            close: Token(AngleRight, ">", (378,42)->(378,43)),
                                        },
                                        close: Token(GreaterThan, ">", (378,43)->(378,44)),
                                    },
                                },
                            ),
                            name: Raw(symbolTypeTable),
                            equal: Token(Equal, "=", (378,45)->(378,46)),
                            expr: Dict(
                                DictLiteral {
                                    open: Token(LeftBrace, "{", (378,47)->(378,48)),
                                    elements: [],
                                    close: Token(RightBrace, "}", (378,48)->(378,49)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (378,49)->(378,49)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (379,2)->(379,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (379,21)->(379,23)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (379,27)->(379,28)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (379,32)->(379,33)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (379,36)->(379,37)),
                                        },
                                        close: Token(GreaterThan, ">", (379,37)->(379,38)),
                                    },
                                },
                            ),
                            name: Raw(symbolLineTable),
                            equal: Token(Equal, "=", (379,39)->(379,40)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (379,41)->(379,42)),
                                    elements: [],
                                    close: Token(RightBracket, "]", (379,42)->(379,43)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (379,43)->(379,43)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (380,0)->(380,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (381,2)->(381,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(NotEqualTo, "!=", (381,33)->(381,35)),
                                    operator: NotEqualTo,
                                    left: DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(req),
                                                            ),
                                                            dot: Token(Dot, ".", (381,8)->(381,9)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (381,15)->(381,16)),
                                                    index: RawIdentifier {
                                                        name: "textDocument",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (381,28)->(381,29)),
                                            index: RawIdentifier {
                                                name: "uri",
                                            },
                                        },
                                    ),
                                    right: String(
                                        SingleQuote(
                                            "",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (381,38)->(381,38)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(fname),
                                                ),
                                                equals: Token(Equal, "=", (382,10)->(382,11)),
                                                right: Call(
                                                    f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (382,16)->(382,17)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(req),
                                                                                ),
                                                                                dot: Token(Dot, ".", (382,33)->(382,34)),
                                                                                index: RawIdentifier {
                                                                                    name: "params",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (382,40)->(382,41)),
                                                                        index: RawIdentifier {
                                                                            name: "textDocument",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (382,53)->(382,54)),
                                                                index: RawIdentifier {
                                                                    name: "uri",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (382,58)->(382,58)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (383,2)->(383,7)),
                            endif_eol: Token(EndOfLine, "\n", (383,7)->(383,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (384,0)->(384,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (385,2)->(385,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (385,10)->(385,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (385,17)->(385,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (385,26)->(385,26)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# No symbols defined for this file. Clear the outline window.", (386,4)->(386,65)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(outline),
                                                    ),
                                                    dot: Token(Dot, ".", (387,11)->(387,12)),
                                                    index: RawIdentifier {
                                                        name: "UpdateOutlineWindow",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (387,31)->(387,32)),
                                            args: [
                                                Identifier(
                                                    Raw(fname),
                                                ),
                                                Identifier(
                                                    Raw(symbolTypeTable),
                                                ),
                                                Identifier(
                                                    Raw(symbolLineTable),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (387,71)->(387,72)),
                                            eol: Token(EndOfLine, "\n", (387,72)->(387,72)),
                                        },
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (388,4)->(388,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (388,10)->(388,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (389,2)->(389,7)),
                            endif_eol: Token(EndOfLine, "\n", (389,7)->(389,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (390,0)->(390,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (391,2)->(391,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: Index(
                                        IndexExpression {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (391,10)->(391,11)),
                                                    index: RawIdentifier {
                                                        name: "result",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftBracket, "[", (391,17)->(391,18)),
                                            index: Item(
                                                Number(
                                                    VimNumber {
                                                        value: "0",
                                                    },
                                                ),
                                            ),
                                            close: Token(RightBracket, "]", (391,19)->(391,20)),
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (391,20)->(391,22)),
                                    right: f: Identifier(Raw(has_key)) arg: [
                                        String(
                                            SingleQuote(
                                                "location",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (391,41)->(391,41)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# SymbolInformation[]", (392,4)->(392,25)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(ProcessSymbolInfoTable),
                                            ),
                                            open: Token(LeftParen, "(", (393,26)->(393,27)),
                                            args: [
                                                DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(reply),
                                                        ),
                                                        dot: Token(Dot, ".", (393,32)->(393,33)),
                                                        index: RawIdentifier {
                                                            name: "result",
                                                        },
                                                    },
                                                ),
                                                Identifier(
                                                    Raw(symbolTypeTable),
                                                ),
                                                Identifier(
                                                    Raw(symbolLineTable),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (393,73)->(393,74)),
                                            eol: Token(EndOfLine, "\n", (393,74)->(393,74)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (394,2)->(394,6)),
                                    else_eol: Token(EndOfLine, "\n", (394,6)->(394,6)),
                                    body: Body {
                                        commands: [
                                            Comment(
                                                Token(Comment, "# DocumentSymbol[]", (395,4)->(395,22)),
                                            ),
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Identifier(
                                                        Raw(ProcessDocSymbolTable),
                                                    ),
                                                    open: Token(LeftParen, "(", (396,25)->(396,26)),
                                                    args: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(reply),
                                                                ),
                                                                dot: Token(Dot, ".", (396,31)->(396,32)),
                                                                index: RawIdentifier {
                                                                    name: "result",
                                                                },
                                                            },
                                                        ),
                                                        Identifier(
                                                            Raw(symbolTypeTable),
                                                        ),
                                                        Identifier(
                                                            Raw(symbolLineTable),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (396,72)->(396,73)),
                                                    eol: Token(EndOfLine, "\n", (396,73)->(396,73)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (397,2)->(397,7)),
                            endif_eol: Token(EndOfLine, "\n", (397,7)->(397,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (398,0)->(398,0)),
                    ),
                    Comment(
                        Token(Comment, "# sort the symbols by line number", (399,2)->(399,35)),
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(symbolLineTable),
                                    ),
                                    tok: Token(MethodArrow, "->", (400,17)->(400,19)),
                                    right: f: Identifier(Raw(sort)) arg: [
                                        Lambda(
                                            Lambda {
                                                args: Signature {
                                                    open: Token(LeftParen, "(", (400,24)->(400,25)),
                                                    params: [
                                                        Parameter {
                                                            name: Raw(a),
                                                            ty: None,
                                                            equal: None,
                                                            default_val: None,
                                                        },
                                                        Parameter {
                                                            name: Raw(b),
                                                            ty: None,
                                                            equal: None,
                                                            default_val: None,
                                                        },
                                                    ],
                                                    close: Token(RightParen, ")", (400,29)->(400,30)),
                                                },
                                                ret: None,
                                                arrow: Token(Arrow, "=>", (400,31)->(400,33)),
                                                body: Body {
                                                    commands: [
                                                        Return(
                                                            ReturnCommand {
                                                                ret: Token(Virtual, "", (0,0)->(0,0)),
                                                                expr: Some(
                                                                    Infix(
                                                                        InfixExpression {
                                                                            token: Token(Minus, "-", (400,53)->(400,54)),
                                                                            operator: Minus,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(a),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (400,35)->(400,36)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "range",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (400,41)->(400,42)),
                                                                                            index: RawIdentifier {
                                                                                                name: "start",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (400,47)->(400,48)),
                                                                                    index: RawIdentifier {
                                                                                        name: "line",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(b),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (400,56)->(400,57)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "range",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (400,62)->(400,63)),
                                                                                            index: RawIdentifier {
                                                                                                name: "start",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (400,68)->(400,69)),
                                                                                    index: RawIdentifier {
                                                                                        name: "line",
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                eol: Token(Virtual, "", (0,0)->(0,0)),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (400,74)->(400,74)),
                        },
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(outline),
                                    ),
                                    dot: Token(Dot, ".", (401,9)->(401,10)),
                                    index: RawIdentifier {
                                        name: "UpdateOutlineWindow",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (401,29)->(401,30)),
                            args: [
                                Identifier(
                                    Raw(fname),
                                ),
                                Identifier(
                                    Raw(symbolTypeTable),
                                ),
                                Identifier(
                                    Raw(symbolLineTable),
                                ),
                            ],
                            close: Token(RightParen, ")", (401,69)->(401,70)),
                            eol: Token(EndOfLine, "\n", (401,70)->(401,70)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (402,0)->(402,6)),
            end_eol: Token(EndOfLine, "\n", (402,6)->(402,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (403,0)->(403,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/codeAction' reply from the LSP server", (404,0)->(404,65)),
    ),
    Comment(
        Token(Comment, "# Result: (Command | CodeAction)[] | null", (405,0)->(405,41)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (406,0)->(406,3)),
            name: Raw(ProcessCodeActionReply),
            args: Signature {
                open: Token(LeftParen, "(", (406,26)->(406,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (406,36)->(406,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (406,42)->(406,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (406,46)->(406,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (406,52)->(406,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (406,58)->(406,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (406,62)->(406,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (406,70)->(406,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (406,76)->(406,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (406,80)->(406,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (406,81)->(406,82)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (406,82)->(406,82)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (407,2)->(407,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (407,10)->(407,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (407,17)->(407,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (407,26)->(407,26)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# no action can be performed", (408,4)->(408,32)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(util),
                                                    ),
                                                    dot: Token(Dot, ".", (409,8)->(409,9)),
                                                    index: RawIdentifier {
                                                        name: "WarnMsg",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (409,16)->(409,17)),
                                            args: [
                                                String(
                                                    SingleQuote(
                                                        "No code action is available",
                                                    ),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (409,46)->(409,47)),
                                            eol: Token(EndOfLine, "\n", (409,47)->(409,47)),
                                        },
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (410,4)->(410,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (410,10)->(410,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (411,2)->(411,7)),
                            endif_eol: Token(EndOfLine, "\n", (411,7)->(411,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (412,0)->(412,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(codeaction),
                                    ),
                                    dot: Token(Dot, ".", (413,12)->(413,13)),
                                    index: RawIdentifier {
                                        name: "ApplyCodeAction",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (413,28)->(413,29)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (413,45)->(413,46)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (413,52)->(413,53)),
                            eol: Token(EndOfLine, "\n", (413,53)->(413,53)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (414,0)->(414,6)),
            end_eol: Token(EndOfLine, "\n", (414,6)->(414,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (415,0)->(415,0)),
    ),
    Comment(
        Token(Comment, "# Reply: 'textDocument/foldingRange'", (416,0)->(416,36)),
    ),
    Comment(
        Token(Comment, "# Result: FoldingRange[] | null", (417,0)->(417,31)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (418,0)->(418,3)),
            name: Raw(ProcessFoldingRangeReply),
            args: Signature {
                open: Token(LeftParen, "(", (418,28)->(418,29)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (418,38)->(418,40)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (418,44)->(418,45)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (418,48)->(418,49)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (418,54)->(418,56)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (418,60)->(418,61)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (418,64)->(418,65)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (418,72)->(418,74)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (418,78)->(418,79)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (418,82)->(418,83)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (418,83)->(418,84)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (418,84)->(418,84)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (419,2)->(419,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (419,10)->(419,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (419,17)->(419,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (419,26)->(419,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (420,4)->(420,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (420,10)->(420,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (421,2)->(421,7)),
                            endif_eol: Token(EndOfLine, "\n", (421,7)->(421,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (422,0)->(422,0)),
                    ),
                    Comment(
                        Token(Comment, "# result: FoldingRange[]", (423,2)->(423,26)),
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (424,2)->(424,5)),
                            name: Raw(end_lnum),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (424,14)->(424,16)),
                                    inner: Number,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (424,22)->(424,22)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (425,2)->(425,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (425,15)->(425,17)),
                                    inner: Number,
                                },
                            ),
                            name: Raw(last_lnum),
                            equal: Token(Equal, "=", (425,24)->(425,25)),
                            expr: Call(
                                f: Identifier(Raw(line)) arg: [
                                    String(
                                        SingleQuote(
                                            "$",
                                        ),
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, "\n", (425,35)->(425,35)),
                        },
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (426,2)->(426,5)),
                            for_identifier: Raw(foldRange),
                            in_: Token(Identifier, "in", (426,16)->(426,18)),
                            for_expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(reply),
                                    ),
                                    dot: Token(Dot, ".", (426,24)->(426,25)),
                                    index: RawIdentifier {
                                        name: "result",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (426,31)->(426,31)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(end_lnum),
                                                ),
                                                equals: Token(Equal, "=", (427,13)->(427,14)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(Plus, "+", (427,33)->(427,34)),
                                                        operator: Plus,
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(foldRange),
                                                                ),
                                                                dot: Token(Dot, ".", (427,24)->(427,25)),
                                                                index: RawIdentifier {
                                                                    name: "endLine",
                                                                },
                                                            },
                                                        ),
                                                        right: Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (427,36)->(427,36)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (428,4)->(428,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(LessThan, "<", (428,16)->(428,17)),
                                                    operator: LessThan,
                                                    left: Identifier(
                                                        Raw(end_lnum),
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(Plus, "+", (428,38)->(428,39)),
                                                            operator: Plus,
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(foldRange),
                                                                    ),
                                                                    dot: Token(Dot, ".", (428,27)->(428,28)),
                                                                    index: RawIdentifier {
                                                                        name: "startLine",
                                                                    },
                                                                },
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "2",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (428,41)->(428,41)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(end_lnum),
                                                                ),
                                                                equals: Token(Equal, "=", (429,15)->(429,16)),
                                                                right: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (429,37)->(429,38)),
                                                                        operator: Plus,
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(foldRange),
                                                                                ),
                                                                                dot: Token(Dot, ".", (429,26)->(429,27)),
                                                                                index: RawIdentifier {
                                                                                    name: "startLine",
                                                                                },
                                                                            },
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "2",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (429,40)->(429,40)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (430,4)->(430,9)),
                                            endif_eol: Token(EndOfLine, "\n", (430,9)->(430,9)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    exe   :{foldRange.startLine + 2}, {end_lnum}fold",
                                            eol: Token(EndOfLine, "\n", (431,53)->(431,53)),
                                        },
                                    ),
                                    Comment(
                                        Token(Comment, "# Open all the folds, otherwise the subsequently created folds are not", (432,4)->(432,74)),
                                    ),
                                    Comment(
                                        Token(Comment, "# correct.", (433,4)->(433,14)),
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "             foldopen!",
                                            eol: Token(EndOfLine, "\n", (434,22)->(434,22)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (435,2)->(435,8)),
                            endfor_eol: Token(EndOfLine, "\n", (435,8)->(435,8)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (436,0)->(436,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (437,2)->(437,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (437,17)->(437,19)),
                                    operator: EqualTo,
                                    left: VimOption(
                                        VimOption {
                                            ampersand: Token(Ampersand, "&", (437,5)->(437,6)),
                                            option: Literal {
                                                token: Token(Identifier, "foldcolumn", (437,6)->(437,16)),
                                            },
                                        },
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "0",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (437,21)->(437,21)),
                            body: Body {
                                commands: [
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "     setlocal foldcolumn=2",
                                            eol: Token(EndOfLine, "\n", (438,26)->(438,26)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (439,2)->(439,7)),
                            endif_eol: Token(EndOfLine, "\n", (439,7)->(439,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (440,0)->(440,6)),
            end_eol: Token(EndOfLine, "\n", (440,6)->(440,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (441,0)->(441,0)),
    ),
    Comment(
        Token(Comment, "# process the 'workspace/executeCommand' reply from the LSP server", (442,0)->(442,66)),
    ),
    Comment(
        Token(Comment, "# Result: any | null", (443,0)->(443,20)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (444,0)->(444,3)),
            name: Raw(ProcessWorkspaceExecuteReply),
            args: Signature {
                open: Token(LeftParen, "(", (444,32)->(444,33)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (444,42)->(444,44)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (444,48)->(444,49)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (444,52)->(444,53)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (444,58)->(444,60)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (444,64)->(444,65)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (444,68)->(444,69)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (444,76)->(444,78)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (444,82)->(444,83)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (444,86)->(444,87)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (444,87)->(444,88)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (444,88)->(444,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (445,2)->(445,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (445,10)->(445,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (445,17)->(445,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (445,26)->(445,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (446,4)->(446,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (446,10)->(446,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (447,2)->(447,7)),
                            endif_eol: Token(EndOfLine, "\n", (447,7)->(447,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (448,0)->(448,0)),
                    ),
                    Comment(
                        Token(Comment, "# Nothing to do for the reply", (449,2)->(449,31)),
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (450,0)->(450,6)),
            end_eol: Token(EndOfLine, "\n", (450,6)->(450,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (451,0)->(451,0)),
    ),
    Comment(
        Token(Comment, "# Convert a file name <filename> (<dirname>) format.", (452,0)->(452,52)),
    ),
    Comment(
        Token(Comment, "# Make sure the popup does't occupy the entire screen by reducing the width.", (453,0)->(453,76)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (454,0)->(454,3)),
            name: Raw(MakeMenuName),
            args: Signature {
                open: Token(LeftParen, "(", (454,16)->(454,17)),
                params: [
                    Parameter {
                        name: Raw(popupWidth),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (454,27)->(454,29)),
                                inner: Number,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(fname),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (454,42)->(454,44)),
                                inner: String,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (454,50)->(454,51)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (454,51)->(454,53)),
                    inner: String,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (454,59)->(454,59)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (455,2)->(455,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (455,14)->(455,16)),
                                    inner: String,
                                },
                            ),
                            name: Raw(filename),
                            equal: Token(Equal, "=", (455,23)->(455,24)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(fname),
                                    ),
                                    tok: Token(MethodArrow, "->", (455,30)->(455,32)),
                                    right: f: Identifier(Raw(fnamemodify)) arg: [
                                        String(
                                            SingleQuote(
                                                ":t",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (455,49)->(455,49)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (456,2)->(456,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (456,10)->(456,12)),
                                    inner: Number,
                                },
                            ),
                            name: Raw(flen),
                            equal: Token(Equal, "=", (456,19)->(456,20)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(filename),
                                    ),
                                    tok: Token(MethodArrow, "->", (456,29)->(456,31)),
                                    right: f: Identifier(Raw(len)) arg: [],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (456,36)->(456,36)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (457,2)->(457,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (457,13)->(457,15)),
                                    inner: String,
                                },
                            ),
                            name: Raw(dirname),
                            equal: Token(Equal, "=", (457,22)->(457,23)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(fname),
                                    ),
                                    tok: Token(MethodArrow, "->", (457,29)->(457,31)),
                                    right: f: Identifier(Raw(fnamemodify)) arg: [
                                        String(
                                            SingleQuote(
                                                ":h",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (457,48)->(457,48)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (458,0)->(458,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (459,2)->(459,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (459,31)->(459,33)),
                                    operator: And,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(GreaterThan, ">", (459,18)->(459,19)),
                                            operator: GreaterThan,
                                            left: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(fname),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (459,10)->(459,12)),
                                                    right: f: Identifier(Raw(len)) arg: [],
                                                },
                                            ),
                                            right: Identifier(
                                                Raw(popupWidth),
                                            ),
                                        },
                                    ),
                                    right: Infix(
                                        InfixExpression {
                                            token: Token(LessThan, "<", (459,39)->(459,40)),
                                            operator: LessThan,
                                            left: Identifier(
                                                Raw(flen),
                                            ),
                                            right: Identifier(
                                                Raw(popupWidth),
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (459,51)->(459,51)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# keep the full file name and reduce directory name length", (460,4)->(460,62)),
                                    ),
                                    Comment(
                                        Token(Comment, "# keep some characters at the beginning and end (equally).", (461,4)->(461,62)),
                                    ),
                                    Comment(
                                        Token(Comment, "# 6 spaces are used for \"...\" and \" ()\"", (462,4)->(462,43)),
                                    ),
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (463,4)->(463,7)),
                                            ty: None,
                                            name: Raw(dirsz),
                                            equal: Token(Equal, "=", (463,14)->(463,15)),
                                            expr: Infix(
                                                InfixExpression {
                                                    token: Token(Div, "/", (463,40)->(463,41)),
                                                    operator: Divide,
                                                    left: Grouped(
                                                        GroupedExpression {
                                                            open: Token(LeftParen, "(", (463,16)->(463,17)),
                                                            expr: Infix(
                                                                InfixExpression {
                                                                    token: Token(Minus, "-", (463,35)->(463,36)),
                                                                    operator: Minus,
                                                                    left: Infix(
                                                                        InfixExpression {
                                                                            token: Token(Minus, "-", (463,28)->(463,29)),
                                                                            operator: Minus,
                                                                            left: Identifier(
                                                                                Raw(popupWidth),
                                                                            ),
                                                                            right: Identifier(
                                                                                Raw(flen),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Number(
                                                                        VimNumber {
                                                                            value: "6",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            close: Token(RightParen, ")", (463,38)->(463,39)),
                                                        },
                                                    ),
                                                    right: Number(
                                                        VimNumber {
                                                            value: "2",
                                                        },
                                                    ),
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (463,43)->(463,43)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(dirname),
                                                ),
                                                equals: Token(Equal, "=", (464,12)->(464,13)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(StringConcat, "..", (464,40)->(464,42)),
                                                        operator: StringConcat,
                                                        left: Infix(
                                                            InfixExpression {
                                                                token: Token(StringConcat, "..", (464,31)->(464,33)),
                                                                operator: StringConcat,
                                                                left: Index(
                                                                    IndexExpression {
                                                                        container: Identifier(
                                                                            Raw(dirname),
                                                                        ),
                                                                        open: Token(LeftBracket, "[", (464,21)->(464,22)),
                                                                        index: Slice(
                                                                            VimSlice {
                                                                                start: None,
                                                                                colon: Token(SpacedColon, ": ", (464,22)->(464,24)),
                                                                                finish: Some(
                                                                                    Identifier(
                                                                                        Raw(dirsz),
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ),
                                                                        close: Token(RightBracket, "]", (464,29)->(464,30)),
                                                                    },
                                                                ),
                                                                right: String(
                                                                    SingleQuote(
                                                                        "...",
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                        right: Index(
                                                            IndexExpression {
                                                                container: Identifier(
                                                                    Raw(dirname),
                                                                ),
                                                                open: Token(LeftBracket, "[", (464,50)->(464,51)),
                                                                index: Slice(
                                                                    VimSlice {
                                                                        start: Some(
                                                                            Prefix(
                                                                                PrefixExpression {
                                                                                    token: Token(Minus, "-", (464,51)->(464,52)),
                                                                                    operator: Minus,
                                                                                    right: Identifier(
                                                                                        Raw(dirsz),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (464,58)->(464,60)),
                                                                        finish: None,
                                                                    },
                                                                ),
                                                                close: Token(RightBracket, "]", (464,60)->(464,61)),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (464,61)->(464,61)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (465,2)->(465,7)),
                            endif_eol: Token(EndOfLine, "\n", (465,7)->(465,7)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (466,2)->(466,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (466,9)->(466,11)),
                                    inner: String,
                                },
                            ),
                            name: Raw(str),
                            equal: Token(Equal, "=", (466,18)->(466,19)),
                            expr: Identifier(
                                Raw(filename),
                            ),
                            eol: Token(EndOfLine, "\n", (466,28)->(466,28)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (467,2)->(467,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(NotEqualTo, "!=", (467,13)->(467,15)),
                                    operator: NotEqualTo,
                                    left: Identifier(
                                        Raw(dirname),
                                    ),
                                    right: String(
                                        SingleQuote(
                                            ".",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (467,19)->(467,19)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(str),
                                                ),
                                                modifier: Token(StringConcatEquals, "..=", (468,8)->(468,11)),
                                                right: String(
                                                    Interpolated(
                                                        " ({dirname}/)",
                                                    ),
                                                ),
                                                eol: Token(EndOfLine, "\n", (468,28)->(468,28)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (469,2)->(469,7)),
                            endif_eol: Token(EndOfLine, "\n", (469,7)->(469,7)),
                        },
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (470,2)->(470,8)),
                            expr: Some(
                                Identifier(
                                    Raw(str),
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (470,12)->(470,12)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (471,0)->(471,6)),
            end_eol: Token(EndOfLine, "\n", (471,6)->(471,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (472,0)->(472,0)),
    ),
    Comment(
        Token(Comment, "# process the 'workspace/symbol' reply from the LSP server", (473,0)->(473,58)),
    ),
    Comment(
        Token(Comment, "# Result: SymbolInformation[] | null", (474,0)->(474,36)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (475,0)->(475,3)),
            name: Raw(ProcessWorkspaceSymbolReply),
            args: Signature {
                open: Token(LeftParen, "(", (475,31)->(475,32)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (475,41)->(475,43)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (475,47)->(475,48)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (475,51)->(475,52)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (475,57)->(475,59)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (475,63)->(475,64)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (475,67)->(475,68)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (475,75)->(475,77)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (475,81)->(475,82)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (475,85)->(475,86)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (475,86)->(475,87)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (475,87)->(475,87)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (476,2)->(476,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (476,13)->(476,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (476,19)->(476,20)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (476,24)->(476,25)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (476,28)->(476,29)),
                                        },
                                        close: Token(GreaterThan, ">", (476,29)->(476,30)),
                                    },
                                },
                            ),
                            name: Raw(symbols),
                            equal: Token(Equal, "=", (476,31)->(476,32)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (476,33)->(476,34)),
                                    elements: [],
                                    close: Token(RightBracket, "]", (476,34)->(476,35)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (476,35)->(476,35)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (477,2)->(477,5)),
                            name: Raw(symbolType),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (477,16)->(477,18)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (477,24)->(477,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (478,2)->(478,5)),
                            name: Raw(fileName),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (478,14)->(478,16)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (478,22)->(478,22)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (479,2)->(479,5)),
                            name: Raw(r),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (479,7)->(479,9)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (479,13)->(479,14)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (479,18)->(479,19)),
                                            inner: Number,
                                            close: Token(AngleRight, ">", (479,25)->(479,26)),
                                        },
                                        close: Token(GreaterThan, ">", (479,26)->(479,27)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (479,27)->(479,27)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (480,2)->(480,5)),
                            name: Raw(symName),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (480,13)->(480,15)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (480,21)->(480,21)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (481,0)->(481,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (482,2)->(482,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (482,10)->(482,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (482,17)->(482,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (482,26)->(482,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (483,4)->(483,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (483,10)->(483,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (484,2)->(484,7)),
                            endif_eol: Token(EndOfLine, "\n", (484,7)->(484,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (485,0)->(485,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (486,2)->(486,5)),
                            for_identifier: Raw(symbol),
                            in_: Token(Identifier, "in", (486,13)->(486,15)),
                            for_expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(reply),
                                    ),
                                    dot: Token(Dot, ".", (486,21)->(486,22)),
                                    index: RawIdentifier {
                                        name: "result",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (486,28)->(486,28)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (487,4)->(487,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Prefix(
                                                        PrefixExpression {
                                                            token: Token(Bang, "!", (487,7)->(487,8)),
                                                            operator: Bang,
                                                            right: Identifier(
                                                                Raw(symbol),
                                                            ),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (487,14)->(487,16)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "location",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (487,35)->(487,35)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# ignore entries without location information", (488,6)->(488,51)),
                                                    ),
                                                    Continue(
                                                        ContinueCommand {
                                                            cont: Token(Identifier, "continue", (489,6)->(489,14)),
                                                            eol: Token(EndOfLine, "\n", (489,14)->(489,14)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (490,4)->(490,9)),
                                            endif_eol: Token(EndOfLine, "\n", (490,9)->(490,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (491,0)->(491,0)),
                                    ),
                                    Comment(
                                        Token(Comment, "# interface SymbolInformation", (492,4)->(492,33)),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(fileName),
                                                ),
                                                equals: Token(Equal, "=", (493,13)->(493,14)),
                                                right: Call(
                                                    f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (493,19)->(493,20)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (493,39)->(493,40)),
                                                                        index: RawIdentifier {
                                                                            name: "location",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (493,48)->(493,49)),
                                                                index: RawIdentifier {
                                                                    name: "uri",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (493,53)->(493,53)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(r),
                                                ),
                                                equals: Token(Equal, "=", (494,6)->(494,7)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (494,14)->(494,15)),
                                                                index: RawIdentifier {
                                                                    name: "location",
                                                                },
                                                            },
                                                        ),
                                                        dot: Token(Dot, ".", (494,23)->(494,24)),
                                                        index: RawIdentifier {
                                                            name: "range",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (494,29)->(494,29)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (495,0)->(495,0)),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symName),
                                                ),
                                                equals: Token(Equal, "=", (496,12)->(496,13)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (496,20)->(496,21)),
                                                        index: RawIdentifier {
                                                            name: "name",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (496,25)->(496,25)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (497,4)->(497,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (497,40)->(497,42)),
                                                    operator: And,
                                                    left: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(symbol),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (497,13)->(497,15)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "containerName",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(NotEqualTo, "!=", (497,64)->(497,66)),
                                                            operator: NotEqualTo,
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(symbol),
                                                                    ),
                                                                    dot: Token(Dot, ".", (497,49)->(497,50)),
                                                                    index: RawIdentifier {
                                                                        name: "containerName",
                                                                    },
                                                                },
                                                            ),
                                                            right: String(
                                                                SingleQuote(
                                                                    "",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (497,69)->(497,69)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(symName),
                                                                ),
                                                                equals: Token(Equal, "=", (498,14)->(498,15)),
                                                                right: String(
                                                                    Interpolated(
                                                                        "{symbol.containerName}::{symName}",
                                                                    ),
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (498,52)->(498,52)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (499,4)->(499,9)),
                                            endif_eol: Token(EndOfLine, "\n", (499,9)->(499,9)),
                                        },
                                    ),
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(symName),
                                                ),
                                                modifier: Token(StringConcatEquals, "..=", (500,12)->(500,15)),
                                                right: String(
                                                    Interpolated(
                                                        " [{LspSymbolKindToName(symbol.kind)}]",
                                                    ),
                                                ),
                                                eol: Token(EndOfLine, "\n", (500,56)->(500,56)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(symName),
                                                ),
                                                modifier: Token(StringConcatEquals, "..=", (501,12)->(501,15)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(StringConcat, "..", (501,20)->(501,22)),
                                                        operator: StringConcat,
                                                        left: String(
                                                            SingleQuote(
                                                                " ",
                                                            ),
                                                        ),
                                                        right: Call(
                                                            f: Identifier(Raw(MakeMenuName)) arg: [
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: MethodCall(
                                                                            MethodCall {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(lspserver),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (502,11)->(502,12)),
                                                                                        index: RawIdentifier {
                                                                                            name: "workspaceSymbolPopup",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                tok: Token(MethodArrow, "->", (502,32)->(502,34)),
                                                                                right: f: Identifier(Raw(popup_getpos)) arg: [],
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (502,48)->(502,49)),
                                                                        index: RawIdentifier {
                                                                            name: "core_width",
                                                                        },
                                                                    },
                                                                ),
                                                                Identifier(
                                                                    Raw(fileName),
                                                                ),
                                                            ],
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (503,11)->(503,11)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (504,0)->(504,0)),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbols),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (505,11)->(505,13)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Dict(
                                                            DictLiteral {
                                                                open: Token(LeftBrace, "{", (505,17)->(505,18)),
                                                                elements: [
                                                                    KeyValue {
                                                                        key: Literal(
                                                                            Literal {
                                                                                token: Token(Identifier, "name", (505,18)->(505,22)),
                                                                            },
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (505,22)->(505,24)),
                                                                        value: Identifier(
                                                                            Raw(symName),
                                                                        ),
                                                                        comma: Some(
                                                                            Token(Comma, ",", (505,31)->(505,32)),
                                                                        ),
                                                                    },
                                                                    KeyValue {
                                                                        key: Literal(
                                                                            Literal {
                                                                                token: Token(Identifier, "file", (506,3)->(506,7)),
                                                                            },
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (506,7)->(506,9)),
                                                                        value: Identifier(
                                                                            Raw(fileName),
                                                                        ),
                                                                        comma: Some(
                                                                            Token(Comma, ",", (506,17)->(506,18)),
                                                                        ),
                                                                    },
                                                                    KeyValue {
                                                                        key: Literal(
                                                                            Literal {
                                                                                token: Token(Identifier, "pos", (507,3)->(507,6)),
                                                                            },
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (507,6)->(507,8)),
                                                                        value: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(r),
                                                                                ),
                                                                                dot: Token(Dot, ".", (507,9)->(507,10)),
                                                                                index: RawIdentifier {
                                                                                    name: "start",
                                                                                },
                                                                            },
                                                                        ),
                                                                        comma: None,
                                                                    },
                                                                ],
                                                                close: Token(RightBrace, "}", (507,15)->(507,16)),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (507,17)->(507,17)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (508,2)->(508,8)),
                            endfor_eol: Token(EndOfLine, "\n", (508,8)->(508,8)),
                        },
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(symbols),
                                    ),
                                    tok: Token(MethodArrow, "->", (509,9)->(509,11)),
                                    right: f: Identifier(Raw(setwinvar)) arg: [
                                        DictAccess(
                                            DictAccess {
                                                container: Identifier(
                                                    Raw(lspserver),
                                                ),
                                                dot: Token(Dot, ".", (509,30)->(509,31)),
                                                index: RawIdentifier {
                                                    name: "workspaceSymbolPopup",
                                                },
                                            },
                                        ),
                                        String(
                                            SingleQuote(
                                                "LspSymbolTable",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (509,70)->(509,70)),
                        },
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(lspserver),
                                            ),
                                            dot: Token(Dot, ".", (510,11)->(510,12)),
                                            index: RawIdentifier {
                                                name: "workspaceSymbolPopup",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (510,32)->(510,34)),
                                    right: f: Identifier(Raw(popup_settext)) arg: [
                                        MethodCall(
                                            MethodCall {
                                                left: MethodCall(
                                                    MethodCall {
                                                        left: Identifier(
                                                            Raw(symbols),
                                                        ),
                                                        tok: Token(MethodArrow, "->", (511,11)->(511,13)),
                                                        right: f: Identifier(Raw(copy)) arg: [],
                                                    },
                                                ),
                                                tok: Token(MethodArrow, "->", (511,19)->(511,21)),
                                                right: f: Identifier(Raw(mapnew)) arg: [
                                                    String(
                                                        SingleQuote(
                                                            "v:val.name",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (511,42)->(511,42)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (512,0)->(512,6)),
            end_eol: Token(EndOfLine, "\n", (512,6)->(512,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (513,0)->(513,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/prepareCallHierarchy' reply from the LSP server", (514,0)->(514,75)),
    ),
    Comment(
        Token(Comment, "# Result: CallHierarchyItem[] | null", (515,0)->(515,36)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (516,0)->(516,3)),
            name: Raw(ProcessPrepareCallHierarchy),
            args: Signature {
                open: Token(LeftParen, "(", (516,31)->(516,32)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (516,41)->(516,43)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (516,47)->(516,48)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (516,51)->(516,52)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (516,57)->(516,59)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (516,63)->(516,64)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (516,67)->(516,68)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (516,75)->(516,77)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (516,81)->(516,82)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (516,85)->(516,86)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (516,86)->(516,87)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (516,87)->(516,87)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (517,2)->(517,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (517,10)->(517,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (517,17)->(517,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (517,26)->(517,26)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (518,4)->(518,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (518,35)->(518,37)),
                                                    operator: EqualTo,
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(lspserver),
                                                            ),
                                                            dot: Token(Dot, ".", (518,16)->(518,17)),
                                                            index: RawIdentifier {
                                                                name: "callHierarchyType",
                                                            },
                                                        },
                                                    ),
                                                    right: String(
                                                        SingleQuote(
                                                            "incoming",
                                                        ),
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (518,48)->(518,48)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(util),
                                                                    ),
                                                                    dot: Token(Dot, ".", (519,10)->(519,11)),
                                                                    index: RawIdentifier {
                                                                        name: "WarnMsg",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (519,18)->(519,19)),
                                                            args: [
                                                                String(
                                                                    SingleQuote(
                                                                        "No incoming calls",
                                                                    ),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (519,38)->(519,39)),
                                                            eol: Token(EndOfLine, "\n", (519,39)->(519,39)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (520,4)->(520,8)),
                                                    else_eol: Token(EndOfLine, "\n", (520,8)->(520,8)),
                                                    body: Body {
                                                        commands: [
                                                            Call(
                                                                CallCommand {
                                                                    call: None,
                                                                    expr: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(util),
                                                                            ),
                                                                            dot: Token(Dot, ".", (521,10)->(521,11)),
                                                                            index: RawIdentifier {
                                                                                name: "WarnMsg",
                                                                            },
                                                                        },
                                                                    ),
                                                                    open: Token(LeftParen, "(", (521,18)->(521,19)),
                                                                    args: [
                                                                        String(
                                                                            SingleQuote(
                                                                                "No outgoing calls",
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    close: Token(RightParen, ")", (521,38)->(521,39)),
                                                                    eol: Token(EndOfLine, "\n", (521,39)->(521,39)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (522,4)->(522,9)),
                                            endif_eol: Token(EndOfLine, "\n", (522,9)->(522,9)),
                                        },
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (523,4)->(523,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (523,10)->(523,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (524,2)->(524,7)),
                            endif_eol: Token(EndOfLine, "\n", (524,7)->(524,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (525,0)->(525,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (526,2)->(526,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (526,12)->(526,14)),
                                    inner: Number,
                                },
                            ),
                            name: Raw(choice),
                            equal: Token(Equal, "=", (526,21)->(526,22)),
                            expr: Number(
                                VimNumber {
                                    value: "1",
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (526,24)->(526,24)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (527,2)->(527,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(GreaterThan, ">", (527,25)->(527,26)),
                                    operator: GreaterThan,
                                    left: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (527,10)->(527,11)),
                                                    index: RawIdentifier {
                                                        name: "result",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, "->", (527,17)->(527,19)),
                                            right: f: Identifier(Raw(len)) arg: [],
                                        },
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "1",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (527,28)->(527,28)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (528,4)->(528,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (528,13)->(528,15)),
                                                    inner: List {
                                                        open: Token(AngleLeft, "<", (528,19)->(528,20)),
                                                        inner: String,
                                                        close: Token(GreaterThan, ">", (528,26)->(528,27)),
                                                    },
                                                },
                                            ),
                                            name: Raw(items),
                                            equal: Token(Equal, "=", (528,28)->(528,29)),
                                            expr: Array(
                                                ArrayLiteral {
                                                    open: Token(LeftBracket, "[", (528,30)->(528,31)),
                                                    elements: [
                                                        String(
                                                            SingleQuote(
                                                                "Select a Call Hierarchy Item:",
                                                            ),
                                                        ),
                                                    ],
                                                    close: Token(RightBracket, "]", (528,62)->(528,63)),
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (528,63)->(528,63)),
                                        },
                                    ),
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, "for", (529,4)->(529,7)),
                                            for_identifier: Raw(i),
                                            in_: Token(Identifier, "in", (529,10)->(529,12)),
                                            for_expr: Call(
                                                f: Identifier(Raw(range)) arg: [
                                                    MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (529,24)->(529,25)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (529,31)->(529,33)),
                                                            right: f: Identifier(Raw(len)) arg: [],
                                                        },
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, "\n", (529,39)->(529,39)),
                                            body: Body {
                                                commands: [
                                                    Eval(
                                                        EvalCommand {
                                                            eval: None,
                                                            expr: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(items),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (530,11)->(530,13)),
                                                                    right: f: Identifier(Raw(add)) arg: [
                                                                        Call(
                                                                            f: Identifier(Raw(printf)) arg: [
                                                                                String(
                                                                                    DoubleQuote(
                                                                                        "%d. %s",
                                                                                    ),
                                                                                ),
                                                                                Infix(
                                                                                    InfixExpression {
                                                                                        token: Token(Plus, "+", (530,36)->(530,37)),
                                                                                        operator: Plus,
                                                                                        left: Identifier(
                                                                                            Raw(i),
                                                                                        ),
                                                                                        right: Number(
                                                                                            VimNumber {
                                                                                                value: "1",
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                DictAccess(
                                                                                    DictAccess {
                                                                                        container: Index(
                                                                                            IndexExpression {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(reply),
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (530,46)->(530,47)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "result",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                open: Token(LeftBracket, "[", (530,53)->(530,54)),
                                                                                                index: Item(
                                                                                                    Identifier(
                                                                                                        Raw(i),
                                                                                                    ),
                                                                                                ),
                                                                                                close: Token(RightBracket, "]", (530,55)->(530,56)),
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (530,56)->(530,57)),
                                                                                        index: RawIdentifier {
                                                                                            name: "name",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, "\n", (530,63)->(530,63)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, "endfor", (531,4)->(531,10)),
                                            endfor_eol: Token(EndOfLine, "\n", (531,10)->(531,10)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(choice),
                                                ),
                                                equals: Token(Equal, "=", (532,11)->(532,12)),
                                                right: Call(
                                                    f: Identifier(Raw(inputlist)) arg: [
                                                        Identifier(
                                                            Raw(items),
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (532,29)->(532,29)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (533,4)->(533,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(Or, "||", (533,18)->(533,20)),
                                                    operator: Or,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(LessThan, "<", (533,14)->(533,15)),
                                                            operator: LessThan,
                                                            left: Identifier(
                                                                Raw(choice),
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "1",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(GreaterThan, ">", (533,28)->(533,29)),
                                                            operator: GreaterThan,
                                                            left: Identifier(
                                                                Raw(choice),
                                                            ),
                                                            right: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(items),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (533,35)->(533,37)),
                                                                    right: f: Identifier(Raw(len)) arg: [],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (533,42)->(533,42)),
                                            body: Body {
                                                commands: [
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (534,6)->(534,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (534,12)->(534,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (535,4)->(535,9)),
                                            endif_eol: Token(EndOfLine, "\n", (535,9)->(535,9)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (536,2)->(536,7)),
                            endif_eol: Token(EndOfLine, "\n", (536,7)->(536,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (537,0)->(537,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (538,2)->(538,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (538,33)->(538,35)),
                                    operator: EqualTo,
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(lspserver),
                                            ),
                                            dot: Token(Dot, ".", (538,14)->(538,15)),
                                            index: RawIdentifier {
                                                name: "callHierarchyType",
                                            },
                                        },
                                    ),
                                    right: String(
                                        SingleQuote(
                                            "incoming",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (538,46)->(538,46)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Scope(ScopedIdentifier { scope: Global, colon: Token(Colon, ":", (539,5)->(539,6)), accessor: Raw(LspGetIncomingCalls) }),
                                            ),
                                            open: Token(LeftParen, "(", (539,25)->(539,26)),
                                            args: [
                                                Index(
                                                    IndexExpression {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(reply),
                                                                ),
                                                                dot: Token(Dot, ".", (539,31)->(539,32)),
                                                                index: RawIdentifier {
                                                                    name: "result",
                                                                },
                                                            },
                                                        ),
                                                        open: Token(LeftBracket, "[", (539,38)->(539,39)),
                                                        index: Item(
                                                            Infix(
                                                                InfixExpression {
                                                                    token: Token(Minus, "-", (539,46)->(539,47)),
                                                                    operator: Minus,
                                                                    left: Identifier(
                                                                        Raw(choice),
                                                                    ),
                                                                    right: Number(
                                                                        VimNumber {
                                                                            value: "1",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        close: Token(RightBracket, "]", (539,49)->(539,50)),
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (539,50)->(539,51)),
                                            eol: Token(EndOfLine, "\n", (539,51)->(539,51)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (540,2)->(540,6)),
                                    else_eol: Token(EndOfLine, "\n", (540,6)->(540,6)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Identifier(
                                                        Scope(ScopedIdentifier { scope: Global, colon: Token(Colon, ":", (541,5)->(541,6)), accessor: Raw(LspGetOutgoingCalls) }),
                                                    ),
                                                    open: Token(LeftParen, "(", (541,25)->(541,26)),
                                                    args: [
                                                        Index(
                                                            IndexExpression {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(reply),
                                                                        ),
                                                                        dot: Token(Dot, ".", (541,31)->(541,32)),
                                                                        index: RawIdentifier {
                                                                            name: "result",
                                                                        },
                                                                    },
                                                                ),
                                                                open: Token(LeftBracket, "[", (541,38)->(541,39)),
                                                                index: Item(
                                                                    Infix(
                                                                        InfixExpression {
                                                                            token: Token(Minus, "-", (541,46)->(541,47)),
                                                                            operator: Minus,
                                                                            left: Identifier(
                                                                                Raw(choice),
                                                                            ),
                                                                            right: Number(
                                                                                VimNumber {
                                                                                    value: "1",
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                close: Token(RightBracket, "]", (541,49)->(541,50)),
                                                            },
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (541,50)->(541,51)),
                                                    eol: Token(EndOfLine, "\n", (541,51)->(541,51)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (542,2)->(542,7)),
                            endif_eol: Token(EndOfLine, "\n", (542,7)->(542,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (543,0)->(543,6)),
            end_eol: Token(EndOfLine, "\n", (543,6)->(543,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (544,0)->(544,0)),
    ),
    Comment(
        Token(Comment, "# process the 'callHierarchy/incomingCalls' reply from the LSP server", (545,0)->(545,69)),
    ),
    Comment(
        Token(Comment, "# Result: CallHierarchyIncomingCall[] | null", (546,0)->(546,44)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (547,0)->(547,3)),
            name: Raw(ProcessIncomingCalls),
            args: Signature {
                open: Token(LeftParen, "(", (547,24)->(547,25)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (547,34)->(547,36)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (547,40)->(547,41)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (547,44)->(547,45)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (547,50)->(547,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (547,56)->(547,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (547,60)->(547,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (547,68)->(547,70)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (547,74)->(547,75)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (547,78)->(547,79)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (547,79)->(547,80)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (547,80)->(547,80)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (548,2)->(548,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (548,10)->(548,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (548,17)->(548,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (548,26)->(548,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (549,4)->(549,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (549,10)->(549,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (550,2)->(550,7)),
                            endif_eol: Token(EndOfLine, "\n", (550,7)->(550,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (551,0)->(551,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(callhier),
                                    ),
                                    dot: Token(Dot, ".", (552,10)->(552,11)),
                                    index: RawIdentifier {
                                        name: "IncomingCalls",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (552,24)->(552,25)),
                            args: [
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (552,30)->(552,31)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (552,37)->(552,38)),
                            eol: Token(EndOfLine, "\n", (552,38)->(552,38)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (553,0)->(553,6)),
            end_eol: Token(EndOfLine, "\n", (553,6)->(553,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (554,0)->(554,0)),
    ),
    Comment(
        Token(Comment, "# process the 'callHierarchy/outgoingCalls' reply from the LSP server", (555,0)->(555,69)),
    ),
    Comment(
        Token(Comment, "# Result: CallHierarchyOutgoingCall[] | null", (556,0)->(556,44)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (557,0)->(557,3)),
            name: Raw(ProcessOutgoingCalls),
            args: Signature {
                open: Token(LeftParen, "(", (557,24)->(557,25)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (557,34)->(557,36)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (557,40)->(557,41)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (557,44)->(557,45)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (557,50)->(557,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (557,56)->(557,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (557,60)->(557,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (557,68)->(557,70)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (557,74)->(557,75)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (557,78)->(557,79)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (557,79)->(557,80)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (557,80)->(557,80)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (558,2)->(558,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (558,10)->(558,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (558,17)->(558,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (558,26)->(558,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (559,4)->(559,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (559,10)->(559,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (560,2)->(560,7)),
                            endif_eol: Token(EndOfLine, "\n", (560,7)->(560,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (561,0)->(561,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(callhier),
                                    ),
                                    dot: Token(Dot, ".", (562,10)->(562,11)),
                                    index: RawIdentifier {
                                        name: "OutgoingCalls",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (562,24)->(562,25)),
                            args: [
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (562,30)->(562,31)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (562,37)->(562,38)),
                            eol: Token(EndOfLine, "\n", (562,38)->(562,38)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (563,0)->(563,6)),
            end_eol: Token(EndOfLine, "\n", (563,6)->(563,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (564,0)->(564,0)),
    ),
    Comment(
        Token(Comment, "# Process various reply messages from the LSP server", (565,0)->(565,52)),
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, "export", (566,0)->(566,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, "def", (566,7)->(566,10)),
                    name: Raw(ProcessReply),
                    args: Signature {
                        open: Token(LeftParen, "(", (566,23)->(566,24)),
                        params: [
                            Parameter {
                                name: Raw(lspserver),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (566,33)->(566,35)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (566,39)->(566,40)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (566,43)->(566,44)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(req),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (566,49)->(566,51)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (566,55)->(566,56)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (566,59)->(566,60)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(reply),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (566,67)->(566,69)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (566,73)->(566,74)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (566,77)->(566,78)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, ")", (566,78)->(566,79)),
                    },
                    ret: Some(
                        Type {
                            colon: Token(SpacedColon, ": ", (566,79)->(566,81)),
                            inner: Void,
                        },
                    ),
                    def_eol: Token(EndOfLine, "\n", (566,85)->(566,85)),
                    body: Body {
                        commands: [
                            Var(
                                VarCommand {
                                    var: Token(Identifier, "var", (567,2)->(567,5)),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (567,24)->(567,26)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (567,30)->(567,31)),
                                                inner: Func(
                                                    Naked,
                                                ),
                                                close: Token(GreaterThan, ">", (567,35)->(567,36)),
                                            },
                                        },
                                    ),
                                    name: Raw(lsp_reply_handlers),
                                    equal: Token(Equal, "=", (567,37)->(567,38)),
                                    expr: Dict(
                                        DictLiteral {
                                            open: Token(LeftBrace, "{", (568,4)->(568,5)),
                                            elements: [
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "initialize", (569,7)->(569,16)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (569,18)->(569,20)),
                                                    value: Identifier(
                                                        Raw(ProcessInitializeReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (569,42)->(569,43)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "shutdown", (570,7)->(570,14)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (570,16)->(570,18)),
                                                    value: Identifier(
                                                        Raw(ProcessShutdownReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (570,38)->(570,39)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/signatureHelp", (571,7)->(571,32)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (571,34)->(571,36)),
                                                    value: Identifier(
                                                        Raw(ProcessSignaturehelpReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (571,61)->(571,62)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/completion", (572,7)->(572,29)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (572,31)->(572,33)),
                                                    value: Identifier(
                                                        Raw(ProcessCompletionReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (572,55)->(572,56)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/hover", (573,7)->(573,24)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (573,26)->(573,28)),
                                                    value: Identifier(
                                                        Raw(ProcessHoverReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (573,45)->(573,46)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/references", (574,7)->(574,29)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (574,31)->(574,33)),
                                                    value: Identifier(
                                                        Raw(ProcessReferencesReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (574,55)->(574,56)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/documentHighlight", (575,7)->(575,36)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (575,38)->(575,40)),
                                                    value: Identifier(
                                                        Raw(ProcessDocHighlightReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (575,64)->(575,65)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/documentSymbol", (576,7)->(576,33)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (576,35)->(576,37)),
                                                    value: Identifier(
                                                        Raw(ProcessDocSymbolReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (576,58)->(576,59)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/codeAction", (577,7)->(577,29)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (577,31)->(577,33)),
                                                    value: Identifier(
                                                        Raw(ProcessCodeActionReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (577,55)->(577,56)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/foldingRange", (578,7)->(578,31)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (578,33)->(578,35)),
                                                    value: Identifier(
                                                        Raw(ProcessFoldingRangeReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (578,59)->(578,60)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/executeCommand", (579,7)->(579,30)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (579,32)->(579,34)),
                                                    value: Identifier(
                                                        Raw(ProcessWorkspaceExecuteReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (579,62)->(579,63)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/symbol", (580,7)->(580,22)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (580,24)->(580,26)),
                                                    value: Identifier(
                                                        Raw(ProcessWorkspaceSymbolReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (580,53)->(580,54)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/prepareCallHierarchy", (581,7)->(581,39)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (581,41)->(581,43)),
                                                    value: Identifier(
                                                        Raw(ProcessPrepareCallHierarchy),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (581,70)->(581,71)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "callHierarchy/incomingCalls", (582,7)->(582,33)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (582,35)->(582,37)),
                                                    value: Identifier(
                                                        Raw(ProcessIncomingCalls),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (582,57)->(582,58)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "callHierarchy/outgoingCalls", (583,7)->(583,33)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (583,35)->(583,37)),
                                                    value: Identifier(
                                                        Raw(ProcessOutgoingCalls),
                                                    ),
                                                    comma: None,
                                                },
                                            ],
                                            close: Token(RightBrace, "}", (584,4)->(584,5)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (584,5)->(584,5)),
                                },
                            ),
                            NoOp(
                                Token(EndOfLine, "\n", (585,0)->(585,0)),
                            ),
                            If(
                                IfCommand {
                                    if_tok: Token(Identifier, "if", (586,2)->(586,4)),
                                    condition: MethodCall(
                                        MethodCall {
                                            left: Identifier(
                                                Raw(lsp_reply_handlers),
                                            ),
                                            tok: Token(MethodArrow, "->", (586,23)->(586,25)),
                                            right: f: Identifier(Raw(has_key)) arg: [
                                                DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(req),
                                                        ),
                                                        dot: Token(Dot, ".", (586,36)->(586,37)),
                                                        index: RawIdentifier {
                                                            name: "method",
                                                        },
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    if_eol: Token(EndOfLine, "\n", (586,44)->(586,44)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(lsp_reply_handlers),
                                                            ),
                                                            open: Token(LeftBracket, "[", (587,22)->(587,23)),
                                                            index: Item(
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(req),
                                                                        ),
                                                                        dot: Token(Dot, ".", (587,26)->(587,27)),
                                                                        index: RawIdentifier {
                                                                            name: "method",
                                                                        },
                                                                    },
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (587,33)->(587,34)),
                                                        },
                                                    ),
                                                    open: Token(LeftParen, "(", (587,34)->(587,35)),
                                                    args: [
                                                        Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        Identifier(
                                                            Raw(req),
                                                        ),
                                                        Identifier(
                                                            Raw(reply),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (587,56)->(587,57)),
                                                    eol: Token(EndOfLine, "\n", (587,57)->(587,57)),
                                                },
                                            ),
                                        ],
                                    },
                                    elseifs: [],
                                    else_command: Some(
                                        ElseCommand {
                                            else_tok: Token(Identifier, "else", (588,2)->(588,6)),
                                            else_eol: Token(EndOfLine, "\n", (588,6)->(588,6)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(util),
                                                                    ),
                                                                    dot: Token(Dot, ".", (589,8)->(589,9)),
                                                                    index: RawIdentifier {
                                                                        name: "ErrMsg",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (589,15)->(589,16)),
                                                            args: [
                                                                String(
                                                                    Interpolated(
                                                                        "Error: Unsupported reply received from LSP server: {reply->string()} for request: {req->string()}",
                                                                    ),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (589,116)->(589,117)),
                                                            eol: Token(EndOfLine, "\n", (589,117)->(589,117)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                    ),
                                    endif_tok: Token(Identifier, "endif", (590,2)->(590,7)),
                                    endif_eol: Token(EndOfLine, "\n", (590,7)->(590,7)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, "enddef", (591,0)->(591,6)),
                    end_eol: Token(EndOfLine, "\n", (591,6)->(591,6)),
                },
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (592,0)->(592,0)),
    ),
    Comment(
        Token(Comment, "# process a diagnostic notification message from the LSP server", (593,0)->(593,63)),
    ),
    Comment(
        Token(Comment, "# Notification: textDocument/publishDiagnostics", (594,0)->(594,47)),
    ),
    Comment(
        Token(Comment, "# Param: PublishDiagnosticsParams", (595,0)->(595,33)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (596,0)->(596,3)),
            name: Raw(ProcessDiagNotif),
            args: Signature {
                open: Token(LeftParen, "(", (596,20)->(596,21)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (596,30)->(596,32)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (596,36)->(596,37)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (596,40)->(596,41)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (596,48)->(596,50)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (596,54)->(596,55)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (596,58)->(596,59)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (596,59)->(596,60)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (596,60)->(596,62)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (596,66)->(596,66)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(diag),
                                    ),
                                    dot: Token(Dot, ".", (597,6)->(597,7)),
                                    index: RawIdentifier {
                                        name: "DiagNotification",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (597,23)->(597,24)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: DictAccess(
                                            DictAccess {
                                                container: Identifier(
                                                    Raw(reply),
                                                ),
                                                dot: Token(Dot, ".", (597,40)->(597,41)),
                                                index: RawIdentifier {
                                                    name: "params",
                                                },
                                            },
                                        ),
                                        dot: Token(Dot, ".", (597,47)->(597,48)),
                                        index: RawIdentifier {
                                            name: "uri",
                                        },
                                    },
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: DictAccess(
                                            DictAccess {
                                                container: Identifier(
                                                    Raw(reply),
                                                ),
                                                dot: Token(Dot, ".", (597,58)->(597,59)),
                                                index: RawIdentifier {
                                                    name: "params",
                                                },
                                            },
                                        ),
                                        dot: Token(Dot, ".", (597,65)->(597,66)),
                                        index: RawIdentifier {
                                            name: "diagnostics",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (597,77)->(597,78)),
                            eol: Token(EndOfLine, "\n", (597,78)->(597,78)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (598,0)->(598,6)),
            end_eol: Token(EndOfLine, "\n", (598,6)->(598,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (599,0)->(599,0)),
    ),
    Comment(
        Token(Comment, "# process a show notification message from the LSP server", (600,0)->(600,57)),
    ),
    Comment(
        Token(Comment, "# Notification: window/showMessage", (601,0)->(601,34)),
    ),
    Comment(
        Token(Comment, "# Param: ShowMessageParams", (602,0)->(602,26)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (603,0)->(603,3)),
            name: Raw(ProcessShowMsgNotif),
            args: Signature {
                open: Token(LeftParen, "(", (603,23)->(603,24)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (603,33)->(603,35)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (603,39)->(603,40)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (603,43)->(603,44)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (603,51)->(603,53)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (603,57)->(603,58)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (603,61)->(603,62)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (603,62)->(603,63)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (603,63)->(603,63)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (604,2)->(604,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (604,13)->(604,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (604,19)->(604,20)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (604,26)->(604,27)),
                                    },
                                },
                            ),
                            name: Raw(msgType),
                            equal: Token(Equal, "=", (604,28)->(604,29)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (604,30)->(604,31)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Error: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Warning: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Info: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Log: ",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (604,76)->(604,77)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (604,77)->(604,77)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (605,2)->(605,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (605,23)->(605,25)),
                                    operator: EqualTo,
                                    left: DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (605,10)->(605,11)),
                                                    index: RawIdentifier {
                                                        name: "params",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (605,17)->(605,18)),
                                            index: RawIdentifier {
                                                name: "type",
                                            },
                                        },
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "4",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (605,27)->(605,27)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# ignore log messages from the LSP server (too chatty)", (606,4)->(606,58)),
                                    ),
                                    Comment(
                                        Token(Comment, "# TODO: Add a configuration to control the message level that will be", (607,4)->(607,73)),
                                    ),
                                    Comment(
                                        Token(Comment, "# displayed. Also store these messages and provide a command to display", (608,4)->(608,75)),
                                    ),
                                    Comment(
                                        Token(Comment, "# them.", (609,4)->(609,11)),
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (610,4)->(610,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (610,10)->(610,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (611,2)->(611,7)),
                            endif_eol: Token(EndOfLine, "\n", (611,7)->(611,7)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (612,2)->(612,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (612,11)->(612,13)),
                                    inner: String,
                                },
                            ),
                            name: Raw(mtype),
                            equal: Token(Equal, "=", (612,20)->(612,21)),
                            expr: String(
                                SingleQuote(
                                    "Log: ",
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (612,29)->(612,29)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (613,2)->(613,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (613,27)->(613,29)),
                                    operator: And,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(GreaterThan, ">", (613,23)->(613,24)),
                                            operator: GreaterThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (613,10)->(613,11)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (613,17)->(613,18)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "0",
                                                },
                                            ),
                                        },
                                    ),
                                    right: Infix(
                                        InfixExpression {
                                            token: Token(LessThan, "<", (613,48)->(613,49)),
                                            operator: LessThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (613,35)->(613,36)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (613,42)->(613,43)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "5",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (613,51)->(613,51)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(mtype),
                                                ),
                                                equals: Token(Equal, "=", (614,10)->(614,11)),
                                                right: Index(
                                                    IndexExpression {
                                                        container: Identifier(
                                                            Raw(msgType),
                                                        ),
                                                        open: Token(LeftBracket, "[", (614,19)->(614,20)),
                                                        index: Item(
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (614,25)->(614,26)),
                                                                            index: RawIdentifier {
                                                                                name: "params",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (614,32)->(614,33)),
                                                                    index: RawIdentifier {
                                                                        name: "type",
                                                                    },
                                                                },
                                                            ),
                                                        ),
                                                        close: Token(RightBracket, "]", (614,37)->(614,38)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (614,38)->(614,38)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (615,2)->(615,7)),
                            endif_eol: Token(EndOfLine, "\n", (615,7)->(615,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (616,0)->(616,0)),
                    ),
                    Echo(
                        EchoCommand {
                            echo: Token(Identifier, "echomsg", (617,3)->(617,10)),
                            expr: String(
                                Interpolated(
                                    "Lsp {mtype} {reply.params.message}",
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (617,48)->(617,48)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (618,0)->(618,6)),
            end_eol: Token(EndOfLine, "\n", (618,6)->(618,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (619,0)->(619,0)),
    ),
    Comment(
        Token(Comment, "# process a log notification message from the LSP server", (620,0)->(620,56)),
    ),
    Comment(
        Token(Comment, "# Notification: window/logMessage", (621,0)->(621,33)),
    ),
    Comment(
        Token(Comment, "# Param: LogMessageParams", (622,0)->(622,25)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (623,0)->(623,3)),
            name: Raw(ProcessLogMsgNotif),
            args: Signature {
                open: Token(LeftParen, "(", (623,22)->(623,23)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (623,32)->(623,34)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (623,38)->(623,39)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (623,42)->(623,43)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (623,50)->(623,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (623,56)->(623,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (623,60)->(623,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (623,61)->(623,62)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (623,62)->(623,62)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (624,2)->(624,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (624,13)->(624,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (624,19)->(624,20)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (624,26)->(624,27)),
                                    },
                                },
                            ),
                            name: Raw(msgType),
                            equal: Token(Equal, "=", (624,28)->(624,29)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (624,30)->(624,31)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Error: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Warning: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Info: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Log: ",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (624,76)->(624,77)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (624,77)->(624,77)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (625,2)->(625,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (625,11)->(625,13)),
                                    inner: String,
                                },
                            ),
                            name: Raw(mtype),
                            equal: Token(Equal, "=", (625,20)->(625,21)),
                            expr: String(
                                SingleQuote(
                                    "Log: ",
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (625,29)->(625,29)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (626,2)->(626,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (626,27)->(626,29)),
                                    operator: And,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(GreaterThan, ">", (626,23)->(626,24)),
                                            operator: GreaterThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (626,10)->(626,11)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (626,17)->(626,18)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "0",
                                                },
                                            ),
                                        },
                                    ),
                                    right: Infix(
                                        InfixExpression {
                                            token: Token(LessThan, "<", (626,48)->(626,49)),
                                            operator: LessThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (626,35)->(626,36)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (626,42)->(626,43)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "5",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (626,51)->(626,51)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(mtype),
                                                ),
                                                equals: Token(Equal, "=", (627,10)->(627,11)),
                                                right: Index(
                                                    IndexExpression {
                                                        container: Identifier(
                                                            Raw(msgType),
                                                        ),
                                                        open: Token(LeftBracket, "[", (627,19)->(627,20)),
                                                        index: Item(
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (627,25)->(627,26)),
                                                                            index: RawIdentifier {
                                                                                name: "params",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (627,32)->(627,33)),
                                                                    index: RawIdentifier {
                                                                        name: "type",
                                                                    },
                                                                },
                                                            ),
                                                        ),
                                                        close: Token(RightBracket, "]", (627,37)->(627,38)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (627,38)->(627,38)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (628,2)->(628,7)),
                            endif_eol: Token(EndOfLine, "\n", (628,7)->(628,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (629,0)->(629,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(util),
                                    ),
                                    dot: Token(Dot, ".", (630,6)->(630,7)),
                                    index: RawIdentifier {
                                        name: "TraceLog",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (630,15)->(630,16)),
                            args: [
                                Boolean(
                                    VimBoolean {
                                        token: Token(False, "false", (630,16)->(630,21)),
                                        value: false,
                                    },
                                ),
                                String(
                                    Interpolated(
                                        "[{mtype}]: {reply.params.message}",
                                    ),
                                ),
                            ],
                            close: Token(RightParen, ")", (630,59)->(630,60)),
                            eol: Token(EndOfLine, "\n", (630,60)->(630,60)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (631,0)->(631,6)),
            end_eol: Token(EndOfLine, "\n", (631,6)->(631,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (632,0)->(632,0)),
    ),
    Comment(
        Token(Comment, "# process unsupported notification messages", (633,0)->(633,43)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (634,0)->(634,3)),
            name: Raw(ProcessUnsupportedNotif),
            args: Signature {
                open: Token(LeftParen, "(", (634,27)->(634,28)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (634,37)->(634,39)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (634,43)->(634,44)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (634,47)->(634,48)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (634,55)->(634,57)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (634,61)->(634,62)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (634,65)->(634,66)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (634,66)->(634,67)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (634,67)->(634,67)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(util),
                                    ),
                                    dot: Token(Dot, ".", (635,6)->(635,7)),
                                    index: RawIdentifier {
                                        name: "ErrMsg",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (635,13)->(635,14)),
                            args: [
                                String(
                                    Interpolated(
                                        "Error: Unsupported notification message received from the LSP server ({lspserver.path}), message = {reply->string()}",
                                    ),
                                ),
                            ],
                            close: Token(RightParen, ")", (635,133)->(635,134)),
                            eol: Token(EndOfLine, "\n", (635,134)->(635,134)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (636,0)->(636,6)),
            end_eol: Token(EndOfLine, "\n", (636,6)->(636,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (637,0)->(637,0)),
    ),
    Comment(
        Token(Comment, "# per-filetype private map inside to record if ntf once or not", (638,0)->(638,62)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (639,0)->(639,3)),
            ty: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (639,19)->(639,21)),
                    inner: Dict {
                        open: Token(AngleLeft, "<", (639,25)->(639,26)),
                        inner: Bool,
                        close: Token(GreaterThan, ">", (639,30)->(639,31)),
                    },
                },
            ),
            name: Raw(ftypeNtfOnceMap),
            equal: Token(Equal, "=", (639,32)->(639,33)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, "{", (639,34)->(639,35)),
                    elements: [],
                    close: Token(RightBrace, "}", (639,35)->(639,36)),
                },
            ),
            eol: Token(EndOfLine, "\n", (639,36)->(639,36)),
        },
    ),
    Comment(
        Token(Comment, "# process unsupported notification messages but only notify once", (640,0)->(640,64)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (641,0)->(641,3)),
            name: Raw(ProcessUnsupportedNotifOnce),
            args: Signature {
                open: Token(LeftParen, "(", (641,31)->(641,32)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (641,41)->(641,43)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (641,47)->(641,48)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (641,51)->(641,52)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (641,59)->(641,61)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (641,65)->(641,66)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (641,69)->(641,70)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (641,70)->(641,71)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (641,71)->(641,71)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (642,2)->(642,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: Prefix(
                                        PrefixExpression {
                                            token: Token(Bang, "!", (642,5)->(642,6)),
                                            operator: Bang,
                                            right: Identifier(
                                                Raw(ftypeNtfOnceMap),
                                            ),
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (642,21)->(642,23)),
                                    right: f: Identifier(Raw(get)) arg: [
                                        VimOption(
                                            VimOption {
                                                ampersand: Token(Ampersand, "&", (642,27)->(642,28)),
                                                option: Literal {
                                                    token: Token(Identifier, "ft", (642,28)->(642,30)),
                                                },
                                            },
                                        ),
                                        Identifier(
                                            Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (642,33)->(642,34)), accessor: Raw(false) }),
                                        ),
                                    ],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (642,40)->(642,40)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(ProcessUnsupportedNotif),
                                            ),
                                            open: Token(LeftParen, "(", (643,24)->(643,25)),
                                            args: [
                                                Identifier(
                                                    Raw(lspserver),
                                                ),
                                                Identifier(
                                                    Raw(reply),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (643,41)->(643,42)),
                                            eol: Token(EndOfLine, "\n", (643,42)->(643,42)),
                                        },
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(ftypeNtfOnceMap),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (644,16)->(644,18)),
                                                    right: f: Identifier(Raw(extend)) arg: [
                                                        Dict(
                                                            DictLiteral {
                                                                open: Token(LeftBrace, "{", (644,25)->(644,26)),
                                                                elements: [
                                                                    KeyValue {
                                                                        key: Expression(
                                                                            VimOption(
                                                                                VimOption {
                                                                                    ampersand: Token(Ampersand, "&", (644,27)->(644,28)),
                                                                                    option: Literal {
                                                                                        token: Token(Identifier, "ft", (644,28)->(644,30)),
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (644,31)->(644,33)),
                                                                        value: Identifier(
                                                                            Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (644,34)->(644,35)), accessor: Raw(true) }),
                                                                        ),
                                                                        comma: None,
                                                                    },
                                                                ],
                                                                close: Token(RightBrace, "}", (644,39)->(644,40)),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (644,41)->(644,41)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (645,2)->(645,7)),
                            endif_eol: Token(EndOfLine, "\n", (645,7)->(645,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (646,0)->(646,6)),
            end_eol: Token(EndOfLine, "\n", (646,6)->(646,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (647,0)->(647,0)),
    ),
    Comment(
        Token(Comment, "# ignore unsupported notification message", (648,0)->(648,41)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (649,0)->(649,3)),
            name: Raw(IgnoreNotif),
            args: Signature {
                open: Token(LeftParen, "(", (649,15)->(649,16)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (649,25)->(649,27)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (649,31)->(649,32)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (649,35)->(649,36)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (649,43)->(649,45)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (649,49)->(649,50)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (649,53)->(649,54)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (649,54)->(649,55)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (649,55)->(649,55)),
            body: Body {
                commands: [],
            },
            enddef: Token(Identifier, "enddef", (650,0)->(650,6)),
            end_eol: Token(EndOfLine, "\n", (650,6)->(650,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (651,0)->(651,0)),
    ),
    Comment(
        Token(Comment, "# process notification messages from the LSP server", (652,0)->(652,51)),
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, "export", (653,0)->(653,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, "def", (653,7)->(653,10)),
                    name: Raw(ProcessNotif),
                    args: Signature {
                        open: Token(LeftParen, "(", (653,23)->(653,24)),
                        params: [
                            Parameter {
                                name: Raw(lspserver),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (653,33)->(653,35)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (653,39)->(653,40)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (653,43)->(653,44)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(reply),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (653,51)->(653,53)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (653,57)->(653,58)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (653,61)->(653,62)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, ")", (653,62)->(653,63)),
                    },
                    ret: Some(
                        Type {
                            colon: Token(SpacedColon, ": ", (653,63)->(653,65)),
                            inner: Void,
                        },
                    ),
                    def_eol: Token(EndOfLine, "\n", (653,69)->(653,69)),
                    body: Body {
                        commands: [
                            Var(
                                VarCommand {
                                    var: Token(Identifier, "var", (654,2)->(654,5)),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (654,24)->(654,26)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (654,30)->(654,31)),
                                                inner: Func(
                                                    Naked,
                                                ),
                                                close: Token(GreaterThan, ">", (654,35)->(654,36)),
                                            },
                                        },
                                    ),
                                    name: Raw(lsp_notif_handlers),
                                    equal: Token(Equal, "=", (654,37)->(654,38)),
                                    expr: Dict(
                                        DictLiteral {
                                            open: Token(LeftBrace, "{", (655,4)->(655,5)),
                                            elements: [
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "window/showMessage", (656,7)->(656,24)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (656,26)->(656,28)),
                                                    value: Identifier(
                                                        Raw(ProcessShowMsgNotif),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (656,47)->(656,48)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "window/logMessage", (657,7)->(657,23)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (657,25)->(657,27)),
                                                    value: Identifier(
                                                        Raw(ProcessLogMsgNotif),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (657,45)->(657,46)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/publishDiagnostics", (658,7)->(658,37)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (658,39)->(658,41)),
                                                    value: Identifier(
                                                        Raw(ProcessDiagNotif),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (658,57)->(658,58)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "$/progress", (659,7)->(659,16)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (659,18)->(659,20)),
                                                    value: Identifier(
                                                        Raw(ProcessUnsupportedNotif),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (659,43)->(659,44)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "telemetry/event", (660,7)->(660,21)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (660,23)->(660,25)),
                                                    value: Identifier(
                                                        Raw(ProcessUnsupportedNotifOnce),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (660,52)->(660,53)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "language/status", (663,7)->(663,21)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (663,23)->(663,25)),
                                                    value: Identifier(
                                                        Raw(IgnoreNotif),
                                                    ),
                                                    comma: None,
                                                },
                                            ],
                                            close: Token(RightBrace, "}", (664,4)->(664,5)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (664,5)->(664,5)),
                                },
                            ),
                            NoOp(
                                Token(EndOfLine, "\n", (665,0)->(665,0)),
                            ),
                            If(
                                IfCommand {
                                    if_tok: Token(Identifier, "if", (666,2)->(666,4)),
                                    condition: MethodCall(
                                        MethodCall {
                                            left: Identifier(
                                                Raw(lsp_notif_handlers),
                                            ),
                                            tok: Token(MethodArrow, "->", (666,23)->(666,25)),
                                            right: f: Identifier(Raw(has_key)) arg: [
                                                DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(reply),
                                                        ),
                                                        dot: Token(Dot, ".", (666,38)->(666,39)),
                                                        index: RawIdentifier {
                                                            name: "method",
                                                        },
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    if_eol: Token(EndOfLine, "\n", (666,46)->(666,46)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(lsp_notif_handlers),
                                                            ),
                                                            open: Token(LeftBracket, "[", (667,22)->(667,23)),
                                                            index: Item(
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(reply),
                                                                        ),
                                                                        dot: Token(Dot, ".", (667,28)->(667,29)),
                                                                        index: RawIdentifier {
                                                                            name: "method",
                                                                        },
                                                                    },
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (667,35)->(667,36)),
                                                        },
                                                    ),
                                                    open: Token(LeftParen, "(", (667,36)->(667,37)),
                                                    args: [
                                                        Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        Identifier(
                                                            Raw(reply),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (667,53)->(667,54)),
                                                    eol: Token(EndOfLine, "\n", (667,54)->(667,54)),
                                                },
                                            ),
                                        ],
                                    },
                                    elseifs: [],
                                    else_command: Some(
                                        ElseCommand {
                                            else_tok: Token(Identifier, "else", (668,2)->(668,6)),
                                            else_eol: Token(EndOfLine, "\n", (668,6)->(668,6)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(util),
                                                                    ),
                                                                    dot: Token(Dot, ".", (669,8)->(669,9)),
                                                                    index: RawIdentifier {
                                                                        name: "ErrMsg",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (669,15)->(669,16)),
                                                            args: [
                                                                String(
                                                                    Interpolated(
                                                                        "Error: Unsupported notification received from LSP server {reply->string()}",
                                                                    ),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (669,93)->(669,94)),
                                                            eol: Token(EndOfLine, "\n", (669,94)->(669,94)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                    ),
                                    endif_tok: Token(Identifier, "endif", (670,2)->(670,7)),
                                    endif_eol: Token(EndOfLine, "\n", (670,7)->(670,7)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, "enddef", (671,0)->(671,6)),
                    end_eol: Token(EndOfLine, "\n", (671,6)->(671,6)),
                },
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (672,0)->(672,0)),
    ),
    Comment(
        Token(Comment, "# process the workspace/applyEdit LSP server request", (673,0)->(673,52)),
    ),
    Comment(
        Token(Comment, "# Request: \"workspace/applyEdit\"", (674,0)->(674,32)),
    ),
    Comment(
        Token(Comment, "# Param: ApplyWorkspaceEditParams", (675,0)->(675,33)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (676,0)->(676,3)),
            name: Raw(ProcessApplyEditReq),
            args: Signature {
                open: Token(LeftParen, "(", (676,23)->(676,24)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (676,33)->(676,35)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (676,39)->(676,40)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (676,43)->(676,44)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(request),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (676,53)->(676,55)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (676,59)->(676,60)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (676,63)->(676,64)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (676,64)->(676,65)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (676,65)->(676,65)),
            body: Body {
                commands: [
                    Comment(
                        Token(Comment, "# interface ApplyWorkspaceEditParams", (677,2)->(677,38)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (678,2)->(678,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: Prefix(
                                        PrefixExpression {
                                            token: Token(Bang, "!", (678,5)->(678,6)),
                                            operator: Bang,
                                            right: Identifier(
                                                Raw(request),
                                            ),
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (678,13)->(678,15)),
                                    right: f: Identifier(Raw(has_key)) arg: [
                                        String(
                                            SingleQuote(
                                                "params",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (678,32)->(678,32)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (679,4)->(679,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (679,10)->(679,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (680,2)->(680,7)),
                            endif_eol: Token(EndOfLine, "\n", (680,7)->(680,7)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (681,2)->(681,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (681,25)->(681,27)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (681,31)->(681,32)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (681,35)->(681,36)),
                                    },
                                },
                            ),
                            name: Raw(workspaceEditParams),
                            equal: Token(Equal, "=", (681,37)->(681,38)),
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(request),
                                    ),
                                    dot: Token(Dot, ".", (681,46)->(681,47)),
                                    index: RawIdentifier {
                                        name: "params",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (681,53)->(681,53)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (682,2)->(682,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(workspaceEditParams),
                                    ),
                                    tok: Token(MethodArrow, "->", (682,24)->(682,26)),
                                    right: f: Identifier(Raw(has_key)) arg: [
                                        String(
                                            SingleQuote(
                                                "label",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (682,42)->(682,42)),
                            body: Body {
                                commands: [
                                    Echo(
                                        EchoCommand {
                                            echo: Token(Identifier, "echomsg", (683,5)->(683,12)),
                                            expr: String(
                                                Interpolated(
                                                    "Workspace edit {workspaceEditParams.label}",
                                                ),
                                            ),
                                            eol: Token(EndOfLine, "\n", (683,58)->(683,58)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (684,2)->(684,7)),
                            endif_eol: Token(EndOfLine, "\n", (684,7)->(684,7)),
                        },
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(textedit),
                                    ),
                                    dot: Token(Dot, ".", (685,10)->(685,11)),
                                    index: RawIdentifier {
                                        name: "ApplyWorkspaceEdit",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (685,29)->(685,30)),
                            args: [
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(workspaceEditParams),
                                        ),
                                        dot: Token(Dot, ".", (685,49)->(685,50)),
                                        index: RawIdentifier {
                                            name: "edit",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (685,54)->(685,55)),
                            eol: Token(EndOfLine, "\n", (685,55)->(685,55)),
                        },
                    ),
                    Comment(
                        Token(Comment, "# TODO: Need to return the proper result of the edit operation", (686,2)->(686,64)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(lspserver),
                                    ),
                                    dot: Token(Dot, ".", (687,11)->(687,12)),
                                    index: RawIdentifier {
                                        name: "sendResponse",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (687,24)->(687,25)),
                            args: [
                                Identifier(
                                    Raw(request),
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (687,34)->(687,35)),
                                        elements: [
                                            KeyValue {
                                                key: Literal(
                                                    Literal {
                                                        token: Token(Identifier, "applied", (687,35)->(687,42)),
                                                    },
                                                ),
                                                colon: Token(SpacedColon, ": ", (687,42)->(687,44)),
                                                value: Boolean(
                                                    VimBoolean {
                                                        token: Token(True, "true", (687,44)->(687,48)),
                                                        value: true,
                                                    },
                                                ),
                                                comma: None,
                                            },
                                        ],
                                        close: Token(RightBrace, "}", (687,48)->(687,49)),
                                    },
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (687,51)->(687,52)),
                                        elements: [],
                                        close: Token(RightBrace, "}", (687,52)->(687,53)),
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (687,53)->(687,54)),
                            eol: Token(EndOfLine, "\n", (687,54)->(687,54)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (688,0)->(688,6)),
            end_eol: Token(EndOfLine, "\n", (688,6)->(688,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (689,0)->(689,0)),
    ),
    Comment(
        Token(Comment, "# process the workspace/workspaceFolders LSP server request", (690,0)->(690,59)),
    ),
    Comment(
        Token(Comment, "# Request: \"workspace/workspaceFolders\"", (691,0)->(691,39)),
    ),
    Comment(
        Token(Comment, "# Param: none", (692,0)->(692,13)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (693,0)->(693,3)),
            name: Raw(ProcessWorkspaceFoldersReq),
            args: Signature {
                open: Token(LeftParen, "(", (693,30)->(693,31)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (693,40)->(693,42)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (693,46)->(693,47)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (693,50)->(693,51)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(request),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (693,60)->(693,62)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (693,66)->(693,67)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (693,70)->(693,71)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (693,71)->(693,72)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (693,72)->(693,72)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(lspserver),
                                    ),
                                    dot: Token(Dot, ".", (694,11)->(694,12)),
                                    index: RawIdentifier {
                                        name: "sendResponse",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (694,24)->(694,25)),
                            args: [
                                Identifier(
                                    Raw(request),
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (694,34)->(694,35)),
                                        elements: [],
                                        close: Token(RightBrace, "}", (694,35)->(694,36)),
                                    },
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (694,38)->(694,39)),
                                        elements: [],
                                        close: Token(RightBrace, "}", (694,39)->(694,40)),
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (694,40)->(694,41)),
                            eol: Token(EndOfLine, "\n", (694,41)->(694,41)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (695,0)->(695,6)),
            end_eol: Token(EndOfLine, "\n", (695,6)->(695,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (696,0)->(696,0)),
    ),
    Comment(
        Token(Comment, "# process the client/registerCapability LSP server request", (697,0)->(697,58)),
    ),
    Comment(
        Token(Comment, "# Request: \"client/registerCapability\"", (698,0)->(698,38)),
    ),
    Comment(
        Token(Comment, "# Param: RegistrationParams", (699,0)->(699,27)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (700,0)->(700,3)),
            name: Raw(ProcessClientRegisterCap),
            args: Signature {
                open: Token(LeftParen, "(", (700,28)->(700,29)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (700,38)->(700,40)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (700,44)->(700,45)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (700,48)->(700,49)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(request),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (700,58)->(700,60)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (700,64)->(700,65)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (700,68)->(700,69)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (700,69)->(700,70)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (700,70)->(700,70)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(lspserver),
                                    ),
                                    dot: Token(Dot, ".", (701,11)->(701,12)),
                                    index: RawIdentifier {
                                        name: "sendResponse",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (701,24)->(701,25)),
                            args: [
                                Identifier(
                                    Raw(request),
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (701,34)->(701,35)),
                                        elements: [],
                                        close: Token(RightBrace, "}", (701,35)->(701,36)),
                                    },
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (701,38)->(701,39)),
                                        elements: [],
                                        close: Token(RightBrace, "}", (701,39)->(701,40)),
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (701,40)->(701,41)),
                            eol: Token(EndOfLine, "\n", (701,41)->(701,41)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (702,0)->(702,6)),
            end_eol: Token(EndOfLine, "\n", (702,6)->(702,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (703,0)->(703,0)),
    ),
    Comment(
        Token(Comment, "# process the client/unregisterCapability LSP server request", (704,0)->(704,60)),
    ),
    Comment(
        Token(Comment, "# Request: \"client/unregisterCapability\"", (705,0)->(705,40)),
    ),
    Comment(
        Token(Comment, "# Param: UnregistrationParams", (706,0)->(706,29)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (707,0)->(707,3)),
            name: Raw(ProcessClientUnregisterCap),
            args: Signature {
                open: Token(LeftParen, "(", (707,30)->(707,31)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (707,40)->(707,42)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (707,46)->(707,47)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (707,50)->(707,51)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(request),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (707,60)->(707,62)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (707,66)->(707,67)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (707,70)->(707,71)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (707,71)->(707,72)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (707,72)->(707,72)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(lspserver),
                                    ),
                                    dot: Token(Dot, ".", (708,11)->(708,12)),
                                    index: RawIdentifier {
                                        name: "sendResponse",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (708,24)->(708,25)),
                            args: [
                                Identifier(
                                    Raw(request),
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (708,34)->(708,35)),
                                        elements: [],
                                        close: Token(RightBrace, "}", (708,35)->(708,36)),
                                    },
                                ),
                                Dict(
                                    DictLiteral {
                                        open: Token(LeftBrace, "{", (708,38)->(708,39)),
                                        elements: [],
                                        close: Token(RightBrace, "}", (708,39)->(708,40)),
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (708,40)->(708,41)),
                            eol: Token(EndOfLine, "\n", (708,41)->(708,41)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (709,0)->(709,6)),
            end_eol: Token(EndOfLine, "\n", (709,6)->(709,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (710,0)->(710,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (711,0)->(711,3)),
            name: Raw(ProcessUnsupportedReq),
            args: Signature {
                open: Token(LeftParen, "(", (711,25)->(711,26)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (711,35)->(711,37)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (711,41)->(711,42)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (711,45)->(711,46)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(request),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (711,55)->(711,57)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (711,61)->(711,62)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (711,65)->(711,66)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (711,66)->(711,67)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (711,67)->(711,67)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(util),
                                    ),
                                    dot: Token(Dot, ".", (712,6)->(712,7)),
                                    index: RawIdentifier {
                                        name: "ErrMsg",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (712,13)->(712,14)),
                            args: [
                                String(
                                    Interpolated(
                                        "Error: Unsupported request message received from the LSP server ({lspserver.path}), message = {request->string()}",
                                    ),
                                ),
                            ],
                            close: Token(RightParen, ")", (712,130)->(712,131)),
                            eol: Token(EndOfLine, "\n", (712,131)->(712,131)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (713,0)->(713,6)),
            end_eol: Token(EndOfLine, "\n", (713,6)->(713,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (714,0)->(714,0)),
    ),
    Comment(
        Token(Comment, "# process a request message from the server", (715,0)->(715,43)),
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, "export", (716,0)->(716,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, "def", (716,7)->(716,10)),
                    name: Raw(ProcessRequest),
                    args: Signature {
                        open: Token(LeftParen, "(", (716,25)->(716,26)),
                        params: [
                            Parameter {
                                name: Raw(lspserver),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (716,35)->(716,37)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (716,41)->(716,42)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (716,45)->(716,46)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(request),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (716,55)->(716,57)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (716,61)->(716,62)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (716,65)->(716,66)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, ")", (716,66)->(716,67)),
                    },
                    ret: None,
                    def_eol: Token(EndOfLine, "\n", (716,67)->(716,67)),
                    body: Body {
                        commands: [
                            Var(
                                VarCommand {
                                    var: Token(Identifier, "var", (717,2)->(717,5)),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (717,24)->(717,26)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (717,30)->(717,31)),
                                                inner: Func(
                                                    Naked,
                                                ),
                                                close: Token(GreaterThan, ">", (717,35)->(717,36)),
                                            },
                                        },
                                    ),
                                    name: Raw(lspRequestHandlers),
                                    equal: Token(Equal, "=", (717,37)->(717,38)),
                                    expr: Dict(
                                        DictLiteral {
                                            open: Token(LeftBrace, "{", (718,4)->(718,5)),
                                            elements: [
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/applyEdit", (719,7)->(719,25)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (719,27)->(719,29)),
                                                    value: Identifier(
                                                        Raw(ProcessApplyEditReq),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (719,48)->(719,49)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/workspaceFolders", (720,7)->(720,32)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (720,34)->(720,36)),
                                                    value: Identifier(
                                                        Raw(ProcessWorkspaceFoldersReq),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (720,62)->(720,63)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "window/workDoneProgress/create", (721,7)->(721,36)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (721,38)->(721,40)),
                                                    value: Identifier(
                                                        Raw(ProcessUnsupportedReq),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (721,61)->(721,62)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "client/registerCapability", (722,7)->(722,31)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (722,33)->(722,35)),
                                                    value: Identifier(
                                                        Raw(ProcessClientRegisterCap),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (722,59)->(722,60)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "client/unregisterCapability", (723,7)->(723,33)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (723,35)->(723,37)),
                                                    value: Identifier(
                                                        Raw(ProcessClientUnregisterCap),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (723,63)->(723,64)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/configuration", (724,7)->(724,29)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (724,31)->(724,33)),
                                                    value: Identifier(
                                                        Raw(ProcessUnsupportedReq),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (724,54)->(724,55)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/codeLens/refresh", (725,7)->(725,32)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (725,34)->(725,36)),
                                                    value: Identifier(
                                                        Raw(ProcessUnsupportedReq),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (725,57)->(725,58)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/semanticTokens/refresh", (726,7)->(726,38)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (726,40)->(726,42)),
                                                    value: Identifier(
                                                        Raw(ProcessUnsupportedReq),
                                                    ),
                                                    comma: None,
                                                },
                                            ],
                                            close: Token(RightBrace, "}", (727,4)->(727,5)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (727,5)->(727,5)),
                                },
                            ),
                            NoOp(
                                Token(EndOfLine, "\n", (728,0)->(728,0)),
                            ),
                            If(
                                IfCommand {
                                    if_tok: Token(Identifier, "if", (729,2)->(729,4)),
                                    condition: MethodCall(
                                        MethodCall {
                                            left: Identifier(
                                                Raw(lspRequestHandlers),
                                            ),
                                            tok: Token(MethodArrow, "->", (729,23)->(729,25)),
                                            right: f: Identifier(Raw(has_key)) arg: [
                                                DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(request),
                                                        ),
                                                        dot: Token(Dot, ".", (729,40)->(729,41)),
                                                        index: RawIdentifier {
                                                            name: "method",
                                                        },
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    if_eol: Token(EndOfLine, "\n", (729,48)->(729,48)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(lspRequestHandlers),
                                                            ),
                                                            open: Token(LeftBracket, "[", (730,22)->(730,23)),
                                                            index: Item(
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(request),
                                                                        ),
                                                                        dot: Token(Dot, ".", (730,30)->(730,31)),
                                                                        index: RawIdentifier {
                                                                            name: "method",
                                                                        },
                                                                    },
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (730,37)->(730,38)),
                                                        },
                                                    ),
                                                    open: Token(LeftParen, "(", (730,38)->(730,39)),
                                                    args: [
                                                        Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        Identifier(
                                                            Raw(request),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (730,57)->(730,58)),
                                                    eol: Token(EndOfLine, "\n", (730,58)->(730,58)),
                                                },
                                            ),
                                        ],
                                    },
                                    elseifs: [],
                                    else_command: Some(
                                        ElseCommand {
                                            else_tok: Token(Identifier, "else", (731,2)->(731,6)),
                                            else_eol: Token(EndOfLine, "\n", (731,6)->(731,6)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(util),
                                                                    ),
                                                                    dot: Token(Dot, ".", (732,8)->(732,9)),
                                                                    index: RawIdentifier {
                                                                        name: "ErrMsg",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (732,15)->(732,16)),
                                                            args: [
                                                                String(
                                                                    Interpolated(
                                                                        "Error: Unsupported request message received from the LSP server ({lspserver.path}), message = {request->string()}",
                                                                    ),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (732,132)->(732,133)),
                                                            eol: Token(EndOfLine, "\n", (732,133)->(732,133)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                    ),
                                    endif_tok: Token(Identifier, "endif", (733,2)->(733,7)),
                                    endif_eol: Token(EndOfLine, "\n", (733,7)->(733,7)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, "enddef", (734,0)->(734,6)),
                    end_eol: Token(EndOfLine, "\n", (734,6)->(734,6)),
                },
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (735,0)->(735,0)),
    ),
    Comment(
        Token(Comment, "# process one or more LSP server messages", (736,0)->(736,41)),
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, "export", (737,0)->(737,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, "def", (737,7)->(737,10)),
                    name: Raw(ProcessMessages),
                    args: Signature {
                        open: Token(LeftParen, "(", (737,26)->(737,27)),
                        params: [
                            Parameter {
                                name: Raw(lspserver),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (737,36)->(737,38)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (737,42)->(737,43)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (737,46)->(737,47)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, ")", (737,47)->(737,48)),
                    },
                    ret: Some(
                        Type {
                            colon: Token(SpacedColon, ": ", (737,48)->(737,50)),
                            inner: Void,
                        },
                    ),
                    def_eol: Token(EndOfLine, "\n", (737,54)->(737,54)),
                    body: Body {
                        commands: [
                            Decl(
                                DeclCommand {
                                    var: Token(Identifier, "var", (738,2)->(738,5)),
                                    name: Raw(idx),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (738,9)->(738,11)),
                                            inner: Number,
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (738,17)->(738,17)),
                                },
                            ),
                            Decl(
                                DeclCommand {
                                    var: Token(Identifier, "var", (739,2)->(739,5)),
                                    name: Raw(len),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (739,9)->(739,11)),
                                            inner: Number,
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (739,17)->(739,17)),
                                },
                            ),
                            Decl(
                                DeclCommand {
                                    var: Token(Identifier, "var", (740,2)->(740,5)),
                                    name: Raw(content),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (740,13)->(740,15)),
                                            inner: String,
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (740,21)->(740,21)),
                                },
                            ),
                            Decl(
                                DeclCommand {
                                    var: Token(Identifier, "var", (741,2)->(741,5)),
                                    name: Raw(msg),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (741,9)->(741,11)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (741,15)->(741,16)),
                                                inner: Any,
                                                close: Token(GreaterThan, ">", (741,19)->(741,20)),
                                            },
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (741,20)->(741,20)),
                                },
                            ),
                            Decl(
                                DeclCommand {
                                    var: Token(Identifier, "var", (742,2)->(742,5)),
                                    name: Raw(req),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (742,9)->(742,11)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (742,15)->(742,16)),
                                                inner: Any,
                                                close: Token(GreaterThan, ">", (742,19)->(742,20)),
                                            },
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (742,20)->(742,20)),
                                },
                            ),
                            NoOp(
                                Token(EndOfLine, "\n", (743,0)->(743,0)),
                            ),
                            Statement(
                                Assign(
                                    AssignStatement {
                                        left: Identifier(
                                            Raw(msg),
                                        ),
                                        equals: Token(Equal, "=", (744,6)->(744,7)),
                                        right: DictAccess(
                                            DictAccess {
                                                container: Identifier(
                                                    Raw(lspserver),
                                                ),
                                                dot: Token(Dot, ".", (744,17)->(744,18)),
                                                index: RawIdentifier {
                                                    name: "data",
                                                },
                                            },
                                        ),
                                        eol: Token(EndOfLine, "\n", (744,22)->(744,22)),
                                    },
                                ),
                            ),
                            If(
                                IfCommand {
                                    if_tok: Token(Identifier, "if", (745,2)->(745,4)),
                                    condition: Infix(
                                        InfixExpression {
                                            token: Token(Or, "||", (745,28)->(745,30)),
                                            operator: Or,
                                            left: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(msg),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (745,8)->(745,10)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "result",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            right: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(msg),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (745,34)->(745,36)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "error",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    if_eol: Token(EndOfLine, "\n", (745,52)->(745,52)),
                                    body: Body {
                                        commands: [
                                            Comment(
                                                Token(Comment, "# response message from the server", (746,4)->(746,38)),
                                            ),
                                            Statement(
                                                Assign(
                                                    AssignStatement {
                                                        left: Identifier(
                                                            Raw(req),
                                                        ),
                                                        equals: Token(Equal, "=", (747,8)->(747,9)),
                                                        right: MethodCall(
                                                            MethodCall {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(lspserver),
                                                                        ),
                                                                        dot: Token(Dot, ".", (747,19)->(747,20)),
                                                                        index: RawIdentifier {
                                                                            name: "requests",
                                                                        },
                                                                    },
                                                                ),
                                                                tok: Token(MethodArrow, "->", (747,28)->(747,30)),
                                                                right: f: Identifier(Raw(get)) arg: [
                                                                    MethodCall(
                                                                        MethodCall {
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(msg),
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (747,37)->(747,38)),
                                                                                    index: RawIdentifier {
                                                                                        name: "id",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            tok: Token(MethodArrow, "->", (747,40)->(747,42)),
                                                                            right: f: Identifier(Raw(string)) arg: [],
                                                                        },
                                                                    ),
                                                                    Dict(
                                                                        DictLiteral {
                                                                            open: Token(LeftBrace, "{", (747,52)->(747,53)),
                                                                            elements: [],
                                                                            close: Token(RightBrace, "}", (747,53)->(747,54)),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        eol: Token(EndOfLine, "\n", (747,55)->(747,55)),
                                                    },
                                                ),
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, "if", (748,4)->(748,6)),
                                                    condition: MethodCall(
                                                        MethodCall {
                                                            left: Prefix(
                                                                PrefixExpression {
                                                                    token: Token(Bang, "!", (748,7)->(748,8)),
                                                                    operator: Bang,
                                                                    right: Identifier(
                                                                        Raw(req),
                                                                    ),
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (748,11)->(748,13)),
                                                            right: f: Identifier(Raw(empty)) arg: [],
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, "\n", (748,20)->(748,20)),
                                                    body: Body {
                                                        commands: [
                                                            Comment(
                                                                Token(Comment, "# Remove the corresponding stored request message", (749,6)->(749,55)),
                                                            ),
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: MethodCall(
                                                                        MethodCall {
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(lspserver),
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (750,15)->(750,16)),
                                                                                    index: RawIdentifier {
                                                                                        name: "requests",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            tok: Token(MethodArrow, "->", (750,24)->(750,26)),
                                                                            right: f: Identifier(Raw(remove)) arg: [
                                                                                MethodCall(
                                                                                    MethodCall {
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(msg),
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (750,36)->(750,37)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "id",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        tok: Token(MethodArrow, "->", (750,39)->(750,41)),
                                                                                        right: f: Identifier(Raw(string)) arg: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    eol: Token(EndOfLine, "\n", (750,50)->(750,50)),
                                                                },
                                                            ),
                                                            NoOp(
                                                                Token(EndOfLine, "\n", (751,0)->(751,0)),
                                                            ),
                                                            If(
                                                                IfCommand {
                                                                    if_tok: Token(Identifier, "if", (752,6)->(752,8)),
                                                                    condition: MethodCall(
                                                                        MethodCall {
                                                                            left: Identifier(
                                                                                Raw(msg),
                                                                            ),
                                                                            tok: Token(MethodArrow, "->", (752,12)->(752,14)),
                                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                                String(
                                                                                    SingleQuote(
                                                                                        "result",
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    if_eol: Token(EndOfLine, "\n", (752,31)->(752,31)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Call(
                                                                                CallCommand {
                                                                                    call: None,
                                                                                    expr: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(lspserver),
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (753,10)->(753,11)),
                                                                                            index: RawIdentifier {
                                                                                                name: "processReply",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    open: Token(LeftParen, "(", (753,23)->(753,24)),
                                                                                    args: [
                                                                                        Identifier(
                                                                                            Raw(req),
                                                                                        ),
                                                                                        Identifier(
                                                                                            Raw(msg),
                                                                                        ),
                                                                                    ],
                                                                                    close: Token(RightParen, ")", (753,32)->(753,33)),
                                                                                    eol: Token(EndOfLine, "\n", (753,33)->(753,33)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    elseifs: [],
                                                                    else_command: Some(
                                                                        ElseCommand {
                                                                            else_tok: Token(Identifier, "else", (754,6)->(754,10)),
                                                                            else_eol: Token(EndOfLine, "\n", (754,10)->(754,10)),
                                                                            body: Body {
                                                                                commands: [
                                                                                    Comment(
                                                                                        Token(Comment, "# request failed", (755,1)->(755,17)),
                                                                                    ),
                                                                                    Var(
                                                                                        VarCommand {
                                                                                            var: Token(Identifier, "var", (756,1)->(756,4)),
                                                                                            ty: Some(
                                                                                                Type {
                                                                                                    colon: Token(SpacedColon, ": ", (756,9)->(756,11)),
                                                                                                    inner: String,
                                                                                                },
                                                                                            ),
                                                                                            name: Raw(emsg),
                                                                                            equal: Token(Equal, "=", (756,18)->(756,19)),
                                                                                            expr: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: DictAccess(
                                                                                                        DictAccess {
                                                                                                            container: Identifier(
                                                                                                                Raw(msg),
                                                                                                            ),
                                                                                                            dot: Token(Dot, ".", (756,23)->(756,24)),
                                                                                                            index: RawIdentifier {
                                                                                                                name: "error",
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (756,29)->(756,30)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "message",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            eol: Token(EndOfLine, "\n", (756,37)->(756,37)),
                                                                                        },
                                                                                    ),
                                                                                    Statement(
                                                                                        Mutate(
                                                                                            MutationStatement {
                                                                                                left: Identifier(
                                                                                                    Raw(emsg),
                                                                                                ),
                                                                                                modifier: Token(StringConcatEquals, "..=", (757,6)->(757,9)),
                                                                                                right: Infix(
                                                                                                    InfixExpression {
                                                                                                        token: Token(StringConcat, "..", (757,22)->(757,24)),
                                                                                                        operator: StringConcat,
                                                                                                        left: String(
                                                                                                            SingleQuote(
                                                                                                                ", code = ",
                                                                                                            ),
                                                                                                        ),
                                                                                                        right: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(msg),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, ".", (757,28)->(757,29)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "error",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                dot: Token(Dot, ".", (757,34)->(757,35)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "code",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                eol: Token(EndOfLine, "\n", (757,39)->(757,39)),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    If(
                                                                                        IfCommand {
                                                                                            if_tok: Token(Identifier, "if", (758,1)->(758,3)),
                                                                                            condition: MethodCall(
                                                                                                MethodCall {
                                                                                                    left: DictAccess(
                                                                                                        DictAccess {
                                                                                                            container: Identifier(
                                                                                                                Raw(msg),
                                                                                                            ),
                                                                                                            dot: Token(Dot, ".", (758,7)->(758,8)),
                                                                                                            index: RawIdentifier {
                                                                                                                name: "error",
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                    tok: Token(MethodArrow, "->", (758,13)->(758,15)),
                                                                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                                                                        String(
                                                                                                            SingleQuote(
                                                                                                                "data",
                                                                                                            ),
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            if_eol: Token(EndOfLine, "\n", (758,30)->(758,30)),
                                                                                            body: Body {
                                                                                                commands: [
                                                                                                    Statement(
                                                                                                        Assign(
                                                                                                            AssignStatement {
                                                                                                                left: Identifier(
                                                                                                                    Raw(emsg),
                                                                                                                ),
                                                                                                                equals: Token(Equal, "=", (759,8)->(759,9)),
                                                                                                                right: Infix(
                                                                                                                    InfixExpression {
                                                                                                                        token: Token(StringConcat, "..", (759,30)->(759,32)),
                                                                                                                        operator: StringConcat,
                                                                                                                        left: Infix(
                                                                                                                            InfixExpression {
                                                                                                                                token: Token(StringConcat, "..", (759,15)->(759,17)),
                                                                                                                                operator: StringConcat,
                                                                                                                                left: Identifier(
                                                                                                                                    Raw(emsg),
                                                                                                                                ),
                                                                                                                                right: String(
                                                                                                                                    SingleQuote(
                                                                                                                                        ", data = ",
                                                                                                                                    ),
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                        right: MethodCall(
                                                                                                                            MethodCall {
                                                                                                                                left: DictAccess(
                                                                                                                                    DictAccess {
                                                                                                                                        container: DictAccess(
                                                                                                                                            DictAccess {
                                                                                                                                                container: Identifier(
                                                                                                                                                    Raw(msg),
                                                                                                                                                ),
                                                                                                                                                dot: Token(Dot, ".", (759,36)->(759,37)),
                                                                                                                                                index: RawIdentifier {
                                                                                                                                                    name: "error",
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                        dot: Token(Dot, ".", (759,42)->(759,43)),
                                                                                                                                        index: RawIdentifier {
                                                                                                                                            name: "data",
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                tok: Token(MethodArrow, "->", (759,47)->(759,49)),
                                                                                                                                right: f: Identifier(Raw(string)) arg: [],
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                                eol: Token(EndOfLine, "\n", (759,57)->(759,57)),
                                                                                                            },
                                                                                                        ),
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                            elseifs: [],
                                                                                            else_command: None,
                                                                                            endif_tok: Token(Identifier, "endif", (760,1)->(760,6)),
                                                                                            endif_eol: Token(EndOfLine, "\n", (760,6)->(760,6)),
                                                                                        },
                                                                                    ),
                                                                                    Call(
                                                                                        CallCommand {
                                                                                            call: None,
                                                                                            expr: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(util),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (761,5)->(761,6)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "ErrMsg",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            open: Token(LeftParen, "(", (761,12)->(761,13)),
                                                                                            args: [
                                                                                                String(
                                                                                                    Interpolated(
                                                                                                        "Error(LSP): request {req.method} failed ({emsg})",
                                                                                                    ),
                                                                                                ),
                                                                                            ],
                                                                                            close: Token(RightParen, ")", (761,64)->(761,65)),
                                                                                            eol: Token(EndOfLine, "\n", (761,65)->(761,65)),
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        },
                                                                    ),
                                                                    endif_tok: Token(Identifier, "endif", (762,6)->(762,11)),
                                                                    endif_eol: Token(EndOfLine, "\n", (762,11)->(762,11)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, "endif", (763,4)->(763,9)),
                                                    endif_eol: Token(EndOfLine, "\n", (763,9)->(763,9)),
                                                },
                                            ),
                                        ],
                                    },
                                    elseifs: [
                                        ElseIfCommand {
                                            elseif_tok: Token(Identifier, "elseif", (764,2)->(764,8)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (764,28)->(764,30)),
                                                    operator: And,
                                                    left: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(msg),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (764,12)->(764,14)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "id",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    right: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(msg),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (764,34)->(764,36)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "method",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            elseif_eol: Token(EndOfLine, "\n", (764,53)->(764,53)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# request message from the server", (765,4)->(765,37)),
                                                    ),
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(lspserver),
                                                                    ),
                                                                    dot: Token(Dot, ".", (766,13)->(766,14)),
                                                                    index: RawIdentifier {
                                                                        name: "processRequest",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (766,28)->(766,29)),
                                                            args: [
                                                                Identifier(
                                                                    Raw(msg),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (766,32)->(766,33)),
                                                            eol: Token(EndOfLine, "\n", (766,33)->(766,33)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                        ElseIfCommand {
                                            elseif_tok: Token(Identifier, "elseif", (767,2)->(767,8)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(msg),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (767,12)->(767,14)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "method",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            elseif_eol: Token(EndOfLine, "\n", (767,31)->(767,31)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# notification message from the server", (768,4)->(768,42)),
                                                    ),
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(lspserver),
                                                                    ),
                                                                    dot: Token(Dot, ".", (769,13)->(769,14)),
                                                                    index: RawIdentifier {
                                                                        name: "processNotif",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (769,26)->(769,27)),
                                                            args: [
                                                                Identifier(
                                                                    Raw(msg),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (769,30)->(769,31)),
                                                            eol: Token(EndOfLine, "\n", (769,31)->(769,31)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                    ],
                                    else_command: Some(
                                        ElseCommand {
                                            else_tok: Token(Identifier, "else", (770,2)->(770,6)),
                                            else_eol: Token(EndOfLine, "\n", (770,6)->(770,6)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(util),
                                                                    ),
                                                                    dot: Token(Dot, ".", (771,8)->(771,9)),
                                                                    index: RawIdentifier {
                                                                        name: "ErrMsg",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (771,15)->(771,16)),
                                                            args: [
                                                                String(
                                                                    Interpolated(
                                                                        "Error(LSP): Unsupported message ({msg->string()})",
                                                                    ),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (771,68)->(771,69)),
                                                            eol: Token(EndOfLine, "\n", (771,69)->(771,69)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                    ),
                                    endif_tok: Token(Identifier, "endif", (772,2)->(772,7)),
                                    endif_eol: Token(EndOfLine, "\n", (772,7)->(772,7)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, "enddef", (773,0)->(773,6)),
                    end_eol: Token(EndOfLine, "\n", (773,6)->(773,6)),
                },
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (774,0)->(774,0)),
    ),
    Comment(
        Token(Comment, "# vim: shiftwidth=2 softtabstop=2", (775,0)->(775,33)),
    ),
]
