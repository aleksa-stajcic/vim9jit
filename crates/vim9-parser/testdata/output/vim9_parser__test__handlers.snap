---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2028
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, "\n", (0,10)->(0,10)),
        },
    ),
    Comment(
        Token(Comment, "# Handlers for messages from the LSP server", (2,0)->(2,43)),
    ),
    Comment(
        Token(Comment, "# Refer to https://microsoft.github.io/language-server-protocol/specification", (3,0)->(3,77)),
    ),
    Comment(
        Token(Comment, "# for the Language Server Protocol (LSP) specificaiton.", (4,0)->(4,55)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (5,0)->(5,0)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (6,0)->(6,6)),
            autoload: false,
            file: "./lspoptions.vim",
            name: Some(
                Identifier(
                    Raw(opt),
                ),
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (6,32)->(6,32)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (7,0)->(7,6)),
            autoload: false,
            file: "./util.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (7,19)->(7,19)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (8,0)->(8,6)),
            autoload: false,
            file: "./diag.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (8,19)->(8,19)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (9,0)->(9,6)),
            autoload: false,
            file: "./outline.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (9,22)->(9,22)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (10,0)->(10,6)),
            autoload: false,
            file: "./textedit.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (10,23)->(10,23)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (11,0)->(11,6)),
            autoload: false,
            file: "./symbol.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (11,21)->(11,21)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (12,0)->(12,6)),
            autoload: false,
            file: "./codeaction.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (12,25)->(12,25)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (13,0)->(13,6)),
            autoload: false,
            file: "./callhierarchy.vim",
            name: Some(
                Identifier(
                    Raw(callhier),
                ),
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (13,40)->(13,40)),
    ),
    ImportCommand(
        ImportImplicit {
            import: Token(Identifier, "import", (14,0)->(14,6)),
            autoload: false,
            file: "./signature.vim",
            name: None,
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (14,24)->(14,24)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (15,0)->(15,0)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (16,0)->(16,0)),
    ),
    Comment(
        Token(Comment, "# process the 'initialize' method reply from the LSP server", (17,0)->(17,59)),
    ),
    Comment(
        Token(Comment, "# Result: InitializeResult", (18,0)->(18,26)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (19,0)->(19,3)),
            name: Raw(ProcessInitializeReply),
            args: Signature {
                open: Token(LeftParen, "(", (19,26)->(19,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (19,36)->(19,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (19,42)->(19,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (19,46)->(19,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (19,52)->(19,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (19,58)->(19,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (19,62)->(19,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (19,70)->(19,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (19,76)->(19,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (19,80)->(19,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (19,81)->(19,82)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (19,82)->(19,84)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (19,88)->(19,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (20,2)->(20,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (20,10)->(20,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (20,17)->(20,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (20,26)->(20,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (21,4)->(21,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (21,10)->(21,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (22,2)->(22,7)),
                            endif_eol: Token(EndOfLine, "\n", (22,7)->(22,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (23,0)->(23,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (24,2)->(24,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (24,10)->(24,12)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (24,16)->(24,17)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (24,20)->(24,21)),
                                    },
                                },
                            ),
                            name: Raw(caps),
                            equal: Token(Equal, "=", (24,22)->(24,23)),
                            expr: DictAccess(
                                DictAccess {
                                    container: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (24,29)->(24,30)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    dot: Token(Dot, ".", (24,36)->(24,37)),
                                    index: RawIdentifier {
                                        name: "capabilities",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (24,49)->(24,49)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(lspserver),
                                        ),
                                        dot: Token(Dot, ".", (25,11)->(25,12)),
                                        index: RawIdentifier {
                                            name: "caps",
                                        },
                                    },
                                ),
                                equals: Token(Equal, "=", (25,17)->(25,18)),
                                right: Identifier(
                                    Raw(caps),
                                ),
                                eol: Token(EndOfLine, "\n", (25,23)->(25,23)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (26,0)->(26,0)),
                    ),
                    Comment(
                        Token(Comment, "# TODO: Check all the buffers with filetype corresponding to this LSP server", (27,2)->(27,78)),
                    ),
                    Comment(
                        Token(Comment, "# and then setup the below mapping for those buffers.", (28,2)->(28,55)),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (29,0)->(29,0)),
                    ),
                    Comment(
                        Token(Comment, "# initialize signature help", (30,2)->(30,29)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(signature),
                                    ),
                                    dot: Token(Dot, ".", (31,11)->(31,12)),
                                    index: RawIdentifier {
                                        name: "SignatureInit",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (31,25)->(31,26)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                            ],
                            close: Token(RightParen, ")", (31,35)->(31,36)),
                            eol: Token(EndOfLine, "\n", (31,36)->(31,36)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (32,0)->(32,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (33,2)->(33,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (33,33)->(33,35)),
                                    operator: And,
                                    left: DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(opt),
                                                    ),
                                                    dot: Token(Dot, ".", (33,8)->(33,9)),
                                                    index: RawIdentifier {
                                                        name: "lspOptions",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (33,19)->(33,20)),
                                            index: RawIdentifier {
                                                name: "autoComplete",
                                            },
                                        },
                                    ),
                                    right: MethodCall(
                                        MethodCall {
                                            left: Identifier(
                                                Raw(caps),
                                            ),
                                            tok: Token(MethodArrow, "->", (33,40)->(33,42)),
                                            right: f: Identifier(Raw(has_key)) arg: [
                                                String(
                                                    SingleQuote(
                                                        "completionProvider",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (33,71)->(33,71)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (34,4)->(34,7)),
                                            ty: None,
                                            name: Raw(triggers),
                                            equal: Token(Equal, "=", (34,17)->(34,18)),
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(caps),
                                                            ),
                                                            dot: Token(Dot, ".", (34,23)->(34,24)),
                                                            index: RawIdentifier {
                                                                name: "completionProvider",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (34,42)->(34,43)),
                                                    index: RawIdentifier {
                                                        name: "triggerCharacters",
                                                    },
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (34,60)->(34,60)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        dot: Token(Dot, ".", (35,13)->(35,14)),
                                                        index: RawIdentifier {
                                                            name: "completionTriggerChars",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (35,37)->(35,38)),
                                                right: Identifier(
                                                    Raw(triggers),
                                                ),
                                                eol: Token(EndOfLine, "\n", (35,47)->(35,47)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (36,2)->(36,7)),
                            endif_eol: Token(EndOfLine, "\n", (36,7)->(36,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (37,0)->(37,0)),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (38,0)->(38,0)),
                    ),
                    Comment(
                        Token(Comment, "# send a \"initialized\" notification to server", (39,2)->(39,47)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(lspserver),
                                    ),
                                    dot: Token(Dot, ".", (40,11)->(40,12)),
                                    index: RawIdentifier {
                                        name: "sendInitializedNotif",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (40,32)->(40,33)),
                            args: [],
                            close: Token(RightParen, ")", (40,33)->(40,34)),
                            eol: Token(EndOfLine, "\n", (40,34)->(40,34)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(lspserver),
                                        ),
                                        dot: Token(Dot, ".", (41,11)->(41,12)),
                                        index: RawIdentifier {
                                            name: "ready",
                                        },
                                    },
                                ),
                                equals: Token(Equal, "=", (41,18)->(41,19)),
                                right: Boolean(
                                    VimBoolean {
                                        token: Token(True, "true", (41,20)->(41,24)),
                                        value: true,
                                    },
                                ),
                                eol: Token(EndOfLine, "\n", (41,24)->(41,24)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (42,0)->(42,0)),
                    ),
                    Comment(
                        Token(Comment, "# if the outline window is opened, then request the symbols for the current", (43,2)->(43,77)),
                    ),
                    Comment(
                        Token(Comment, "# buffer", (44,2)->(44,10)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (45,2)->(45,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(NotEqualTo, "!=", (45,29)->(45,31)),
                                    operator: NotEqualTo,
                                    left: Call(
                                        f: Identifier(Raw(bufwinid)) arg: [
                                            String(
                                                SingleQuote(
                                                    "LSP-Outline",
                                                ),
                                            ),
                                        ],
                                    ),
                                    right: Prefix(
                                        PrefixExpression {
                                            token: Token(Minus, "-", (45,32)->(45,33)),
                                            operator: Minus,
                                            right: Number(
                                                VimNumber {
                                                    value: "1",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (45,34)->(45,34)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(lspserver),
                                                    ),
                                                    dot: Token(Dot, ".", (46,13)->(46,14)),
                                                    index: RawIdentifier {
                                                        name: "getDocSymbols",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (46,27)->(46,28)),
                                            args: [
                                                Register(
                                                    Register {
                                                        register: "%",
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (46,30)->(46,31)),
                                            eol: Token(EndOfLine, "\n", (46,31)->(46,31)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (47,2)->(47,7)),
                            endif_eol: Token(EndOfLine, "\n", (47,7)->(47,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (48,0)->(48,6)),
            end_eol: Token(EndOfLine, "\n", (48,6)->(48,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (49,0)->(49,0)),
    ),
    Comment(
        Token(Comment, "# Process a 'shutdown' reply from the LSP server.", (50,0)->(50,49)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (51,0)->(51,3)),
            name: Raw(ProcessShutdownReply),
            args: Signature {
                open: Token(LeftParen, "(", (51,24)->(51,25)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (51,34)->(51,36)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (51,40)->(51,41)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (51,44)->(51,45)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (51,50)->(51,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (51,56)->(51,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (51,60)->(51,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (51,68)->(51,70)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (51,74)->(51,75)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (51,78)->(51,79)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (51,79)->(51,80)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (51,80)->(51,82)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (51,86)->(51,86)),
            body: Body {
                commands: [
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (52,2)->(52,8)),
                            expr: None,
                            eol: Token(EndOfLine, "\n", (52,8)->(52,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (53,0)->(53,6)),
            end_eol: Token(EndOfLine, "\n", (53,6)->(53,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (54,0)->(54,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/signatureHelp' reply from the LSP server", (55,0)->(55,68)),
    ),
    Comment(
        Token(Comment, "# Result: SignatureHelp | null", (56,0)->(56,30)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (57,0)->(57,3)),
            name: Raw(ProcessSignaturehelpReply),
            args: Signature {
                open: Token(LeftParen, "(", (57,29)->(57,30)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (57,39)->(57,41)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (57,45)->(57,46)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (57,49)->(57,50)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (57,55)->(57,57)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (57,61)->(57,62)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (57,65)->(57,66)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (57,73)->(57,75)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (57,79)->(57,80)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (57,83)->(57,84)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (57,84)->(57,85)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (57,85)->(57,87)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (57,91)->(57,91)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (58,2)->(58,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (58,10)->(58,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (58,17)->(58,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (58,26)->(58,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (59,4)->(59,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (59,10)->(59,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (60,2)->(60,7)),
                            endif_eol: Token(EndOfLine, "\n", (60,7)->(60,7)),
                        },
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(signature),
                                    ),
                                    dot: Token(Dot, ".", (61,11)->(61,12)),
                                    index: RawIdentifier {
                                        name: "SignatureDisplay",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (61,28)->(61,29)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (61,45)->(61,46)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (61,52)->(61,53)),
                            eol: Token(EndOfLine, "\n", (61,53)->(61,53)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (62,0)->(62,6)),
            end_eol: Token(EndOfLine, "\n", (62,6)->(62,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (63,0)->(63,0)),
    ),
    Comment(
        Token(Comment, "# Map LSP complete item kind to a character", (64,0)->(64,43)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (65,0)->(65,3)),
            name: Raw(LspCompleteItemKindChar),
            args: Signature {
                open: Token(LeftParen, "(", (65,27)->(65,28)),
                params: [
                    Parameter {
                        name: Raw(kind),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (65,32)->(65,34)),
                                inner: Number,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (65,40)->(65,41)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (65,41)->(65,43)),
                    inner: String,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (65,49)->(65,49)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (66,2)->(66,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (66,13)->(66,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (66,19)->(66,20)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (66,26)->(66,27)),
                                    },
                                },
                            ),
                            name: Raw(kindMap),
                            equal: Token(Equal, "=", (66,28)->(66,29)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (66,30)->(66,31)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "t",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "m",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "f",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "C",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "F",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "v",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "c",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "i",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "M",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "p",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "u",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "V",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "e",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "k",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "S",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "C",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "f",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "r",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "F",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "E",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "d",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "s",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "E",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "o",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "T",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (92,1)->(92,2)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (92,2)->(92,2)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (93,2)->(93,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(GreaterThan, ">", (93,10)->(93,11)),
                                    operator: GreaterThan,
                                    left: Identifier(
                                        Raw(kind),
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "25",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (93,14)->(93,14)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (94,4)->(94,10)),
                                            expr: Some(
                                                String(
                                                    SingleQuote(
                                                        "",
                                                    ),
                                                ),
                                            ),
                                            eol: Token(EndOfLine, "\n", (94,13)->(94,13)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (95,2)->(95,7)),
                            endif_eol: Token(EndOfLine, "\n", (95,7)->(95,7)),
                        },
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (96,2)->(96,8)),
                            expr: Some(
                                Index(
                                    IndexExpression {
                                        container: Identifier(
                                            Raw(kindMap),
                                        ),
                                        open: Token(LeftBracket, "[", (96,16)->(96,17)),
                                        index: Item(
                                            Identifier(
                                                Raw(kind),
                                            ),
                                        ),
                                        close: Token(RightBracket, "]", (96,21)->(96,22)),
                                    },
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (96,22)->(96,22)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (97,0)->(97,6)),
            end_eol: Token(EndOfLine, "\n", (97,6)->(97,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (98,0)->(98,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/completion' reply from the LSP server", (99,0)->(99,65)),
    ),
    Comment(
        Token(Comment, "# Result: CompletionItem[] | CompletionList | null", (100,0)->(100,50)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (101,0)->(101,3)),
            name: Raw(ProcessCompletionReply),
            args: Signature {
                open: Token(LeftParen, "(", (101,26)->(101,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (101,36)->(101,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (101,42)->(101,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (101,46)->(101,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (101,52)->(101,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (101,58)->(101,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (101,62)->(101,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (101,70)->(101,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (101,76)->(101,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (101,80)->(101,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (101,81)->(101,82)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (101,82)->(101,84)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (101,88)->(101,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (102,2)->(102,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (102,10)->(102,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (102,17)->(102,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (102,26)->(102,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (103,4)->(103,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (103,10)->(103,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (104,2)->(104,7)),
                            endif_eol: Token(EndOfLine, "\n", (104,7)->(104,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (105,0)->(105,0)),
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (106,2)->(106,5)),
                            name: Raw(items),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (106,11)->(106,13)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (106,17)->(106,18)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (106,22)->(106,23)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (106,26)->(106,27)),
                                        },
                                        close: Token(GreaterThan, ">", (106,27)->(106,28)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (106,28)->(106,28)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (107,2)->(107,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (107,26)->(107,28)),
                                    operator: EqualTo,
                                    left: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (107,10)->(107,11)),
                                                    index: RawIdentifier {
                                                        name: "result",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, "->", (107,17)->(107,19)),
                                            right: f: Identifier(Raw(type)) arg: [],
                                        },
                                    ),
                                    right: Identifier(
                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (107,30)->(107,31)), accessor: Raw(t_list) }),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (107,37)->(107,37)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(items),
                                                ),
                                                equals: Token(Equal, "=", (108,10)->(108,11)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(reply),
                                                        ),
                                                        dot: Token(Dot, ".", (108,17)->(108,18)),
                                                        index: RawIdentifier {
                                                            name: "result",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (108,24)->(108,24)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (109,2)->(109,6)),
                                    else_eol: Token(EndOfLine, "\n", (109,6)->(109,6)),
                                    body: Body {
                                        commands: [
                                            Statement(
                                                Assign(
                                                    AssignStatement {
                                                        left: Identifier(
                                                            Raw(items),
                                                        ),
                                                        equals: Token(Equal, "=", (110,10)->(110,11)),
                                                        right: DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(reply),
                                                                        ),
                                                                        dot: Token(Dot, ".", (110,17)->(110,18)),
                                                                        index: RawIdentifier {
                                                                            name: "result",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (110,24)->(110,25)),
                                                                index: RawIdentifier {
                                                                    name: "items",
                                                                },
                                                            },
                                                        ),
                                                        eol: Token(EndOfLine, "\n", (110,30)->(110,30)),
                                                    },
                                                ),
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (111,2)->(111,7)),
                            endif_eol: Token(EndOfLine, "\n", (111,7)->(111,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (112,0)->(112,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (113,2)->(113,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (113,19)->(113,21)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (113,25)->(113,26)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (113,30)->(113,31)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (113,34)->(113,35)),
                                        },
                                        close: Token(GreaterThan, ">", (113,35)->(113,36)),
                                    },
                                },
                            ),
                            name: Raw(completeItems),
                            equal: Token(Equal, "=", (113,37)->(113,38)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (113,39)->(113,40)),
                                    elements: [],
                                    close: Token(RightBracket, "]", (113,40)->(113,41)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (113,41)->(113,41)),
                        },
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (114,2)->(114,5)),
                            for_identifier: Raw(item),
                            in_: Token(Identifier, "in", (114,11)->(114,13)),
                            for_expr: Identifier(
                                Raw(items),
                            ),
                            eol: Token(EndOfLine, "\n", (114,19)->(114,19)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (115,4)->(115,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (115,9)->(115,11)),
                                                    inner: Dict {
                                                        open: Token(AngleLeft, "<", (115,15)->(115,16)),
                                                        inner: Any,
                                                        close: Token(GreaterThan, ">", (115,19)->(115,20)),
                                                    },
                                                },
                                            ),
                                            name: Raw(d),
                                            equal: Token(Equal, "=", (115,21)->(115,22)),
                                            expr: Dict(
                                                DictLiteral {
                                                    open: Token(LeftBrace, "{", (115,23)->(115,24)),
                                                    elements: [],
                                                    close: Token(RightBrace, "}", (115,24)->(115,25)),
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (115,25)->(115,25)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (116,4)->(116,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (116,33)->(116,35)),
                                                    operator: And,
                                                    left: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(item),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (116,11)->(116,13)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "textEdit",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    right: MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(item),
                                                                    ),
                                                                    dot: Token(Dot, ".", (116,40)->(116,41)),
                                                                    index: RawIdentifier {
                                                                        name: "textEdit",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (116,49)->(116,51)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "newText",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (116,69)->(116,69)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(d),
                                                                        ),
                                                                        dot: Token(Dot, ".", (117,7)->(117,8)),
                                                                        index: RawIdentifier {
                                                                            name: "word",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (117,13)->(117,14)),
                                                                right: DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (117,19)->(117,20)),
                                                                                index: RawIdentifier {
                                                                                    name: "textEdit",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (117,28)->(117,29)),
                                                                        index: RawIdentifier {
                                                                            name: "newText",
                                                                        },
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (117,36)->(117,36)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [
                                                ElseIfCommand {
                                                    elseif_tok: Token(Identifier, "elseif", (118,4)->(118,10)),
                                                    condition: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(item),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (118,15)->(118,17)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "insertText",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    elseif_eol: Token(EndOfLine, "\n", (118,38)->(118,38)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(d),
                                                                                ),
                                                                                dot: Token(Dot, ".", (119,7)->(119,8)),
                                                                                index: RawIdentifier {
                                                                                    name: "word",
                                                                                },
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, "=", (119,13)->(119,14)),
                                                                        right: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (119,19)->(119,20)),
                                                                                index: RawIdentifier {
                                                                                    name: "insertText",
                                                                                },
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (119,30)->(119,30)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (120,4)->(120,8)),
                                                    else_eol: Token(EndOfLine, "\n", (120,8)->(120,8)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(d),
                                                                                ),
                                                                                dot: Token(Dot, ".", (121,7)->(121,8)),
                                                                                index: RawIdentifier {
                                                                                    name: "word",
                                                                                },
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, "=", (121,13)->(121,14)),
                                                                        right: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (121,19)->(121,20)),
                                                                                index: RawIdentifier {
                                                                                    name: "label",
                                                                                },
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (121,25)->(121,25)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (122,4)->(122,9)),
                                            endif_eol: Token(EndOfLine, "\n", (122,9)->(122,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(d),
                                                        ),
                                                        dot: Token(Dot, ".", (123,5)->(123,6)),
                                                        index: RawIdentifier {
                                                            name: "abbr",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (123,11)->(123,12)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(item),
                                                        ),
                                                        dot: Token(Dot, ".", (123,17)->(123,18)),
                                                        index: RawIdentifier {
                                                            name: "label",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (123,23)->(123,23)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (124,4)->(124,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(item),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (124,11)->(124,13)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "kind",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (124,28)->(124,28)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# namespace CompletionItemKind", (125,6)->(125,36)),
                                                    ),
                                                    Comment(
                                                        Token(Comment, "# map LSP kind to complete-item-kind", (126,6)->(126,42)),
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(d),
                                                                        ),
                                                                        dot: Token(Dot, ".", (127,7)->(127,8)),
                                                                        index: RawIdentifier {
                                                                            name: "kind",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (127,13)->(127,14)),
                                                                right: Call(
                                                                    f: Identifier(Raw(LspCompleteItemKindChar)) arg: [
                                                                        DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, ".", (127,43)->(127,44)),
                                                                                index: RawIdentifier {
                                                                                    name: "kind",
                                                                                },
                                                                            },
                                                                        ),
                                                                    ],
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (127,49)->(127,49)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (128,4)->(128,9)),
                                            endif_eol: Token(EndOfLine, "\n", (128,9)->(128,9)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (129,4)->(129,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(item),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (129,11)->(129,13)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "detail",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (129,30)->(129,30)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(d),
                                                                        ),
                                                                        dot: Token(Dot, ".", (130,7)->(130,8)),
                                                                        index: RawIdentifier {
                                                                            name: "menu",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (130,13)->(130,14)),
                                                                right: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(item),
                                                                        ),
                                                                        dot: Token(Dot, ".", (130,19)->(130,20)),
                                                                        index: RawIdentifier {
                                                                            name: "detail",
                                                                        },
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (130,26)->(130,26)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (131,4)->(131,9)),
                                            endif_eol: Token(EndOfLine, "\n", (131,9)->(131,9)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (132,4)->(132,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(item),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (132,11)->(132,13)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "documentation",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (132,37)->(132,37)),
                                            body: Body {
                                                commands: [
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (133,6)->(133,8)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(And, "&&", (133,50)->(133,52)),
                                                                    operator: And,
                                                                    left: Infix(
                                                                        InfixExpression {
                                                                            token: Token(EqualTo, "==", (133,36)->(133,38)),
                                                                            operator: EqualTo,
                                                                            left: MethodCall(
                                                                                MethodCall {
                                                                                    left: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(item),
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (133,13)->(133,14)),
                                                                                            index: RawIdentifier {
                                                                                                name: "documentation",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    tok: Token(MethodArrow, "->", (133,27)->(133,29)),
                                                                                    right: f: Identifier(Raw(type)) arg: [],
                                                                                },
                                                                            ),
                                                                            right: Identifier(
                                                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (133,40)->(133,41)), accessor: Raw(t_string) }),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Infix(
                                                                        InfixExpression {
                                                                            token: Token(NotEqualTo, "!=", (133,72)->(133,74)),
                                                                            operator: NotEqualTo,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(item),
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (133,57)->(133,58)),
                                                                                    index: RawIdentifier {
                                                                                        name: "documentation",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (133,77)->(133,77)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(d),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (134,2)->(134,3)),
                                                                                        index: RawIdentifier {
                                                                                            name: "info",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                equals: Token(Equal, "=", (134,8)->(134,9)),
                                                                                right: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(item),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (134,14)->(134,15)),
                                                                                        index: RawIdentifier {
                                                                                            name: "documentation",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (134,28)->(134,28)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [
                                                                ElseIfCommand {
                                                                    elseif_tok: Token(Identifier, "elseif", (135,6)->(135,12)),
                                                                    condition: Infix(
                                                                        InfixExpression {
                                                                            token: Token(And, "&&", (136,3)->(136,5)),
                                                                            operator: And,
                                                                            left: Infix(
                                                                                InfixExpression {
                                                                                    token: Token(EqualTo, "==", (135,40)->(135,42)),
                                                                                    operator: EqualTo,
                                                                                    left: MethodCall(
                                                                                        MethodCall {
                                                                                            left: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(item),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (135,17)->(135,18)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "documentation",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            tok: Token(MethodArrow, "->", (135,31)->(135,33)),
                                                                                            right: f: Identifier(Raw(type)) arg: [],
                                                                                        },
                                                                                    ),
                                                                                    right: Identifier(
                                                                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (135,44)->(135,45)), accessor: Raw(t_dict) }),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            right: Infix(
                                                                                InfixExpression {
                                                                                    token: Token(EqualTo, "==", (136,39)->(136,41)),
                                                                                    operator: EqualTo,
                                                                                    left: MethodCall(
                                                                                        MethodCall {
                                                                                            left: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: DictAccess(
                                                                                                        DictAccess {
                                                                                                            container: Identifier(
                                                                                                                Raw(item),
                                                                                                            ),
                                                                                                            dot: Token(Dot, ".", (136,10)->(136,11)),
                                                                                                            index: RawIdentifier {
                                                                                                                name: "documentation",
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (136,24)->(136,25)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "value",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            tok: Token(MethodArrow, "->", (136,30)->(136,32)),
                                                                                            right: f: Identifier(Raw(type)) arg: [],
                                                                                        },
                                                                                    ),
                                                                                    right: Identifier(
                                                                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (136,43)->(136,44)), accessor: Raw(t_string) }),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    elseif_eol: Token(EndOfLine, "\n", (136,52)->(136,52)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Statement(
                                                                                Assign(
                                                                                    AssignStatement {
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(d),
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (137,2)->(137,3)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "info",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        equals: Token(Equal, "=", (137,8)->(137,9)),
                                                                                        right: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(item),
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (137,14)->(137,15)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "documentation",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (137,28)->(137,29)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "value",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        eol: Token(EndOfLine, "\n", (137,34)->(137,34)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, "endif", (138,6)->(138,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (138,11)->(138,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (139,4)->(139,9)),
                                            endif_eol: Token(EndOfLine, "\n", (139,9)->(139,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(d),
                                                        ),
                                                        dot: Token(Dot, ".", (140,5)->(140,6)),
                                                        index: RawIdentifier {
                                                            name: "user_data",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (140,16)->(140,17)),
                                                right: Identifier(
                                                    Raw(item),
                                                ),
                                                eol: Token(EndOfLine, "\n", (140,22)->(140,22)),
                                            },
                                        ),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(completeItems),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (141,17)->(141,19)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(d),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (141,25)->(141,25)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (142,2)->(142,8)),
                            endfor_eol: Token(EndOfLine, "\n", (142,8)->(142,8)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (143,0)->(143,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (144,2)->(144,4)),
                            condition: DictAccess(
                                DictAccess {
                                    container: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(opt),
                                            ),
                                            dot: Token(Dot, ".", (144,8)->(144,9)),
                                            index: RawIdentifier {
                                                name: "lspOptions",
                                            },
                                        },
                                    ),
                                    dot: Token(Dot, ".", (144,19)->(144,20)),
                                    index: RawIdentifier {
                                        name: "autoComplete",
                                    },
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (144,32)->(144,32)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (145,4)->(145,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(completeItems),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (145,20)->(145,22)),
                                                    right: f: Identifier(Raw(empty)) arg: [],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (145,29)->(145,29)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# no matches", (146,6)->(146,18)),
                                                    ),
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (147,6)->(147,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (147,12)->(147,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (148,4)->(148,9)),
                                            endif_eol: Token(EndOfLine, "\n", (148,9)->(148,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (149,0)->(149,0)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (150,4)->(150,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (150,38)->(150,40)),
                                                    operator: And,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(And, "&&", (150,21)->(150,23)),
                                                            operator: And,
                                                            left: Infix(
                                                                InfixExpression {
                                                                    token: Token(NotEqualTo, "!=", (150,14)->(150,16)),
                                                                    operator: NotEqualTo,
                                                                    left: Call(
                                                                        f: Identifier(Raw(mode)) arg: [],
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "i",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            right: Infix(
                                                                InfixExpression {
                                                                    token: Token(NotEqualTo, "!=", (150,31)->(150,33)),
                                                                    operator: NotEqualTo,
                                                                    left: Call(
                                                                        f: Identifier(Raw(mode)) arg: [],
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "R",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(NotEqualTo, "!=", (150,48)->(150,50)),
                                                            operator: NotEqualTo,
                                                            left: Call(
                                                                f: Identifier(Raw(mode)) arg: [],
                                                            ),
                                                            right: String(
                                                                SingleQuote(
                                                                    "Rv",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (150,55)->(150,55)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# If not in insert or replace mode, then don't start the completion", (151,6)->(151,73)),
                                                    ),
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (152,6)->(152,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (152,12)->(152,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (153,4)->(153,9)),
                                            endif_eol: Token(EndOfLine, "\n", (153,9)->(153,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (154,0)->(154,0)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (155,4)->(155,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (156,1)->(156,3)),
                                                    operator: And,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==", (155,28)->(155,30)),
                                                            operator: EqualTo,
                                                            left: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(completeItems),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (155,20)->(155,22)),
                                                                    right: f: Identifier(Raw(len)) arg: [],
                                                                },
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "1",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(NotEqualTo, "!=", (156,58)->(156,60)),
                                                            operator: NotEqualTo,
                                                            left: Call(
                                                                f: Identifier(Raw(matchstr)) arg: [
                                                                    Call(
                                                                        f: Identifier(Raw(getline)) arg: [
                                                                            String(
                                                                                SingleQuote(
                                                                                    ".",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    Infix(
                                                                        InfixExpression {
                                                                            token: Token(StringConcat, "..", (156,49)->(156,51)),
                                                                            operator: StringConcat,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: Index(
                                                                                        IndexExpression {
                                                                                            container: Identifier(
                                                                                                Raw(completeItems),
                                                                                            ),
                                                                                            open: Token(LeftBracket, "[", (156,40)->(156,41)),
                                                                                            index: Item(
                                                                                                Number(
                                                                                                    VimNumber {
                                                                                                        value: "0",
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                            close: Token(RightBracket, "]", (156,42)->(156,43)),
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (156,43)->(156,44)),
                                                                                    index: RawIdentifier {
                                                                                        name: "word",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "\\>",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            ),
                                                            right: String(
                                                                SingleQuote(
                                                                    "",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (156,63)->(156,63)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# only one complete match. No need to show the completion popup", (157,6)->(157,69)),
                                                    ),
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (158,6)->(158,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (158,12)->(158,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (159,4)->(159,9)),
                                            endif_eol: Token(EndOfLine, "\n", (159,9)->(159,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (160,0)->(160,0)),
                                    ),
                                    Comment(
                                        Token(Comment, "# Find the start column for the completion.  If any of the entries", (161,4)->(161,70)),
                                    ),
                                    Comment(
                                        Token(Comment, "# returned by the LSP server has a starting position, then use that.", (162,4)->(162,72)),
                                    ),
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (163,4)->(163,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (163,17)->(163,19)),
                                                    inner: Number,
                                                },
                                            ),
                                            name: Raw(start_col),
                                            equal: Token(Equal, "=", (163,26)->(163,27)),
                                            expr: Number(
                                                VimNumber {
                                                    value: "0",
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (163,29)->(163,29)),
                                        },
                                    ),
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, "for", (164,4)->(164,7)),
                                            for_identifier: Raw(item),
                                            in_: Token(Identifier, "in", (164,13)->(164,15)),
                                            for_expr: Identifier(
                                                Raw(items),
                                            ),
                                            eol: Token(EndOfLine, "\n", (164,21)->(164,21)),
                                            body: Body {
                                                commands: [
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (165,6)->(165,8)),
                                                            condition: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(item),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (165,13)->(165,15)),
                                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                                        String(
                                                                            SingleQuote(
                                                                                "textEdit",
                                                                            ),
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (165,34)->(165,34)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Identifier(
                                                                                    Raw(start_col),
                                                                                ),
                                                                                equals: Token(Equal, "=", (166,11)->(166,12)),
                                                                                right: Infix(
                                                                                    InfixExpression {
                                                                                        token: Token(Plus, "+", (166,49)->(166,50)),
                                                                                        operator: Plus,
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(item),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, ".", (166,17)->(166,18)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "textEdit",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                dot: Token(Dot, ".", (166,26)->(166,27)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "range",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (166,32)->(166,33)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "start",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (166,38)->(166,39)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "character",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        right: Number(
                                                                                            VimNumber {
                                                                                                value: "1",
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (166,52)->(166,52)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    Break(
                                                                        BreakCommand {
                                                                            br: Token(Identifier, "break", (167,1)->(167,6)),
                                                                            eol: Token(EndOfLine, "\n", (167,6)->(167,6)),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, "endif", (168,6)->(168,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (168,11)->(168,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, "endfor", (169,4)->(169,10)),
                                            endfor_eol: Token(EndOfLine, "\n", (169,10)->(169,10)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (170,0)->(170,0)),
                                    ),
                                    Comment(
                                        Token(Comment, "# LSP server didn't return a starting position for completion, search", (171,4)->(171,73)),
                                    ),
                                    Comment(
                                        Token(Comment, "# backwards from the current cursor position for a non-keyword character.", (172,4)->(172,77)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (173,4)->(173,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (173,17)->(173,19)),
                                                    operator: EqualTo,
                                                    left: Identifier(
                                                        Raw(start_col),
                                                    ),
                                                    right: Number(
                                                        VimNumber {
                                                            value: "0",
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (173,21)->(173,21)),
                                            body: Body {
                                                commands: [
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, "var", (174,6)->(174,9)),
                                                            ty: Some(
                                                                Type {
                                                                    colon: Token(SpacedColon, ": ", (174,14)->(174,16)),
                                                                    inner: String,
                                                                },
                                                            ),
                                                            name: Raw(line),
                                                            equal: Token(Equal, "=", (174,23)->(174,24)),
                                                            expr: Call(
                                                                f: Identifier(Raw(getline)) arg: [
                                                                    String(
                                                                        SingleQuote(
                                                                            ".",
                                                                        ),
                                                                    ),
                                                                ],
                                                            ),
                                                            eol: Token(EndOfLine, "\n", (174,37)->(174,37)),
                                                        },
                                                    ),
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, "var", (175,6)->(175,9)),
                                                            ty: None,
                                                            name: Raw(start),
                                                            equal: Token(Equal, "=", (175,16)->(175,17)),
                                                            expr: Infix(
                                                                InfixExpression {
                                                                    token: Token(Minus, "-", (175,27)->(175,28)),
                                                                    operator: Minus,
                                                                    left: Call(
                                                                        f: Identifier(Raw(col)) arg: [
                                                                            String(
                                                                                SingleQuote(
                                                                                    ".",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    right: Number(
                                                                        VimNumber {
                                                                            value: "1",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, "\n", (175,30)->(175,30)),
                                                        },
                                                    ),
                                                    While(
                                                        WhileCommand {
                                                            while_: Token(Identifier, "while", (176,6)->(176,11)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(And, "&&", (176,22)->(176,24)),
                                                                    operator: And,
                                                                    left: Infix(
                                                                        InfixExpression {
                                                                            token: Token(GreaterThan, ">", (176,18)->(176,19)),
                                                                            operator: GreaterThan,
                                                                            left: Identifier(
                                                                                Raw(start),
                                                                            ),
                                                                            right: Number(
                                                                                VimNumber {
                                                                                    value: "0",
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Infix(
                                                                        InfixExpression {
                                                                            token: Token(RegexpMatches, "=~", (176,41)->(176,43)),
                                                                            operator: RegexpMatches,
                                                                            left: Index(
                                                                                IndexExpression {
                                                                                    container: Identifier(
                                                                                        Raw(line),
                                                                                    ),
                                                                                    open: Token(LeftBracket, "[", (176,29)->(176,30)),
                                                                                    index: Item(
                                                                                        Infix(
                                                                                            InfixExpression {
                                                                                                token: Token(Minus, "-", (176,36)->(176,37)),
                                                                                                operator: Minus,
                                                                                                left: Identifier(
                                                                                                    Raw(start),
                                                                                                ),
                                                                                                right: Number(
                                                                                                    VimNumber {
                                                                                                        value: "1",
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    close: Token(RightBracket, "]", (176,39)->(176,40)),
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "\\k",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            while_eol: Token(EndOfLine, "\n", (176,48)->(176,48)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Mutate(
                                                                            MutationStatement {
                                                                                left: Identifier(
                                                                                    Raw(start),
                                                                                ),
                                                                                modifier: Token(MinusEquals, "-=", (177,7)->(177,9)),
                                                                                right: Number(
                                                                                    VimNumber {
                                                                                        value: "1",
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (177,11)->(177,11)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            endwhile_: Token(Identifier, "endwhile", (178,6)->(178,14)),
                                                            endwhile_eol: Token(EndOfLine, "\n", (178,14)->(178,14)),
                                                        },
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(start_col),
                                                                ),
                                                                equals: Token(Equal, "=", (179,16)->(179,17)),
                                                                right: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (179,24)->(179,25)),
                                                                        operator: Plus,
                                                                        left: Identifier(
                                                                            Raw(start),
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "1",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (179,27)->(179,27)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (180,4)->(180,9)),
                                            endif_eol: Token(EndOfLine, "\n", (180,9)->(180,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (181,0)->(181,0)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(complete),
                                            ),
                                            open: Token(LeftParen, "(", (182,12)->(182,13)),
                                            args: [
                                                Identifier(
                                                    Raw(start_col),
                                                ),
                                                Identifier(
                                                    Raw(completeItems),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (182,37)->(182,38)),
                                            eol: Token(EndOfLine, "\n", (182,38)->(182,38)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (183,2)->(183,6)),
                                    else_eol: Token(EndOfLine, "\n", (183,6)->(183,6)),
                                    body: Body {
                                        commands: [
                                            Statement(
                                                Assign(
                                                    AssignStatement {
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(lspserver),
                                                                ),
                                                                dot: Token(Dot, ".", (184,13)->(184,14)),
                                                                index: RawIdentifier {
                                                                    name: "completeItems",
                                                                },
                                                            },
                                                        ),
                                                        equals: Token(Equal, "=", (184,28)->(184,29)),
                                                        right: Identifier(
                                                            Raw(completeItems),
                                                        ),
                                                        eol: Token(EndOfLine, "\n", (184,43)->(184,43)),
                                                    },
                                                ),
                                            ),
                                            Statement(
                                                Assign(
                                                    AssignStatement {
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(lspserver),
                                                                ),
                                                                dot: Token(Dot, ".", (185,13)->(185,14)),
                                                                index: RawIdentifier {
                                                                    name: "completePending",
                                                                },
                                                            },
                                                        ),
                                                        equals: Token(Equal, "=", (185,30)->(185,31)),
                                                        right: Boolean(
                                                            VimBoolean {
                                                                token: Token(False, "false", (185,32)->(185,37)),
                                                                value: false,
                                                            },
                                                        ),
                                                        eol: Token(EndOfLine, "\n", (185,37)->(185,37)),
                                                    },
                                                ),
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (186,2)->(186,7)),
                            endif_eol: Token(EndOfLine, "\n", (186,7)->(186,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (187,0)->(187,6)),
            end_eol: Token(EndOfLine, "\n", (187,6)->(187,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (188,0)->(188,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/hover' reply from the LSP server", (189,0)->(189,60)),
    ),
    Comment(
        Token(Comment, "# Result: Hover | null", (190,0)->(190,22)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (191,0)->(191,3)),
            name: Raw(ProcessHoverReply),
            args: Signature {
                open: Token(LeftParen, "(", (191,21)->(191,22)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (191,31)->(191,33)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (191,37)->(191,38)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (191,41)->(191,42)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (191,47)->(191,49)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (191,53)->(191,54)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (191,57)->(191,58)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (191,65)->(191,67)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (191,71)->(191,72)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (191,75)->(191,76)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (191,76)->(191,77)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (191,77)->(191,79)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (191,83)->(191,83)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (192,2)->(192,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (192,10)->(192,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (192,17)->(192,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (192,26)->(192,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (193,4)->(193,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (193,10)->(193,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (194,2)->(194,7)),
                            endif_eol: Token(EndOfLine, "\n", (194,7)->(194,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (195,0)->(195,0)),
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (196,2)->(196,5)),
                            name: Raw(hoverText),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (196,15)->(196,17)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (196,21)->(196,22)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (196,28)->(196,29)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (196,29)->(196,29)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (197,2)->(197,5)),
                            name: Raw(hoverKind),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (197,15)->(197,17)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (197,23)->(197,23)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (198,0)->(198,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (199,2)->(199,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (199,35)->(199,37)),
                                    operator: EqualTo,
                                    left: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (199,10)->(199,11)),
                                                            index: RawIdentifier {
                                                                name: "result",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (199,17)->(199,18)),
                                                    index: RawIdentifier {
                                                        name: "contents",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, "->", (199,26)->(199,28)),
                                            right: f: Identifier(Raw(type)) arg: [],
                                        },
                                    ),
                                    right: Identifier(
                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (199,39)->(199,40)), accessor: Raw(t_dict) }),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (199,46)->(199,46)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (200,4)->(200,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (200,12)->(200,13)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (200,19)->(200,20)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (200,28)->(200,30)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "kind",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (200,45)->(200,45)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# MarkupContent", (201,6)->(201,21)),
                                                    ),
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (202,6)->(202,8)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==", (202,36)->(202,38)),
                                                                    operator: EqualTo,
                                                                    left: DictAccess(
                                                                        DictAccess {
                                                                            container: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(reply),
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (202,14)->(202,15)),
                                                                                            index: RawIdentifier {
                                                                                                name: "result",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (202,21)->(202,22)),
                                                                                    index: RawIdentifier {
                                                                                        name: "contents",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            dot: Token(Dot, ".", (202,30)->(202,31)),
                                                                            index: RawIdentifier {
                                                                                name: "kind",
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "plaintext",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (202,50)->(202,50)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Identifier(
                                                                                    Raw(hoverText),
                                                                                ),
                                                                                equals: Token(Equal, "=", (203,18)->(203,19)),
                                                                                right: MethodCall(
                                                                                    MethodCall {
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: Identifier(
                                                                                                                    Raw(reply),
                                                                                                                ),
                                                                                                                dot: Token(Dot, ".", (203,25)->(203,26)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "result",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (203,32)->(203,33)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "contents",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (203,41)->(203,42)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "value",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        tok: Token(MethodArrow, "->", (203,47)->(203,49)),
                                                                                        right: f: Identifier(Raw(split)) arg: [
                                                                                            String(
                                                                                                DoubleQuote(
                                                                                                    "\\n",
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (203,60)->(203,60)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Identifier(
                                                                                    Raw(hoverKind),
                                                                                ),
                                                                                equals: Token(Equal, "=", (204,18)->(204,19)),
                                                                                right: String(
                                                                                    SingleQuote(
                                                                                        "text",
                                                                                    ),
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (204,26)->(204,26)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [
                                                                ElseIfCommand {
                                                                    elseif_tok: Token(Identifier, "elseif", (205,6)->(205,12)),
                                                                    condition: Infix(
                                                                        InfixExpression {
                                                                            token: Token(EqualTo, "==", (205,40)->(205,42)),
                                                                            operator: EqualTo,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(reply),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (205,18)->(205,19)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "result",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (205,25)->(205,26)),
                                                                                            index: RawIdentifier {
                                                                                                name: "contents",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (205,34)->(205,35)),
                                                                                    index: RawIdentifier {
                                                                                        name: "kind",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: String(
                                                                                SingleQuote(
                                                                                    "markdown",
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    elseif_eol: Token(EndOfLine, "\n", (205,53)->(205,53)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Statement(
                                                                                Assign(
                                                                                    AssignStatement {
                                                                                        left: Identifier(
                                                                                            Raw(hoverText),
                                                                                        ),
                                                                                        equals: Token(Equal, "=", (206,18)->(206,19)),
                                                                                        right: MethodCall(
                                                                                            MethodCall {
                                                                                                left: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(reply),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, ".", (206,25)->(206,26)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "result",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                dot: Token(Dot, ".", (206,32)->(206,33)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "contents",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (206,41)->(206,42)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "value",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                tok: Token(MethodArrow, "->", (206,47)->(206,49)),
                                                                                                right: f: Identifier(Raw(split)) arg: [
                                                                                                    String(
                                                                                                        DoubleQuote(
                                                                                                            "\\n",
                                                                                                        ),
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        eol: Token(EndOfLine, "\n", (206,60)->(206,60)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            Statement(
                                                                                Assign(
                                                                                    AssignStatement {
                                                                                        left: Identifier(
                                                                                            Raw(hoverKind),
                                                                                        ),
                                                                                        equals: Token(Equal, "=", (207,18)->(207,19)),
                                                                                        right: String(
                                                                                            SingleQuote(
                                                                                                "markdown",
                                                                                            ),
                                                                                        ),
                                                                                        eol: Token(EndOfLine, "\n", (207,30)->(207,30)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                            else_command: Some(
                                                                ElseCommand {
                                                                    else_tok: Token(Identifier, "else", (208,6)->(208,10)),
                                                                    else_eol: Token(EndOfLine, "\n", (208,10)->(208,10)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Call(
                                                                                CallCommand {
                                                                                    call: None,
                                                                                    expr: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(util),
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (209,12)->(209,13)),
                                                                                            index: RawIdentifier {
                                                                                                name: "ErrMsg",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    open: Token(LeftParen, "(", (209,19)->(209,20)),
                                                                                    args: [
                                                                                        String(
                                                                                            Interpolated(
                                                                                                "Error: Unsupported hover contents type ({reply.result.contents.kind})",
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                    close: Token(RightParen, ")", (209,92)->(209,93)),
                                                                                    eol: Token(EndOfLine, "\n", (209,93)->(209,93)),
                                                                                },
                                                                            ),
                                                                            Return(
                                                                                ReturnCommand {
                                                                                    ret: Token(Identifier, "return", (210,8)->(210,14)),
                                                                                    expr: None,
                                                                                    eol: Token(EndOfLine, "\n", (210,14)->(210,14)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                            endif_tok: Token(Identifier, "endif", (211,6)->(211,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (211,11)->(211,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [
                                                ElseIfCommand {
                                                    elseif_tok: Token(Identifier, "elseif", (212,4)->(212,10)),
                                                    condition: MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (212,16)->(212,17)),
                                                                            index: RawIdentifier {
                                                                                name: "result",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (212,23)->(212,24)),
                                                                    index: RawIdentifier {
                                                                        name: "contents",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (212,32)->(212,34)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "value",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    elseif_eol: Token(EndOfLine, "\n", (212,50)->(212,50)),
                                                    body: Body {
                                                        commands: [
                                                            Comment(
                                                                Token(Comment, "# MarkedString", (213,6)->(213,20)),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(hoverText),
                                                                        ),
                                                                        equals: Token(Equal, "=", (214,16)->(214,17)),
                                                                        right: MethodCall(
                                                                            MethodCall {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(reply),
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (214,23)->(214,24)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "result",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (214,30)->(214,31)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "contents",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (214,39)->(214,40)),
                                                                                        index: RawIdentifier {
                                                                                            name: "value",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                tok: Token(MethodArrow, "->", (214,45)->(214,47)),
                                                                                right: f: Identifier(Raw(split)) arg: [
                                                                                    String(
                                                                                        DoubleQuote(
                                                                                            "\\n",
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (214,58)->(214,58)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (215,4)->(215,8)),
                                                    else_eol: Token(EndOfLine, "\n", (215,8)->(215,8)),
                                                    body: Body {
                                                        commands: [
                                                            Call(
                                                                CallCommand {
                                                                    call: None,
                                                                    expr: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(util),
                                                                            ),
                                                                            dot: Token(Dot, ".", (216,10)->(216,11)),
                                                                            index: RawIdentifier {
                                                                                name: "ErrMsg",
                                                                            },
                                                                        },
                                                                    ),
                                                                    open: Token(LeftParen, "(", (216,17)->(216,18)),
                                                                    args: [
                                                                        String(
                                                                            Interpolated(
                                                                                "Error: Unsupported hover contents ({reply.result.contents})",
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    close: Token(RightParen, ")", (216,80)->(216,81)),
                                                                    eol: Token(EndOfLine, "\n", (216,81)->(216,81)),
                                                                },
                                                            ),
                                                            Return(
                                                                ReturnCommand {
                                                                    ret: Token(Identifier, "return", (217,6)->(217,12)),
                                                                    expr: None,
                                                                    eol: Token(EndOfLine, "\n", (217,12)->(217,12)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (218,4)->(218,9)),
                                            endif_eol: Token(EndOfLine, "\n", (218,9)->(218,9)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [
                                ElseIfCommand {
                                    elseif_tok: Token(Identifier, "elseif", (219,2)->(219,8)),
                                    condition: Infix(
                                        InfixExpression {
                                            token: Token(EqualTo, "==", (219,39)->(219,41)),
                                            operator: EqualTo,
                                            left: MethodCall(
                                                MethodCall {
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (219,14)->(219,15)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (219,21)->(219,22)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (219,30)->(219,32)),
                                                    right: f: Identifier(Raw(type)) arg: [],
                                                },
                                            ),
                                            right: Identifier(
                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (219,43)->(219,44)), accessor: Raw(t_list) }),
                                            ),
                                        },
                                    ),
                                    elseif_eol: Token(EndOfLine, "\n", (219,50)->(219,50)),
                                    body: Body {
                                        commands: [
                                            Comment(
                                                Token(Comment, "# interface MarkedString[]", (220,4)->(220,30)),
                                            ),
                                            For(
                                                ForCommand {
                                                    for_: Token(Identifier, "for", (221,4)->(221,7)),
                                                    for_identifier: Raw(e),
                                                    in_: Token(Identifier, "in", (221,10)->(221,12)),
                                                    for_expr: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (221,18)->(221,19)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (221,25)->(221,26)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, "\n", (221,34)->(221,34)),
                                                    body: Body {
                                                        commands: [
                                                            If(
                                                                IfCommand {
                                                                    if_tok: Token(Identifier, "if", (222,6)->(222,8)),
                                                                    condition: Infix(
                                                                        InfixExpression {
                                                                            token: Token(EqualTo, "==", (222,19)->(222,21)),
                                                                            operator: EqualTo,
                                                                            left: MethodCall(
                                                                                MethodCall {
                                                                                    left: Identifier(
                                                                                        Raw(e),
                                                                                    ),
                                                                                    tok: Token(MethodArrow, "->", (222,10)->(222,12)),
                                                                                    right: f: Identifier(Raw(type)) arg: [],
                                                                                },
                                                                            ),
                                                                            right: Identifier(
                                                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (222,23)->(222,24)), accessor: Raw(t_string) }),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    if_eol: Token(EndOfLine, "\n", (222,32)->(222,32)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Eval(
                                                                                EvalCommand {
                                                                                    eval: None,
                                                                                    expr: MethodCall(
                                                                                        MethodCall {
                                                                                            left: Identifier(
                                                                                                Raw(hoverText),
                                                                                            ),
                                                                                            tok: Token(MethodArrow, "->", (223,17)->(223,19)),
                                                                                            right: f: Identifier(Raw(extend)) arg: [
                                                                                                MethodCall(
                                                                                                    MethodCall {
                                                                                                        left: Identifier(
                                                                                                            Raw(e),
                                                                                                        ),
                                                                                                        tok: Token(MethodArrow, "->", (223,27)->(223,29)),
                                                                                                        right: f: Identifier(Raw(split)) arg: [
                                                                                                            String(
                                                                                                                DoubleQuote(
                                                                                                                    "\\n",
                                                                                                                ),
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    eol: Token(EndOfLine, "\n", (223,41)->(223,41)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    elseifs: [],
                                                                    else_command: Some(
                                                                        ElseCommand {
                                                                            else_tok: Token(Identifier, "else", (224,6)->(224,10)),
                                                                            else_eol: Token(EndOfLine, "\n", (224,10)->(224,10)),
                                                                            body: Body {
                                                                                commands: [
                                                                                    Eval(
                                                                                        EvalCommand {
                                                                                            eval: None,
                                                                                            expr: MethodCall(
                                                                                                MethodCall {
                                                                                                    left: Identifier(
                                                                                                        Raw(hoverText),
                                                                                                    ),
                                                                                                    tok: Token(MethodArrow, "->", (225,17)->(225,19)),
                                                                                                    right: f: Identifier(Raw(extend)) arg: [
                                                                                                        MethodCall(
                                                                                                            MethodCall {
                                                                                                                left: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(e),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, ".", (225,27)->(225,28)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "value",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                tok: Token(MethodArrow, "->", (225,33)->(225,35)),
                                                                                                                right: f: Identifier(Raw(split)) arg: [
                                                                                                                    String(
                                                                                                                        DoubleQuote(
                                                                                                                            "\\n",
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            eol: Token(EndOfLine, "\n", (225,47)->(225,47)),
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        },
                                                                    ),
                                                                    endif_tok: Token(Identifier, "endif", (226,6)->(226,11)),
                                                                    endif_eol: Token(EndOfLine, "\n", (226,11)->(226,11)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    endfor_: Token(Identifier, "endfor", (227,4)->(227,10)),
                                                    endfor_eol: Token(EndOfLine, "\n", (227,10)->(227,10)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                                ElseIfCommand {
                                    elseif_tok: Token(Identifier, "elseif", (228,2)->(228,8)),
                                    condition: Infix(
                                        InfixExpression {
                                            token: Token(EqualTo, "==", (228,39)->(228,41)),
                                            operator: EqualTo,
                                            left: MethodCall(
                                                MethodCall {
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (228,14)->(228,15)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, ".", (228,21)->(228,22)),
                                                            index: RawIdentifier {
                                                                name: "contents",
                                                            },
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (228,30)->(228,32)),
                                                    right: f: Identifier(Raw(type)) arg: [],
                                                },
                                            ),
                                            right: Identifier(
                                                Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (228,43)->(228,44)), accessor: Raw(t_string) }),
                                            ),
                                        },
                                    ),
                                    elseif_eol: Token(EndOfLine, "\n", (228,52)->(228,52)),
                                    body: Body {
                                        commands: [
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, "if", (229,4)->(229,6)),
                                                    condition: MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (229,12)->(229,13)),
                                                                            index: RawIdentifier {
                                                                                name: "result",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (229,19)->(229,20)),
                                                                    index: RawIdentifier {
                                                                        name: "contents",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (229,28)->(229,30)),
                                                            right: f: Identifier(Raw(empty)) arg: [],
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, "\n", (229,37)->(229,37)),
                                                    body: Body {
                                                        commands: [
                                                            Return(
                                                                ReturnCommand {
                                                                    ret: Token(Identifier, "return", (230,6)->(230,12)),
                                                                    expr: None,
                                                                    eol: Token(EndOfLine, "\n", (230,12)->(230,12)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, "endif", (231,4)->(231,9)),
                                                    endif_eol: Token(EndOfLine, "\n", (231,9)->(231,9)),
                                                },
                                            ),
                                            Eval(
                                                EvalCommand {
                                                    eval: None,
                                                    expr: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(hoverText),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (232,13)->(232,15)),
                                                            right: f: Identifier(Raw(extend)) arg: [
                                                                MethodCall(
                                                                    MethodCall {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(reply),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (232,27)->(232,28)),
                                                                                        index: RawIdentifier {
                                                                                            name: "result",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                dot: Token(Dot, ".", (232,34)->(232,35)),
                                                                                index: RawIdentifier {
                                                                                    name: "contents",
                                                                                },
                                                                            },
                                                                        ),
                                                                        tok: Token(MethodArrow, "->", (232,43)->(232,45)),
                                                                        right: f: Identifier(Raw(split)) arg: [
                                                                            String(
                                                                                DoubleQuote(
                                                                                    "\\n",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, "\n", (232,57)->(232,57)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (233,2)->(233,6)),
                                    else_eol: Token(EndOfLine, "\n", (233,6)->(233,6)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(util),
                                                            ),
                                                            dot: Token(Dot, ".", (234,8)->(234,9)),
                                                            index: RawIdentifier {
                                                                name: "ErrMsg",
                                                            },
                                                        },
                                                    ),
                                                    open: Token(LeftParen, "(", (234,15)->(234,16)),
                                                    args: [
                                                        String(
                                                            Interpolated(
                                                                "Error: Unsupported hover contents ({reply.result.contents})",
                                                            ),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (234,78)->(234,79)),
                                                    eol: Token(EndOfLine, "\n", (234,79)->(234,79)),
                                                },
                                            ),
                                            Return(
                                                ReturnCommand {
                                                    ret: Token(Identifier, "return", (235,4)->(235,10)),
                                                    expr: None,
                                                    eol: Token(EndOfLine, "\n", (235,10)->(235,10)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (236,2)->(236,7)),
                            endif_eol: Token(EndOfLine, "\n", (236,7)->(236,7)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (237,2)->(237,4)),
                            condition: DictAccess(
                                DictAccess {
                                    container: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(opt),
                                            ),
                                            dot: Token(Dot, ".", (237,8)->(237,9)),
                                            index: RawIdentifier {
                                                name: "lspOptions",
                                            },
                                        },
                                    ),
                                    dot: Token(Dot, ".", (237,19)->(237,20)),
                                    index: RawIdentifier {
                                        name: "hoverInPreview",
                                    },
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (237,34)->(237,34)),
                            body: Body {
                                commands: [
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "            pedit HoverReply",
                                            eol: Token(EndOfLine, "\n", (238,28)->(238,28)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    wincmd P",
                                            eol: Token(EndOfLine, "\n", (239,12)->(239,12)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    setlocal buftype=nofile",
                                            eol: Token(EndOfLine, "\n", (240,27)->(240,27)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    setlocal bufhidden=delete",
                                            eol: Token(EndOfLine, "\n", (241,29)->(241,29)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    exe   setlocal ft={hoverKind}",
                                            eol: Token(EndOfLine, "\n", (242,34)->(242,34)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(deletebufline),
                                            ),
                                            open: Token(LeftParen, "(", (243,17)->(243,18)),
                                            args: [
                                                Call(
                                                    f: Identifier(Raw(bufnr)) arg: [],
                                                ),
                                                Number(
                                                    VimNumber {
                                                        value: "1",
                                                    },
                                                ),
                                                String(
                                                    SingleQuote(
                                                        "$",
                                                    ),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (243,33)->(243,34)),
                                            eol: Token(EndOfLine, "\n", (243,34)->(243,34)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(append),
                                            ),
                                            open: Token(LeftParen, "(", (244,10)->(244,11)),
                                            args: [
                                                Number(
                                                    VimNumber {
                                                        value: "0",
                                                    },
                                                ),
                                                Identifier(
                                                    Raw(hoverText),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (244,23)->(244,24)),
                                            eol: Token(EndOfLine, "\n", (244,24)->(244,24)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(cursor),
                                            ),
                                            open: Token(LeftParen, "(", (245,10)->(245,11)),
                                            args: [
                                                Number(
                                                    VimNumber {
                                                        value: "1",
                                                    },
                                                ),
                                                Number(
                                                    VimNumber {
                                                        value: "1",
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (245,15)->(245,16)),
                                            eol: Token(EndOfLine, "\n", (245,16)->(245,16)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    wincmd p",
                                            eol: Token(EndOfLine, "\n", (246,12)->(246,12)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (247,2)->(247,6)),
                                    else_eol: Token(EndOfLine, "\n", (247,6)->(247,6)),
                                    body: Body {
                                        commands: [
                                            Eval(
                                                EvalCommand {
                                                    eval: None,
                                                    expr: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(hoverText),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (248,13)->(248,15)),
                                                            right: f: Identifier(Raw(popup_atcursor)) arg: [
                                                                Dict(
                                                                    DictLiteral {
                                                                        open: Token(LeftBrace, "{", (248,30)->(248,31)),
                                                                        elements: [
                                                                            KeyValue {
                                                                                key: Literal(
                                                                                    Literal {
                                                                                        token: Token(Identifier, "moved", (248,31)->(248,36)),
                                                                                    },
                                                                                ),
                                                                                colon: Token(SpacedColon, ": ", (248,36)->(248,38)),
                                                                                value: String(
                                                                                    SingleQuote(
                                                                                        "word",
                                                                                    ),
                                                                                ),
                                                                                comma: None,
                                                                            },
                                                                        ],
                                                                        close: Token(RightBrace, "}", (248,44)->(248,45)),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, "\n", (248,46)->(248,46)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (249,2)->(249,7)),
                            endif_eol: Token(EndOfLine, "\n", (249,7)->(249,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (250,0)->(250,6)),
            end_eol: Token(EndOfLine, "\n", (250,6)->(250,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (251,0)->(251,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/references' reply from the LSP server", (252,0)->(252,65)),
    ),
    Comment(
        Token(Comment, "# Result: Location[] | null", (253,0)->(253,27)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (254,0)->(254,3)),
            name: Raw(ProcessReferencesReply),
            args: Signature {
                open: Token(LeftParen, "(", (254,26)->(254,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (254,36)->(254,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (254,42)->(254,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (254,46)->(254,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (254,52)->(254,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (254,58)->(254,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (254,62)->(254,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (254,70)->(254,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (254,76)->(254,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (254,80)->(254,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (254,81)->(254,82)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (254,82)->(254,84)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (254,88)->(254,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (255,2)->(255,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (255,10)->(255,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (255,17)->(255,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (255,26)->(255,26)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(util),
                                                    ),
                                                    dot: Token(Dot, ".", (256,8)->(256,9)),
                                                    index: RawIdentifier {
                                                        name: "WarnMsg",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (256,16)->(256,17)),
                                            args: [
                                                String(
                                                    SingleQuote(
                                                        "Error: No references found",
                                                    ),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (256,45)->(256,46)),
                                            eol: Token(EndOfLine, "\n", (256,46)->(256,46)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        dot: Token(Dot, ".", (257,13)->(257,14)),
                                                        index: RawIdentifier {
                                                            name: "peekSymbol",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, "=", (257,25)->(257,26)),
                                                right: Boolean(
                                                    VimBoolean {
                                                        token: Token(False, "false", (257,27)->(257,32)),
                                                        value: false,
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (257,32)->(257,32)),
                                            },
                                        ),
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (258,4)->(258,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (258,10)->(258,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (259,2)->(259,7)),
                            endif_eol: Token(EndOfLine, "\n", (259,7)->(259,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (260,0)->(260,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(symbol),
                                    ),
                                    dot: Token(Dot, ".", (261,8)->(261,9)),
                                    index: RawIdentifier {
                                        name: "ShowReferences",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (261,23)->(261,24)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (261,40)->(261,41)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (261,47)->(261,48)),
                            eol: Token(EndOfLine, "\n", (261,48)->(261,48)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (262,0)->(262,6)),
            end_eol: Token(EndOfLine, "\n", (262,6)->(262,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (263,0)->(263,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/documentHighlight' reply from the LSP server", (264,0)->(264,72)),
    ),
    Comment(
        Token(Comment, "# Result: DocumentHighlight[] | null", (265,0)->(265,36)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (266,0)->(266,3)),
            name: Raw(ProcessDocHighlightReply),
            args: Signature {
                open: Token(LeftParen, "(", (266,28)->(266,29)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (266,38)->(266,40)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (266,44)->(266,45)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (266,48)->(266,49)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (266,54)->(266,56)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (266,60)->(266,61)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (266,64)->(266,65)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (266,72)->(266,74)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (266,78)->(266,79)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (266,82)->(266,83)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (266,83)->(266,84)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (266,84)->(266,86)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (266,90)->(266,90)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (267,2)->(267,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (267,10)->(267,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (267,17)->(267,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (267,26)->(267,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (268,4)->(268,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (268,10)->(268,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (269,2)->(269,7)),
                            endif_eol: Token(EndOfLine, "\n", (269,7)->(269,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (270,0)->(270,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (271,2)->(271,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (271,11)->(271,13)),
                                    inner: String,
                                },
                            ),
                            name: Raw(fname),
                            equal: Token(Equal, "=", (271,20)->(271,21)),
                            expr: Call(
                                f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (271,26)->(271,27)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                    DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(req),
                                                            ),
                                                            dot: Token(Dot, ".", (271,43)->(271,44)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (271,50)->(271,51)),
                                                    index: RawIdentifier {
                                                        name: "textDocument",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (271,63)->(271,64)),
                                            index: RawIdentifier {
                                                name: "uri",
                                            },
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, "\n", (271,68)->(271,68)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (272,2)->(272,5)),
                            ty: None,
                            name: Raw(bnr),
                            equal: Token(Equal, "=", (272,10)->(272,11)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(fname),
                                    ),
                                    tok: Token(MethodArrow, "->", (272,17)->(272,19)),
                                    right: f: Identifier(Raw(bufnr)) arg: [],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (272,26)->(272,26)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (273,0)->(273,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (274,2)->(274,5)),
                            for_identifier: Raw(docHL),
                            in_: Token(Identifier, "in", (274,12)->(274,14)),
                            for_expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(reply),
                                    ),
                                    dot: Token(Dot, ".", (274,20)->(274,21)),
                                    index: RawIdentifier {
                                        name: "result",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (274,27)->(274,27)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (275,4)->(275,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (275,12)->(275,14)),
                                                    inner: Number,
                                                },
                                            ),
                                            name: Raw(kind),
                                            equal: Token(Equal, "=", (275,21)->(275,22)),
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(docHL),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (275,28)->(275,30)),
                                                    right: f: Identifier(Raw(get)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "kind",
                                                            ),
                                                        ),
                                                        Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (275,44)->(275,44)),
                                        },
                                    ),
                                    Decl(
                                        DeclCommand {
                                            var: Token(Identifier, "var", (276,4)->(276,7)),
                                            name: Raw(propName),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (276,16)->(276,18)),
                                                    inner: String,
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (276,24)->(276,24)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (277,4)->(277,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (277,12)->(277,14)),
                                                    operator: EqualTo,
                                                    left: Identifier(
                                                        Raw(kind),
                                                    ),
                                                    right: Number(
                                                        VimNumber {
                                                            value: "2",
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (277,16)->(277,16)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# Read-access", (278,6)->(278,19)),
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(propName),
                                                                ),
                                                                equals: Token(Equal, "=", (279,15)->(279,16)),
                                                                right: String(
                                                                    SingleQuote(
                                                                        "LspReadRef",
                                                                    ),
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (279,29)->(279,29)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [
                                                ElseIfCommand {
                                                    elseif_tok: Token(Identifier, "elseif", (280,4)->(280,10)),
                                                    condition: Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==", (280,16)->(280,18)),
                                                            operator: EqualTo,
                                                            left: Identifier(
                                                                Raw(kind),
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "3",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    elseif_eol: Token(EndOfLine, "\n", (280,20)->(280,20)),
                                                    body: Body {
                                                        commands: [
                                                            Comment(
                                                                Token(Comment, "# Write-access", (281,6)->(281,20)),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(propName),
                                                                        ),
                                                                        equals: Token(Equal, "=", (282,15)->(282,16)),
                                                                        right: String(
                                                                            SingleQuote(
                                                                                "LspWriteRef",
                                                                            ),
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (282,30)->(282,30)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (283,4)->(283,8)),
                                                    else_eol: Token(EndOfLine, "\n", (283,8)->(283,8)),
                                                    body: Body {
                                                        commands: [
                                                            Comment(
                                                                Token(Comment, "# textual reference", (284,6)->(284,25)),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(propName),
                                                                        ),
                                                                        equals: Token(Equal, "=", (285,15)->(285,16)),
                                                                        right: String(
                                                                            SingleQuote(
                                                                                "LspTextRef",
                                                                            ),
                                                                        ),
                                                                        eol: Token(EndOfLine, "\n", (285,29)->(285,29)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (286,4)->(286,9)),
                                            endif_eol: Token(EndOfLine, "\n", (286,9)->(286,9)),
                                        },
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(prop_add),
                                            ),
                                            open: Token(LeftParen, "(", (287,12)->(287,13)),
                                            args: [
                                                Infix(
                                                    InfixExpression {
                                                        token: Token(Plus, "+", (287,36)->(287,37)),
                                                        operator: Plus,
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(docHL),
                                                                                ),
                                                                                dot: Token(Dot, ".", (287,18)->(287,19)),
                                                                                index: RawIdentifier {
                                                                                    name: "range",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (287,24)->(287,25)),
                                                                        index: RawIdentifier {
                                                                            name: "start",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (287,30)->(287,31)),
                                                                index: RawIdentifier {
                                                                    name: "line",
                                                                },
                                                            },
                                                        ),
                                                        right: Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                Infix(
                                                    InfixExpression {
                                                        token: Token(Plus, "+", (288,50)->(288,51)),
                                                        operator: Plus,
                                                        left: Call(
                                                            f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (288,6)->(288,7)), index: RawIdentifier { name: "GetLineByteFromPos" } }) arg: [
                                                                Identifier(
                                                                    Raw(bnr),
                                                                ),
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(docHL),
                                                                                ),
                                                                                dot: Token(Dot, ".", (288,36)->(288,37)),
                                                                                index: RawIdentifier {
                                                                                    name: "range",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (288,42)->(288,43)),
                                                                        index: RawIdentifier {
                                                                            name: "start",
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        ),
                                                        right: Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (289,2)->(289,3)),
                                                        elements: [
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "end_lnum", (289,3)->(289,11)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (289,11)->(289,13)),
                                                                value: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (289,34)->(289,35)),
                                                                        operator: Plus,
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(docHL),
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (289,18)->(289,19)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "range",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (289,24)->(289,25)),
                                                                                        index: RawIdentifier {
                                                                                            name: "end",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                dot: Token(Dot, ".", (289,28)->(289,29)),
                                                                                index: RawIdentifier {
                                                                                    name: "line",
                                                                                },
                                                                            },
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "1",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (289,37)->(289,38)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "end_col", (290,4)->(290,11)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (290,11)->(290,13)),
                                                                value: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (290,59)->(290,60)),
                                                                        operator: Plus,
                                                                        left: Call(
                                                                            f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (290,17)->(290,18)), index: RawIdentifier { name: "GetLineByteFromPos" } }) arg: [
                                                                                Identifier(
                                                                                    Raw(bnr),
                                                                                ),
                                                                                DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(docHL),
                                                                                                ),
                                                                                                dot: Token(Dot, ".", (290,47)->(290,48)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "range",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (290,53)->(290,54)),
                                                                                        index: RawIdentifier {
                                                                                            name: "end",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "1",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (290,62)->(290,63)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "bufnr", (291,4)->(291,9)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (291,9)->(291,11)),
                                                                value: Identifier(
                                                                    Raw(bnr),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (291,14)->(291,15)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "type", (292,4)->(292,8)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (292,8)->(292,10)),
                                                                value: Identifier(
                                                                    Raw(propName),
                                                                ),
                                                                comma: None,
                                                            },
                                                        ],
                                                        close: Token(RightBrace, "}", (292,18)->(292,19)),
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (292,19)->(292,20)),
                                            eol: Token(EndOfLine, "\n", (292,20)->(292,20)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (293,2)->(293,8)),
                            endfor_eol: Token(EndOfLine, "\n", (293,8)->(293,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (294,0)->(294,6)),
            end_eol: Token(EndOfLine, "\n", (294,6)->(294,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (295,0)->(295,0)),
    ),
    Comment(
        Token(Comment, "# map the LSP symbol kind number to string", (296,0)->(296,42)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (297,0)->(297,3)),
            name: Raw(LspSymbolKindToName),
            args: Signature {
                open: Token(LeftParen, "(", (297,23)->(297,24)),
                params: [
                    Parameter {
                        name: Raw(symkind),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (297,31)->(297,33)),
                                inner: Number,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (297,39)->(297,40)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (297,40)->(297,42)),
                    inner: String,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (297,48)->(297,48)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (298,2)->(298,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (298,15)->(298,17)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (298,21)->(298,22)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (298,28)->(298,29)),
                                    },
                                },
                            ),
                            name: Raw(symbolMap),
                            equal: Token(Equal, "=", (298,30)->(298,31)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (298,32)->(298,33)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "File",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Module",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Namespace",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Package",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Class",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Method",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Property",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Field",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Constructor",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Enum",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Interface",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Function",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Variable",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Constant",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "String",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Number",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Boolean",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Array",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Object",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Key",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Null",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "EnumMember",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Struct",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Event",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Operator",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "TypeParameter",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (302,37)->(302,38)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (302,38)->(302,38)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (303,2)->(303,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(GreaterThan, ">", (303,13)->(303,14)),
                                    operator: GreaterThan,
                                    left: Identifier(
                                        Raw(symkind),
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "26",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (303,17)->(303,17)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (304,4)->(304,10)),
                                            expr: Some(
                                                String(
                                                    SingleQuote(
                                                        "",
                                                    ),
                                                ),
                                            ),
                                            eol: Token(EndOfLine, "\n", (304,13)->(304,13)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (305,2)->(305,7)),
                            endif_eol: Token(EndOfLine, "\n", (305,7)->(305,7)),
                        },
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (306,2)->(306,8)),
                            expr: Some(
                                Index(
                                    IndexExpression {
                                        container: Identifier(
                                            Raw(symbolMap),
                                        ),
                                        open: Token(LeftBracket, "[", (306,18)->(306,19)),
                                        index: Item(
                                            Identifier(
                                                Raw(symkind),
                                            ),
                                        ),
                                        close: Token(RightBracket, "]", (306,26)->(306,27)),
                                    },
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (306,27)->(306,27)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (307,0)->(307,6)),
            end_eol: Token(EndOfLine, "\n", (307,6)->(307,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (308,0)->(308,0)),
    ),
    Comment(
        Token(Comment, "# process SymbolInformation[]", (309,0)->(309,29)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (310,0)->(310,3)),
            name: Raw(ProcessSymbolInfoTable),
            args: Signature {
                open: Token(LeftParen, "(", (310,26)->(310,27)),
                params: [
                    Parameter {
                        name: Raw(symbolInfoTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (310,42)->(310,44)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (310,48)->(310,49)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (310,53)->(310,54)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (310,57)->(310,58)),
                                    },
                                    close: Token(AngleRight, ">", (310,58)->(310,59)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolTypeTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (311,19)->(311,21)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (311,25)->(311,26)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (311,30)->(311,31)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (311,35)->(311,36)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (311,39)->(311,40)),
                                        },
                                        close: Token(AngleRight, ">", (311,40)->(311,41)),
                                    },
                                    close: Token(AngleRight, ">", (311,41)->(311,42)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolLineTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (312,19)->(312,21)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (312,25)->(312,26)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (312,30)->(312,31)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (312,34)->(312,35)),
                                    },
                                    close: Token(AngleRight, ">", (312,35)->(312,36)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (312,36)->(312,37)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (312,37)->(312,37)),
            body: Body {
                commands: [
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (313,2)->(313,5)),
                            name: Raw(fname),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (313,11)->(313,13)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (313,19)->(313,19)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (314,2)->(314,5)),
                            name: Raw(symbolType),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (314,16)->(314,18)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (314,24)->(314,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (315,2)->(315,5)),
                            name: Raw(name),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (315,10)->(315,12)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (315,18)->(315,18)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (316,2)->(316,5)),
                            name: Raw(r),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (316,7)->(316,9)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (316,13)->(316,14)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (316,18)->(316,19)),
                                            inner: Number,
                                            close: Token(AngleRight, ">", (316,25)->(316,26)),
                                        },
                                        close: Token(GreaterThan, ">", (316,26)->(316,27)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (316,27)->(316,27)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (317,2)->(317,5)),
                            name: Raw(symInfo),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (317,13)->(317,15)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (317,19)->(317,20)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (317,23)->(317,24)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (317,24)->(317,24)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (318,0)->(318,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (319,2)->(319,5)),
                            for_identifier: Raw(symbol),
                            in_: Token(Identifier, "in", (319,13)->(319,15)),
                            for_expr: Identifier(
                                Raw(symbolInfoTable),
                            ),
                            eol: Token(EndOfLine, "\n", (319,31)->(319,31)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(fname),
                                                ),
                                                equals: Token(Equal, "=", (320,10)->(320,11)),
                                                right: Call(
                                                    f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (320,16)->(320,17)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (320,36)->(320,37)),
                                                                        index: RawIdentifier {
                                                                            name: "location",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (320,45)->(320,46)),
                                                                index: RawIdentifier {
                                                                    name: "uri",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (320,50)->(320,50)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symbolType),
                                                ),
                                                equals: Token(Equal, "=", (321,15)->(321,16)),
                                                right: Call(
                                                    f: Identifier(Raw(LspSymbolKindToName)) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (321,43)->(321,44)),
                                                                index: RawIdentifier {
                                                                    name: "kind",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (321,49)->(321,49)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(name),
                                                ),
                                                equals: Token(Equal, "=", (322,9)->(322,10)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (322,17)->(322,18)),
                                                        index: RawIdentifier {
                                                            name: "name",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (322,22)->(322,22)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (323,4)->(323,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbol),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (323,13)->(323,15)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "containerName",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (323,39)->(323,39)),
                                            body: Body {
                                                commands: [
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, "if", (324,6)->(324,8)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(NotEqualTo, "!=", (324,30)->(324,32)),
                                                                    operator: NotEqualTo,
                                                                    left: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(symbol),
                                                                            ),
                                                                            dot: Token(Dot, ".", (324,15)->(324,16)),
                                                                            index: RawIdentifier {
                                                                                name: "containerName",
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, "\n", (324,35)->(324,35)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Mutate(
                                                                            MutationStatement {
                                                                                left: Identifier(
                                                                                    Raw(name),
                                                                                ),
                                                                                modifier: Token(StringConcatEquals, "..=", (325,6)->(325,9)),
                                                                                right: String(
                                                                                    Interpolated(
                                                                                        " [{symbol.containerName}]",
                                                                                    ),
                                                                                ),
                                                                                eol: Token(EndOfLine, "\n", (325,38)->(325,38)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, "endif", (326,6)->(326,11)),
                                                            endif_eol: Token(EndOfLine, "\n", (326,11)->(326,11)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (327,4)->(327,9)),
                                            endif_eol: Token(EndOfLine, "\n", (327,9)->(327,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(r),
                                                ),
                                                equals: Token(Equal, "=", (328,6)->(328,7)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (328,14)->(328,15)),
                                                                index: RawIdentifier {
                                                                    name: "location",
                                                                },
                                                            },
                                                        ),
                                                        dot: Token(Dot, ".", (328,23)->(328,24)),
                                                        index: RawIdentifier {
                                                            name: "range",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (328,29)->(328,29)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (329,0)->(329,0)),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (330,4)->(330,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Prefix(
                                                        PrefixExpression {
                                                            token: Token(Bang, "!", (330,7)->(330,8)),
                                                            operator: Bang,
                                                            right: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (330,23)->(330,25)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        Identifier(
                                                            Raw(symbolType),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (330,44)->(330,44)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Index(
                                                                    IndexExpression {
                                                                        container: Identifier(
                                                                            Raw(symbolTypeTable),
                                                                        ),
                                                                        open: Token(LeftBracket, "[", (331,21)->(331,22)),
                                                                        index: Item(
                                                                            Identifier(
                                                                                Raw(symbolType),
                                                                            ),
                                                                        ),
                                                                        close: Token(RightBracket, "]", (331,32)->(331,33)),
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (331,34)->(331,35)),
                                                                right: Array(
                                                                    ArrayLiteral {
                                                                        open: Token(LeftBracket, "[", (331,36)->(331,37)),
                                                                        elements: [],
                                                                        close: Token(RightBracket, "]", (331,37)->(331,38)),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (331,38)->(331,38)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (332,4)->(332,9)),
                                            endif_eol: Token(EndOfLine, "\n", (332,9)->(332,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symInfo),
                                                ),
                                                equals: Token(Equal, "=", (333,12)->(333,13)),
                                                right: Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (333,14)->(333,15)),
                                                        elements: [
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "name", (333,15)->(333,19)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (333,19)->(333,21)),
                                                                value: Identifier(
                                                                    Raw(name),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (333,25)->(333,26)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "range", (333,27)->(333,32)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (333,32)->(333,34)),
                                                                value: Identifier(
                                                                    Raw(r),
                                                                ),
                                                                comma: None,
                                                            },
                                                        ],
                                                        close: Token(RightBrace, "}", (333,35)->(333,36)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (333,36)->(333,36)),
                                            },
                                        ),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                            open: Token(LeftBracket, "[", (334,19)->(334,20)),
                                                            index: Item(
                                                                Identifier(
                                                                    Raw(symbolType),
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (334,30)->(334,31)),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (334,31)->(334,33)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (334,45)->(334,45)),
                                        },
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbolLineTable),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (335,19)->(335,21)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (335,33)->(335,33)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (336,2)->(336,8)),
                            endfor_eol: Token(EndOfLine, "\n", (336,8)->(336,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (337,0)->(337,6)),
            end_eol: Token(EndOfLine, "\n", (337,6)->(337,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (338,0)->(338,0)),
    ),
    Comment(
        Token(Comment, "# process DocumentSymbol[]", (339,0)->(339,26)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (340,0)->(340,3)),
            name: Raw(ProcessDocSymbolTable),
            args: Signature {
                open: Token(LeftParen, "(", (340,25)->(340,26)),
                params: [
                    Parameter {
                        name: Raw(docSymbolTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (340,40)->(340,42)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (340,46)->(340,47)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (340,51)->(340,52)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (340,55)->(340,56)),
                                    },
                                    close: Token(AngleRight, ">", (340,56)->(340,57)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolTypeTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (341,19)->(341,21)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (341,25)->(341,26)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (341,30)->(341,31)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (341,35)->(341,36)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (341,39)->(341,40)),
                                        },
                                        close: Token(AngleRight, ">", (341,40)->(341,41)),
                                    },
                                    close: Token(AngleRight, ">", (341,41)->(341,42)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(symbolLineTable),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (342,19)->(342,21)),
                                inner: List {
                                    open: Token(AngleLeft, "<", (342,25)->(342,26)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (342,30)->(342,31)),
                                        inner: Any,
                                        close: Token(AngleRight, ">", (342,34)->(342,35)),
                                    },
                                    close: Token(AngleRight, ">", (342,35)->(342,36)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (342,36)->(342,37)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (342,37)->(342,37)),
            body: Body {
                commands: [
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (343,2)->(343,5)),
                            name: Raw(symbolType),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (343,16)->(343,18)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (343,24)->(343,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (344,2)->(344,5)),
                            name: Raw(name),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (344,10)->(344,12)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (344,18)->(344,18)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (345,2)->(345,5)),
                            name: Raw(r),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (345,7)->(345,9)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (345,13)->(345,14)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (345,18)->(345,19)),
                                            inner: Number,
                                            close: Token(AngleRight, ">", (345,25)->(345,26)),
                                        },
                                        close: Token(GreaterThan, ">", (345,26)->(345,27)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (345,27)->(345,27)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (346,2)->(346,5)),
                            name: Raw(symInfo),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (346,13)->(346,15)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (346,19)->(346,20)),
                                        inner: Any,
                                        close: Token(GreaterThan, ">", (346,23)->(346,24)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (346,24)->(346,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (347,2)->(347,5)),
                            name: Raw(symbolDetail),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (347,18)->(347,20)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (347,26)->(347,26)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (348,2)->(348,5)),
                            name: Raw(childSymbols),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (348,18)->(348,20)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (348,24)->(348,25)),
                                        inner: List {
                                            open: Token(AngleLeft, "<", (348,29)->(348,30)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (348,34)->(348,35)),
                                                inner: Any,
                                                close: Token(AngleRight, ">", (348,38)->(348,39)),
                                            },
                                            close: Token(AngleRight, ">", (348,39)->(348,40)),
                                        },
                                        close: Token(GreaterThan, ">", (348,40)->(348,41)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (348,41)->(348,41)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (349,0)->(349,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (350,2)->(350,5)),
                            for_identifier: Raw(symbol),
                            in_: Token(Identifier, "in", (350,13)->(350,15)),
                            for_expr: Identifier(
                                Raw(docSymbolTable),
                            ),
                            eol: Token(EndOfLine, "\n", (350,30)->(350,30)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(name),
                                                ),
                                                equals: Token(Equal, "=", (351,9)->(351,10)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (351,17)->(351,18)),
                                                        index: RawIdentifier {
                                                            name: "name",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (351,22)->(351,22)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symbolType),
                                                ),
                                                equals: Token(Equal, "=", (352,15)->(352,16)),
                                                right: Call(
                                                    f: Identifier(Raw(LspSymbolKindToName)) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (352,43)->(352,44)),
                                                                index: RawIdentifier {
                                                                    name: "kind",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (352,49)->(352,49)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(r),
                                                ),
                                                equals: Token(Equal, "=", (353,6)->(353,7)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (353,14)->(353,15)),
                                                        index: RawIdentifier {
                                                            name: "range",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (353,20)->(353,20)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (354,4)->(354,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbol),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (354,13)->(354,15)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "detail",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (354,32)->(354,32)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(symbolDetail),
                                                                ),
                                                                equals: Token(Equal, "=", (355,19)->(355,20)),
                                                                right: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (355,27)->(355,28)),
                                                                        index: RawIdentifier {
                                                                            name: "detail",
                                                                        },
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (355,34)->(355,34)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (356,4)->(356,9)),
                                            endif_eol: Token(EndOfLine, "\n", (356,9)->(356,9)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (357,4)->(357,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Prefix(
                                                        PrefixExpression {
                                                            token: Token(Bang, "!", (357,7)->(357,8)),
                                                            operator: Bang,
                                                            right: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (357,23)->(357,25)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        Identifier(
                                                            Raw(symbolType),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (357,44)->(357,44)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Index(
                                                                    IndexExpression {
                                                                        container: Identifier(
                                                                            Raw(symbolTypeTable),
                                                                        ),
                                                                        open: Token(LeftBracket, "[", (358,21)->(358,22)),
                                                                        index: Item(
                                                                            Identifier(
                                                                                Raw(symbolType),
                                                                            ),
                                                                        ),
                                                                        close: Token(RightBracket, "]", (358,32)->(358,33)),
                                                                    },
                                                                ),
                                                                equals: Token(Equal, "=", (358,34)->(358,35)),
                                                                right: Array(
                                                                    ArrayLiteral {
                                                                        open: Token(LeftBracket, "[", (358,36)->(358,37)),
                                                                        elements: [],
                                                                        close: Token(RightBracket, "]", (358,37)->(358,38)),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (358,38)->(358,38)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (359,4)->(359,9)),
                                            endif_eol: Token(EndOfLine, "\n", (359,9)->(359,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(childSymbols),
                                                ),
                                                equals: Token(Equal, "=", (360,17)->(360,18)),
                                                right: Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (360,19)->(360,20)),
                                                        elements: [],
                                                        close: Token(RightBrace, "}", (360,20)->(360,21)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (360,21)->(360,21)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (361,4)->(361,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbol),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (361,13)->(361,15)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "children",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (361,34)->(361,34)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: Identifier(
                                                                Raw(ProcessDocSymbolTable),
                                                            ),
                                                            open: Token(LeftParen, "(", (362,27)->(362,28)),
                                                            args: [
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (362,34)->(362,35)),
                                                                        index: RawIdentifier {
                                                                            name: "children",
                                                                        },
                                                                    },
                                                                ),
                                                                Identifier(
                                                                    Raw(childSymbols),
                                                                ),
                                                                Identifier(
                                                                    Raw(symbolLineTable),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (362,74)->(362,75)),
                                                            eol: Token(EndOfLine, "\n", (362,75)->(362,75)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (363,4)->(363,9)),
                                            endif_eol: Token(EndOfLine, "\n", (363,9)->(363,9)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symInfo),
                                                ),
                                                equals: Token(Equal, "=", (364,12)->(364,13)),
                                                right: Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, "{", (364,14)->(364,15)),
                                                        elements: [
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "name", (364,15)->(364,19)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (364,19)->(364,21)),
                                                                value: Identifier(
                                                                    Raw(name),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (364,25)->(364,26)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "range", (364,27)->(364,32)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (364,32)->(364,34)),
                                                                value: Identifier(
                                                                    Raw(r),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (364,35)->(364,36)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "detail", (364,37)->(364,43)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (364,43)->(364,45)),
                                                                value: Identifier(
                                                                    Raw(symbolDetail),
                                                                ),
                                                                comma: Some(
                                                                    Token(Comma, ",", (364,57)->(364,58)),
                                                                ),
                                                            },
                                                            KeyValue {
                                                                key: Literal(
                                                                    Literal {
                                                                        token: Token(Identifier, "children", (365,6)->(365,14)),
                                                                    },
                                                                ),
                                                                colon: Token(SpacedColon, ": ", (365,14)->(365,16)),
                                                                value: Identifier(
                                                                    Raw(childSymbols),
                                                                ),
                                                                comma: None,
                                                            },
                                                        ],
                                                        close: Token(RightBrace, "}", (365,28)->(365,29)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (365,29)->(365,29)),
                                            },
                                        ),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(symbolTypeTable),
                                                            ),
                                                            open: Token(LeftBracket, "[", (366,19)->(366,20)),
                                                            index: Item(
                                                                Identifier(
                                                                    Raw(symbolType),
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (366,30)->(366,31)),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (366,31)->(366,33)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (366,45)->(366,45)),
                                        },
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbolLineTable),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (367,19)->(367,21)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(symInfo),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (367,33)->(367,33)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (368,2)->(368,8)),
                            endfor_eol: Token(EndOfLine, "\n", (368,8)->(368,8)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (369,0)->(369,6)),
            end_eol: Token(EndOfLine, "\n", (369,6)->(369,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (370,0)->(370,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/documentSymbol' reply from the LSP server", (371,0)->(371,69)),
    ),
    Comment(
        Token(Comment, "# Open a symbols window and display the symbols as a tree", (372,0)->(372,57)),
    ),
    Comment(
        Token(Comment, "# Result: DocumentSymbol[] | SymbolInformation[] | null", (373,0)->(373,55)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (374,0)->(374,3)),
            name: Raw(ProcessDocSymbolReply),
            args: Signature {
                open: Token(LeftParen, "(", (374,25)->(374,26)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (374,35)->(374,37)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (374,41)->(374,42)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (374,45)->(374,46)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (374,51)->(374,53)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (374,57)->(374,58)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (374,61)->(374,62)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (374,69)->(374,71)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (374,75)->(374,76)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (374,79)->(374,80)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (374,80)->(374,81)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (374,81)->(374,83)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (374,87)->(374,87)),
            body: Body {
                commands: [
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (375,2)->(375,5)),
                            name: Raw(fname),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (375,11)->(375,13)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (375,19)->(375,19)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (376,2)->(376,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (376,21)->(376,23)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (376,27)->(376,28)),
                                        inner: List {
                                            open: Token(AngleLeft, "<", (376,32)->(376,33)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (376,37)->(376,38)),
                                                inner: Any,
                                                close: Token(AngleRight, ">", (376,41)->(376,42)),
                                            },
                                            close: Token(AngleRight, ">", (376,42)->(376,43)),
                                        },
                                        close: Token(GreaterThan, ">", (376,43)->(376,44)),
                                    },
                                },
                            ),
                            name: Raw(symbolTypeTable),
                            equal: Token(Equal, "=", (376,45)->(376,46)),
                            expr: Dict(
                                DictLiteral {
                                    open: Token(LeftBrace, "{", (376,47)->(376,48)),
                                    elements: [],
                                    close: Token(RightBrace, "}", (376,48)->(376,49)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (376,49)->(376,49)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (377,2)->(377,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (377,21)->(377,23)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (377,27)->(377,28)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (377,32)->(377,33)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (377,36)->(377,37)),
                                        },
                                        close: Token(GreaterThan, ">", (377,37)->(377,38)),
                                    },
                                },
                            ),
                            name: Raw(symbolLineTable),
                            equal: Token(Equal, "=", (377,39)->(377,40)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (377,41)->(377,42)),
                                    elements: [],
                                    close: Token(RightBracket, "]", (377,42)->(377,43)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (377,43)->(377,43)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (378,0)->(378,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (379,2)->(379,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(NotEqualTo, "!=", (379,33)->(379,35)),
                                    operator: NotEqualTo,
                                    left: DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(req),
                                                            ),
                                                            dot: Token(Dot, ".", (379,8)->(379,9)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (379,15)->(379,16)),
                                                    index: RawIdentifier {
                                                        name: "textDocument",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (379,28)->(379,29)),
                                            index: RawIdentifier {
                                                name: "uri",
                                            },
                                        },
                                    ),
                                    right: String(
                                        SingleQuote(
                                            "",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (379,38)->(379,38)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(fname),
                                                ),
                                                equals: Token(Equal, "=", (380,10)->(380,11)),
                                                right: Call(
                                                    f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (380,16)->(380,17)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(req),
                                                                                ),
                                                                                dot: Token(Dot, ".", (380,33)->(380,34)),
                                                                                index: RawIdentifier {
                                                                                    name: "params",
                                                                                },
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (380,40)->(380,41)),
                                                                        index: RawIdentifier {
                                                                            name: "textDocument",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (380,53)->(380,54)),
                                                                index: RawIdentifier {
                                                                    name: "uri",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (380,58)->(380,58)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (381,2)->(381,7)),
                            endif_eol: Token(EndOfLine, "\n", (381,7)->(381,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (382,0)->(382,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (383,2)->(383,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (383,10)->(383,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (383,17)->(383,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (383,26)->(383,26)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# No symbols defined for this file. Clear the outline window.", (384,4)->(384,65)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(outline),
                                                    ),
                                                    dot: Token(Dot, ".", (385,11)->(385,12)),
                                                    index: RawIdentifier {
                                                        name: "UpdateOutlineWindow",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (385,31)->(385,32)),
                                            args: [
                                                Identifier(
                                                    Raw(fname),
                                                ),
                                                Identifier(
                                                    Raw(symbolTypeTable),
                                                ),
                                                Identifier(
                                                    Raw(symbolLineTable),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (385,71)->(385,72)),
                                            eol: Token(EndOfLine, "\n", (385,72)->(385,72)),
                                        },
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (386,4)->(386,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (386,10)->(386,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (387,2)->(387,7)),
                            endif_eol: Token(EndOfLine, "\n", (387,7)->(387,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (388,0)->(388,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (389,2)->(389,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: Index(
                                        IndexExpression {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (389,10)->(389,11)),
                                                    index: RawIdentifier {
                                                        name: "result",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftBracket, "[", (389,17)->(389,18)),
                                            index: Item(
                                                Number(
                                                    VimNumber {
                                                        value: "0",
                                                    },
                                                ),
                                            ),
                                            close: Token(RightBracket, "]", (389,19)->(389,20)),
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (389,20)->(389,22)),
                                    right: f: Identifier(Raw(has_key)) arg: [
                                        String(
                                            SingleQuote(
                                                "location",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (389,41)->(389,41)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# SymbolInformation[]", (390,4)->(390,25)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(ProcessSymbolInfoTable),
                                            ),
                                            open: Token(LeftParen, "(", (391,26)->(391,27)),
                                            args: [
                                                DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(reply),
                                                        ),
                                                        dot: Token(Dot, ".", (391,32)->(391,33)),
                                                        index: RawIdentifier {
                                                            name: "result",
                                                        },
                                                    },
                                                ),
                                                Identifier(
                                                    Raw(symbolTypeTable),
                                                ),
                                                Identifier(
                                                    Raw(symbolLineTable),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (391,73)->(391,74)),
                                            eol: Token(EndOfLine, "\n", (391,74)->(391,74)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (392,2)->(392,6)),
                                    else_eol: Token(EndOfLine, "\n", (392,6)->(392,6)),
                                    body: Body {
                                        commands: [
                                            Comment(
                                                Token(Comment, "# DocumentSymbol[]", (393,4)->(393,22)),
                                            ),
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Identifier(
                                                        Raw(ProcessDocSymbolTable),
                                                    ),
                                                    open: Token(LeftParen, "(", (394,25)->(394,26)),
                                                    args: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(reply),
                                                                ),
                                                                dot: Token(Dot, ".", (394,31)->(394,32)),
                                                                index: RawIdentifier {
                                                                    name: "result",
                                                                },
                                                            },
                                                        ),
                                                        Identifier(
                                                            Raw(symbolTypeTable),
                                                        ),
                                                        Identifier(
                                                            Raw(symbolLineTable),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (394,72)->(394,73)),
                                                    eol: Token(EndOfLine, "\n", (394,73)->(394,73)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (395,2)->(395,7)),
                            endif_eol: Token(EndOfLine, "\n", (395,7)->(395,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (396,0)->(396,0)),
                    ),
                    Comment(
                        Token(Comment, "# sort the symbols by line number", (397,2)->(397,35)),
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(symbolLineTable),
                                    ),
                                    tok: Token(MethodArrow, "->", (398,17)->(398,19)),
                                    right: f: Identifier(Raw(sort)) arg: [
                                        Lambda(
                                            Lambda {
                                                args: Signature {
                                                    open: Token(LeftParen, "(", (398,24)->(398,25)),
                                                    params: [
                                                        Parameter {
                                                            name: Raw(a),
                                                            ty: None,
                                                            equal: None,
                                                            default_val: None,
                                                        },
                                                        Parameter {
                                                            name: Raw(b),
                                                            ty: None,
                                                            equal: None,
                                                            default_val: None,
                                                        },
                                                    ],
                                                    close: Token(RightParen, ")", (398,29)->(398,30)),
                                                },
                                                ret: None,
                                                arrow: Token(Arrow, "=>", (398,31)->(398,33)),
                                                body: Body {
                                                    commands: [
                                                        Return(
                                                            ReturnCommand {
                                                                ret: Token(Virtual, "", (0,0)->(0,0)),
                                                                expr: Some(
                                                                    Infix(
                                                                        InfixExpression {
                                                                            token: Token(Minus, "-", (398,53)->(398,54)),
                                                                            operator: Minus,
                                                                            left: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(a),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (398,35)->(398,36)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "range",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (398,41)->(398,42)),
                                                                                            index: RawIdentifier {
                                                                                                name: "start",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (398,47)->(398,48)),
                                                                                    index: RawIdentifier {
                                                                                        name: "line",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            right: DictAccess(
                                                                                DictAccess {
                                                                                    container: DictAccess(
                                                                                        DictAccess {
                                                                                            container: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(b),
                                                                                                    ),
                                                                                                    dot: Token(Dot, ".", (398,56)->(398,57)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "range",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                            dot: Token(Dot, ".", (398,62)->(398,63)),
                                                                                            index: RawIdentifier {
                                                                                                name: "start",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    dot: Token(Dot, ".", (398,68)->(398,69)),
                                                                                    index: RawIdentifier {
                                                                                        name: "line",
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                eol: Token(Virtual, "", (0,0)->(0,0)),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (398,74)->(398,74)),
                        },
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(outline),
                                    ),
                                    dot: Token(Dot, ".", (399,9)->(399,10)),
                                    index: RawIdentifier {
                                        name: "UpdateOutlineWindow",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (399,29)->(399,30)),
                            args: [
                                Identifier(
                                    Raw(fname),
                                ),
                                Identifier(
                                    Raw(symbolTypeTable),
                                ),
                                Identifier(
                                    Raw(symbolLineTable),
                                ),
                            ],
                            close: Token(RightParen, ")", (399,69)->(399,70)),
                            eol: Token(EndOfLine, "\n", (399,70)->(399,70)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (400,0)->(400,6)),
            end_eol: Token(EndOfLine, "\n", (400,6)->(400,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (401,0)->(401,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/codeAction' reply from the LSP server", (402,0)->(402,65)),
    ),
    Comment(
        Token(Comment, "# Result: (Command | CodeAction)[] | null", (403,0)->(403,41)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (404,0)->(404,3)),
            name: Raw(ProcessCodeActionReply),
            args: Signature {
                open: Token(LeftParen, "(", (404,26)->(404,27)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (404,36)->(404,38)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (404,42)->(404,43)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (404,46)->(404,47)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (404,52)->(404,54)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (404,58)->(404,59)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (404,62)->(404,63)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (404,70)->(404,72)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (404,76)->(404,77)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (404,80)->(404,81)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (404,81)->(404,82)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (404,82)->(404,82)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (405,2)->(405,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (405,10)->(405,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (405,17)->(405,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (405,26)->(405,26)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# no action can be performed", (406,4)->(406,32)),
                                    ),
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(util),
                                                    ),
                                                    dot: Token(Dot, ".", (407,8)->(407,9)),
                                                    index: RawIdentifier {
                                                        name: "WarnMsg",
                                                    },
                                                },
                                            ),
                                            open: Token(LeftParen, "(", (407,16)->(407,17)),
                                            args: [
                                                String(
                                                    SingleQuote(
                                                        "No code action is available",
                                                    ),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (407,46)->(407,47)),
                                            eol: Token(EndOfLine, "\n", (407,47)->(407,47)),
                                        },
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (408,4)->(408,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (408,10)->(408,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (409,2)->(409,7)),
                            endif_eol: Token(EndOfLine, "\n", (409,7)->(409,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (410,0)->(410,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(codeaction),
                                    ),
                                    dot: Token(Dot, ".", (411,12)->(411,13)),
                                    index: RawIdentifier {
                                        name: "ApplyCodeAction",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (411,28)->(411,29)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (411,45)->(411,46)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (411,52)->(411,53)),
                            eol: Token(EndOfLine, "\n", (411,53)->(411,53)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (412,0)->(412,6)),
            end_eol: Token(EndOfLine, "\n", (412,6)->(412,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (413,0)->(413,0)),
    ),
    Comment(
        Token(Comment, "# Reply: 'textDocument/foldingRange'", (414,0)->(414,36)),
    ),
    Comment(
        Token(Comment, "# Result: FoldingRange[] | null", (415,0)->(415,31)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (416,0)->(416,3)),
            name: Raw(ProcessFoldingRangeReply),
            args: Signature {
                open: Token(LeftParen, "(", (416,28)->(416,29)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (416,38)->(416,40)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (416,44)->(416,45)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (416,48)->(416,49)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (416,54)->(416,56)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (416,60)->(416,61)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (416,64)->(416,65)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (416,72)->(416,74)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (416,78)->(416,79)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (416,82)->(416,83)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (416,83)->(416,84)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (416,84)->(416,84)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (417,2)->(417,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (417,10)->(417,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (417,17)->(417,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (417,26)->(417,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (418,4)->(418,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (418,10)->(418,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (419,2)->(419,7)),
                            endif_eol: Token(EndOfLine, "\n", (419,7)->(419,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (420,0)->(420,0)),
                    ),
                    Comment(
                        Token(Comment, "# result: FoldingRange[]", (421,2)->(421,26)),
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (422,2)->(422,5)),
                            name: Raw(end_lnum),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (422,14)->(422,16)),
                                    inner: Number,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (422,22)->(422,22)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (423,2)->(423,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (423,15)->(423,17)),
                                    inner: Number,
                                },
                            ),
                            name: Raw(last_lnum),
                            equal: Token(Equal, "=", (423,24)->(423,25)),
                            expr: Call(
                                f: Identifier(Raw(line)) arg: [
                                    String(
                                        SingleQuote(
                                            "$",
                                        ),
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, "\n", (423,35)->(423,35)),
                        },
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (424,2)->(424,5)),
                            for_identifier: Raw(foldRange),
                            in_: Token(Identifier, "in", (424,16)->(424,18)),
                            for_expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(reply),
                                    ),
                                    dot: Token(Dot, ".", (424,24)->(424,25)),
                                    index: RawIdentifier {
                                        name: "result",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (424,31)->(424,31)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(end_lnum),
                                                ),
                                                equals: Token(Equal, "=", (425,13)->(425,14)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(Plus, "+", (425,33)->(425,34)),
                                                        operator: Plus,
                                                        left: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(foldRange),
                                                                ),
                                                                dot: Token(Dot, ".", (425,24)->(425,25)),
                                                                index: RawIdentifier {
                                                                    name: "endLine",
                                                                },
                                                            },
                                                        ),
                                                        right: Number(
                                                            VimNumber {
                                                                value: "1",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (425,36)->(425,36)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (426,4)->(426,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(LessThan, "<", (426,16)->(426,17)),
                                                    operator: LessThan,
                                                    left: Identifier(
                                                        Raw(end_lnum),
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(Plus, "+", (426,38)->(426,39)),
                                                            operator: Plus,
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(foldRange),
                                                                    ),
                                                                    dot: Token(Dot, ".", (426,27)->(426,28)),
                                                                    index: RawIdentifier {
                                                                        name: "startLine",
                                                                    },
                                                                },
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "2",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (426,41)->(426,41)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(end_lnum),
                                                                ),
                                                                equals: Token(Equal, "=", (427,15)->(427,16)),
                                                                right: Infix(
                                                                    InfixExpression {
                                                                        token: Token(Plus, "+", (427,37)->(427,38)),
                                                                        operator: Plus,
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(foldRange),
                                                                                ),
                                                                                dot: Token(Dot, ".", (427,26)->(427,27)),
                                                                                index: RawIdentifier {
                                                                                    name: "startLine",
                                                                                },
                                                                            },
                                                                        ),
                                                                        right: Number(
                                                                            VimNumber {
                                                                                value: "2",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (427,40)->(427,40)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (428,4)->(428,9)),
                                            endif_eol: Token(EndOfLine, "\n", (428,9)->(428,9)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    exe   :{foldRange.startLine + 2}, {end_lnum}fold",
                                            eol: Token(EndOfLine, "\n", (429,53)->(429,53)),
                                        },
                                    ),
                                    Comment(
                                        Token(Comment, "# Open all the folds, otherwise the subsequently created folds are not", (430,4)->(430,74)),
                                    ),
                                    Comment(
                                        Token(Comment, "# correct.", (431,4)->(431,14)),
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "             foldopen!",
                                            eol: Token(EndOfLine, "\n", (432,22)->(432,22)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (433,2)->(433,8)),
                            endfor_eol: Token(EndOfLine, "\n", (433,8)->(433,8)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (434,0)->(434,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (435,2)->(435,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (435,17)->(435,19)),
                                    operator: EqualTo,
                                    left: VimOption(
                                        VimOption {
                                            ampersand: Token(Ampersand, "&", (435,5)->(435,6)),
                                            option: Literal {
                                                token: Token(Identifier, "foldcolumn", (435,6)->(435,16)),
                                            },
                                        },
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "0",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (435,21)->(435,21)),
                            body: Body {
                                commands: [
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "     setlocal foldcolumn=2",
                                            eol: Token(EndOfLine, "\n", (436,26)->(436,26)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (437,2)->(437,7)),
                            endif_eol: Token(EndOfLine, "\n", (437,7)->(437,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (438,0)->(438,6)),
            end_eol: Token(EndOfLine, "\n", (438,6)->(438,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (439,0)->(439,0)),
    ),
    Comment(
        Token(Comment, "# process the 'workspace/executeCommand' reply from the LSP server", (440,0)->(440,66)),
    ),
    Comment(
        Token(Comment, "# Result: any | null", (441,0)->(441,20)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (442,0)->(442,3)),
            name: Raw(ProcessWorkspaceExecuteReply),
            args: Signature {
                open: Token(LeftParen, "(", (442,32)->(442,33)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (442,42)->(442,44)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (442,48)->(442,49)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (442,52)->(442,53)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (442,58)->(442,60)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (442,64)->(442,65)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (442,68)->(442,69)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (442,76)->(442,78)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (442,82)->(442,83)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (442,86)->(442,87)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (442,87)->(442,88)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (442,88)->(442,88)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (443,2)->(443,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (443,10)->(443,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (443,17)->(443,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (443,26)->(443,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (444,4)->(444,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (444,10)->(444,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (445,2)->(445,7)),
                            endif_eol: Token(EndOfLine, "\n", (445,7)->(445,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (446,0)->(446,0)),
                    ),
                    Comment(
                        Token(Comment, "# Nothing to do for the reply", (447,2)->(447,31)),
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (448,0)->(448,6)),
            end_eol: Token(EndOfLine, "\n", (448,6)->(448,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (449,0)->(449,0)),
    ),
    Comment(
        Token(Comment, "# Convert a file name <filename> (<dirname>) format.", (450,0)->(450,52)),
    ),
    Comment(
        Token(Comment, "# Make sure the popup does't occupy the entire screen by reducing the width.", (451,0)->(451,76)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (452,0)->(452,3)),
            name: Raw(MakeMenuName),
            args: Signature {
                open: Token(LeftParen, "(", (452,16)->(452,17)),
                params: [
                    Parameter {
                        name: Raw(popupWidth),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (452,27)->(452,29)),
                                inner: Number,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(fname),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (452,42)->(452,44)),
                                inner: String,
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (452,50)->(452,51)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (452,51)->(452,53)),
                    inner: String,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (452,59)->(452,59)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (453,2)->(453,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (453,14)->(453,16)),
                                    inner: String,
                                },
                            ),
                            name: Raw(filename),
                            equal: Token(Equal, "=", (453,23)->(453,24)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(fname),
                                    ),
                                    tok: Token(MethodArrow, "->", (453,30)->(453,32)),
                                    right: f: Identifier(Raw(fnamemodify)) arg: [
                                        String(
                                            SingleQuote(
                                                ":t",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (453,49)->(453,49)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (454,2)->(454,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (454,10)->(454,12)),
                                    inner: Number,
                                },
                            ),
                            name: Raw(flen),
                            equal: Token(Equal, "=", (454,19)->(454,20)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(filename),
                                    ),
                                    tok: Token(MethodArrow, "->", (454,29)->(454,31)),
                                    right: f: Identifier(Raw(len)) arg: [],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (454,36)->(454,36)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (455,2)->(455,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (455,13)->(455,15)),
                                    inner: String,
                                },
                            ),
                            name: Raw(dirname),
                            equal: Token(Equal, "=", (455,22)->(455,23)),
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(fname),
                                    ),
                                    tok: Token(MethodArrow, "->", (455,29)->(455,31)),
                                    right: f: Identifier(Raw(fnamemodify)) arg: [
                                        String(
                                            SingleQuote(
                                                ":h",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (455,48)->(455,48)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (456,0)->(456,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (457,2)->(457,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (457,31)->(457,33)),
                                    operator: And,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(GreaterThan, ">", (457,18)->(457,19)),
                                            operator: GreaterThan,
                                            left: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(fname),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (457,10)->(457,12)),
                                                    right: f: Identifier(Raw(len)) arg: [],
                                                },
                                            ),
                                            right: Identifier(
                                                Raw(popupWidth),
                                            ),
                                        },
                                    ),
                                    right: Infix(
                                        InfixExpression {
                                            token: Token(LessThan, "<", (457,39)->(457,40)),
                                            operator: LessThan,
                                            left: Identifier(
                                                Raw(flen),
                                            ),
                                            right: Identifier(
                                                Raw(popupWidth),
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (457,51)->(457,51)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# keep the full file name and reduce directory name length", (458,4)->(458,62)),
                                    ),
                                    Comment(
                                        Token(Comment, "# keep some characters at the beginning and end (equally).", (459,4)->(459,62)),
                                    ),
                                    Comment(
                                        Token(Comment, "# 6 spaces are used for \"...\" and \" ()\"", (460,4)->(460,43)),
                                    ),
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (461,4)->(461,7)),
                                            ty: None,
                                            name: Raw(dirsz),
                                            equal: Token(Equal, "=", (461,14)->(461,15)),
                                            expr: Infix(
                                                InfixExpression {
                                                    token: Token(Div, "/", (461,40)->(461,41)),
                                                    operator: Divide,
                                                    left: Grouped(
                                                        GroupedExpression {
                                                            open: Token(LeftParen, "(", (461,16)->(461,17)),
                                                            expr: Infix(
                                                                InfixExpression {
                                                                    token: Token(Minus, "-", (461,35)->(461,36)),
                                                                    operator: Minus,
                                                                    left: Infix(
                                                                        InfixExpression {
                                                                            token: Token(Minus, "-", (461,28)->(461,29)),
                                                                            operator: Minus,
                                                                            left: Identifier(
                                                                                Raw(popupWidth),
                                                                            ),
                                                                            right: Identifier(
                                                                                Raw(flen),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Number(
                                                                        VimNumber {
                                                                            value: "6",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            close: Token(RightParen, ")", (461,38)->(461,39)),
                                                        },
                                                    ),
                                                    right: Number(
                                                        VimNumber {
                                                            value: "2",
                                                        },
                                                    ),
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (461,43)->(461,43)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(dirname),
                                                ),
                                                equals: Token(Equal, "=", (462,12)->(462,13)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(StringConcat, "..", (462,40)->(462,42)),
                                                        operator: StringConcat,
                                                        left: Infix(
                                                            InfixExpression {
                                                                token: Token(StringConcat, "..", (462,31)->(462,33)),
                                                                operator: StringConcat,
                                                                left: Index(
                                                                    IndexExpression {
                                                                        container: Identifier(
                                                                            Raw(dirname),
                                                                        ),
                                                                        open: Token(LeftBracket, "[", (462,21)->(462,22)),
                                                                        index: Slice(
                                                                            VimSlice {
                                                                                start: None,
                                                                                colon: Token(SpacedColon, ": ", (462,22)->(462,24)),
                                                                                finish: Some(
                                                                                    Identifier(
                                                                                        Raw(dirsz),
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ),
                                                                        close: Token(RightBracket, "]", (462,29)->(462,30)),
                                                                    },
                                                                ),
                                                                right: String(
                                                                    SingleQuote(
                                                                        "...",
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                        right: Index(
                                                            IndexExpression {
                                                                container: Identifier(
                                                                    Raw(dirname),
                                                                ),
                                                                open: Token(LeftBracket, "[", (462,50)->(462,51)),
                                                                index: Slice(
                                                                    VimSlice {
                                                                        start: Some(
                                                                            Prefix(
                                                                                PrefixExpression {
                                                                                    token: Token(Minus, "-", (462,51)->(462,52)),
                                                                                    operator: Minus,
                                                                                    right: Identifier(
                                                                                        Raw(dirsz),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (462,58)->(462,60)),
                                                                        finish: None,
                                                                    },
                                                                ),
                                                                close: Token(RightBracket, "]", (462,60)->(462,61)),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (462,61)->(462,61)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (463,2)->(463,7)),
                            endif_eol: Token(EndOfLine, "\n", (463,7)->(463,7)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (464,2)->(464,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (464,9)->(464,11)),
                                    inner: String,
                                },
                            ),
                            name: Raw(str),
                            equal: Token(Equal, "=", (464,18)->(464,19)),
                            expr: Identifier(
                                Raw(filename),
                            ),
                            eol: Token(EndOfLine, "\n", (464,28)->(464,28)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (465,2)->(465,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(NotEqualTo, "!=", (465,13)->(465,15)),
                                    operator: NotEqualTo,
                                    left: Identifier(
                                        Raw(dirname),
                                    ),
                                    right: String(
                                        SingleQuote(
                                            ".",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (465,19)->(465,19)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(str),
                                                ),
                                                modifier: Token(StringConcatEquals, "..=", (466,8)->(466,11)),
                                                right: String(
                                                    Interpolated(
                                                        " ({dirname}/)",
                                                    ),
                                                ),
                                                eol: Token(EndOfLine, "\n", (466,28)->(466,28)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (467,2)->(467,7)),
                            endif_eol: Token(EndOfLine, "\n", (467,7)->(467,7)),
                        },
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, "return", (468,2)->(468,8)),
                            expr: Some(
                                Identifier(
                                    Raw(str),
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (468,12)->(468,12)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (469,0)->(469,6)),
            end_eol: Token(EndOfLine, "\n", (469,6)->(469,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (470,0)->(470,0)),
    ),
    Comment(
        Token(Comment, "# process the 'workspace/symbol' reply from the LSP server", (471,0)->(471,58)),
    ),
    Comment(
        Token(Comment, "# Result: SymbolInformation[] | null", (472,0)->(472,36)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (473,0)->(473,3)),
            name: Raw(ProcessWorkspaceSymbolReply),
            args: Signature {
                open: Token(LeftParen, "(", (473,31)->(473,32)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (473,41)->(473,43)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (473,47)->(473,48)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (473,51)->(473,52)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (473,57)->(473,59)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (473,63)->(473,64)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (473,67)->(473,68)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (473,75)->(473,77)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (473,81)->(473,82)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (473,85)->(473,86)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (473,86)->(473,87)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (473,87)->(473,87)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (474,2)->(474,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (474,13)->(474,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (474,19)->(474,20)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (474,24)->(474,25)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (474,28)->(474,29)),
                                        },
                                        close: Token(GreaterThan, ">", (474,29)->(474,30)),
                                    },
                                },
                            ),
                            name: Raw(symbols),
                            equal: Token(Equal, "=", (474,31)->(474,32)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (474,33)->(474,34)),
                                    elements: [],
                                    close: Token(RightBracket, "]", (474,34)->(474,35)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (474,35)->(474,35)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (475,2)->(475,5)),
                            name: Raw(symbolType),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (475,16)->(475,18)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (475,24)->(475,24)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (476,2)->(476,5)),
                            name: Raw(fileName),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (476,14)->(476,16)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (476,22)->(476,22)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (477,2)->(477,5)),
                            name: Raw(r),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (477,7)->(477,9)),
                                    inner: Dict {
                                        open: Token(AngleLeft, "<", (477,13)->(477,14)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (477,18)->(477,19)),
                                            inner: Number,
                                            close: Token(AngleRight, ">", (477,25)->(477,26)),
                                        },
                                        close: Token(GreaterThan, ">", (477,26)->(477,27)),
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (477,27)->(477,27)),
                        },
                    ),
                    Decl(
                        DeclCommand {
                            var: Token(Identifier, "var", (478,2)->(478,5)),
                            name: Raw(symName),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (478,13)->(478,15)),
                                    inner: String,
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (478,21)->(478,21)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (479,0)->(479,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (480,2)->(480,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (480,10)->(480,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (480,17)->(480,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (480,26)->(480,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (481,4)->(481,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (481,10)->(481,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (482,2)->(482,7)),
                            endif_eol: Token(EndOfLine, "\n", (482,7)->(482,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (483,0)->(483,0)),
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, "for", (484,2)->(484,5)),
                            for_identifier: Raw(symbol),
                            in_: Token(Identifier, "in", (484,13)->(484,15)),
                            for_expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(reply),
                                    ),
                                    dot: Token(Dot, ".", (484,21)->(484,22)),
                                    index: RawIdentifier {
                                        name: "result",
                                    },
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (484,28)->(484,28)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (485,4)->(485,6)),
                                            condition: MethodCall(
                                                MethodCall {
                                                    left: Prefix(
                                                        PrefixExpression {
                                                            token: Token(Bang, "!", (485,7)->(485,8)),
                                                            operator: Bang,
                                                            right: Identifier(
                                                                Raw(symbol),
                                                            ),
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, "->", (485,14)->(485,16)),
                                                    right: f: Identifier(Raw(has_key)) arg: [
                                                        String(
                                                            SingleQuote(
                                                                "location",
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (485,35)->(485,35)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# ignore entries without location information", (486,6)->(486,51)),
                                                    ),
                                                    Continue(
                                                        ContinueCommand {
                                                            cont: Token(Identifier, "continue", (487,6)->(487,14)),
                                                            eol: Token(EndOfLine, "\n", (487,14)->(487,14)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (488,4)->(488,9)),
                                            endif_eol: Token(EndOfLine, "\n", (488,9)->(488,9)),
                                        },
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (489,0)->(489,0)),
                                    ),
                                    Comment(
                                        Token(Comment, "# interface SymbolInformation", (490,4)->(490,33)),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(fileName),
                                                ),
                                                equals: Token(Equal, "=", (491,13)->(491,14)),
                                                right: Call(
                                                    f: DictAccess(DictAccess { container: Identifier(Raw(util)), dot: Token(Dot, ".", (491,19)->(491,20)), index: RawIdentifier { name: "LspUriToFile" } }) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(symbol),
                                                                        ),
                                                                        dot: Token(Dot, ".", (491,39)->(491,40)),
                                                                        index: RawIdentifier {
                                                                            name: "location",
                                                                        },
                                                                    },
                                                                ),
                                                                dot: Token(Dot, ".", (491,48)->(491,49)),
                                                                index: RawIdentifier {
                                                                    name: "uri",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (491,53)->(491,53)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(r),
                                                ),
                                                equals: Token(Equal, "=", (492,6)->(492,7)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(symbol),
                                                                ),
                                                                dot: Token(Dot, ".", (492,14)->(492,15)),
                                                                index: RawIdentifier {
                                                                    name: "location",
                                                                },
                                                            },
                                                        ),
                                                        dot: Token(Dot, ".", (492,23)->(492,24)),
                                                        index: RawIdentifier {
                                                            name: "range",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (492,29)->(492,29)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (493,0)->(493,0)),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(symName),
                                                ),
                                                equals: Token(Equal, "=", (494,12)->(494,13)),
                                                right: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(symbol),
                                                        ),
                                                        dot: Token(Dot, ".", (494,20)->(494,21)),
                                                        index: RawIdentifier {
                                                            name: "name",
                                                        },
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (494,25)->(494,25)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (495,4)->(495,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(And, "&&", (495,40)->(495,42)),
                                                    operator: And,
                                                    left: MethodCall(
                                                        MethodCall {
                                                            left: Identifier(
                                                                Raw(symbol),
                                                            ),
                                                            tok: Token(MethodArrow, "->", (495,13)->(495,15)),
                                                            right: f: Identifier(Raw(has_key)) arg: [
                                                                String(
                                                                    SingleQuote(
                                                                        "containerName",
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(NotEqualTo, "!=", (495,64)->(495,66)),
                                                            operator: NotEqualTo,
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(symbol),
                                                                    ),
                                                                    dot: Token(Dot, ".", (495,49)->(495,50)),
                                                                    index: RawIdentifier {
                                                                        name: "containerName",
                                                                    },
                                                                },
                                                            ),
                                                            right: String(
                                                                SingleQuote(
                                                                    "",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (495,69)->(495,69)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: Identifier(
                                                                    Raw(symName),
                                                                ),
                                                                equals: Token(Equal, "=", (496,14)->(496,15)),
                                                                right: String(
                                                                    Interpolated(
                                                                        "{symbol.containerName}::{symName}",
                                                                    ),
                                                                ),
                                                                eol: Token(EndOfLine, "\n", (496,52)->(496,52)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (497,4)->(497,9)),
                                            endif_eol: Token(EndOfLine, "\n", (497,9)->(497,9)),
                                        },
                                    ),
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(symName),
                                                ),
                                                modifier: Token(StringConcatEquals, "..=", (498,12)->(498,15)),
                                                right: String(
                                                    Interpolated(
                                                        " [{LspSymbolKindToName(symbol.kind)}]",
                                                    ),
                                                ),
                                                eol: Token(EndOfLine, "\n", (498,56)->(498,56)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(symName),
                                                ),
                                                modifier: Token(StringConcatEquals, "..=", (499,12)->(499,15)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(StringConcat, "..", (499,20)->(499,22)),
                                                        operator: StringConcat,
                                                        left: String(
                                                            SingleQuote(
                                                                " ",
                                                            ),
                                                        ),
                                                        right: Call(
                                                            f: Identifier(Raw(MakeMenuName)) arg: [
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: MethodCall(
                                                                            MethodCall {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(lspserver),
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (500,11)->(500,12)),
                                                                                        index: RawIdentifier {
                                                                                            name: "workspaceSymbolPopup",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                tok: Token(MethodArrow, "->", (500,32)->(500,34)),
                                                                                right: f: Identifier(Raw(popup_getpos)) arg: [],
                                                                            },
                                                                        ),
                                                                        dot: Token(Dot, ".", (500,48)->(500,49)),
                                                                        index: RawIdentifier {
                                                                            name: "core_width",
                                                                        },
                                                                    },
                                                                ),
                                                                Identifier(
                                                                    Raw(fileName),
                                                                ),
                                                            ],
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (501,11)->(501,11)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (502,0)->(502,0)),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: Identifier(
                                                        Raw(symbols),
                                                    ),
                                                    tok: Token(MethodArrow, "->", (503,11)->(503,13)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Dict(
                                                            DictLiteral {
                                                                open: Token(LeftBrace, "{", (503,17)->(503,18)),
                                                                elements: [
                                                                    KeyValue {
                                                                        key: Literal(
                                                                            Literal {
                                                                                token: Token(Identifier, "name", (503,18)->(503,22)),
                                                                            },
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (503,22)->(503,24)),
                                                                        value: Identifier(
                                                                            Raw(symName),
                                                                        ),
                                                                        comma: Some(
                                                                            Token(Comma, ",", (503,31)->(503,32)),
                                                                        ),
                                                                    },
                                                                    KeyValue {
                                                                        key: Literal(
                                                                            Literal {
                                                                                token: Token(Identifier, "file", (504,3)->(504,7)),
                                                                            },
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (504,7)->(504,9)),
                                                                        value: Identifier(
                                                                            Raw(fileName),
                                                                        ),
                                                                        comma: Some(
                                                                            Token(Comma, ",", (504,17)->(504,18)),
                                                                        ),
                                                                    },
                                                                    KeyValue {
                                                                        key: Literal(
                                                                            Literal {
                                                                                token: Token(Identifier, "pos", (505,3)->(505,6)),
                                                                            },
                                                                        ),
                                                                        colon: Token(SpacedColon, ": ", (505,6)->(505,8)),
                                                                        value: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(r),
                                                                                ),
                                                                                dot: Token(Dot, ".", (505,9)->(505,10)),
                                                                                index: RawIdentifier {
                                                                                    name: "start",
                                                                                },
                                                                            },
                                                                        ),
                                                                        comma: None,
                                                                    },
                                                                ],
                                                                close: Token(RightBrace, "}", (505,15)->(505,16)),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (505,17)->(505,17)),
                                        },
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, "endfor", (506,2)->(506,8)),
                            endfor_eol: Token(EndOfLine, "\n", (506,8)->(506,8)),
                        },
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: MethodCall(
                                MethodCall {
                                    left: Identifier(
                                        Raw(symbols),
                                    ),
                                    tok: Token(MethodArrow, "->", (507,9)->(507,11)),
                                    right: f: Identifier(Raw(setwinvar)) arg: [
                                        DictAccess(
                                            DictAccess {
                                                container: Identifier(
                                                    Raw(lspserver),
                                                ),
                                                dot: Token(Dot, ".", (507,30)->(507,31)),
                                                index: RawIdentifier {
                                                    name: "workspaceSymbolPopup",
                                                },
                                            },
                                        ),
                                        String(
                                            SingleQuote(
                                                "LspSymbolTable",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (507,70)->(507,70)),
                        },
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(lspserver),
                                            ),
                                            dot: Token(Dot, ".", (508,11)->(508,12)),
                                            index: RawIdentifier {
                                                name: "workspaceSymbolPopup",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (508,32)->(508,34)),
                                    right: f: Identifier(Raw(popup_settext)) arg: [
                                        MethodCall(
                                            MethodCall {
                                                left: MethodCall(
                                                    MethodCall {
                                                        left: Identifier(
                                                            Raw(symbols),
                                                        ),
                                                        tok: Token(MethodArrow, "->", (509,11)->(509,13)),
                                                        right: f: Identifier(Raw(copy)) arg: [],
                                                    },
                                                ),
                                                tok: Token(MethodArrow, "->", (509,19)->(509,21)),
                                                right: f: Identifier(Raw(mapnew)) arg: [
                                                    String(
                                                        SingleQuote(
                                                            "v:val.name",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (509,42)->(509,42)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (510,0)->(510,6)),
            end_eol: Token(EndOfLine, "\n", (510,6)->(510,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (511,0)->(511,0)),
    ),
    Comment(
        Token(Comment, "# process the 'textDocument/prepareCallHierarchy' reply from the LSP server", (512,0)->(512,75)),
    ),
    Comment(
        Token(Comment, "# Result: CallHierarchyItem[] | null", (513,0)->(513,36)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (514,0)->(514,3)),
            name: Raw(ProcessPrepareCallHierarchy),
            args: Signature {
                open: Token(LeftParen, "(", (514,31)->(514,32)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (514,41)->(514,43)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (514,47)->(514,48)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (514,51)->(514,52)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (514,57)->(514,59)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (514,63)->(514,64)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (514,67)->(514,68)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (514,75)->(514,77)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (514,81)->(514,82)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (514,85)->(514,86)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (514,86)->(514,87)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (514,87)->(514,87)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (515,2)->(515,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (515,10)->(515,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (515,17)->(515,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (515,26)->(515,26)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (516,4)->(516,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (516,35)->(516,37)),
                                                    operator: EqualTo,
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(lspserver),
                                                            ),
                                                            dot: Token(Dot, ".", (516,16)->(516,17)),
                                                            index: RawIdentifier {
                                                                name: "callHierarchyType",
                                                            },
                                                        },
                                                    ),
                                                    right: String(
                                                        SingleQuote(
                                                            "incoming",
                                                        ),
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (516,48)->(516,48)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(util),
                                                                    ),
                                                                    dot: Token(Dot, ".", (517,10)->(517,11)),
                                                                    index: RawIdentifier {
                                                                        name: "WarnMsg",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (517,18)->(517,19)),
                                                            args: [
                                                                String(
                                                                    SingleQuote(
                                                                        "No incoming calls",
                                                                    ),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (517,38)->(517,39)),
                                                            eol: Token(EndOfLine, "\n", (517,39)->(517,39)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, "else", (518,4)->(518,8)),
                                                    else_eol: Token(EndOfLine, "\n", (518,8)->(518,8)),
                                                    body: Body {
                                                        commands: [
                                                            Call(
                                                                CallCommand {
                                                                    call: None,
                                                                    expr: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(util),
                                                                            ),
                                                                            dot: Token(Dot, ".", (519,10)->(519,11)),
                                                                            index: RawIdentifier {
                                                                                name: "WarnMsg",
                                                                            },
                                                                        },
                                                                    ),
                                                                    open: Token(LeftParen, "(", (519,18)->(519,19)),
                                                                    args: [
                                                                        String(
                                                                            SingleQuote(
                                                                                "No outgoing calls",
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    close: Token(RightParen, ")", (519,38)->(519,39)),
                                                                    eol: Token(EndOfLine, "\n", (519,39)->(519,39)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, "endif", (520,4)->(520,9)),
                                            endif_eol: Token(EndOfLine, "\n", (520,9)->(520,9)),
                                        },
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (521,4)->(521,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (521,10)->(521,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (522,2)->(522,7)),
                            endif_eol: Token(EndOfLine, "\n", (522,7)->(522,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (523,0)->(523,0)),
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (524,2)->(524,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (524,12)->(524,14)),
                                    inner: Number,
                                },
                            ),
                            name: Raw(choice),
                            equal: Token(Equal, "=", (524,21)->(524,22)),
                            expr: Number(
                                VimNumber {
                                    value: "1",
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (524,24)->(524,24)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (525,2)->(525,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(GreaterThan, ">", (525,25)->(525,26)),
                                    operator: GreaterThan,
                                    left: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (525,10)->(525,11)),
                                                    index: RawIdentifier {
                                                        name: "result",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, "->", (525,17)->(525,19)),
                                            right: f: Identifier(Raw(len)) arg: [],
                                        },
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "1",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (525,28)->(525,28)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, "var", (526,4)->(526,7)),
                                            ty: Some(
                                                Type {
                                                    colon: Token(SpacedColon, ": ", (526,13)->(526,15)),
                                                    inner: List {
                                                        open: Token(AngleLeft, "<", (526,19)->(526,20)),
                                                        inner: String,
                                                        close: Token(GreaterThan, ">", (526,26)->(526,27)),
                                                    },
                                                },
                                            ),
                                            name: Raw(items),
                                            equal: Token(Equal, "=", (526,28)->(526,29)),
                                            expr: Array(
                                                ArrayLiteral {
                                                    open: Token(LeftBracket, "[", (526,30)->(526,31)),
                                                    elements: [
                                                        String(
                                                            SingleQuote(
                                                                "Select a Call Hierarchy Item:",
                                                            ),
                                                        ),
                                                    ],
                                                    close: Token(RightBracket, "]", (526,62)->(526,63)),
                                                },
                                            ),
                                            eol: Token(EndOfLine, "\n", (526,63)->(526,63)),
                                        },
                                    ),
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, "for", (527,4)->(527,7)),
                                            for_identifier: Raw(i),
                                            in_: Token(Identifier, "in", (527,10)->(527,12)),
                                            for_expr: Call(
                                                f: Identifier(Raw(range)) arg: [
                                                    MethodCall(
                                                        MethodCall {
                                                            left: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(reply),
                                                                    ),
                                                                    dot: Token(Dot, ".", (527,24)->(527,25)),
                                                                    index: RawIdentifier {
                                                                        name: "result",
                                                                    },
                                                                },
                                                            ),
                                                            tok: Token(MethodArrow, "->", (527,31)->(527,33)),
                                                            right: f: Identifier(Raw(len)) arg: [],
                                                        },
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, "\n", (527,39)->(527,39)),
                                            body: Body {
                                                commands: [
                                                    Eval(
                                                        EvalCommand {
                                                            eval: None,
                                                            expr: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(items),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (528,11)->(528,13)),
                                                                    right: f: Identifier(Raw(add)) arg: [
                                                                        Call(
                                                                            f: Identifier(Raw(printf)) arg: [
                                                                                String(
                                                                                    DoubleQuote(
                                                                                        "%d. %s",
                                                                                    ),
                                                                                ),
                                                                                Infix(
                                                                                    InfixExpression {
                                                                                        token: Token(Plus, "+", (528,36)->(528,37)),
                                                                                        operator: Plus,
                                                                                        left: Identifier(
                                                                                            Raw(i),
                                                                                        ),
                                                                                        right: Number(
                                                                                            VimNumber {
                                                                                                value: "1",
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                DictAccess(
                                                                                    DictAccess {
                                                                                        container: Index(
                                                                                            IndexExpression {
                                                                                                container: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(reply),
                                                                                                        ),
                                                                                                        dot: Token(Dot, ".", (528,46)->(528,47)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "result",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                open: Token(LeftBracket, "[", (528,53)->(528,54)),
                                                                                                index: Item(
                                                                                                    Identifier(
                                                                                                        Raw(i),
                                                                                                    ),
                                                                                                ),
                                                                                                close: Token(RightBracket, "]", (528,55)->(528,56)),
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, ".", (528,56)->(528,57)),
                                                                                        index: RawIdentifier {
                                                                                            name: "name",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, "\n", (528,63)->(528,63)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, "endfor", (529,4)->(529,10)),
                                            endfor_eol: Token(EndOfLine, "\n", (529,10)->(529,10)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(choice),
                                                ),
                                                equals: Token(Equal, "=", (530,11)->(530,12)),
                                                right: Call(
                                                    f: Identifier(Raw(inputlist)) arg: [
                                                        Identifier(
                                                            Raw(items),
                                                        ),
                                                    ],
                                                ),
                                                eol: Token(EndOfLine, "\n", (530,29)->(530,29)),
                                            },
                                        ),
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, "if", (531,4)->(531,6)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(Or, "||", (531,18)->(531,20)),
                                                    operator: Or,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(LessThan, "<", (531,14)->(531,15)),
                                                            operator: LessThan,
                                                            left: Identifier(
                                                                Raw(choice),
                                                            ),
                                                            right: Number(
                                                                VimNumber {
                                                                    value: "1",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: Infix(
                                                        InfixExpression {
                                                            token: Token(GreaterThan, ">", (531,28)->(531,29)),
                                                            operator: GreaterThan,
                                                            left: Identifier(
                                                                Raw(choice),
                                                            ),
                                                            right: MethodCall(
                                                                MethodCall {
                                                                    left: Identifier(
                                                                        Raw(items),
                                                                    ),
                                                                    tok: Token(MethodArrow, "->", (531,35)->(531,37)),
                                                                    right: f: Identifier(Raw(len)) arg: [],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, "\n", (531,42)->(531,42)),
                                            body: Body {
                                                commands: [
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, "return", (532,6)->(532,12)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, "\n", (532,12)->(532,12)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, "endif", (533,4)->(533,9)),
                                            endif_eol: Token(EndOfLine, "\n", (533,9)->(533,9)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (534,2)->(534,7)),
                            endif_eol: Token(EndOfLine, "\n", (534,7)->(534,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (535,0)->(535,0)),
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (536,2)->(536,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (536,33)->(536,35)),
                                    operator: EqualTo,
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(lspserver),
                                            ),
                                            dot: Token(Dot, ".", (536,14)->(536,15)),
                                            index: RawIdentifier {
                                                name: "callHierarchyType",
                                            },
                                        },
                                    ),
                                    right: String(
                                        SingleQuote(
                                            "incoming",
                                        ),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (536,46)->(536,46)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Scope(ScopedIdentifier { scope: Global, colon: Token(Colon, ":", (537,5)->(537,6)), accessor: Raw(LspGetIncomingCalls) }),
                                            ),
                                            open: Token(LeftParen, "(", (537,25)->(537,26)),
                                            args: [
                                                Index(
                                                    IndexExpression {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(reply),
                                                                ),
                                                                dot: Token(Dot, ".", (537,31)->(537,32)),
                                                                index: RawIdentifier {
                                                                    name: "result",
                                                                },
                                                            },
                                                        ),
                                                        open: Token(LeftBracket, "[", (537,38)->(537,39)),
                                                        index: Item(
                                                            Infix(
                                                                InfixExpression {
                                                                    token: Token(Minus, "-", (537,46)->(537,47)),
                                                                    operator: Minus,
                                                                    left: Identifier(
                                                                        Raw(choice),
                                                                    ),
                                                                    right: Number(
                                                                        VimNumber {
                                                                            value: "1",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        close: Token(RightBracket, "]", (537,49)->(537,50)),
                                                    },
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (537,50)->(537,51)),
                                            eol: Token(EndOfLine, "\n", (537,51)->(537,51)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: Some(
                                ElseCommand {
                                    else_tok: Token(Identifier, "else", (538,2)->(538,6)),
                                    else_eol: Token(EndOfLine, "\n", (538,6)->(538,6)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Identifier(
                                                        Scope(ScopedIdentifier { scope: Global, colon: Token(Colon, ":", (539,5)->(539,6)), accessor: Raw(LspGetOutgoingCalls) }),
                                                    ),
                                                    open: Token(LeftParen, "(", (539,25)->(539,26)),
                                                    args: [
                                                        Index(
                                                            IndexExpression {
                                                                container: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(reply),
                                                                        ),
                                                                        dot: Token(Dot, ".", (539,31)->(539,32)),
                                                                        index: RawIdentifier {
                                                                            name: "result",
                                                                        },
                                                                    },
                                                                ),
                                                                open: Token(LeftBracket, "[", (539,38)->(539,39)),
                                                                index: Item(
                                                                    Infix(
                                                                        InfixExpression {
                                                                            token: Token(Minus, "-", (539,46)->(539,47)),
                                                                            operator: Minus,
                                                                            left: Identifier(
                                                                                Raw(choice),
                                                                            ),
                                                                            right: Number(
                                                                                VimNumber {
                                                                                    value: "1",
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                close: Token(RightBracket, "]", (539,49)->(539,50)),
                                                            },
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (539,50)->(539,51)),
                                                    eol: Token(EndOfLine, "\n", (539,51)->(539,51)),
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            endif_tok: Token(Identifier, "endif", (540,2)->(540,7)),
                            endif_eol: Token(EndOfLine, "\n", (540,7)->(540,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (541,0)->(541,6)),
            end_eol: Token(EndOfLine, "\n", (541,6)->(541,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (542,0)->(542,0)),
    ),
    Comment(
        Token(Comment, "# process the 'callHierarchy/incomingCalls' reply from the LSP server", (543,0)->(543,69)),
    ),
    Comment(
        Token(Comment, "# Result: CallHierarchyIncomingCall[] | null", (544,0)->(544,44)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (545,0)->(545,3)),
            name: Raw(ProcessIncomingCalls),
            args: Signature {
                open: Token(LeftParen, "(", (545,24)->(545,25)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (545,34)->(545,36)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (545,40)->(545,41)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (545,44)->(545,45)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (545,50)->(545,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (545,56)->(545,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (545,60)->(545,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (545,68)->(545,70)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (545,74)->(545,75)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (545,78)->(545,79)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (545,79)->(545,80)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (545,80)->(545,80)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (546,2)->(546,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (546,10)->(546,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (546,17)->(546,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (546,26)->(546,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (547,4)->(547,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (547,10)->(547,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (548,2)->(548,7)),
                            endif_eol: Token(EndOfLine, "\n", (548,7)->(548,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (549,0)->(549,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(callhier),
                                    ),
                                    dot: Token(Dot, ".", (550,10)->(550,11)),
                                    index: RawIdentifier {
                                        name: "IncomingCalls",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (550,24)->(550,25)),
                            args: [
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (550,30)->(550,31)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (550,37)->(550,38)),
                            eol: Token(EndOfLine, "\n", (550,38)->(550,38)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (551,0)->(551,6)),
            end_eol: Token(EndOfLine, "\n", (551,6)->(551,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (552,0)->(552,0)),
    ),
    Comment(
        Token(Comment, "# process the 'callHierarchy/outgoingCalls' reply from the LSP server", (553,0)->(553,69)),
    ),
    Comment(
        Token(Comment, "# Result: CallHierarchyOutgoingCall[] | null", (554,0)->(554,44)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (555,0)->(555,3)),
            name: Raw(ProcessOutgoingCalls),
            args: Signature {
                open: Token(LeftParen, "(", (555,24)->(555,25)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (555,34)->(555,36)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (555,40)->(555,41)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (555,44)->(555,45)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(req),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (555,50)->(555,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (555,56)->(555,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (555,60)->(555,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (555,68)->(555,70)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (555,74)->(555,75)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (555,78)->(555,79)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (555,79)->(555,80)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (555,80)->(555,80)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (556,2)->(556,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(reply),
                                            ),
                                            dot: Token(Dot, ".", (556,10)->(556,11)),
                                            index: RawIdentifier {
                                                name: "result",
                                            },
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (556,17)->(556,19)),
                                    right: f: Identifier(Raw(empty)) arg: [],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (556,26)->(556,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (557,4)->(557,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (557,10)->(557,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (558,2)->(558,7)),
                            endif_eol: Token(EndOfLine, "\n", (558,7)->(558,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (559,0)->(559,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(callhier),
                                    ),
                                    dot: Token(Dot, ".", (560,10)->(560,11)),
                                    index: RawIdentifier {
                                        name: "OutgoingCalls",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (560,24)->(560,25)),
                            args: [
                                DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(reply),
                                        ),
                                        dot: Token(Dot, ".", (560,30)->(560,31)),
                                        index: RawIdentifier {
                                            name: "result",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (560,37)->(560,38)),
                            eol: Token(EndOfLine, "\n", (560,38)->(560,38)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (561,0)->(561,6)),
            end_eol: Token(EndOfLine, "\n", (561,6)->(561,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (562,0)->(562,0)),
    ),
    Comment(
        Token(Comment, "# Process various reply messages from the LSP server", (563,0)->(563,52)),
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, "export", (564,0)->(564,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, "def", (564,7)->(564,10)),
                    name: Raw(ProcessReply),
                    args: Signature {
                        open: Token(LeftParen, "(", (564,23)->(564,24)),
                        params: [
                            Parameter {
                                name: Raw(lspserver),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (564,33)->(564,35)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (564,39)->(564,40)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (564,43)->(564,44)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(req),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (564,49)->(564,51)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (564,55)->(564,56)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (564,59)->(564,60)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(reply),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, ": ", (564,67)->(564,69)),
                                        inner: Dict {
                                            open: Token(AngleLeft, "<", (564,73)->(564,74)),
                                            inner: Any,
                                            close: Token(AngleRight, ">", (564,77)->(564,78)),
                                        },
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, ")", (564,78)->(564,79)),
                    },
                    ret: Some(
                        Type {
                            colon: Token(SpacedColon, ": ", (564,79)->(564,81)),
                            inner: Void,
                        },
                    ),
                    def_eol: Token(EndOfLine, "\n", (564,85)->(564,85)),
                    body: Body {
                        commands: [
                            Var(
                                VarCommand {
                                    var: Token(Identifier, "var", (565,2)->(565,5)),
                                    ty: Some(
                                        Type {
                                            colon: Token(SpacedColon, ": ", (565,24)->(565,26)),
                                            inner: Dict {
                                                open: Token(AngleLeft, "<", (565,30)->(565,31)),
                                                inner: Func(
                                                    Naked,
                                                ),
                                                close: Token(GreaterThan, ">", (565,35)->(565,36)),
                                            },
                                        },
                                    ),
                                    name: Raw(lsp_reply_handlers),
                                    equal: Token(Equal, "=", (565,37)->(565,38)),
                                    expr: Dict(
                                        DictLiteral {
                                            open: Token(LeftBrace, "{", (566,4)->(566,5)),
                                            elements: [
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "initialize", (567,7)->(567,16)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (567,18)->(567,20)),
                                                    value: Identifier(
                                                        Raw(ProcessInitializeReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (567,42)->(567,43)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "shutdown", (568,7)->(568,14)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (568,16)->(568,18)),
                                                    value: Identifier(
                                                        Raw(ProcessShutdownReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (568,38)->(568,39)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/signatureHelp", (569,7)->(569,32)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (569,34)->(569,36)),
                                                    value: Identifier(
                                                        Raw(ProcessSignaturehelpReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (569,61)->(569,62)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/completion", (570,7)->(570,29)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (570,31)->(570,33)),
                                                    value: Identifier(
                                                        Raw(ProcessCompletionReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (570,55)->(570,56)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/hover", (571,7)->(571,24)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (571,26)->(571,28)),
                                                    value: Identifier(
                                                        Raw(ProcessHoverReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (571,45)->(571,46)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/references", (572,7)->(572,29)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (572,31)->(572,33)),
                                                    value: Identifier(
                                                        Raw(ProcessReferencesReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (572,55)->(572,56)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/documentHighlight", (573,7)->(573,36)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (573,38)->(573,40)),
                                                    value: Identifier(
                                                        Raw(ProcessDocHighlightReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (573,64)->(573,65)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/documentSymbol", (574,7)->(574,33)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (574,35)->(574,37)),
                                                    value: Identifier(
                                                        Raw(ProcessDocSymbolReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (574,58)->(574,59)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/codeAction", (575,7)->(575,29)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (575,31)->(575,33)),
                                                    value: Identifier(
                                                        Raw(ProcessCodeActionReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (575,55)->(575,56)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/foldingRange", (576,7)->(576,31)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (576,33)->(576,35)),
                                                    value: Identifier(
                                                        Raw(ProcessFoldingRangeReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (576,59)->(576,60)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/executeCommand", (577,7)->(577,30)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (577,32)->(577,34)),
                                                    value: Identifier(
                                                        Raw(ProcessWorkspaceExecuteReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (577,62)->(577,63)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "workspace/symbol", (578,7)->(578,22)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (578,24)->(578,26)),
                                                    value: Identifier(
                                                        Raw(ProcessWorkspaceSymbolReply),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (578,53)->(578,54)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "textDocument/prepareCallHierarchy", (579,7)->(579,39)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (579,41)->(579,43)),
                                                    value: Identifier(
                                                        Raw(ProcessPrepareCallHierarchy),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (579,70)->(579,71)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "callHierarchy/incomingCalls", (580,7)->(580,33)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (580,35)->(580,37)),
                                                    value: Identifier(
                                                        Raw(ProcessIncomingCalls),
                                                    ),
                                                    comma: Some(
                                                        Token(Comma, ",", (580,57)->(580,58)),
                                                    ),
                                                },
                                                KeyValue {
                                                    key: Literal(
                                                        Literal {
                                                            token: Token(SingleQuoteString, "callHierarchy/outgoingCalls", (581,7)->(581,33)),
                                                        },
                                                    ),
                                                    colon: Token(SpacedColon, ": ", (581,35)->(581,37)),
                                                    value: Identifier(
                                                        Raw(ProcessOutgoingCalls),
                                                    ),
                                                    comma: None,
                                                },
                                            ],
                                            close: Token(RightBrace, "}", (582,4)->(582,5)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, "\n", (582,5)->(582,5)),
                                },
                            ),
                            NoOp(
                                Token(EndOfLine, "\n", (583,0)->(583,0)),
                            ),
                            If(
                                IfCommand {
                                    if_tok: Token(Identifier, "if", (584,2)->(584,4)),
                                    condition: MethodCall(
                                        MethodCall {
                                            left: Identifier(
                                                Raw(lsp_reply_handlers),
                                            ),
                                            tok: Token(MethodArrow, "->", (584,23)->(584,25)),
                                            right: f: Identifier(Raw(has_key)) arg: [
                                                DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(req),
                                                        ),
                                                        dot: Token(Dot, ".", (584,36)->(584,37)),
                                                        index: RawIdentifier {
                                                            name: "method",
                                                        },
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    if_eol: Token(EndOfLine, "\n", (584,44)->(584,44)),
                                    body: Body {
                                        commands: [
                                            Call(
                                                CallCommand {
                                                    call: None,
                                                    expr: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(lsp_reply_handlers),
                                                            ),
                                                            open: Token(LeftBracket, "[", (585,22)->(585,23)),
                                                            index: Item(
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(req),
                                                                        ),
                                                                        dot: Token(Dot, ".", (585,26)->(585,27)),
                                                                        index: RawIdentifier {
                                                                            name: "method",
                                                                        },
                                                                    },
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, "]", (585,33)->(585,34)),
                                                        },
                                                    ),
                                                    open: Token(LeftParen, "(", (585,34)->(585,35)),
                                                    args: [
                                                        Identifier(
                                                            Raw(lspserver),
                                                        ),
                                                        Identifier(
                                                            Raw(req),
                                                        ),
                                                        Identifier(
                                                            Raw(reply),
                                                        ),
                                                    ],
                                                    close: Token(RightParen, ")", (585,56)->(585,57)),
                                                    eol: Token(EndOfLine, "\n", (585,57)->(585,57)),
                                                },
                                            ),
                                        ],
                                    },
                                    elseifs: [],
                                    else_command: Some(
                                        ElseCommand {
                                            else_tok: Token(Identifier, "else", (586,2)->(586,6)),
                                            else_eol: Token(EndOfLine, "\n", (586,6)->(586,6)),
                                            body: Body {
                                                commands: [
                                                    Call(
                                                        CallCommand {
                                                            call: None,
                                                            expr: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(util),
                                                                    ),
                                                                    dot: Token(Dot, ".", (587,8)->(587,9)),
                                                                    index: RawIdentifier {
                                                                        name: "ErrMsg",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftParen, "(", (587,15)->(587,16)),
                                                            args: [
                                                                String(
                                                                    Interpolated(
                                                                        "Error: Unsupported reply received from LSP server: {reply->string()} for request: {req->string()}",
                                                                    ),
                                                                ),
                                                            ],
                                                            close: Token(RightParen, ")", (587,116)->(587,117)),
                                                            eol: Token(EndOfLine, "\n", (587,117)->(587,117)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                    ),
                                    endif_tok: Token(Identifier, "endif", (588,2)->(588,7)),
                                    endif_eol: Token(EndOfLine, "\n", (588,7)->(588,7)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, "enddef", (589,0)->(589,6)),
                    end_eol: Token(EndOfLine, "\n", (589,6)->(589,6)),
                },
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (590,0)->(590,0)),
    ),
    Comment(
        Token(Comment, "# process a diagnostic notification message from the LSP server", (591,0)->(591,63)),
    ),
    Comment(
        Token(Comment, "# Notification: textDocument/publishDiagnostics", (592,0)->(592,47)),
    ),
    Comment(
        Token(Comment, "# Param: PublishDiagnosticsParams", (593,0)->(593,33)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (594,0)->(594,3)),
            name: Raw(ProcessDiagNotif),
            args: Signature {
                open: Token(LeftParen, "(", (594,20)->(594,21)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (594,30)->(594,32)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (594,36)->(594,37)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (594,40)->(594,41)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (594,48)->(594,50)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (594,54)->(594,55)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (594,58)->(594,59)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (594,59)->(594,60)),
            },
            ret: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (594,60)->(594,62)),
                    inner: Void,
                },
            ),
            def_eol: Token(EndOfLine, "\n", (594,66)->(594,66)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(diag),
                                    ),
                                    dot: Token(Dot, ".", (595,6)->(595,7)),
                                    index: RawIdentifier {
                                        name: "DiagNotification",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (595,23)->(595,24)),
                            args: [
                                Identifier(
                                    Raw(lspserver),
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: DictAccess(
                                            DictAccess {
                                                container: Identifier(
                                                    Raw(reply),
                                                ),
                                                dot: Token(Dot, ".", (595,40)->(595,41)),
                                                index: RawIdentifier {
                                                    name: "params",
                                                },
                                            },
                                        ),
                                        dot: Token(Dot, ".", (595,47)->(595,48)),
                                        index: RawIdentifier {
                                            name: "uri",
                                        },
                                    },
                                ),
                                DictAccess(
                                    DictAccess {
                                        container: DictAccess(
                                            DictAccess {
                                                container: Identifier(
                                                    Raw(reply),
                                                ),
                                                dot: Token(Dot, ".", (595,58)->(595,59)),
                                                index: RawIdentifier {
                                                    name: "params",
                                                },
                                            },
                                        ),
                                        dot: Token(Dot, ".", (595,65)->(595,66)),
                                        index: RawIdentifier {
                                            name: "diagnostics",
                                        },
                                    },
                                ),
                            ],
                            close: Token(RightParen, ")", (595,77)->(595,78)),
                            eol: Token(EndOfLine, "\n", (595,78)->(595,78)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (596,0)->(596,6)),
            end_eol: Token(EndOfLine, "\n", (596,6)->(596,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (597,0)->(597,0)),
    ),
    Comment(
        Token(Comment, "# process a show notification message from the LSP server", (598,0)->(598,57)),
    ),
    Comment(
        Token(Comment, "# Notification: window/showMessage", (599,0)->(599,34)),
    ),
    Comment(
        Token(Comment, "# Param: ShowMessageParams", (600,0)->(600,26)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (601,0)->(601,3)),
            name: Raw(ProcessShowMsgNotif),
            args: Signature {
                open: Token(LeftParen, "(", (601,23)->(601,24)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (601,33)->(601,35)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (601,39)->(601,40)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (601,43)->(601,44)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (601,51)->(601,53)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (601,57)->(601,58)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (601,61)->(601,62)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (601,62)->(601,63)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (601,63)->(601,63)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (602,2)->(602,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (602,13)->(602,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (602,19)->(602,20)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (602,26)->(602,27)),
                                    },
                                },
                            ),
                            name: Raw(msgType),
                            equal: Token(Equal, "=", (602,28)->(602,29)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (602,30)->(602,31)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Error: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Warning: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Info: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Log: ",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (602,76)->(602,77)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (602,77)->(602,77)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (603,2)->(603,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==", (603,23)->(603,25)),
                                    operator: EqualTo,
                                    left: DictAccess(
                                        DictAccess {
                                            container: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(reply),
                                                    ),
                                                    dot: Token(Dot, ".", (603,10)->(603,11)),
                                                    index: RawIdentifier {
                                                        name: "params",
                                                    },
                                                },
                                            ),
                                            dot: Token(Dot, ".", (603,17)->(603,18)),
                                            index: RawIdentifier {
                                                name: "type",
                                            },
                                        },
                                    ),
                                    right: Number(
                                        VimNumber {
                                            value: "4",
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (603,27)->(603,27)),
                            body: Body {
                                commands: [
                                    Comment(
                                        Token(Comment, "# ignore log messages from the LSP server (too chatty)", (604,4)->(604,58)),
                                    ),
                                    Comment(
                                        Token(Comment, "# TODO: Add a configuration to control the message level that will be", (605,4)->(605,73)),
                                    ),
                                    Comment(
                                        Token(Comment, "# displayed. Also store these messages and provide a command to display", (606,4)->(606,75)),
                                    ),
                                    Comment(
                                        Token(Comment, "# them.", (607,4)->(607,11)),
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, "return", (608,4)->(608,10)),
                                            expr: None,
                                            eol: Token(EndOfLine, "\n", (608,10)->(608,10)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (609,2)->(609,7)),
                            endif_eol: Token(EndOfLine, "\n", (609,7)->(609,7)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (610,2)->(610,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (610,11)->(610,13)),
                                    inner: String,
                                },
                            ),
                            name: Raw(mtype),
                            equal: Token(Equal, "=", (610,20)->(610,21)),
                            expr: String(
                                SingleQuote(
                                    "Log: ",
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (610,29)->(610,29)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (611,2)->(611,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (611,27)->(611,29)),
                                    operator: And,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(GreaterThan, ">", (611,23)->(611,24)),
                                            operator: GreaterThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (611,10)->(611,11)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (611,17)->(611,18)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "0",
                                                },
                                            ),
                                        },
                                    ),
                                    right: Infix(
                                        InfixExpression {
                                            token: Token(LessThan, "<", (611,48)->(611,49)),
                                            operator: LessThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (611,35)->(611,36)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (611,42)->(611,43)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "5",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (611,51)->(611,51)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(mtype),
                                                ),
                                                equals: Token(Equal, "=", (612,10)->(612,11)),
                                                right: Index(
                                                    IndexExpression {
                                                        container: Identifier(
                                                            Raw(msgType),
                                                        ),
                                                        open: Token(LeftBracket, "[", (612,19)->(612,20)),
                                                        index: Item(
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (612,25)->(612,26)),
                                                                            index: RawIdentifier {
                                                                                name: "params",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (612,32)->(612,33)),
                                                                    index: RawIdentifier {
                                                                        name: "type",
                                                                    },
                                                                },
                                                            ),
                                                        ),
                                                        close: Token(RightBracket, "]", (612,37)->(612,38)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (612,38)->(612,38)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (613,2)->(613,7)),
                            endif_eol: Token(EndOfLine, "\n", (613,7)->(613,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (614,0)->(614,0)),
                    ),
                    Echo(
                        EchoCommand {
                            echo: Token(Identifier, "echomsg", (615,3)->(615,10)),
                            expr: String(
                                Interpolated(
                                    "Lsp {mtype} {reply.params.message}",
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (615,48)->(615,48)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (616,0)->(616,6)),
            end_eol: Token(EndOfLine, "\n", (616,6)->(616,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (617,0)->(617,0)),
    ),
    Comment(
        Token(Comment, "# process a log notification message from the LSP server", (618,0)->(618,56)),
    ),
    Comment(
        Token(Comment, "# Notification: window/logMessage", (619,0)->(619,33)),
    ),
    Comment(
        Token(Comment, "# Param: LogMessageParams", (620,0)->(620,25)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (621,0)->(621,3)),
            name: Raw(ProcessLogMsgNotif),
            args: Signature {
                open: Token(LeftParen, "(", (621,22)->(621,23)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (621,32)->(621,34)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (621,38)->(621,39)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (621,42)->(621,43)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (621,50)->(621,52)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (621,56)->(621,57)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (621,60)->(621,61)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (621,61)->(621,62)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (621,62)->(621,62)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (622,2)->(622,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (622,13)->(622,15)),
                                    inner: List {
                                        open: Token(AngleLeft, "<", (622,19)->(622,20)),
                                        inner: String,
                                        close: Token(GreaterThan, ">", (622,26)->(622,27)),
                                    },
                                },
                            ),
                            name: Raw(msgType),
                            equal: Token(Equal, "=", (622,28)->(622,29)),
                            expr: Array(
                                ArrayLiteral {
                                    open: Token(LeftBracket, "[", (622,30)->(622,31)),
                                    elements: [
                                        String(
                                            SingleQuote(
                                                "",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Error: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Warning: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Info: ",
                                            ),
                                        ),
                                        String(
                                            SingleQuote(
                                                "Log: ",
                                            ),
                                        ),
                                    ],
                                    close: Token(RightBracket, "]", (622,76)->(622,77)),
                                },
                            ),
                            eol: Token(EndOfLine, "\n", (622,77)->(622,77)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, "var", (623,2)->(623,5)),
                            ty: Some(
                                Type {
                                    colon: Token(SpacedColon, ": ", (623,11)->(623,13)),
                                    inner: String,
                                },
                            ),
                            name: Raw(mtype),
                            equal: Token(Equal, "=", (623,20)->(623,21)),
                            expr: String(
                                SingleQuote(
                                    "Log: ",
                                ),
                            ),
                            eol: Token(EndOfLine, "\n", (623,29)->(623,29)),
                        },
                    ),
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (624,2)->(624,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(And, "&&", (624,27)->(624,29)),
                                    operator: And,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(GreaterThan, ">", (624,23)->(624,24)),
                                            operator: GreaterThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (624,10)->(624,11)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (624,17)->(624,18)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "0",
                                                },
                                            ),
                                        },
                                    ),
                                    right: Infix(
                                        InfixExpression {
                                            token: Token(LessThan, "<", (624,48)->(624,49)),
                                            operator: LessThan,
                                            left: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(reply),
                                                            ),
                                                            dot: Token(Dot, ".", (624,35)->(624,36)),
                                                            index: RawIdentifier {
                                                                name: "params",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, ".", (624,42)->(624,43)),
                                                    index: RawIdentifier {
                                                        name: "type",
                                                    },
                                                },
                                            ),
                                            right: Number(
                                                VimNumber {
                                                    value: "5",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (624,51)->(624,51)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: Identifier(
                                                    Raw(mtype),
                                                ),
                                                equals: Token(Equal, "=", (625,10)->(625,11)),
                                                right: Index(
                                                    IndexExpression {
                                                        container: Identifier(
                                                            Raw(msgType),
                                                        ),
                                                        open: Token(LeftBracket, "[", (625,19)->(625,20)),
                                                        index: Item(
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(reply),
                                                                            ),
                                                                            dot: Token(Dot, ".", (625,25)->(625,26)),
                                                                            index: RawIdentifier {
                                                                                name: "params",
                                                                            },
                                                                        },
                                                                    ),
                                                                    dot: Token(Dot, ".", (625,32)->(625,33)),
                                                                    index: RawIdentifier {
                                                                        name: "type",
                                                                    },
                                                                },
                                                            ),
                                                        ),
                                                        close: Token(RightBracket, "]", (625,37)->(625,38)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, "\n", (625,38)->(625,38)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (626,2)->(626,7)),
                            endif_eol: Token(EndOfLine, "\n", (626,7)->(626,7)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (627,0)->(627,0)),
                    ),
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(util),
                                    ),
                                    dot: Token(Dot, ".", (628,6)->(628,7)),
                                    index: RawIdentifier {
                                        name: "TraceLog",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (628,15)->(628,16)),
                            args: [
                                Boolean(
                                    VimBoolean {
                                        token: Token(False, "false", (628,16)->(628,21)),
                                        value: false,
                                    },
                                ),
                                String(
                                    Interpolated(
                                        "[{mtype}]: {reply.params.message}",
                                    ),
                                ),
                            ],
                            close: Token(RightParen, ")", (628,59)->(628,60)),
                            eol: Token(EndOfLine, "\n", (628,60)->(628,60)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (629,0)->(629,6)),
            end_eol: Token(EndOfLine, "\n", (629,6)->(629,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (630,0)->(630,0)),
    ),
    Comment(
        Token(Comment, "# process unsupported notification messages", (631,0)->(631,43)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (632,0)->(632,3)),
            name: Raw(ProcessUnsupportedNotif),
            args: Signature {
                open: Token(LeftParen, "(", (632,27)->(632,28)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (632,37)->(632,39)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (632,43)->(632,44)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (632,47)->(632,48)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (632,55)->(632,57)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (632,61)->(632,62)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (632,65)->(632,66)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (632,66)->(632,67)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (632,67)->(632,67)),
            body: Body {
                commands: [
                    Call(
                        CallCommand {
                            call: None,
                            expr: DictAccess(
                                DictAccess {
                                    container: Identifier(
                                        Raw(util),
                                    ),
                                    dot: Token(Dot, ".", (633,6)->(633,7)),
                                    index: RawIdentifier {
                                        name: "ErrMsg",
                                    },
                                },
                            ),
                            open: Token(LeftParen, "(", (633,13)->(633,14)),
                            args: [
                                String(
                                    Interpolated(
                                        "Error: Unsupported notification message received from the LSP server ({lspserver.path}), message = {reply->string()}",
                                    ),
                                ),
                            ],
                            close: Token(RightParen, ")", (633,133)->(633,134)),
                            eol: Token(EndOfLine, "\n", (633,134)->(633,134)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (634,0)->(634,6)),
            end_eol: Token(EndOfLine, "\n", (634,6)->(634,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (635,0)->(635,0)),
    ),
    Comment(
        Token(Comment, "# per-filetype private map inside to record if ntf once or not", (636,0)->(636,62)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (637,0)->(637,3)),
            ty: Some(
                Type {
                    colon: Token(SpacedColon, ": ", (637,19)->(637,21)),
                    inner: Dict {
                        open: Token(AngleLeft, "<", (637,25)->(637,26)),
                        inner: Bool,
                        close: Token(GreaterThan, ">", (637,30)->(637,31)),
                    },
                },
            ),
            name: Raw(ftypeNtfOnceMap),
            equal: Token(Equal, "=", (637,32)->(637,33)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, "{", (637,34)->(637,35)),
                    elements: [],
                    close: Token(RightBrace, "}", (637,35)->(637,36)),
                },
            ),
            eol: Token(EndOfLine, "\n", (637,36)->(637,36)),
        },
    ),
    Comment(
        Token(Comment, "# process unsupported notification messages but only notify once", (638,0)->(638,64)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, "def", (639,0)->(639,3)),
            name: Raw(ProcessUnsupportedNotifOnce),
            args: Signature {
                open: Token(LeftParen, "(", (639,31)->(639,32)),
                params: [
                    Parameter {
                        name: Raw(lspserver),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (639,41)->(639,43)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (639,47)->(639,48)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (639,51)->(639,52)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(reply),
                        ty: Some(
                            Type {
                                colon: Token(SpacedColon, ": ", (639,59)->(639,61)),
                                inner: Dict {
                                    open: Token(AngleLeft, "<", (639,65)->(639,66)),
                                    inner: Any,
                                    close: Token(AngleRight, ">", (639,69)->(639,70)),
                                },
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, ")", (639,70)->(639,71)),
            },
            ret: None,
            def_eol: Token(EndOfLine, "\n", (639,71)->(639,71)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, "if", (640,2)->(640,4)),
                            condition: MethodCall(
                                MethodCall {
                                    left: Prefix(
                                        PrefixExpression {
                                            token: Token(Bang, "!", (640,5)->(640,6)),
                                            operator: Bang,
                                            right: Identifier(
                                                Raw(ftypeNtfOnceMap),
                                            ),
                                        },
                                    ),
                                    tok: Token(MethodArrow, "->", (640,21)->(640,23)),
                                    right: f: Identifier(Raw(get)) arg: [
                                        VimOption(
                                            VimOption {
                                                ampersand: Token(Ampersand, "&", (640,27)->(640,28)),
                                                option: Literal {
                                                    token: Token(Identifier, "ft", (640,28)->(640,30)),
                                                },
                                            },
                                        ),
                                        Identifier(
                                            Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, ":", (640,33)->(640,34)), accessor: Raw(false) }),
                                        ),
                                    ],
                                },
                            ),
                            if_eol: Token(EndOfLine, "\n", (640,40)->(640,40)),
                            body: Body {
                                commands: [
                                    Call(
                                        CallCommand {
                                            call: None,
                                            expr: Identifier(
                                                Raw(ProcessUnsupportedNotif),
                                            ),
                                            open: Token(LeftParen, "(", (641,24)->(641,25)),
                                            args: [
                                                Identifier(
                                                    Raw(lspserver),
                                                ),
                                                Identifier(
                                                    Raw(reply),
                                                ),
                                            ],
                                            close: Token(RightParen, ")", (641,41)->(641,42)),
                                            eol: Token(EndOfLine, "\n", (641,42)->(641,42)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, "endif", (642,2)->(642,7)),
                            endif_eol: Token(EndOfLine, "\n", (642,7)->(642,7)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, "enddef", (643,0)->(643,6)),
            end_eol: Token(EndOfLine, "\n", (643,6)->(643,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (644,0)->(644,0)),
    ),
]
