---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2579
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Comment(
        Token(Comment, "# TODO:", (2,0)->(2,7)),
    ),
    Comment(
        Token(Comment, "# echo x y z", (3,0)->(3,12)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (4,0)->(4,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (5,0)->(5,3)),
            ty: None,
            name: Raw(x),
            equal: Token(Equal, (5,6)->(5,7)),
            expr: Number(
                Number(10),
            ),
            eol: Token(EndOfLine, (5,10)->(5,10)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (6,0)->(6,3)),
            ty: None,
            name: Raw(y),
            equal: Token(Equal, (6,6)->(6,7)),
            expr: Identifier(
                Raw(x),
            ),
            eol: Token(EndOfLine, (6,9)->(6,9)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (7,0)->(7,3)),
            ty: None,
            name: Raw(z),
            equal: Token(Equal, (7,6)->(7,7)),
            expr: Prefix(
                PrefixExpression {
                    token: Token(Plus, (7,8)->(7,9)),
                    operator: Plus,
                    right: Number(
                        Number(1),
                    ),
                },
            ),
            eol: Token(EndOfLine, (7,10)->(7,10)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (8,0)->(8,3)),
            ty: None,
            name: Raw(foo),
            equal: Token(Equal, (8,8)->(8,9)),
            expr: Boolean(
                VimBoolean {
                    value: true,
                },
            ),
            eol: Token(EndOfLine, (8,14)->(8,14)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (9,0)->(9,3)),
            ty: None,
            name: Raw(sum),
            equal: Token(Equal, (9,8)->(9,9)),
            expr: Infix(
                InfixExpression {
                    token: Token(Plus, "+", (9,12)->(9,13)),
                    operator: Plus,
                    left: Identifier(
                        Raw(x),
                    ),
                    right: Identifier(
                        Raw(y),
                    ),
                },
            ),
            eol: Token(EndOfLine, (9,15)->(9,15)),
        },
    ),
    Comment(
        Token(Comment, "# var parened = (((x + y)))", (10,0)->(10,27)),
    ),
    Comment(
        Token(Comment, "# var if = true", (11,0)->(11,15)),
    ),
    Comment(
        Token(Comment, "# var var = if", (12,0)->(12,14)),
    ),
    Comment(
        Token(Comment, "# echo var", (13,0)->(13,10)),
    ),
    Comment(
        Token(Comment, "# ", (14,0)->(14,2)),
    ),
    Comment(
        Token(Comment, "# var x = v:false", (15,0)->(15,17)),
    ),
    Comment(
        Token(Comment, "# echo x", (16,0)->(16,8)),
    ),
    Comment(
        Token(Comment, "# ", (17,0)->(17,2)),
    ),
    Comment(
        Token(Comment, "# command! -nargs=0 -bar LspGotoDefinition lsp.GotoDefinition(v:false)", (18,0)->(18,70)),
    ),
    Comment(
        Token(Comment, "# command! -nargs=0 -bar LspGotoDefinition lsp.GotoDefinition(v:false)", (19,0)->(19,70)),
    ),
    Comment(
        Token(Comment, "# ", (20,0)->(20,2)),
    ),
    Comment(
        Token(Comment, "# ", (21,0)->(21,2)),
    ),
    Comment(
        Token(Comment, "# var x = [1, 2, 3,]", (22,0)->(22,20)),
    ),
    Comment(
        Token(Comment, "# ", (23,0)->(23,2)),
    ),
    Comment(
        Token(Comment, "# var kindMap: list<string> = ['',", (24,0)->(24,34)),
    ),
    Comment(
        Token(Comment, "#     't', # Text", (25,0)->(25,17)),
    ),
    Comment(
        Token(Comment, "#     'm', # Method", (26,0)->(26,19)),
    ),
    Comment(
        Token(Comment, "#     'f', # Function", (27,0)->(27,21)),
    ),
    Comment(
        Token(Comment, "# ]", (28,0)->(28,3)),
    ),
    Comment(
        Token(Comment, "# ", (29,0)->(29,2)),
    ),
    Comment(
        Token(Comment, "# var kindMap: list<string> = ['',", (30,0)->(30,34)),
    ),
    Comment(
        Token(Comment, "#     't2', # Text", (31,0)->(31,18)),
    ),
    Comment(
        Token(Comment, "#     'm2', # Method", (32,0)->(32,20)),
    ),
    Comment(
        Token(Comment, "#     'f2'  # Function", (33,0)->(33,22)),
    ),
    Comment(
        Token(Comment, "# ]", (34,0)->(34,3)),
    ),
    Comment(
        Token(Comment, "# ", (35,0)->(35,2)),
    ),
    Comment(
        Token(Comment, "# items = filter(Xgetlist(), Cond)", (36,0)->(36,34)),
    ),
    Comment(
        Token(Comment, "# ", (37,0)->(37,2)),
    ),
    Comment(
        Token(Comment, "# ", (38,0)->(38,2)),
    ),
    Comment(
        Token(Comment, "# # multiline dict, starts on next line", (39,0)->(39,39)),
    ),
    Comment(
        Token(Comment, "# var lsp_reply_handlers: dict<func> =", (40,0)->(40,38)),
    ),
    Comment(
        Token(Comment, "#   {", (41,0)->(41,5)),
    ),
    Comment(
        Token(Comment, "#     'initialize': ProcessInitializeReply,", (42,0)->(42,43)),
    ),
    Comment(
        Token(Comment, "#     'shutdown': ProcessShutdownReply,", (43,0)->(43,39)),
    ),
    Comment(
        Token(Comment, "#   }", (44,0)->(44,5)),
    ),
    Comment(
        Token(Comment, "# ", (45,0)->(45,2)),
    ),
    Comment(
        Token(Comment, "# # dict literal with options, no colon value", (46,0)->(46,45)),
    ),
    Comment(
        Token(Comment, "# ftypeNtfOnceMap->extend({[&ft]: true})", (47,0)->(47,40)),
    ),
    Comment(
        Token(Comment, "# ", (48,0)->(48,2)),
    ),
    Comment(
        Token(Comment, "# # dict literal with options, no colon value", (49,0)->(49,45)),
    ),
    Comment(
        Token(Comment, "# ftypeNtfOnceMap->extend({[&ft]: v:true})", (50,0)->(50,42)),
    ),
    Comment(
        Token(Comment, "# ", (51,0)->(51,2)),
    ),
    Comment(
        Token(Comment, "# # end of file", (52,0)->(52,15)),
    ),
]
