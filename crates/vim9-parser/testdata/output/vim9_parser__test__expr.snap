---
source: src/lib.rs
assertion_line: 1208
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, "\n", (0,10)->(0,10)),
        },
    ),
    Comment(
        Token(Comment, "# TODO:", (2,0)->(2,7)),
    ),
    Comment(
        Token(Comment, "# echo x y z", (3,0)->(3,12)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (4,0)->(4,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (5,0)->(5,3)),
            name: Raw(x),
            equal: Token(Equal, "=", (5,6)->(5,7)),
            expr: Number(
                VimNumber {
                    value: "10",
                },
            ),
            eol: Token(EndOfLine, "\n", (5,10)->(5,10)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (6,0)->(6,3)),
            name: Raw(y),
            equal: Token(Equal, "=", (6,6)->(6,7)),
            expr: Identifier(
                Raw(x),
            ),
            eol: Token(EndOfLine, "\n", (6,9)->(6,9)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (7,0)->(7,3)),
            name: Raw(z),
            equal: Token(Equal, "=", (7,6)->(7,7)),
            expr: Prefix(
                PrefixExpression {
                    token: Token(Plus, "+", (7,8)->(7,9)),
                    operator: Plus,
                    right: Number(
                        VimNumber {
                            value: "1",
                        },
                    ),
                },
            ),
            eol: Token(EndOfLine, "\n", (7,10)->(7,10)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (8,0)->(8,3)),
            name: Raw(foo),
            equal: Token(Equal, "=", (8,8)->(8,9)),
            expr: Boolean(
                VimBoolean {
                    token: Token(True, "true", (8,10)->(8,14)),
                    value: true,
                },
            ),
            eol: Token(EndOfLine, "\n", (8,14)->(8,14)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (9,0)->(9,3)),
            name: Raw(sum),
            equal: Token(Equal, "=", (9,8)->(9,9)),
            expr: Infix(
                InfixExpression {
                    token: Token(Plus, "+", (9,12)->(9,13)),
                    operator: Plus,
                    left: Identifier(
                        Raw(x),
                    ),
                    right: Identifier(
                        Raw(y),
                    ),
                },
            ),
            eol: Token(EndOfLine, "\n", (9,15)->(9,15)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (10,0)->(10,3)),
            name: Raw(parened),
            equal: Token(Equal, "=", (10,12)->(10,13)),
            expr: Grouped(
                GroupedExpression {
                    open: Token(LeftParen, "(", (10,14)->(10,15)),
                    expr: Grouped(
                        GroupedExpression {
                            open: Token(LeftParen, "(", (10,15)->(10,16)),
                            expr: Grouped(
                                GroupedExpression {
                                    open: Token(LeftParen, "(", (10,16)->(10,17)),
                                    expr: Infix(
                                        InfixExpression {
                                            token: Token(Plus, "+", (10,19)->(10,20)),
                                            operator: Plus,
                                            left: Identifier(
                                                Raw(x),
                                            ),
                                            right: Identifier(
                                                Raw(y),
                                            ),
                                        },
                                    ),
                                    close: Token(RightParen, ")", (10,22)->(10,23)),
                                },
                            ),
                            close: Token(RightParen, ")", (10,23)->(10,24)),
                        },
                    ),
                    close: Token(RightParen, ")", (10,24)->(10,25)),
                },
            ),
            eol: Token(EndOfLine, "\n", (10,25)->(10,25)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (11,0)->(11,3)),
            name: Raw(if),
            equal: Token(Equal, "=", (11,7)->(11,8)),
            expr: Boolean(
                VimBoolean {
                    token: Token(True, "true", (11,9)->(11,13)),
                    value: true,
                },
            ),
            eol: Token(EndOfLine, "\n", (11,13)->(11,13)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, "var", (12,0)->(12,3)),
            name: Raw(var),
            equal: Token(Equal, "=", (12,8)->(12,9)),
            expr: Identifier(
                Raw(if),
            ),
            eol: Token(EndOfLine, "\n", (12,12)->(12,12)),
        },
    ),
    Echo(
        EchoCommand {
            echo: Token(Identifier, "echo", (13,0)->(13,4)),
            expr: Identifier(
                Raw(var),
            ),
            eol: Token(EndOfLine, "\n", (13,8)->(13,8)),
        },
    ),
]
