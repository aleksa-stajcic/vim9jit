---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2561
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (2,0)->(2,3)),
            ty: None,
            name: Raw(X),
            equal: Token(Equal, (2,6)->(2,7)),
            expr: Lambda(
                Lambda {
                    args: Signature {
                        open: Token(LeftParen, (2,8)->(2,9)),
                        params: [
                            Parameter {
                                name: Raw(a),
                                ty: None,
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(b),
                                ty: None,
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, (2,13)->(2,14)),
                    },
                    ret: None,
                    arrow: Token(Arrow, (2,15)->(2,17)),
                    body: Body {
                        commands: [
                            Return(
                                ReturnCommand {
                                    ret: Token(Virtual, (0,0)->(0,0)),
                                    expr: Some(
                                        Infix(
                                            InfixExpression {
                                                token: Token(Plus, "+", (2,20)->(2,21)),
                                                operator: Plus,
                                                left: Identifier(
                                                    Raw(a),
                                                ),
                                                right: Identifier(
                                                    Raw(b),
                                                ),
                                            },
                                        ),
                                    ),
                                    eol: Token(Virtual, (0,0)->(0,0)),
                                },
                            ),
                        ],
                    },
                },
            ),
            eol: Token(EndOfLine, (2,23)->(2,23)),
        },
    ),
    Echo(
        EchoCommand {
            echo: Token(Identifier, (3,0)->(3,4)),
            expr: Call(
                f: Identifier(Raw(X)) arg: [
                    Number(
                        Number(1),
                    ),
                    Number(
                        Number(2),
                    ),
                ],
            ),
            eol: Token(EndOfLine, (3,12)->(3,12)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (4,0)->(4,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (5,0)->(5,3)),
            ty: None,
            name: Raw(Y),
            equal: Token(Equal, (5,6)->(5,7)),
            expr: Lambda(
                Lambda {
                    args: Signature {
                        open: Token(LeftParen, (5,8)->(5,9)),
                        params: [
                            Parameter {
                                name: Raw(a),
                                ty: None,
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(b),
                                ty: None,
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, (5,13)->(5,14)),
                    },
                    ret: None,
                    arrow: Token(Arrow, (5,15)->(5,17)),
                    body: Body {
                        commands: [
                            Return(
                                ReturnCommand {
                                    ret: Token(Virtual, (0,0)->(0,0)),
                                    expr: Some(
                                        Infix(
                                            InfixExpression {
                                                token: Token(Plus, "+", (6,4)->(6,5)),
                                                operator: Plus,
                                                left: Identifier(
                                                    Raw(a),
                                                ),
                                                right: Identifier(
                                                    Raw(b),
                                                ),
                                            },
                                        ),
                                    ),
                                    eol: Token(Virtual, (0,0)->(0,0)),
                                },
                            ),
                        ],
                    },
                },
            ),
            eol: Token(EndOfLine, (6,7)->(6,7)),
        },
    ),
    Echo(
        EchoCommand {
            echo: Token(Identifier, (7,0)->(7,4)),
            expr: Call(
                f: Identifier(Raw(Y)) arg: [
                    Number(
                        Number(3),
                    ),
                    Number(
                        Number(4),
                    ),
                ],
            ),
            eol: Token(EndOfLine, (7,12)->(7,12)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (8,0)->(8,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (9,0)->(9,3)),
            ty: None,
            name: Raw(Typed),
            equal: Token(Equal, (9,10)->(9,11)),
            expr: Lambda(
                Lambda {
                    args: Signature {
                        open: Token(LeftParen, (9,12)->(9,13)),
                        params: [
                            Parameter {
                                name: Raw(a),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, (9,14)->(9,16)),
                                        inner: Number,
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(b),
                                ty: Some(
                                    Type {
                                        colon: Token(SpacedColon, (9,25)->(9,27)),
                                        inner: Number,
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, (9,33)->(9,34)),
                    },
                    ret: Some(
                        Type {
                            colon: Token(SpacedColon, (9,34)->(9,36)),
                            inner: Number,
                        },
                    ),
                    arrow: Token(Arrow, (9,43)->(9,45)),
                    body: Body {
                        commands: [
                            Return(
                                ReturnCommand {
                                    ret: Token(Virtual, (0,0)->(0,0)),
                                    expr: Some(
                                        Infix(
                                            InfixExpression {
                                                token: Token(Plus, "+", (9,48)->(9,49)),
                                                operator: Plus,
                                                left: Identifier(
                                                    Raw(a),
                                                ),
                                                right: Identifier(
                                                    Raw(b),
                                                ),
                                            },
                                        ),
                                    ),
                                    eol: Token(Virtual, (0,0)->(0,0)),
                                },
                            ),
                        ],
                    },
                },
            ),
            eol: Token(EndOfLine, (9,51)->(9,51)),
        },
    ),
    Echo(
        EchoCommand {
            echo: Token(Identifier, (10,0)->(10,4)),
            expr: Call(
                f: Identifier(Raw(Typed)) arg: [
                    Number(
                        Number(5),
                    ),
                    Number(
                        Number(6),
                    ),
                ],
            ),
            eol: Token(EndOfLine, (10,16)->(10,16)),
        },
    ),
]
